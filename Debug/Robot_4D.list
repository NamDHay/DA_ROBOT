
Robot_4D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800cb60  0800cb60  0000db60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d04c  0800d04c  0000f2b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d04c  0800d04c  0000e04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d054  0800d054  0000f2b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d054  0800d054  0000e054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d058  0800d058  0000e058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0800d05c  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2b8  2**0
                  CONTENTS
 10 .bss          000007a4  200002b8  200002b8  0000f2b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a5c  20000a5c  0000f2b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010031  00000000  00000000  0000f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b1  00000000  00000000  0001f319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  000217d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b64  00000000  00000000  00022670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224ad  00000000  00000000  000231d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011226  00000000  00000000  00045681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0c8  00000000  00000000  000568a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012496f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005510  00000000  00000000  001249b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  00129ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b8 	.word	0x200002b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb48 	.word	0x0800cb48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	0800cb48 	.word	0x0800cb48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b9a0 	b.w	80011fc <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f83c 	bl	8000f40 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_d2lz>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	460d      	mov	r5, r1
 8000ede:	f7ff fdfd 	bl	8000adc <__aeabi_dcmplt>
 8000ee2:	b928      	cbnz	r0, 8000ef0 <__aeabi_d2lz+0x1c>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eec:	f000 b80a 	b.w	8000f04 <__aeabi_d2ulz>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ef6:	f000 f805 	bl	8000f04 <__aeabi_d2ulz>
 8000efa:	4240      	negs	r0, r0
 8000efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb73 	bl	80005f8 <__aeabi_dmul>
 8000f12:	f7ff fe49 	bl	8000ba8 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff faf4 	bl	8000504 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb6a 	bl	80005f8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f9ac 	bl	8000288 <__aeabi_dsub>
 8000f30:	f7ff fe3a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	460c      	mov	r4, r1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d14e      	bne.n	8000fea <__udivmoddi4+0xaa>
 8000f4c:	4694      	mov	ip, r2
 8000f4e:	458c      	cmp	ip, r1
 8000f50:	4686      	mov	lr, r0
 8000f52:	fab2 f282 	clz	r2, r2
 8000f56:	d962      	bls.n	800101e <__udivmoddi4+0xde>
 8000f58:	b14a      	cbz	r2, 8000f6e <__udivmoddi4+0x2e>
 8000f5a:	f1c2 0320 	rsb	r3, r2, #32
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	fa20 f303 	lsr.w	r3, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	4319      	orrs	r1, r3
 8000f6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f72:	fa1f f68c 	uxth.w	r6, ip
 8000f76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb04 f106 	mul.w	r1, r4, r6
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d90a      	bls.n	8000fa4 <__udivmoddi4+0x64>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f96:	f080 8112 	bcs.w	80011be <__udivmoddi4+0x27e>
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	f240 810f 	bls.w	80011be <__udivmoddi4+0x27e>
 8000fa0:	3c02      	subs	r4, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a59      	subs	r1, r3, r1
 8000fa6:	fa1f f38e 	uxth.w	r3, lr
 8000faa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fae:	fb07 1110 	mls	r1, r7, r0, r1
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f606 	mul.w	r6, r0, r6
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	d90a      	bls.n	8000fd4 <__udivmoddi4+0x94>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc6:	f080 80fc 	bcs.w	80011c2 <__udivmoddi4+0x282>
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	f240 80f9 	bls.w	80011c2 <__udivmoddi4+0x282>
 8000fd0:	4463      	add	r3, ip
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000fda:	2100      	movs	r1, #0
 8000fdc:	b11d      	cbz	r5, 8000fe6 <__udivmoddi4+0xa6>
 8000fde:	40d3      	lsrs	r3, r2
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d905      	bls.n	8000ffa <__udivmoddi4+0xba>
 8000fee:	b10d      	cbz	r5, 8000ff4 <__udivmoddi4+0xb4>
 8000ff0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e7f5      	b.n	8000fe6 <__udivmoddi4+0xa6>
 8000ffa:	fab3 f183 	clz	r1, r3
 8000ffe:	2900      	cmp	r1, #0
 8001000:	d146      	bne.n	8001090 <__udivmoddi4+0x150>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d302      	bcc.n	800100c <__udivmoddi4+0xcc>
 8001006:	4290      	cmp	r0, r2
 8001008:	f0c0 80f0 	bcc.w	80011ec <__udivmoddi4+0x2ac>
 800100c:	1a86      	subs	r6, r0, r2
 800100e:	eb64 0303 	sbc.w	r3, r4, r3
 8001012:	2001      	movs	r0, #1
 8001014:	2d00      	cmp	r5, #0
 8001016:	d0e6      	beq.n	8000fe6 <__udivmoddi4+0xa6>
 8001018:	e9c5 6300 	strd	r6, r3, [r5]
 800101c:	e7e3      	b.n	8000fe6 <__udivmoddi4+0xa6>
 800101e:	2a00      	cmp	r2, #0
 8001020:	f040 8090 	bne.w	8001144 <__udivmoddi4+0x204>
 8001024:	eba1 040c 	sub.w	r4, r1, ip
 8001028:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800102c:	fa1f f78c 	uxth.w	r7, ip
 8001030:	2101      	movs	r1, #1
 8001032:	fbb4 f6f8 	udiv	r6, r4, r8
 8001036:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800103a:	fb08 4416 	mls	r4, r8, r6, r4
 800103e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001042:	fb07 f006 	mul.w	r0, r7, r6
 8001046:	4298      	cmp	r0, r3
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x11c>
 800104a:	eb1c 0303 	adds.w	r3, ip, r3
 800104e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001052:	d202      	bcs.n	800105a <__udivmoddi4+0x11a>
 8001054:	4298      	cmp	r0, r3
 8001056:	f200 80cd 	bhi.w	80011f4 <__udivmoddi4+0x2b4>
 800105a:	4626      	mov	r6, r4
 800105c:	1a1c      	subs	r4, r3, r0
 800105e:	fa1f f38e 	uxth.w	r3, lr
 8001062:	fbb4 f0f8 	udiv	r0, r4, r8
 8001066:	fb08 4410 	mls	r4, r8, r0, r4
 800106a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800106e:	fb00 f707 	mul.w	r7, r0, r7
 8001072:	429f      	cmp	r7, r3
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x148>
 8001076:	eb1c 0303 	adds.w	r3, ip, r3
 800107a:	f100 34ff 	add.w	r4, r0, #4294967295
 800107e:	d202      	bcs.n	8001086 <__udivmoddi4+0x146>
 8001080:	429f      	cmp	r7, r3
 8001082:	f200 80b0 	bhi.w	80011e6 <__udivmoddi4+0x2a6>
 8001086:	4620      	mov	r0, r4
 8001088:	1bdb      	subs	r3, r3, r7
 800108a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800108e:	e7a5      	b.n	8000fdc <__udivmoddi4+0x9c>
 8001090:	f1c1 0620 	rsb	r6, r1, #32
 8001094:	408b      	lsls	r3, r1
 8001096:	fa22 f706 	lsr.w	r7, r2, r6
 800109a:	431f      	orrs	r7, r3
 800109c:	fa20 fc06 	lsr.w	ip, r0, r6
 80010a0:	fa04 f301 	lsl.w	r3, r4, r1
 80010a4:	ea43 030c 	orr.w	r3, r3, ip
 80010a8:	40f4      	lsrs	r4, r6
 80010aa:	fa00 f801 	lsl.w	r8, r0, r1
 80010ae:	0c38      	lsrs	r0, r7, #16
 80010b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010b4:	fbb4 fef0 	udiv	lr, r4, r0
 80010b8:	fa1f fc87 	uxth.w	ip, r7
 80010bc:	fb00 441e 	mls	r4, r0, lr, r4
 80010c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010c4:	fb0e f90c 	mul.w	r9, lr, ip
 80010c8:	45a1      	cmp	r9, r4
 80010ca:	fa02 f201 	lsl.w	r2, r2, r1
 80010ce:	d90a      	bls.n	80010e6 <__udivmoddi4+0x1a6>
 80010d0:	193c      	adds	r4, r7, r4
 80010d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80010d6:	f080 8084 	bcs.w	80011e2 <__udivmoddi4+0x2a2>
 80010da:	45a1      	cmp	r9, r4
 80010dc:	f240 8081 	bls.w	80011e2 <__udivmoddi4+0x2a2>
 80010e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80010e4:	443c      	add	r4, r7
 80010e6:	eba4 0409 	sub.w	r4, r4, r9
 80010ea:	fa1f f983 	uxth.w	r9, r3
 80010ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80010f2:	fb00 4413 	mls	r4, r0, r3, r4
 80010f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80010fe:	45a4      	cmp	ip, r4
 8001100:	d907      	bls.n	8001112 <__udivmoddi4+0x1d2>
 8001102:	193c      	adds	r4, r7, r4
 8001104:	f103 30ff 	add.w	r0, r3, #4294967295
 8001108:	d267      	bcs.n	80011da <__udivmoddi4+0x29a>
 800110a:	45a4      	cmp	ip, r4
 800110c:	d965      	bls.n	80011da <__udivmoddi4+0x29a>
 800110e:	3b02      	subs	r3, #2
 8001110:	443c      	add	r4, r7
 8001112:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001116:	fba0 9302 	umull	r9, r3, r0, r2
 800111a:	eba4 040c 	sub.w	r4, r4, ip
 800111e:	429c      	cmp	r4, r3
 8001120:	46ce      	mov	lr, r9
 8001122:	469c      	mov	ip, r3
 8001124:	d351      	bcc.n	80011ca <__udivmoddi4+0x28a>
 8001126:	d04e      	beq.n	80011c6 <__udivmoddi4+0x286>
 8001128:	b155      	cbz	r5, 8001140 <__udivmoddi4+0x200>
 800112a:	ebb8 030e 	subs.w	r3, r8, lr
 800112e:	eb64 040c 	sbc.w	r4, r4, ip
 8001132:	fa04 f606 	lsl.w	r6, r4, r6
 8001136:	40cb      	lsrs	r3, r1
 8001138:	431e      	orrs	r6, r3
 800113a:	40cc      	lsrs	r4, r1
 800113c:	e9c5 6400 	strd	r6, r4, [r5]
 8001140:	2100      	movs	r1, #0
 8001142:	e750      	b.n	8000fe6 <__udivmoddi4+0xa6>
 8001144:	f1c2 0320 	rsb	r3, r2, #32
 8001148:	fa20 f103 	lsr.w	r1, r0, r3
 800114c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001150:	fa24 f303 	lsr.w	r3, r4, r3
 8001154:	4094      	lsls	r4, r2
 8001156:	430c      	orrs	r4, r1
 8001158:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800115c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001160:	fa1f f78c 	uxth.w	r7, ip
 8001164:	fbb3 f0f8 	udiv	r0, r3, r8
 8001168:	fb08 3110 	mls	r1, r8, r0, r3
 800116c:	0c23      	lsrs	r3, r4, #16
 800116e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001172:	fb00 f107 	mul.w	r1, r0, r7
 8001176:	4299      	cmp	r1, r3
 8001178:	d908      	bls.n	800118c <__udivmoddi4+0x24c>
 800117a:	eb1c 0303 	adds.w	r3, ip, r3
 800117e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001182:	d22c      	bcs.n	80011de <__udivmoddi4+0x29e>
 8001184:	4299      	cmp	r1, r3
 8001186:	d92a      	bls.n	80011de <__udivmoddi4+0x29e>
 8001188:	3802      	subs	r0, #2
 800118a:	4463      	add	r3, ip
 800118c:	1a5b      	subs	r3, r3, r1
 800118e:	b2a4      	uxth	r4, r4
 8001190:	fbb3 f1f8 	udiv	r1, r3, r8
 8001194:	fb08 3311 	mls	r3, r8, r1, r3
 8001198:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800119c:	fb01 f307 	mul.w	r3, r1, r7
 80011a0:	42a3      	cmp	r3, r4
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0x276>
 80011a4:	eb1c 0404 	adds.w	r4, ip, r4
 80011a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011ac:	d213      	bcs.n	80011d6 <__udivmoddi4+0x296>
 80011ae:	42a3      	cmp	r3, r4
 80011b0:	d911      	bls.n	80011d6 <__udivmoddi4+0x296>
 80011b2:	3902      	subs	r1, #2
 80011b4:	4464      	add	r4, ip
 80011b6:	1ae4      	subs	r4, r4, r3
 80011b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011bc:	e739      	b.n	8001032 <__udivmoddi4+0xf2>
 80011be:	4604      	mov	r4, r0
 80011c0:	e6f0      	b.n	8000fa4 <__udivmoddi4+0x64>
 80011c2:	4608      	mov	r0, r1
 80011c4:	e706      	b.n	8000fd4 <__udivmoddi4+0x94>
 80011c6:	45c8      	cmp	r8, r9
 80011c8:	d2ae      	bcs.n	8001128 <__udivmoddi4+0x1e8>
 80011ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80011ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80011d2:	3801      	subs	r0, #1
 80011d4:	e7a8      	b.n	8001128 <__udivmoddi4+0x1e8>
 80011d6:	4631      	mov	r1, r6
 80011d8:	e7ed      	b.n	80011b6 <__udivmoddi4+0x276>
 80011da:	4603      	mov	r3, r0
 80011dc:	e799      	b.n	8001112 <__udivmoddi4+0x1d2>
 80011de:	4630      	mov	r0, r6
 80011e0:	e7d4      	b.n	800118c <__udivmoddi4+0x24c>
 80011e2:	46d6      	mov	lr, sl
 80011e4:	e77f      	b.n	80010e6 <__udivmoddi4+0x1a6>
 80011e6:	4463      	add	r3, ip
 80011e8:	3802      	subs	r0, #2
 80011ea:	e74d      	b.n	8001088 <__udivmoddi4+0x148>
 80011ec:	4606      	mov	r6, r0
 80011ee:	4623      	mov	r3, r4
 80011f0:	4608      	mov	r0, r1
 80011f2:	e70f      	b.n	8001014 <__udivmoddi4+0xd4>
 80011f4:	3e02      	subs	r6, #2
 80011f6:	4463      	add	r3, ip
 80011f8:	e730      	b.n	800105c <__udivmoddi4+0x11c>
 80011fa:	bf00      	nop

080011fc <__aeabi_idiv0>:
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <UART_Handle>:
float setpoint1, setpoint2, setpoint3, setpoint4;
float preSetpoint1, preSetpoint2, preSetpoint3, preSetpoint4;
float p0_1 = 0, p0_2 = 0, p0_3 = 0, p0_4 = 0;
uint8_t MagState = 0;

void UART_Handle(char *data) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
 8001206:	6078      	str	r0, [r7, #4]
	if (flag_uart_rx == 1 && strstr(data, "\n")) {
 8001208:	4b35      	ldr	r3, [pc, #212]	@ (80012e0 <UART_Handle+0xe0>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d163      	bne.n	80012d8 <UART_Handle+0xd8>
 8001210:	210a      	movs	r1, #10
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f007 fca7 	bl	8008b66 <strchr>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d05c      	beq.n	80012d8 <UART_Handle+0xd8>
		if (strstr(data, "t1")) {
 800121e:	4931      	ldr	r1, [pc, #196]	@ (80012e4 <UART_Handle+0xe4>)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f007 fcad 	bl	8008b80 <strstr>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d009      	beq.n	8001240 <UART_Handle+0x40>
			sscanf(data, "t1:%f,t2:%f,t3:%f,t4:%f\n", &setpoint1, &setpoint2,
 800122c:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <UART_Handle+0xe8>)
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <UART_Handle+0xec>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <UART_Handle+0xf0>)
 8001236:	4a2f      	ldr	r2, [pc, #188]	@ (80012f4 <UART_Handle+0xf4>)
 8001238:	492f      	ldr	r1, [pc, #188]	@ (80012f8 <UART_Handle+0xf8>)
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f007 fc1c 	bl	8008a78 <siscanf>
					&setpoint3, &setpoint4);
		}
		if (strstr(data, "qd")) {
 8001240:	492e      	ldr	r1, [pc, #184]	@ (80012fc <UART_Handle+0xfc>)
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f007 fc9c 	bl	8008b80 <strstr>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00d      	beq.n	800126a <UART_Handle+0x6a>
			sscanf(data, "qd[%f,%f,%f,%f,%f,%hhd", &setpoint1, &setpoint2,
 800124e:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <UART_Handle+0x100>)
 8001250:	9303      	str	r3, [sp, #12]
 8001252:	4b2c      	ldr	r3, [pc, #176]	@ (8001304 <UART_Handle+0x104>)
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <UART_Handle+0xe8>)
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <UART_Handle+0xec>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <UART_Handle+0xf0>)
 8001260:	4a24      	ldr	r2, [pc, #144]	@ (80012f4 <UART_Handle+0xf4>)
 8001262:	4929      	ldr	r1, [pc, #164]	@ (8001308 <UART_Handle+0x108>)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f007 fc07 	bl	8008a78 <siscanf>
					&setpoint3, &setpoint4, &Tf, &MagState);
		}
		if (strstr(data, "home")) {
 800126a:	4928      	ldr	r1, [pc, #160]	@ (800130c <UART_Handle+0x10c>)
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f007 fc87 	bl	8008b80 <strstr>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <UART_Handle+0x7e>
			IsHome = true;
 8001278:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <UART_Handle+0x110>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
		}
		if (strstr(data, "Reset")) {
 800127e:	4925      	ldr	r1, [pc, #148]	@ (8001314 <UART_Handle+0x114>)
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f007 fc7d 	bl	8008b80 <strstr>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <UART_Handle+0x90>
			HAL_NVIC_SystemReset();
 800128c:	f002 f929 	bl	80034e2 <HAL_NVIC_SystemReset>
		}
		if (strstr(data, "hut")) {
 8001290:	4921      	ldr	r1, [pc, #132]	@ (8001318 <UART_Handle+0x118>)
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f007 fc74 	bl	8008b80 <strstr>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <UART_Handle+0xa8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	2140      	movs	r1, #64	@ 0x40
 80012a2:	481e      	ldr	r0, [pc, #120]	@ (800131c <UART_Handle+0x11c>)
 80012a4:	f002 fee4 	bl	8004070 <HAL_GPIO_WritePin>
		}
		if (strstr(data, "nha")) {
 80012a8:	491d      	ldr	r1, [pc, #116]	@ (8001320 <UART_Handle+0x120>)
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f007 fc68 	bl	8008b80 <strstr>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <UART_Handle+0xc0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2140      	movs	r1, #64	@ 0x40
 80012ba:	4818      	ldr	r0, [pc, #96]	@ (800131c <UART_Handle+0x11c>)
 80012bc:	f002 fed8 	bl	8004070 <HAL_GPIO_WritePin>
		}
		flag_uart_rx = 0;
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <UART_Handle+0xe0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
		memset(data, 0, strlen(data));
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7fe ffd2 	bl	8000270 <strlen>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f007 fc3f 	bl	8008b56 <memset>
	}
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200005d8 	.word	0x200005d8
 80012e4:	0800cb60 	.word	0x0800cb60
 80012e8:	200008e0 	.word	0x200008e0
 80012ec:	200008dc 	.word	0x200008dc
 80012f0:	200008d8 	.word	0x200008d8
 80012f4:	200008d4 	.word	0x200008d4
 80012f8:	0800cb64 	.word	0x0800cb64
 80012fc:	0800cb80 	.word	0x0800cb80
 8001300:	20000904 	.word	0x20000904
 8001304:	200000e0 	.word	0x200000e0
 8001308:	0800cb84 	.word	0x0800cb84
 800130c:	0800cb9c 	.word	0x0800cb9c
 8001310:	200005e1 	.word	0x200005e1
 8001314:	0800cba4 	.word	0x0800cba4
 8001318:	0800cbac 	.word	0x0800cbac
 800131c:	40020400 	.word	0x40020400
 8001320:	0800cbb0 	.word	0x0800cbb0

08001324 <UartIdle_Init>:

void UartIdle_Init() {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) uartLogBuffer, MAX_MESG);
 8001328:	2264      	movs	r2, #100	@ 0x64
 800132a:	4907      	ldr	r1, [pc, #28]	@ (8001348 <UartIdle_Init+0x24>)
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <UartIdle_Init+0x28>)
 800132e:	f004 fe7c 	bl	800602a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <UartIdle_Init+0x2c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <UartIdle_Init+0x2c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0208 	bic.w	r2, r2, #8
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000574 	.word	0x20000574
 800134c:	200004cc 	.word	0x200004cc
 8001350:	20000514 	.word	0x20000514

08001354 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_UARTEx_RxEventCallback+0x34>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10a      	bne.n	8001380 <HAL_UARTEx_RxEventCallback+0x2c>
		uartLogRxSize = Size;
 800136a:	4a08      	ldr	r2, [pc, #32]	@ (800138c <HAL_UARTEx_RxEventCallback+0x38>)
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	8013      	strh	r3, [r2, #0]
		flag_uart_rx = 1;
 8001370:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*) uartLogBuffer, MAX_MESG);
 8001376:	2264      	movs	r2, #100	@ 0x64
 8001378:	4906      	ldr	r1, [pc, #24]	@ (8001394 <HAL_UARTEx_RxEventCallback+0x40>)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f004 fe55 	bl	800602a <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40004800 	.word	0x40004800
 800138c:	200005da 	.word	0x200005da
 8001390:	200005d8 	.word	0x200005d8
 8001394:	20000574 	.word	0x20000574

08001398 <p>:

float p(float p0, float pf, float tf, float v0, float vf, float T) {
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	ed87 0a05 	vstr	s0, [r7, #20]
 80013a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80013a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80013aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80013ae:	ed87 2a01 	vstr	s4, [r7, #4]
 80013b2:	edc7 2a00 	vstr	s5, [r7]
	return p0 + v0 * T
 80013b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80013ba:	edd7 7a00 	vldr	s15, [r7]
 80013be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c6:	ee37 7a27 	vadd.f32	s14, s14, s15
			  + (3 * (pf - p0) / (tf * tf) - 2 * v0 / tf - vf / tf) * (T * T)
 80013ca:	edd7 6a04 	vldr	s13, [r7, #16]
 80013ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013d6:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80013da:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80013de:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013e6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80013ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ee:	ee77 5aa7 	vadd.f32	s11, s15, s15
 80013f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80013f6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80013fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013fe:	edd7 5a01 	vldr	s11, [r7, #4]
 8001402:	ed97 6a03 	vldr	s12, [r7, #12]
 8001406:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800140a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800140e:	edd7 7a00 	vldr	s15, [r7]
 8001412:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141a:	ee37 7a27 	vadd.f32	s14, s14, s15
			  + (-2 * (pf - p0) / (tf * tf * tf) + (vf + v0) / (tf * tf)) * (T * T * T);
 800141e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001422:	edd7 7a05 	vldr	s15, [r7, #20]
 8001426:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800142a:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 800142e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8001432:	edd7 7a03 	vldr	s15, [r7, #12]
 8001436:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800143a:	edd7 7a03 	vldr	s15, [r7, #12]
 800143e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001442:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001446:	ed97 6a01 	vldr	s12, [r7, #4]
 800144a:	edd7 7a02 	vldr	s15, [r7, #8]
 800144e:	ee76 5a27 	vadd.f32	s11, s12, s15
 8001452:	edd7 7a03 	vldr	s15, [r7, #12]
 8001456:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800145a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800145e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001462:	edd7 7a00 	vldr	s15, [r7]
 8001466:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800146a:	edd7 7a00 	vldr	s15, [r7]
 800146e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4ac2      	ldr	r2, [pc, #776]	@ (800179c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001494:	4293      	cmp	r3, r2
 8001496:	f040 817c 	bne.w	8001792 <HAL_TIM_PeriodElapsedCallback+0x30a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800149a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800149e:	48c0      	ldr	r0, [pc, #768]	@ (80017a0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80014a0:	f002 fdff 	bl	80040a2 <HAL_GPIO_TogglePin>
//		MOTOR_runAngle(&motor3);
//		MOTOR_runAngle(&motor4);

//		Uncomment this for real run
		static uint8_t mode = 0;
		switch (mode) {
 80014a4:	4bbf      	ldr	r3, [pc, #764]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	f200 8171 	bhi.w	8001790 <HAL_TIM_PeriodElapsedCallback+0x308>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014c9 	.word	0x080014c9
 80014b8:	08001543 	.word	0x08001543
 80014bc:	080015bd 	.word	0x080015bd
 80014c0:	08001637 	.word	0x08001637
 80014c4:	080016b1 	.word	0x080016b1
		case 0:
			if (T1 <= Tf) {
 80014c8:	4bb7      	ldr	r3, [pc, #732]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80014ca:	ed93 7a00 	vldr	s14, [r3]
 80014ce:	4bb7      	ldr	r3, [pc, #732]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d82a      	bhi.n	8001534 <HAL_TIM_PeriodElapsedCallback+0xac>
				T1 += 5;
 80014de:	4bb2      	ldr	r3, [pc, #712]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80014e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ec:	4bae      	ldr	r3, [pc, #696]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80014ee:	edc3 7a00 	vstr	s15, [r3]
				MOTOR_setAngle(&motor1, p(p0_1, setpoint1, Tf, 0, 0, T1));
 80014f2:	4baf      	ldr	r3, [pc, #700]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	4bae      	ldr	r3, [pc, #696]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80014fa:	ed93 7a00 	vldr	s14, [r3]
 80014fe:	4bab      	ldr	r3, [pc, #684]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001500:	edd3 6a00 	vldr	s13, [r3]
 8001504:	4ba8      	ldr	r3, [pc, #672]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001506:	ed93 6a00 	vldr	s12, [r3]
 800150a:	eef0 2a46 	vmov.f32	s5, s12
 800150e:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 80017b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 8001512:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 80017b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 8001516:	eeb0 1a66 	vmov.f32	s2, s13
 800151a:	eef0 0a47 	vmov.f32	s1, s14
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	f7ff ff39 	bl	8001398 <p>
 8001526:	eef0 7a40 	vmov.f32	s15, s0
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	48a3      	ldr	r0, [pc, #652]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001530:	f006 f8a4 	bl	800767c <MOTOR_setAngle>
			}
			MOTOR_runAngle(&motor1);
 8001534:	48a1      	ldr	r0, [pc, #644]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001536:	f006 f8b7 	bl	80076a8 <MOTOR_runAngle>
			mode = 1;
 800153a:	4b9a      	ldr	r3, [pc, #616]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
			break;
 8001540:	e127      	b.n	8001792 <HAL_TIM_PeriodElapsedCallback+0x30a>
		case 1:
			if (T2 <= Tf) {
 8001542:	4b9f      	ldr	r3, [pc, #636]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	4b98      	ldr	r3, [pc, #608]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d82a      	bhi.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x126>
				T2 += 5;
 8001558:	4b99      	ldr	r3, [pc, #612]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001562:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001566:	4b96      	ldr	r3, [pc, #600]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001568:	edc3 7a00 	vstr	s15, [r3]
				MOTOR_setAngle(&motor2, p(p0_2, setpoint2, Tf, 0, 0, T2));
 800156c:	4b95      	ldr	r3, [pc, #596]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	4b95      	ldr	r3, [pc, #596]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001574:	ed93 7a00 	vldr	s14, [r3]
 8001578:	4b8c      	ldr	r3, [pc, #560]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800157a:	edd3 6a00 	vldr	s13, [r3]
 800157e:	4b90      	ldr	r3, [pc, #576]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001580:	ed93 6a00 	vldr	s12, [r3]
 8001584:	eef0 2a46 	vmov.f32	s5, s12
 8001588:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 80017b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 800158c:	eddf 1a8a 	vldr	s3, [pc, #552]	@ 80017b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 8001590:	eeb0 1a66 	vmov.f32	s2, s13
 8001594:	eef0 0a47 	vmov.f32	s1, s14
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	f7ff fefc 	bl	8001398 <p>
 80015a0:	eef0 7a40 	vmov.f32	s15, s0
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	4888      	ldr	r0, [pc, #544]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x344>)
 80015aa:	f006 f867 	bl	800767c <MOTOR_setAngle>
			}
			MOTOR_runAngle(&motor2);
 80015ae:	4887      	ldr	r0, [pc, #540]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x344>)
 80015b0:	f006 f87a 	bl	80076a8 <MOTOR_runAngle>
			mode = 2;
 80015b4:	4b7b      	ldr	r3, [pc, #492]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015b6:	2202      	movs	r2, #2
 80015b8:	701a      	strb	r2, [r3, #0]
			break;
 80015ba:	e0ea      	b.n	8001792 <HAL_TIM_PeriodElapsedCallback+0x30a>
		case 2:
			if (T3 <= Tf) {
 80015bc:	4b84      	ldr	r3, [pc, #528]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	4b7a      	ldr	r3, [pc, #488]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d82a      	bhi.n	8001628 <HAL_TIM_PeriodElapsedCallback+0x1a0>
				T3 += 5;
 80015d2:	4b7f      	ldr	r3, [pc, #508]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80015dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015e0:	4b7b      	ldr	r3, [pc, #492]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015e2:	edc3 7a00 	vstr	s15, [r3]
				MOTOR_setAngle(&motor3, p(p0_3, setpoint3, Tf, 0, 0, T3));
 80015e6:	4b7b      	ldr	r3, [pc, #492]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	4b7a      	ldr	r3, [pc, #488]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	4b6e      	ldr	r3, [pc, #440]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 80015f4:	edd3 6a00 	vldr	s13, [r3]
 80015f8:	4b75      	ldr	r3, [pc, #468]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015fa:	ed93 6a00 	vldr	s12, [r3]
 80015fe:	eef0 2a46 	vmov.f32	s5, s12
 8001602:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 80017b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 8001606:	eddf 1a6c 	vldr	s3, [pc, #432]	@ 80017b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 800160a:	eeb0 1a66 	vmov.f32	s2, s13
 800160e:	eef0 0a47 	vmov.f32	s1, s14
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	f7ff febf 	bl	8001398 <p>
 800161a:	eef0 7a40 	vmov.f32	s15, s0
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	486e      	ldr	r0, [pc, #440]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001624:	f006 f82a 	bl	800767c <MOTOR_setAngle>
			}
			MOTOR_runAngle(&motor3);
 8001628:	486c      	ldr	r0, [pc, #432]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 800162a:	f006 f83d 	bl	80076a8 <MOTOR_runAngle>
			mode = 3;
 800162e:	4b5d      	ldr	r3, [pc, #372]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001630:	2203      	movs	r2, #3
 8001632:	701a      	strb	r2, [r3, #0]
			break;
 8001634:	e0ad      	b.n	8001792 <HAL_TIM_PeriodElapsedCallback+0x30a>
		case 3:
			if (T4 <= Tf) {
 8001636:	4b6a      	ldr	r3, [pc, #424]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001638:	ed93 7a00 	vldr	s14, [r3]
 800163c:	4b5b      	ldr	r3, [pc, #364]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d82a      	bhi.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x21a>
				T4 += 5;
 800164c:	4b64      	ldr	r3, [pc, #400]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001656:	ee77 7a87 	vadd.f32	s15, s15, s14
 800165a:	4b61      	ldr	r3, [pc, #388]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800165c:	edc3 7a00 	vstr	s15, [r3]
				MOTOR_setAngle(&motor4, p(p0_4, setpoint4, Tf, 0, 0, T4));
 8001660:	4b60      	ldr	r3, [pc, #384]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	4b60      	ldr	r3, [pc, #384]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001668:	ed93 7a00 	vldr	s14, [r3]
 800166c:	4b4f      	ldr	r3, [pc, #316]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x324>)
 800166e:	edd3 6a00 	vldr	s13, [r3]
 8001672:	4b5b      	ldr	r3, [pc, #364]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001674:	ed93 6a00 	vldr	s12, [r3]
 8001678:	eef0 2a46 	vmov.f32	s5, s12
 800167c:	ed9f 2a4e 	vldr	s4, [pc, #312]	@ 80017b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 8001680:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 80017b8 <HAL_TIM_PeriodElapsedCallback+0x330>
 8001684:	eeb0 1a66 	vmov.f32	s2, s13
 8001688:	eef0 0a47 	vmov.f32	s1, s14
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	f7ff fe82 	bl	8001398 <p>
 8001694:	eef0 7a40 	vmov.f32	s15, s0
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	4853      	ldr	r0, [pc, #332]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x364>)
 800169e:	f005 ffed 	bl	800767c <MOTOR_setAngle>
			}
			MOTOR_runAngle(&motor4);
 80016a2:	4852      	ldr	r0, [pc, #328]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x364>)
 80016a4:	f006 f800 	bl	80076a8 <MOTOR_runAngle>
			mode = 4;
 80016a8:	4b3e      	ldr	r3, [pc, #248]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80016aa:	2204      	movs	r2, #4
 80016ac:	701a      	strb	r2, [r3, #0]
			break;
 80016ae:	e070      	b.n	8001792 <HAL_TIM_PeriodElapsedCallback+0x30a>
		case 4:
			if (setpoint1 != preSetpoint1) {
 80016b0:	4b40      	ldr	r3, [pc, #256]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016b2:	ed93 7a00 	vldr	s14, [r3]
 80016b6:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	d00f      	beq.n	80016e6 <HAL_TIM_PeriodElapsedCallback+0x25e>
				T1 = 0;
 80016c6:	4b38      	ldr	r3, [pc, #224]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
				p0_1 = MOTOR_getPos(&motor1);
 80016ce:	483b      	ldr	r0, [pc, #236]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016d0:	f006 f8e8 	bl	80078a4 <MOTOR_getPos>
 80016d4:	eef0 7a40 	vmov.f32	s15, s0
 80016d8:	4b35      	ldr	r3, [pc, #212]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016da:	edc3 7a00 	vstr	s15, [r3]
				preSetpoint1 = setpoint1;
 80016de:	4b35      	ldr	r3, [pc, #212]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a43      	ldr	r2, [pc, #268]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80016e4:	6013      	str	r3, [r2, #0]
			}
			if (setpoint2 != preSetpoint2) {
 80016e6:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	4b41      	ldr	r3, [pc, #260]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	d00f      	beq.n	800171c <HAL_TIM_PeriodElapsedCallback+0x294>
				T2 = 0;
 80016fc:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
				p0_2 = MOTOR_getPos(&motor2);
 8001704:	4831      	ldr	r0, [pc, #196]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001706:	f006 f8cd 	bl	80078a4 <MOTOR_getPos>
 800170a:	eef0 7a40 	vmov.f32	s15, s0
 800170e:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
				preSetpoint2 = setpoint2;
 8001714:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a36      	ldr	r2, [pc, #216]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800171a:	6013      	str	r3, [r2, #0]
			}
			if (setpoint3 != preSetpoint3) {
 800171c:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	4b35      	ldr	r3, [pc, #212]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	eeb4 7a67 	vcmp.f32	s14, s15
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	d00f      	beq.n	8001752 <HAL_TIM_PeriodElapsedCallback+0x2ca>
				T3 = 0;
 8001732:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
				p0_3 = MOTOR_getPos(&motor3);
 800173a:	4828      	ldr	r0, [pc, #160]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x354>)
 800173c:	f006 f8b2 	bl	80078a4 <MOTOR_getPos>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001746:	edc3 7a00 	vstr	s15, [r3]
				preSetpoint3 = setpoint3;
 800174a:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a2a      	ldr	r2, [pc, #168]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001750:	6013      	str	r3, [r2, #0]
			}
			if (setpoint4 != preSetpoint4) {
 8001752:	4b25      	ldr	r3, [pc, #148]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x374>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	d00f      	beq.n	8001788 <HAL_TIM_PeriodElapsedCallback+0x300>
				T4 = 0;
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
				p0_4 = MOTOR_getPos(&motor4);
 8001770:	481e      	ldr	r0, [pc, #120]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001772:	f006 f897 	bl	80078a4 <MOTOR_getPos>
 8001776:	eef0 7a40 	vmov.f32	s15, s0
 800177a:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800177c:	edc3 7a00 	vstr	s15, [r3]
				preSetpoint4 = setpoint4;
 8001780:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1d      	ldr	r2, [pc, #116]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001786:	6013      	str	r3, [r2, #0]
			}
			mode = 0;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
			break;
 800178e:	e000      	b.n	8001792 <HAL_TIM_PeriodElapsedCallback+0x30a>
		default:
			break;
 8001790:	bf00      	nop
		}
	}
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000484 	.word	0x20000484
 80017a0:	40020800 	.word	0x40020800
 80017a4:	20000905 	.word	0x20000905
 80017a8:	200008c4 	.word	0x200008c4
 80017ac:	200000e0 	.word	0x200000e0
 80017b0:	200008f4 	.word	0x200008f4
 80017b4:	200008d4 	.word	0x200008d4
 80017b8:	00000000 	.word	0x00000000
 80017bc:	200005e4 	.word	0x200005e4
 80017c0:	200008c8 	.word	0x200008c8
 80017c4:	200008f8 	.word	0x200008f8
 80017c8:	200008d8 	.word	0x200008d8
 80017cc:	2000069c 	.word	0x2000069c
 80017d0:	200008cc 	.word	0x200008cc
 80017d4:	200008fc 	.word	0x200008fc
 80017d8:	200008dc 	.word	0x200008dc
 80017dc:	20000754 	.word	0x20000754
 80017e0:	200008d0 	.word	0x200008d0
 80017e4:	20000900 	.word	0x20000900
 80017e8:	200008e0 	.word	0x200008e0
 80017ec:	2000080c 	.word	0x2000080c
 80017f0:	200008e4 	.word	0x200008e4
 80017f4:	200008e8 	.word	0x200008e8
 80017f8:	200008ec 	.word	0x200008ec
 80017fc:	200008f0 	.word	0x200008f0

08001800 <SetHome>:

void SetHome(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	if(IsHome) {
 8001804:	4bb4      	ldr	r3, [pc, #720]	@ (8001ad8 <SetHome+0x2d8>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d02f      	beq.n	800186c <SetHome+0x6c>
		MOTOR_reset(&motor1);
 800180c:	48b3      	ldr	r0, [pc, #716]	@ (8001adc <SetHome+0x2dc>)
 800180e:	f006 f810 	bl	8007832 <MOTOR_reset>
		MOTOR_reset(&motor2);
 8001812:	48b3      	ldr	r0, [pc, #716]	@ (8001ae0 <SetHome+0x2e0>)
 8001814:	f006 f80d 	bl	8007832 <MOTOR_reset>
		MOTOR_reset(&motor3);
 8001818:	48b2      	ldr	r0, [pc, #712]	@ (8001ae4 <SetHome+0x2e4>)
 800181a:	f006 f80a 	bl	8007832 <MOTOR_reset>
		MOTOR_reset(&motor4);
 800181e:	48b2      	ldr	r0, [pc, #712]	@ (8001ae8 <SetHome+0x2e8>)
 8001820:	f006 f807 	bl	8007832 <MOTOR_reset>
		setHomeOk = 0;
 8001824:	4bb1      	ldr	r3, [pc, #708]	@ (8001aec <SetHome+0x2ec>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
		setHome234Flag = 1;
 800182a:	4bb1      	ldr	r3, [pc, #708]	@ (8001af0 <SetHome+0x2f0>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
		setHome1234Flag = 1;
 8001830:	4bb0      	ldr	r3, [pc, #704]	@ (8001af4 <SetHome+0x2f4>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
		setHomeJ1 = setHomeJ2 = setHomeJ3 = setHomeJ4 = 0;
 8001836:	4bb0      	ldr	r3, [pc, #704]	@ (8001af8 <SetHome+0x2f8>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	4bae      	ldr	r3, [pc, #696]	@ (8001af8 <SetHome+0x2f8>)
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	4bae      	ldr	r3, [pc, #696]	@ (8001afc <SetHome+0x2fc>)
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	4bad      	ldr	r3, [pc, #692]	@ (8001afc <SetHome+0x2fc>)
 8001846:	781a      	ldrb	r2, [r3, #0]
 8001848:	4bad      	ldr	r3, [pc, #692]	@ (8001b00 <SetHome+0x300>)
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	4bac      	ldr	r3, [pc, #688]	@ (8001b00 <SetHome+0x300>)
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	4bac      	ldr	r3, [pc, #688]	@ (8001b04 <SetHome+0x304>)
 8001852:	701a      	strb	r2, [r3, #0]
		if (setHomeOk == 0)
 8001854:	4ba5      	ldr	r3, [pc, #660]	@ (8001aec <SetHome+0x2ec>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <SetHome+0x66>
			MOTOR_setAngle(&motor3, 300);
 800185c:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8001b08 <SetHome+0x308>
 8001860:	48a0      	ldr	r0, [pc, #640]	@ (8001ae4 <SetHome+0x2e4>)
 8001862:	f005 ff0b 	bl	800767c <MOTOR_setAngle>
		IsHome = false;
 8001866:	4b9c      	ldr	r3, [pc, #624]	@ (8001ad8 <SetHome+0x2d8>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
	}
	if (setHome1234Flag == 1 && setHomeOk == 0) {
 800186c:	4ba1      	ldr	r3, [pc, #644]	@ (8001af4 <SetHome+0x2f4>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	f040 8219 	bne.w	8001ca8 <SetHome+0x4a8>
 8001876:	4b9d      	ldr	r3, [pc, #628]	@ (8001aec <SetHome+0x2ec>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 8214 	bne.w	8001ca8 <SetHome+0x4a8>
		if (setHomeJ1 == 1 && setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1) {
 8001880:	4ba0      	ldr	r3, [pc, #640]	@ (8001b04 <SetHome+0x304>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d16b      	bne.n	8001960 <SetHome+0x160>
 8001888:	4b9d      	ldr	r3, [pc, #628]	@ (8001b00 <SetHome+0x300>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d167      	bne.n	8001960 <SetHome+0x160>
 8001890:	4b9a      	ldr	r3, [pc, #616]	@ (8001afc <SetHome+0x2fc>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d163      	bne.n	8001960 <SetHome+0x160>
 8001898:	4b97      	ldr	r3, [pc, #604]	@ (8001af8 <SetHome+0x2f8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d15f      	bne.n	8001960 <SetHome+0x160>
#ifdef NamDHay
			MOTOR_setAngle(&motor1, 0);
 80018a0:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8001b0c <SetHome+0x30c>
 80018a4:	488d      	ldr	r0, [pc, #564]	@ (8001adc <SetHome+0x2dc>)
 80018a6:	f005 fee9 	bl	800767c <MOTOR_setAngle>
			MOTOR_setAngle(&motor2, 50);
 80018aa:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 8001b10 <SetHome+0x310>
 80018ae:	488c      	ldr	r0, [pc, #560]	@ (8001ae0 <SetHome+0x2e0>)
 80018b0:	f005 fee4 	bl	800767c <MOTOR_setAngle>
			MOTOR_setAngle(&motor3, -84);
 80018b4:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8001b14 <SetHome+0x314>
 80018b8:	488a      	ldr	r0, [pc, #552]	@ (8001ae4 <SetHome+0x2e4>)
 80018ba:	f005 fedf 	bl	800767c <MOTOR_setAngle>
			MOTOR_setAngle(&motor4, -133);
 80018be:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8001b18 <SetHome+0x318>
 80018c2:	4889      	ldr	r0, [pc, #548]	@ (8001ae8 <SetHome+0x2e8>)
 80018c4:	f005 feda 	bl	800767c <MOTOR_setAngle>
			if (fabs(MOTOR_getPos(&motor2) - 50)  < 1
 80018c8:	4885      	ldr	r0, [pc, #532]	@ (8001ae0 <SetHome+0x2e0>)
 80018ca:	f005 ffeb 	bl	80078a4 <MOTOR_getPos>
 80018ce:	eef0 7a40 	vmov.f32	s15, s0
 80018d2:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001b10 <SetHome+0x310>
 80018d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018da:	eef0 7ae7 	vabs.f32	s15, s15
 80018de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	f140 8185 	bpl.w	8001bf8 <SetHome+0x3f8>
			 && fabs(MOTOR_getPos(&motor3) + 84)  < 1
 80018ee:	487d      	ldr	r0, [pc, #500]	@ (8001ae4 <SetHome+0x2e4>)
 80018f0:	f005 ffd8 	bl	80078a4 <MOTOR_getPos>
 80018f4:	eef0 7a40 	vmov.f32	s15, s0
 80018f8:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001b1c <SetHome+0x31c>
 80018fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001900:	eef0 7ae7 	vabs.f32	s15, s15
 8001904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	d400      	bmi.n	8001914 <SetHome+0x114>
			if (fabs(MOTOR_getPos(&motor2) - 50)  < 1
 8001912:	e171      	b.n	8001bf8 <SetHome+0x3f8>
			 && fabs(MOTOR_getPos(&motor4) + 133) < 1) {
 8001914:	4874      	ldr	r0, [pc, #464]	@ (8001ae8 <SetHome+0x2e8>)
 8001916:	f005 ffc5 	bl	80078a4 <MOTOR_getPos>
 800191a:	eef0 7a40 	vmov.f32	s15, s0
 800191e:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8001b20 <SetHome+0x320>
 8001922:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001926:	eef0 7ae7 	vabs.f32	s15, s15
 800192a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800192e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	d400      	bmi.n	800193a <SetHome+0x13a>
			if (fabs(MOTOR_getPos(&motor2) - 50)  < 1
 8001938:	e15e      	b.n	8001bf8 <SetHome+0x3f8>
				setHome234Flag = 0;
 800193a:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <SetHome+0x2f0>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
				setHome1234Flag = 0;
 8001940:	4b6c      	ldr	r3, [pc, #432]	@ (8001af4 <SetHome+0x2f4>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
				setHomeOk = 1;
 8001946:	4b69      	ldr	r3, [pc, #420]	@ (8001aec <SetHome+0x2ec>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
				MOTOR_reset(&motor2);
 800194c:	4864      	ldr	r0, [pc, #400]	@ (8001ae0 <SetHome+0x2e0>)
 800194e:	f005 ff70 	bl	8007832 <MOTOR_reset>
				MOTOR_reset(&motor3);
 8001952:	4864      	ldr	r0, [pc, #400]	@ (8001ae4 <SetHome+0x2e4>)
 8001954:	f005 ff6d 	bl	8007832 <MOTOR_reset>
				MOTOR_reset(&motor4);
 8001958:	4863      	ldr	r0, [pc, #396]	@ (8001ae8 <SetHome+0x2e8>)
 800195a:	f005 ff6a 	bl	8007832 <MOTOR_reset>
			if (fabs(MOTOR_getPos(&motor2) - 50)  < 1
 800195e:	e14b      	b.n	8001bf8 <SetHome+0x3f8>
				MOTOR_reset(&motor2);
				MOTOR_reset(&motor3);
				MOTOR_reset(&motor4);
			}
#endif
		} else if (setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1) {
 8001960:	4b67      	ldr	r3, [pc, #412]	@ (8001b00 <SetHome+0x300>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	f040 8147 	bne.w	8001bf8 <SetHome+0x3f8>
 800196a:	4b64      	ldr	r3, [pc, #400]	@ (8001afc <SetHome+0x2fc>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	f040 8142 	bne.w	8001bf8 <SetHome+0x3f8>
 8001974:	4b60      	ldr	r3, [pc, #384]	@ (8001af8 <SetHome+0x2f8>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	f040 813d 	bne.w	8001bf8 <SetHome+0x3f8>
			if (fabs(motor1.setPoint) <= 2) {
 800197e:	4b57      	ldr	r3, [pc, #348]	@ (8001adc <SetHome+0x2dc>)
 8001980:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8001984:	eef0 7ae7 	vabs.f32	s15, s15
 8001988:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800198c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	d805      	bhi.n	80019a2 <SetHome+0x1a2>
				MOTOR_setAngle(&motor1, -20.0f);
 8001996:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 800199a:	4850      	ldr	r0, [pc, #320]	@ (8001adc <SetHome+0x2dc>)
 800199c:	f005 fe6e 	bl	800767c <MOTOR_setAngle>
 80019a0:	e12a      	b.n	8001bf8 <SetHome+0x3f8>
			} else if (fabs(MOTOR_getPos(&motor1) + 20.0f) < 2
 80019a2:	484e      	ldr	r0, [pc, #312]	@ (8001adc <SetHome+0x2dc>)
 80019a4:	f005 ff7e 	bl	80078a4 <MOTOR_getPos>
 80019a8:	eef0 7a40 	vmov.f32	s15, s0
 80019ac:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80019b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019b4:	eef0 7ae7 	vabs.f32	s15, s15
 80019b8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80019bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	d514      	bpl.n	80019f0 <SetHome+0x1f0>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == -20) {
 80019c6:	4b45      	ldr	r3, [pc, #276]	@ (8001adc <SetHome+0x2dc>)
 80019c8:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 80019cc:	4b43      	ldr	r3, [pc, #268]	@ (8001adc <SetHome+0x2dc>)
 80019ce:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 80019d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019da:	ee17 3a90 	vmov	r3, s15
 80019de:	f113 0f14 	cmn.w	r3, #20
 80019e2:	d105      	bne.n	80019f0 <SetHome+0x1f0>
				MOTOR_setAngle(&motor1, 20.0f);
 80019e4:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80019e8:	483c      	ldr	r0, [pc, #240]	@ (8001adc <SetHome+0x2dc>)
 80019ea:	f005 fe47 	bl	800767c <MOTOR_setAngle>
 80019ee:	e103      	b.n	8001bf8 <SetHome+0x3f8>
			} else if (fabs(MOTOR_getPos(&motor1) - 20.0f) < 2
 80019f0:	483a      	ldr	r0, [pc, #232]	@ (8001adc <SetHome+0x2dc>)
 80019f2:	f005 ff57 	bl	80078a4 <MOTOR_getPos>
 80019f6:	eef0 7a40 	vmov.f32	s15, s0
 80019fa:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80019fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a02:	eef0 7ae7 	vabs.f32	s15, s15
 8001a06:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	d513      	bpl.n	8001a3c <SetHome+0x23c>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == 20) {
 8001a14:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <SetHome+0x2dc>)
 8001a16:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001a1a:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <SetHome+0x2dc>)
 8001a1c:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a28:	ee17 3a90 	vmov	r3, s15
 8001a2c:	2b14      	cmp	r3, #20
 8001a2e:	d105      	bne.n	8001a3c <SetHome+0x23c>
				MOTOR_setAngle(&motor1, -40.0f);
 8001a30:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8001b24 <SetHome+0x324>
 8001a34:	4829      	ldr	r0, [pc, #164]	@ (8001adc <SetHome+0x2dc>)
 8001a36:	f005 fe21 	bl	800767c <MOTOR_setAngle>
 8001a3a:	e0dd      	b.n	8001bf8 <SetHome+0x3f8>
			} else if (fabs(MOTOR_getPos(&motor1) + 40.0f) < 2
 8001a3c:	4827      	ldr	r0, [pc, #156]	@ (8001adc <SetHome+0x2dc>)
 8001a3e:	f005 ff31 	bl	80078a4 <MOTOR_getPos>
 8001a42:	eef0 7a40 	vmov.f32	s15, s0
 8001a46:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001b28 <SetHome+0x328>
 8001a4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a4e:	eef0 7ae7 	vabs.f32	s15, s15
 8001a52:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d514      	bpl.n	8001a8a <SetHome+0x28a>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == -40) {
 8001a60:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <SetHome+0x2dc>)
 8001a62:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <SetHome+0x2dc>)
 8001a68:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a74:	ee17 3a90 	vmov	r3, s15
 8001a78:	f113 0f28 	cmn.w	r3, #40	@ 0x28
 8001a7c:	d105      	bne.n	8001a8a <SetHome+0x28a>
				MOTOR_setAngle(&motor1, 40.0f);
 8001a7e:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001b28 <SetHome+0x328>
 8001a82:	4816      	ldr	r0, [pc, #88]	@ (8001adc <SetHome+0x2dc>)
 8001a84:	f005 fdfa 	bl	800767c <MOTOR_setAngle>
 8001a88:	e0b6      	b.n	8001bf8 <SetHome+0x3f8>
			} else if (fabs(MOTOR_getPos(&motor1) - 40.0f) < 2
 8001a8a:	4814      	ldr	r0, [pc, #80]	@ (8001adc <SetHome+0x2dc>)
 8001a8c:	f005 ff0a 	bl	80078a4 <MOTOR_getPos>
 8001a90:	eef0 7a40 	vmov.f32	s15, s0
 8001a94:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001b28 <SetHome+0x328>
 8001a98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a9c:	eef0 7ae7 	vabs.f32	s15, s15
 8001aa0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	d540      	bpl.n	8001b30 <SetHome+0x330>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == 40) {
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <SetHome+0x2dc>)
 8001ab0:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001ab4:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <SetHome+0x2dc>)
 8001ab6:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 3a90 	vmov	r3, s15
 8001ac6:	2b28      	cmp	r3, #40	@ 0x28
 8001ac8:	d132      	bne.n	8001b30 <SetHome+0x330>
				MOTOR_setAngle(&motor1, -60.0f);
 8001aca:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001b2c <SetHome+0x32c>
 8001ace:	4803      	ldr	r0, [pc, #12]	@ (8001adc <SetHome+0x2dc>)
 8001ad0:	f005 fdd4 	bl	800767c <MOTOR_setAngle>
 8001ad4:	e090      	b.n	8001bf8 <SetHome+0x3f8>
 8001ad6:	bf00      	nop
 8001ad8:	200005e1 	.word	0x200005e1
 8001adc:	200005e4 	.word	0x200005e4
 8001ae0:	2000069c 	.word	0x2000069c
 8001ae4:	20000754 	.word	0x20000754
 8001ae8:	2000080c 	.word	0x2000080c
 8001aec:	200005dc 	.word	0x200005dc
 8001af0:	200005e2 	.word	0x200005e2
 8001af4:	200005e3 	.word	0x200005e3
 8001af8:	200005e0 	.word	0x200005e0
 8001afc:	200005df 	.word	0x200005df
 8001b00:	200005de 	.word	0x200005de
 8001b04:	200005dd 	.word	0x200005dd
 8001b08:	43960000 	.word	0x43960000
 8001b0c:	00000000 	.word	0x00000000
 8001b10:	42480000 	.word	0x42480000
 8001b14:	c2a80000 	.word	0xc2a80000
 8001b18:	c3050000 	.word	0xc3050000
 8001b1c:	42a80000 	.word	0x42a80000
 8001b20:	43050000 	.word	0x43050000
 8001b24:	c2200000 	.word	0xc2200000
 8001b28:	42200000 	.word	0x42200000
 8001b2c:	c2700000 	.word	0xc2700000
			} else if (fabs(MOTOR_getPos(&motor1) + 60.0f) < 2
 8001b30:	486d      	ldr	r0, [pc, #436]	@ (8001ce8 <SetHome+0x4e8>)
 8001b32:	f005 feb7 	bl	80078a4 <MOTOR_getPos>
 8001b36:	eef0 7a40 	vmov.f32	s15, s0
 8001b3a:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001cec <SetHome+0x4ec>
 8001b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b42:	eef0 7ae7 	vabs.f32	s15, s15
 8001b46:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	d514      	bpl.n	8001b7e <SetHome+0x37e>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == -60) {
 8001b54:	4b64      	ldr	r3, [pc, #400]	@ (8001ce8 <SetHome+0x4e8>)
 8001b56:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001b5a:	4b63      	ldr	r3, [pc, #396]	@ (8001ce8 <SetHome+0x4e8>)
 8001b5c:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b68:	ee17 3a90 	vmov	r3, s15
 8001b6c:	f113 0f3c 	cmn.w	r3, #60	@ 0x3c
 8001b70:	d105      	bne.n	8001b7e <SetHome+0x37e>
				MOTOR_setAngle(&motor1, 60.0f);
 8001b72:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8001cec <SetHome+0x4ec>
 8001b76:	485c      	ldr	r0, [pc, #368]	@ (8001ce8 <SetHome+0x4e8>)
 8001b78:	f005 fd80 	bl	800767c <MOTOR_setAngle>
 8001b7c:	e03c      	b.n	8001bf8 <SetHome+0x3f8>
			} else if (fabs(MOTOR_getPos(&motor1) - 60.0f) < 2
 8001b7e:	485a      	ldr	r0, [pc, #360]	@ (8001ce8 <SetHome+0x4e8>)
 8001b80:	f005 fe90 	bl	80078a4 <MOTOR_getPos>
 8001b84:	eef0 7a40 	vmov.f32	s15, s0
 8001b88:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001cec <SetHome+0x4ec>
 8001b8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b90:	eef0 7ae7 	vabs.f32	s15, s15
 8001b94:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	d513      	bpl.n	8001bca <SetHome+0x3ca>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == 60) {
 8001ba2:	4b51      	ldr	r3, [pc, #324]	@ (8001ce8 <SetHome+0x4e8>)
 8001ba4:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce8 <SetHome+0x4e8>)
 8001baa:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb6:	ee17 3a90 	vmov	r3, s15
 8001bba:	2b3c      	cmp	r3, #60	@ 0x3c
 8001bbc:	d105      	bne.n	8001bca <SetHome+0x3ca>
				MOTOR_setAngle(&motor1, -80.0f);
 8001bbe:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8001cf0 <SetHome+0x4f0>
 8001bc2:	4849      	ldr	r0, [pc, #292]	@ (8001ce8 <SetHome+0x4e8>)
 8001bc4:	f005 fd5a 	bl	800767c <MOTOR_setAngle>
 8001bc8:	e016      	b.n	8001bf8 <SetHome+0x3f8>
			} else if (fabs(MOTOR_getPos(&motor1) + 80.0f) < 2) {
 8001bca:	4847      	ldr	r0, [pc, #284]	@ (8001ce8 <SetHome+0x4e8>)
 8001bcc:	f005 fe6a 	bl	80078a4 <MOTOR_getPos>
 8001bd0:	eef0 7a40 	vmov.f32	s15, s0
 8001bd4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001cf4 <SetHome+0x4f4>
 8001bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bdc:	eef0 7ae7 	vabs.f32	s15, s15
 8001be0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	d504      	bpl.n	8001bf8 <SetHome+0x3f8>
				MOTOR_setAngle(&motor1, 80.0f);
 8001bee:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8001cf4 <SetHome+0x4f4>
 8001bf2:	483d      	ldr	r0, [pc, #244]	@ (8001ce8 <SetHome+0x4e8>)
 8001bf4:	f005 fd42 	bl	800767c <MOTOR_setAngle>
			}
		}
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ1 == 0) {
 8001bf8:	2140      	movs	r1, #64	@ 0x40
 8001bfa:	483f      	ldr	r0, [pc, #252]	@ (8001cf8 <SetHome+0x4f8>)
 8001bfc:	f002 fa20 	bl	8004040 <HAL_GPIO_ReadPin>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <SetHome+0x41a>
 8001c06:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <SetHome+0x4fc>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <SetHome+0x41a>
			setHomeJ1 = 1;
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001cfc <SetHome+0x4fc>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 8001c14:	4834      	ldr	r0, [pc, #208]	@ (8001ce8 <SetHome+0x4e8>)
 8001c16:	f005 fe0c 	bl	8007832 <MOTOR_reset>
		}
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0 && setHomeJ2 == 0) {
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	4836      	ldr	r0, [pc, #216]	@ (8001cf8 <SetHome+0x4f8>)
 8001c1e:	f002 fa0f 	bl	8004040 <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <SetHome+0x43c>
 8001c28:	4b35      	ldr	r3, [pc, #212]	@ (8001d00 <SetHome+0x500>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <SetHome+0x43c>
			setHomeJ2 = 1;
 8001c30:	4b33      	ldr	r3, [pc, #204]	@ (8001d00 <SetHome+0x500>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 8001c36:	4833      	ldr	r0, [pc, #204]	@ (8001d04 <SetHome+0x504>)
 8001c38:	f005 fdfb 	bl	8007832 <MOTOR_reset>
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0 && setHomeJ3 == 0) {
 8001c3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c40:	4831      	ldr	r0, [pc, #196]	@ (8001d08 <SetHome+0x508>)
 8001c42:	f002 f9fd 	bl	8004040 <HAL_GPIO_ReadPin>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d11b      	bne.n	8001c84 <SetHome+0x484>
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d0c <SetHome+0x50c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d117      	bne.n	8001c84 <SetHome+0x484>
			setHomeJ3 = 1;
 8001c54:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <SetHome+0x50c>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 8001c5a:	482d      	ldr	r0, [pc, #180]	@ (8001d10 <SetHome+0x510>)
 8001c5c:	f005 fde9 	bl	8007832 <MOTOR_reset>
			if (setHomeJ2 == 0) {
 8001c60:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <SetHome+0x500>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d104      	bne.n	8001c72 <SetHome+0x472>
				MOTOR_setAngle(&motor2, -300);
 8001c68:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001d14 <SetHome+0x514>
 8001c6c:	4825      	ldr	r0, [pc, #148]	@ (8001d04 <SetHome+0x504>)
 8001c6e:	f005 fd05 	bl	800767c <MOTOR_setAngle>
			}
			if (setHomeJ4 == 0) {
 8001c72:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <SetHome+0x518>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d104      	bne.n	8001c84 <SetHome+0x484>
				MOTOR_setAngle(&motor4, 300);
 8001c7a:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001d1c <SetHome+0x51c>
 8001c7e:	4828      	ldr	r0, [pc, #160]	@ (8001d20 <SetHome+0x520>)
 8001c80:	f005 fcfc 	bl	800767c <MOTOR_setAngle>
			}
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0 && setHomeJ4 == 0) {
 8001c84:	2180      	movs	r1, #128	@ 0x80
 8001c86:	4820      	ldr	r0, [pc, #128]	@ (8001d08 <SetHome+0x508>)
 8001c88:	f002 f9da 	bl	8004040 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d126      	bne.n	8001ce0 <SetHome+0x4e0>
 8001c92:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <SetHome+0x518>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d122      	bne.n	8001ce0 <SetHome+0x4e0>
			setHomeJ4 = 1;
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d18 <SetHome+0x518>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 8001ca0:	481f      	ldr	r0, [pc, #124]	@ (8001d20 <SetHome+0x520>)
 8001ca2:	f005 fdc6 	bl	8007832 <MOTOR_reset>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0 && setHomeJ4 == 0) {
 8001ca6:	e01b      	b.n	8001ce0 <SetHome+0x4e0>
		}
	} else if (setHome1234Flag == 1 && setHomeOk == 1) {
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <SetHome+0x524>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d118      	bne.n	8001ce2 <SetHome+0x4e2>
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <SetHome+0x528>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d114      	bne.n	8001ce2 <SetHome+0x4e2>
		setpoint1 = 0;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <SetHome+0x52c>)
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
		setpoint2 = 0;
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <SetHome+0x530>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
		setpoint3 = 0;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <SetHome+0x534>)
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
		setpoint4 = 0;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <SetHome+0x538>)
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
		setHome1234Flag = 0;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <SetHome+0x524>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
	}
}
 8001cde:	e000      	b.n	8001ce2 <SetHome+0x4e2>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0 && setHomeJ4 == 0) {
 8001ce0:	bf00      	nop
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200005e4 	.word	0x200005e4
 8001cec:	42700000 	.word	0x42700000
 8001cf0:	c2a00000 	.word	0xc2a00000
 8001cf4:	42a00000 	.word	0x42a00000
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	200005dd 	.word	0x200005dd
 8001d00:	200005de 	.word	0x200005de
 8001d04:	2000069c 	.word	0x2000069c
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	200005df 	.word	0x200005df
 8001d10:	20000754 	.word	0x20000754
 8001d14:	c3960000 	.word	0xc3960000
 8001d18:	200005e0 	.word	0x200005e0
 8001d1c:	43960000 	.word	0x43960000
 8001d20:	2000080c 	.word	0x2000080c
 8001d24:	200005e3 	.word	0x200005e3
 8001d28:	200005dc 	.word	0x200005dc
 8001d2c:	200008d4 	.word	0x200008d4
 8001d30:	200008d8 	.word	0x200008d8
 8001d34:	200008dc 	.word	0x200008dc
 8001d38:	200008e0 	.word	0x200008e0

08001d3c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	80fb      	strh	r3, [r7, #6]
	if (setHome1234Flag == 1 && setHomeOk == 0) {
 8001d46:	4b29      	ldr	r3, [pc, #164]	@ (8001dec <HAL_GPIO_EXTI_Callback+0xb0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d14a      	bne.n	8001de4 <HAL_GPIO_EXTI_Callback+0xa8>
 8001d4e:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d146      	bne.n	8001de4 <HAL_GPIO_EXTI_Callback+0xa8>
		if (GPIO_Pin == GPIO_PIN_2 && setHomeJ2 == 0) {
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d109      	bne.n	8001d70 <HAL_GPIO_EXTI_Callback+0x34>
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_GPIO_EXTI_Callback+0x34>
			setHomeJ2 = 1;
 8001d64:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 8001d6a:	4823      	ldr	r0, [pc, #140]	@ (8001df8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001d6c:	f005 fd61 	bl	8007832 <MOTOR_reset>
		}
		if (GPIO_Pin == GPIO_PIN_11 && setHomeJ3 == 0) {
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d76:	d11b      	bne.n	8001db0 <HAL_GPIO_EXTI_Callback+0x74>
 8001d78:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d117      	bne.n	8001db0 <HAL_GPIO_EXTI_Callback+0x74>
			setHomeJ3 = 1;
 8001d80:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <HAL_GPIO_EXTI_Callback+0xc0>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 8001d86:	481e      	ldr	r0, [pc, #120]	@ (8001e00 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001d88:	f005 fd53 	bl	8007832 <MOTOR_reset>
			if (setHomeJ2 == 0) {
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d104      	bne.n	8001d9e <HAL_GPIO_EXTI_Callback+0x62>
				MOTOR_setAngle(&motor2, -300);
 8001d94:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001e04 <HAL_GPIO_EXTI_Callback+0xc8>
 8001d98:	4817      	ldr	r0, [pc, #92]	@ (8001df8 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001d9a:	f005 fc6f 	bl	800767c <MOTOR_setAngle>
			}
			if (setHomeJ4 == 0) {
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_GPIO_EXTI_Callback+0x74>
				MOTOR_setAngle(&motor4, 300);
 8001da6:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001e0c <HAL_GPIO_EXTI_Callback+0xd0>
 8001daa:	4819      	ldr	r0, [pc, #100]	@ (8001e10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001dac:	f005 fc66 	bl	800767c <MOTOR_setAngle>
			}
		}
		if (GPIO_Pin == GPIO_PIN_7 && setHomeJ4 == 0) {
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	2b80      	cmp	r3, #128	@ 0x80
 8001db4:	d109      	bne.n	8001dca <HAL_GPIO_EXTI_Callback+0x8e>
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d105      	bne.n	8001dca <HAL_GPIO_EXTI_Callback+0x8e>
			setHomeJ4 = 1;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 8001dc4:	4812      	ldr	r0, [pc, #72]	@ (8001e10 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001dc6:	f005 fd34 	bl	8007832 <MOTOR_reset>
		}
		if (GPIO_Pin == GPIO_PIN_6 && setHomeJ1 == 0) {
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	2b40      	cmp	r3, #64	@ 0x40
 8001dce:	d109      	bne.n	8001de4 <HAL_GPIO_EXTI_Callback+0xa8>
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_GPIO_EXTI_Callback+0xa8>
			setHomeJ1 = 1;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 8001dde:	480e      	ldr	r0, [pc, #56]	@ (8001e18 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001de0:	f005 fd27 	bl	8007832 <MOTOR_reset>
		}
	}
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200005e3 	.word	0x200005e3
 8001df0:	200005dc 	.word	0x200005dc
 8001df4:	200005de 	.word	0x200005de
 8001df8:	2000069c 	.word	0x2000069c
 8001dfc:	200005df 	.word	0x200005df
 8001e00:	20000754 	.word	0x20000754
 8001e04:	c3960000 	.word	0xc3960000
 8001e08:	200005e0 	.word	0x200005e0
 8001e0c:	43960000 	.word	0x43960000
 8001e10:	2000080c 	.word	0x2000080c
 8001e14:	200005dd 	.word	0x200005dd
 8001e18:	200005e4 	.word	0x200005e4

08001e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e20:	b090      	sub	sp, #64	@ 0x40
 8001e22:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e24:	f001 f9d0 	bl	80031c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e28:	f000 f95c 	bl	80020e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e2c:	f000 fd14 	bl	8002858 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e30:	f000 fcf2 	bl	8002818 <MX_DMA_Init>
  MX_TIM1_Init();
 8001e34:	f000 f9c0 	bl	80021b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e38:	f000 fa16 	bl	8002268 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e3c:	f000 fa68 	bl	8002310 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e40:	f000 faba 	bl	80023b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e44:	f000 fb50 	bl	80024e8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001e48:	f000 fba2 	bl	8002590 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001e4c:	f000 fc4c 	bl	80026e8 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001e50:	f000 fcb8 	bl	80027c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MOTOR_setPIDPosition(&motor1, 5, 0, 0, 5);
 8001e54:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001e58:	ed9f 1a87 	vldr	s2, [pc, #540]	@ 8002078 <main+0x25c>
 8001e5c:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8002078 <main+0x25c>
 8001e60:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001e64:	4885      	ldr	r0, [pc, #532]	@ (800207c <main+0x260>)
 8001e66:	f005 fbad 	bl	80075c4 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor1, 30, 150, 0, 5);
 8001e6a:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001e6e:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 8002078 <main+0x25c>
 8001e72:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8002080 <main+0x264>
 8001e76:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001e7a:	4880      	ldr	r0, [pc, #512]	@ (800207c <main+0x260>)
 8001e7c:	f005 fb86 	bl	800758c <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor1, -222, 222);
 8001e80:	eddf 0a80 	vldr	s1, [pc, #512]	@ 8002084 <main+0x268>
 8001e84:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 8002088 <main+0x26c>
 8001e88:	487c      	ldr	r0, [pc, #496]	@ (800207c <main+0x260>)
 8001e8a:	f005 fbb9 	bl	8007600 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor1, -200, 200);
 8001e8e:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 800208c <main+0x270>
 8001e92:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8002090 <main+0x274>
 8001e96:	4879      	ldr	r0, [pc, #484]	@ (800207c <main+0x260>)
 8001e98:	f005 fbd4 	bl	8007644 <MOTOR_setWindupRange>
  MOTOR_init(&motor1, &driver1, 1, GPIO_PIN_6, 500);
 8001e9c:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8002094 <main+0x278>
 8001ea0:	2240      	movs	r2, #64	@ 0x40
 8001ea2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001ea6:	497c      	ldr	r1, [pc, #496]	@ (8002098 <main+0x27c>)
 8001ea8:	4874      	ldr	r0, [pc, #464]	@ (800207c <main+0x260>)
 8001eaa:	f005 fc5d 	bl	8007768 <MOTOR_init>

  MOTOR_setPIDPosition(&motor2, 5, 0, 0, 5);
 8001eae:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001eb2:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 8002078 <main+0x25c>
 8001eb6:	eddf 0a70 	vldr	s1, [pc, #448]	@ 8002078 <main+0x25c>
 8001eba:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001ebe:	4877      	ldr	r0, [pc, #476]	@ (800209c <main+0x280>)
 8001ec0:	f005 fb80 	bl	80075c4 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor2, 30, 150, 0, 5);
 8001ec4:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001ec8:	ed9f 1a6b 	vldr	s2, [pc, #428]	@ 8002078 <main+0x25c>
 8001ecc:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8002080 <main+0x264>
 8001ed0:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001ed4:	4871      	ldr	r0, [pc, #452]	@ (800209c <main+0x280>)
 8001ed6:	f005 fb59 	bl	800758c <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor2, -444, 444);
 8001eda:	eddf 0a71 	vldr	s1, [pc, #452]	@ 80020a0 <main+0x284>
 8001ede:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 80020a4 <main+0x288>
 8001ee2:	486e      	ldr	r0, [pc, #440]	@ (800209c <main+0x280>)
 8001ee4:	f005 fb8c 	bl	8007600 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor2, -400, 400);
 8001ee8:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 80020a8 <main+0x28c>
 8001eec:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 80020ac <main+0x290>
 8001ef0:	486a      	ldr	r0, [pc, #424]	@ (800209c <main+0x280>)
 8001ef2:	f005 fba7 	bl	8007644 <MOTOR_setWindupRange>
  MOTOR_init(&motor2, &driver2, 2, GPIO_PIN_2, 500);
 8001ef6:	eddf 0a67 	vldr	s1, [pc, #412]	@ 8002094 <main+0x278>
 8001efa:	2204      	movs	r2, #4
 8001efc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001f00:	496b      	ldr	r1, [pc, #428]	@ (80020b0 <main+0x294>)
 8001f02:	4866      	ldr	r0, [pc, #408]	@ (800209c <main+0x280>)
 8001f04:	f005 fc30 	bl	8007768 <MOTOR_init>

  MOTOR_setPIDPosition(&motor3, 5, 0, 0, 5);
 8001f08:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001f0c:	ed9f 1a5a 	vldr	s2, [pc, #360]	@ 8002078 <main+0x25c>
 8001f10:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8002078 <main+0x25c>
 8001f14:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001f18:	4866      	ldr	r0, [pc, #408]	@ (80020b4 <main+0x298>)
 8001f1a:	f005 fb53 	bl	80075c4 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor3, 30, 150, 0, 5);
 8001f1e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001f22:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 8002078 <main+0x25c>
 8001f26:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8002080 <main+0x264>
 8001f2a:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001f2e:	4861      	ldr	r0, [pc, #388]	@ (80020b4 <main+0x298>)
 8001f30:	f005 fb2c 	bl	800758c <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor3, -555, 555);
 8001f34:	eddf 0a60 	vldr	s1, [pc, #384]	@ 80020b8 <main+0x29c>
 8001f38:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 80020bc <main+0x2a0>
 8001f3c:	485d      	ldr	r0, [pc, #372]	@ (80020b4 <main+0x298>)
 8001f3e:	f005 fb5f 	bl	8007600 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor3, -500, 500);
 8001f42:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8002094 <main+0x278>
 8001f46:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 80020c0 <main+0x2a4>
 8001f4a:	485a      	ldr	r0, [pc, #360]	@ (80020b4 <main+0x298>)
 8001f4c:	f005 fb7a 	bl	8007644 <MOTOR_setWindupRange>
  MOTOR_init(&motor3, &driver3, 2, GPIO_PIN_11, 500);
 8001f50:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8002094 <main+0x278>
 8001f54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f58:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001f5c:	4959      	ldr	r1, [pc, #356]	@ (80020c4 <main+0x2a8>)
 8001f5e:	4855      	ldr	r0, [pc, #340]	@ (80020b4 <main+0x298>)
 8001f60:	f005 fc02 	bl	8007768 <MOTOR_init>

  MOTOR_setPIDPosition(&motor4, 5, 0, 0, 5);
 8001f64:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001f68:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 8002078 <main+0x25c>
 8001f6c:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8002078 <main+0x25c>
 8001f70:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001f74:	4854      	ldr	r0, [pc, #336]	@ (80020c8 <main+0x2ac>)
 8001f76:	f005 fb25 	bl	80075c4 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor4, 3, 50, 0, 5);
 8001f7a:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001f7e:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 8002078 <main+0x25c>
 8001f82:	eddf 0a52 	vldr	s1, [pc, #328]	@ 80020cc <main+0x2b0>
 8001f86:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001f8a:	484f      	ldr	r0, [pc, #316]	@ (80020c8 <main+0x2ac>)
 8001f8c:	f005 fafe 	bl	800758c <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor4, -222, 222);
 8001f90:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8002084 <main+0x268>
 8001f94:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8002088 <main+0x26c>
 8001f98:	484b      	ldr	r0, [pc, #300]	@ (80020c8 <main+0x2ac>)
 8001f9a:	f005 fb31 	bl	8007600 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor4, -200, 200);
 8001f9e:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800208c <main+0x270>
 8001fa2:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8002090 <main+0x274>
 8001fa6:	4848      	ldr	r0, [pc, #288]	@ (80020c8 <main+0x2ac>)
 8001fa8:	f005 fb4c 	bl	8007644 <MOTOR_setWindupRange>
  MOTOR_init(&motor4, &driver4, 1, GPIO_PIN_7, 500);
 8001fac:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002094 <main+0x278>
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001fb6:	4946      	ldr	r1, [pc, #280]	@ (80020d0 <main+0x2b4>)
 8001fb8:	4843      	ldr	r0, [pc, #268]	@ (80020c8 <main+0x2ac>)
 8001fba:	f005 fbd5 	bl	8007768 <MOTOR_init>

  HAL_TIM_Base_Start_IT(&htim9);
 8001fbe:	4845      	ldr	r0, [pc, #276]	@ (80020d4 <main+0x2b8>)
 8001fc0:	f002 fdf2 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
  htim9.Instance->ARR = 999;
 8001fc4:	4b43      	ldr	r3, [pc, #268]	@ (80020d4 <main+0x2b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  UartIdle_Init();
 8001fce:	f7ff f9a9 	bl	8001324 <UartIdle_Init>

  uint32_t pre_time = HAL_GetTick();
 8001fd2:	f001 f95f 	bl	8003294 <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 	while (1) {
//		Uncomment this for real run
		UART_Handle(uartLogBuffer);
 8001fd8:	483f      	ldr	r0, [pc, #252]	@ (80020d8 <main+0x2bc>)
 8001fda:	f7ff f911 	bl	8001200 <UART_Handle>
		SetHome();
 8001fde:	f7ff fc0f 	bl	8001800 <SetHome>
		if (HAL_GetTick() - pre_time >= 200) {
 8001fe2:	f001 f957 	bl	8003294 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2bc7      	cmp	r3, #199	@ 0xc7
 8001fee:	d9f3      	bls.n	8001fd8 <main+0x1bc>
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
					(float) MOTOR_getPos(&motor1),
 8001ff0:	4822      	ldr	r0, [pc, #136]	@ (800207c <main+0x260>)
 8001ff2:	f005 fc57 	bl	80078a4 <MOTOR_getPos>
 8001ff6:	ee10 3a10 	vmov	r3, s0
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe faa4 	bl	8000548 <__aeabi_f2d>
 8002000:	4682      	mov	sl, r0
 8002002:	468b      	mov	fp, r1
					(float) MOTOR_getPos(&motor2),
 8002004:	4825      	ldr	r0, [pc, #148]	@ (800209c <main+0x280>)
 8002006:	f005 fc4d 	bl	80078a4 <MOTOR_getPos>
 800200a:	ee10 3a10 	vmov	r3, s0
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa9a 	bl	8000548 <__aeabi_f2d>
 8002014:	4604      	mov	r4, r0
 8002016:	460d      	mov	r5, r1
					(float) MOTOR_getPos(&motor3),
 8002018:	4826      	ldr	r0, [pc, #152]	@ (80020b4 <main+0x298>)
 800201a:	f005 fc43 	bl	80078a4 <MOTOR_getPos>
 800201e:	ee10 3a10 	vmov	r3, s0
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa90 	bl	8000548 <__aeabi_f2d>
 8002028:	4680      	mov	r8, r0
 800202a:	4689      	mov	r9, r1
					(float) MOTOR_getPos(&motor4));
 800202c:	4826      	ldr	r0, [pc, #152]	@ (80020c8 <main+0x2ac>)
 800202e:	f005 fc39 	bl	80078a4 <MOTOR_getPos>
 8002032:	ee10 3a10 	vmov	r3, s0
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fa86 	bl	8000548 <__aeabi_f2d>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	1d38      	adds	r0, r7, #4
 8002042:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002046:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800204a:	e9cd 4500 	strd	r4, r5, [sp]
 800204e:	4652      	mov	r2, sl
 8002050:	465b      	mov	r3, fp
 8002052:	4922      	ldr	r1, [pc, #136]	@ (80020dc <main+0x2c0>)
 8002054:	f006 fcf0 	bl	8008a38 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) data_angle,
					strlen(data_angle), HAL_MAX_DELAY);
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe f908 	bl	8000270 <strlen>
 8002060:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) data_angle,
 8002062:	b29a      	uxth	r2, r3
 8002064:	1d39      	adds	r1, r7, #4
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	481d      	ldr	r0, [pc, #116]	@ (80020e0 <main+0x2c4>)
 800206c:	f003 ff52 	bl	8005f14 <HAL_UART_Transmit>

			pre_time = HAL_GetTick();
 8002070:	f001 f910 	bl	8003294 <HAL_GetTick>
 8002074:	6278      	str	r0, [r7, #36]	@ 0x24
		UART_Handle(uartLogBuffer);
 8002076:	e7af      	b.n	8001fd8 <main+0x1bc>
 8002078:	00000000 	.word	0x00000000
 800207c:	200005e4 	.word	0x200005e4
 8002080:	43160000 	.word	0x43160000
 8002084:	435e0000 	.word	0x435e0000
 8002088:	c35e0000 	.word	0xc35e0000
 800208c:	43480000 	.word	0x43480000
 8002090:	c3480000 	.word	0xc3480000
 8002094:	43fa0000 	.word	0x43fa0000
 8002098:	20000000 	.word	0x20000000
 800209c:	2000069c 	.word	0x2000069c
 80020a0:	43de0000 	.word	0x43de0000
 80020a4:	c3de0000 	.word	0xc3de0000
 80020a8:	43c80000 	.word	0x43c80000
 80020ac:	c3c80000 	.word	0xc3c80000
 80020b0:	20000038 	.word	0x20000038
 80020b4:	20000754 	.word	0x20000754
 80020b8:	440ac000 	.word	0x440ac000
 80020bc:	c40ac000 	.word	0xc40ac000
 80020c0:	c3fa0000 	.word	0xc3fa0000
 80020c4:	20000070 	.word	0x20000070
 80020c8:	2000080c 	.word	0x2000080c
 80020cc:	42480000 	.word	0x42480000
 80020d0:	200000a8 	.word	0x200000a8
 80020d4:	20000484 	.word	0x20000484
 80020d8:	20000574 	.word	0x20000574
 80020dc:	0800cbb4 	.word	0x0800cbb4
 80020e0:	200004cc 	.word	0x200004cc

080020e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b094      	sub	sp, #80	@ 0x50
 80020e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ea:	f107 0320 	add.w	r3, r7, #32
 80020ee:	2230      	movs	r2, #48	@ 0x30
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f006 fd2f 	bl	8008b56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	4b28      	ldr	r3, [pc, #160]	@ (80021b0 <SystemClock_Config+0xcc>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	4a27      	ldr	r2, [pc, #156]	@ (80021b0 <SystemClock_Config+0xcc>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002116:	6413      	str	r3, [r2, #64]	@ 0x40
 8002118:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <SystemClock_Config+0xcc>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <SystemClock_Config+0xd0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a21      	ldr	r2, [pc, #132]	@ (80021b4 <SystemClock_Config+0xd0>)
 800212e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <SystemClock_Config+0xd0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002140:	2302      	movs	r3, #2
 8002142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002144:	2301      	movs	r3, #1
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002148:	2310      	movs	r3, #16
 800214a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800214c:	2302      	movs	r3, #2
 800214e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002150:	2300      	movs	r3, #0
 8002152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002154:	2308      	movs	r3, #8
 8002156:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002158:	23a8      	movs	r3, #168	@ 0xa8
 800215a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800215c:	2302      	movs	r3, #2
 800215e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002160:	2304      	movs	r3, #4
 8002162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002164:	f107 0320 	add.w	r3, r7, #32
 8002168:	4618      	mov	r0, r3
 800216a:	f001 ffcd 	bl	8004108 <HAL_RCC_OscConfig>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002174:	f000 fc1a 	bl	80029ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002178:	230f      	movs	r3, #15
 800217a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800217c:	2302      	movs	r3, #2
 800217e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002184:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002188:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800218a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800218e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2105      	movs	r1, #5
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fa2e 	bl	80045f8 <HAL_RCC_ClockConfig>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021a2:	f000 fc03 	bl	80029ac <Error_Handler>
  }
}
 80021a6:	bf00      	nop
 80021a8:	3750      	adds	r7, #80	@ 0x50
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40007000 	.word	0x40007000

080021b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	2224      	movs	r2, #36	@ 0x24
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f006 fcc5 	bl	8008b56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021d4:	4b22      	ldr	r3, [pc, #136]	@ (8002260 <MX_TIM1_Init+0xa8>)
 80021d6:	4a23      	ldr	r2, [pc, #140]	@ (8002264 <MX_TIM1_Init+0xac>)
 80021d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021da:	4b21      	ldr	r3, [pc, #132]	@ (8002260 <MX_TIM1_Init+0xa8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002260 <MX_TIM1_Init+0xa8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002260 <MX_TIM1_Init+0xa8>)
 80021e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <MX_TIM1_Init+0xa8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <MX_TIM1_Init+0xa8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <MX_TIM1_Init+0xa8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002200:	2303      	movs	r3, #3
 8002202:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002208:	2301      	movs	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002218:	2301      	movs	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4619      	mov	r1, r3
 800222a:	480d      	ldr	r0, [pc, #52]	@ (8002260 <MX_TIM1_Init+0xa8>)
 800222c:	f002 fe4e 	bl	8004ecc <HAL_TIM_Encoder_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002236:	f000 fbb9 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4806      	ldr	r0, [pc, #24]	@ (8002260 <MX_TIM1_Init+0xa8>)
 8002248:	f003 fd32 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002252:	f000 fbab 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	3730      	adds	r7, #48	@ 0x30
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200002d4 	.word	0x200002d4
 8002264:	40010000 	.word	0x40010000

08002268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	@ 0x30
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2224      	movs	r2, #36	@ 0x24
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f006 fc6d 	bl	8008b56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002284:	4b21      	ldr	r3, [pc, #132]	@ (800230c <MX_TIM2_Init+0xa4>)
 8002286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800228a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800228c:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <MX_TIM2_Init+0xa4>)
 800228e:	2200      	movs	r2, #0
 8002290:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002292:	4b1e      	ldr	r3, [pc, #120]	@ (800230c <MX_TIM2_Init+0xa4>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002298:	4b1c      	ldr	r3, [pc, #112]	@ (800230c <MX_TIM2_Init+0xa4>)
 800229a:	f04f 32ff 	mov.w	r2, #4294967295
 800229e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	@ (800230c <MX_TIM2_Init+0xa4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a6:	4b19      	ldr	r3, [pc, #100]	@ (800230c <MX_TIM2_Init+0xa4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022ac:	2303      	movs	r3, #3
 80022ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022b4:	2301      	movs	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022c4:	2301      	movs	r3, #1
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	480d      	ldr	r0, [pc, #52]	@ (800230c <MX_TIM2_Init+0xa4>)
 80022d8:	f002 fdf8 	bl	8004ecc <HAL_TIM_Encoder_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022e2:	f000 fb63 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	4619      	mov	r1, r3
 80022f2:	4806      	ldr	r0, [pc, #24]	@ (800230c <MX_TIM2_Init+0xa4>)
 80022f4:	f003 fcdc 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80022fe:	f000 fb55 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	3730      	adds	r7, #48	@ 0x30
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2000031c 	.word	0x2000031c

08002310 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	@ 0x30
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	2224      	movs	r2, #36	@ 0x24
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f006 fc19 	bl	8008b56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800232c:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <MX_TIM3_Init+0xa0>)
 800232e:	4a21      	ldr	r2, [pc, #132]	@ (80023b4 <MX_TIM3_Init+0xa4>)
 8002330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002332:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <MX_TIM3_Init+0xa0>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <MX_TIM3_Init+0xa0>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800233e:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <MX_TIM3_Init+0xa0>)
 8002340:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002344:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b1a      	ldr	r3, [pc, #104]	@ (80023b0 <MX_TIM3_Init+0xa0>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234c:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <MX_TIM3_Init+0xa0>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002352:	2303      	movs	r3, #3
 8002354:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800235a:	2301      	movs	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800236a:	2301      	movs	r3, #1
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	4619      	mov	r1, r3
 800237c:	480c      	ldr	r0, [pc, #48]	@ (80023b0 <MX_TIM3_Init+0xa0>)
 800237e:	f002 fda5 	bl	8004ecc <HAL_TIM_Encoder_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002388:	f000 fb10 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	@ (80023b0 <MX_TIM3_Init+0xa0>)
 800239a:	f003 fc89 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80023a4:	f000 fb02 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	3730      	adds	r7, #48	@ 0x30
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000364 	.word	0x20000364
 80023b4:	40000400 	.word	0x40000400

080023b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08e      	sub	sp, #56	@ 0x38
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023cc:	f107 0320 	add.w	r3, r7, #32
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
 80023e4:	615a      	str	r2, [r3, #20]
 80023e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023e8:	4b3d      	ldr	r3, [pc, #244]	@ (80024e0 <MX_TIM4_Init+0x128>)
 80023ea:	4a3e      	ldr	r2, [pc, #248]	@ (80024e4 <MX_TIM4_Init+0x12c>)
 80023ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80023ee:	4b3c      	ldr	r3, [pc, #240]	@ (80024e0 <MX_TIM4_Init+0x128>)
 80023f0:	2253      	movs	r2, #83	@ 0x53
 80023f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f4:	4b3a      	ldr	r3, [pc, #232]	@ (80024e0 <MX_TIM4_Init+0x128>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80023fa:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <MX_TIM4_Init+0x128>)
 80023fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002400:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002402:	4b37      	ldr	r3, [pc, #220]	@ (80024e0 <MX_TIM4_Init+0x128>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002408:	4b35      	ldr	r3, [pc, #212]	@ (80024e0 <MX_TIM4_Init+0x128>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800240e:	4834      	ldr	r0, [pc, #208]	@ (80024e0 <MX_TIM4_Init+0x128>)
 8002410:	f002 fb12 	bl	8004a38 <HAL_TIM_Base_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800241a:	f000 fac7 	bl	80029ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800241e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002424:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002428:	4619      	mov	r1, r3
 800242a:	482d      	ldr	r0, [pc, #180]	@ (80024e0 <MX_TIM4_Init+0x128>)
 800242c:	f003 f834 	bl	8005498 <HAL_TIM_ConfigClockSource>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002436:	f000 fab9 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800243a:	4829      	ldr	r0, [pc, #164]	@ (80024e0 <MX_TIM4_Init+0x128>)
 800243c:	f002 fc24 	bl	8004c88 <HAL_TIM_PWM_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002446:	f000 fab1 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002452:	f107 0320 	add.w	r3, r7, #32
 8002456:	4619      	mov	r1, r3
 8002458:	4821      	ldr	r0, [pc, #132]	@ (80024e0 <MX_TIM4_Init+0x128>)
 800245a:	f003 fc29 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002464:	f000 faa2 	bl	80029ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002468:	2360      	movs	r3, #96	@ 0x60
 800246a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	2200      	movs	r2, #0
 800247c:	4619      	mov	r1, r3
 800247e:	4818      	ldr	r0, [pc, #96]	@ (80024e0 <MX_TIM4_Init+0x128>)
 8002480:	f002 ff48 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800248a:	f000 fa8f 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	2204      	movs	r2, #4
 8002492:	4619      	mov	r1, r3
 8002494:	4812      	ldr	r0, [pc, #72]	@ (80024e0 <MX_TIM4_Init+0x128>)
 8002496:	f002 ff3d 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80024a0:	f000 fa84 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	2208      	movs	r2, #8
 80024a8:	4619      	mov	r1, r3
 80024aa:	480d      	ldr	r0, [pc, #52]	@ (80024e0 <MX_TIM4_Init+0x128>)
 80024ac:	f002 ff32 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80024b6:	f000 fa79 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	220c      	movs	r2, #12
 80024be:	4619      	mov	r1, r3
 80024c0:	4807      	ldr	r0, [pc, #28]	@ (80024e0 <MX_TIM4_Init+0x128>)
 80024c2:	f002 ff27 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80024cc:	f000 fa6e 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024d0:	4803      	ldr	r0, [pc, #12]	@ (80024e0 <MX_TIM4_Init+0x128>)
 80024d2:	f000 fbf9 	bl	8002cc8 <HAL_TIM_MspPostInit>

}
 80024d6:	bf00      	nop
 80024d8:	3738      	adds	r7, #56	@ 0x38
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200003ac 	.word	0x200003ac
 80024e4:	40000800 	.word	0x40000800

080024e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08c      	sub	sp, #48	@ 0x30
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	2224      	movs	r2, #36	@ 0x24
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f006 fb2d 	bl	8008b56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002504:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <MX_TIM5_Init+0xa0>)
 8002506:	4a21      	ldr	r2, [pc, #132]	@ (800258c <MX_TIM5_Init+0xa4>)
 8002508:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800250a:	4b1f      	ldr	r3, [pc, #124]	@ (8002588 <MX_TIM5_Init+0xa0>)
 800250c:	2200      	movs	r2, #0
 800250e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <MX_TIM5_Init+0xa0>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002516:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <MX_TIM5_Init+0xa0>)
 8002518:	f04f 32ff 	mov.w	r2, #4294967295
 800251c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251e:	4b1a      	ldr	r3, [pc, #104]	@ (8002588 <MX_TIM5_Init+0xa0>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002524:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <MX_TIM5_Init+0xa0>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800252a:	2303      	movs	r3, #3
 800252c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002532:	2301      	movs	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002542:	2301      	movs	r3, #1
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002546:	2300      	movs	r3, #0
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800254e:	f107 030c 	add.w	r3, r7, #12
 8002552:	4619      	mov	r1, r3
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <MX_TIM5_Init+0xa0>)
 8002556:	f002 fcb9 	bl	8004ecc <HAL_TIM_Encoder_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002560:	f000 fa24 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	@ (8002588 <MX_TIM5_Init+0xa0>)
 8002572:	f003 fb9d 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800257c:	f000 fa16 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3730      	adds	r7, #48	@ 0x30
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200003f4 	.word	0x200003f4
 800258c:	40000c00 	.word	0x40000c00

08002590 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b096      	sub	sp, #88	@ 0x58
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	611a      	str	r2, [r3, #16]
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2220      	movs	r2, #32
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f006 fac4 	bl	8008b56 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025ce:	4b44      	ldr	r3, [pc, #272]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80025d0:	4a44      	ldr	r2, [pc, #272]	@ (80026e4 <MX_TIM8_Init+0x154>)
 80025d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80025d4:	4b42      	ldr	r3, [pc, #264]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80025d6:	22a7      	movs	r2, #167	@ 0xa7
 80025d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025da:	4b41      	ldr	r3, [pc, #260]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80025e0:	4b3f      	ldr	r3, [pc, #252]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80025e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e8:	4b3d      	ldr	r3, [pc, #244]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025ee:	4b3c      	ldr	r3, [pc, #240]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f4:	4b3a      	ldr	r3, [pc, #232]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80025fa:	4839      	ldr	r0, [pc, #228]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80025fc:	f002 fa1c 	bl	8004a38 <HAL_TIM_Base_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002606:	f000 f9d1 	bl	80029ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800260e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002610:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002614:	4619      	mov	r1, r3
 8002616:	4832      	ldr	r0, [pc, #200]	@ (80026e0 <MX_TIM8_Init+0x150>)
 8002618:	f002 ff3e 	bl	8005498 <HAL_TIM_ConfigClockSource>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002622:	f000 f9c3 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002626:	482e      	ldr	r0, [pc, #184]	@ (80026e0 <MX_TIM8_Init+0x150>)
 8002628:	f002 fb2e 	bl	8004c88 <HAL_TIM_PWM_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002632:	f000 f9bb 	bl	80029ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800263e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002642:	4619      	mov	r1, r3
 8002644:	4826      	ldr	r0, [pc, #152]	@ (80026e0 <MX_TIM8_Init+0x150>)
 8002646:	f003 fb33 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002650:	f000 f9ac 	bl	80029ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002654:	2360      	movs	r3, #96	@ 0x60
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002660:	2300      	movs	r3, #0
 8002662:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002674:	2208      	movs	r2, #8
 8002676:	4619      	mov	r1, r3
 8002678:	4819      	ldr	r0, [pc, #100]	@ (80026e0 <MX_TIM8_Init+0x150>)
 800267a:	f002 fe4b 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002684:	f000 f992 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800268c:	220c      	movs	r2, #12
 800268e:	4619      	mov	r1, r3
 8002690:	4813      	ldr	r0, [pc, #76]	@ (80026e0 <MX_TIM8_Init+0x150>)
 8002692:	f002 fe3f 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800269c:	f000 f986 	bl	80029ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4807      	ldr	r0, [pc, #28]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80026c4:	f003 fb70 	bl	8005da8 <HAL_TIMEx_ConfigBreakDeadTime>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80026ce:	f000 f96d 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80026d2:	4803      	ldr	r0, [pc, #12]	@ (80026e0 <MX_TIM8_Init+0x150>)
 80026d4:	f000 faf8 	bl	8002cc8 <HAL_TIM_MspPostInit>

}
 80026d8:	bf00      	nop
 80026da:	3758      	adds	r7, #88	@ 0x58
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000043c 	.word	0x2000043c
 80026e4:	40010400 	.word	0x40010400

080026e8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	@ 0x30
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	615a      	str	r2, [r3, #20]
 800270c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800270e:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <MX_TIM9_Init+0xd4>)
 8002710:	4a2b      	ldr	r2, [pc, #172]	@ (80027c0 <MX_TIM9_Init+0xd8>)
 8002712:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8002714:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <MX_TIM9_Init+0xd4>)
 8002716:	22a7      	movs	r2, #167	@ 0xa7
 8002718:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271a:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <MX_TIM9_Init+0xd4>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002720:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <MX_TIM9_Init+0xd4>)
 8002722:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002726:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002728:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <MX_TIM9_Init+0xd4>)
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272e:	4b23      	ldr	r3, [pc, #140]	@ (80027bc <MX_TIM9_Init+0xd4>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002734:	4821      	ldr	r0, [pc, #132]	@ (80027bc <MX_TIM9_Init+0xd4>)
 8002736:	f002 f97f 	bl	8004a38 <HAL_TIM_Base_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002740:	f000 f934 	bl	80029ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002748:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800274a:	f107 0320 	add.w	r3, r7, #32
 800274e:	4619      	mov	r1, r3
 8002750:	481a      	ldr	r0, [pc, #104]	@ (80027bc <MX_TIM9_Init+0xd4>)
 8002752:	f002 fea1 	bl	8005498 <HAL_TIM_ConfigClockSource>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800275c:	f000 f926 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002760:	4816      	ldr	r0, [pc, #88]	@ (80027bc <MX_TIM9_Init+0xd4>)
 8002762:	f002 fa91 	bl	8004c88 <HAL_TIM_PWM_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800276c:	f000 f91e 	bl	80029ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002770:	2360      	movs	r3, #96	@ 0x60
 8002772:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	2200      	movs	r2, #0
 8002784:	4619      	mov	r1, r3
 8002786:	480d      	ldr	r0, [pc, #52]	@ (80027bc <MX_TIM9_Init+0xd4>)
 8002788:	f002 fdc4 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8002792:	f000 f90b 	bl	80029ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	2204      	movs	r2, #4
 800279a:	4619      	mov	r1, r3
 800279c:	4807      	ldr	r0, [pc, #28]	@ (80027bc <MX_TIM9_Init+0xd4>)
 800279e:	f002 fdb9 	bl	8005314 <HAL_TIM_PWM_ConfigChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 80027a8:	f000 f900 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80027ac:	4803      	ldr	r0, [pc, #12]	@ (80027bc <MX_TIM9_Init+0xd4>)
 80027ae:	f000 fa8b 	bl	8002cc8 <HAL_TIM_MspPostInit>

}
 80027b2:	bf00      	nop
 80027b4:	3730      	adds	r7, #48	@ 0x30
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000484 	.word	0x20000484
 80027c0:	40014000 	.word	0x40014000

080027c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027c8:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <MX_USART3_UART_Init+0x4c>)
 80027ca:	4a12      	ldr	r2, [pc, #72]	@ (8002814 <MX_USART3_UART_Init+0x50>)
 80027cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <MX_USART3_UART_Init+0x4c>)
 80027d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <MX_USART3_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <MX_USART3_UART_Init+0x4c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <MX_USART3_UART_Init+0x4c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027e8:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <MX_USART3_UART_Init+0x4c>)
 80027ea:	220c      	movs	r2, #12
 80027ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <MX_USART3_UART_Init+0x4c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <MX_USART3_UART_Init+0x4c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027fa:	4805      	ldr	r0, [pc, #20]	@ (8002810 <MX_USART3_UART_Init+0x4c>)
 80027fc:	f003 fb3a 	bl	8005e74 <HAL_UART_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002806:	f000 f8d1 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200004cc 	.word	0x200004cc
 8002814:	40004800 	.word	0x40004800

08002818 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <MX_DMA_Init+0x3c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	4a0b      	ldr	r2, [pc, #44]	@ (8002854 <MX_DMA_Init+0x3c>)
 8002828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800282c:	6313      	str	r3, [r2, #48]	@ 0x30
 800282e:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <MX_DMA_Init+0x3c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2103      	movs	r1, #3
 800283e:	200c      	movs	r0, #12
 8002840:	f000 fe25 	bl	800348e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002844:	200c      	movs	r0, #12
 8002846:	f000 fe3e 	bl	80034c6 <HAL_NVIC_EnableIRQ>

}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b4a      	ldr	r3, [pc, #296]	@ (800299c <MX_GPIO_Init+0x144>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4a49      	ldr	r2, [pc, #292]	@ (800299c <MX_GPIO_Init+0x144>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6313      	str	r3, [r2, #48]	@ 0x30
 800287e:	4b47      	ldr	r3, [pc, #284]	@ (800299c <MX_GPIO_Init+0x144>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b43      	ldr	r3, [pc, #268]	@ (800299c <MX_GPIO_Init+0x144>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	4a42      	ldr	r2, [pc, #264]	@ (800299c <MX_GPIO_Init+0x144>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6313      	str	r3, [r2, #48]	@ 0x30
 800289a:	4b40      	ldr	r3, [pc, #256]	@ (800299c <MX_GPIO_Init+0x144>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	4b3c      	ldr	r3, [pc, #240]	@ (800299c <MX_GPIO_Init+0x144>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a3b      	ldr	r2, [pc, #236]	@ (800299c <MX_GPIO_Init+0x144>)
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b6:	4b39      	ldr	r3, [pc, #228]	@ (800299c <MX_GPIO_Init+0x144>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	4b35      	ldr	r3, [pc, #212]	@ (800299c <MX_GPIO_Init+0x144>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	4a34      	ldr	r2, [pc, #208]	@ (800299c <MX_GPIO_Init+0x144>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d2:	4b32      	ldr	r3, [pc, #200]	@ (800299c <MX_GPIO_Init+0x144>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80028de:	2200      	movs	r2, #0
 80028e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028e4:	482e      	ldr	r0, [pc, #184]	@ (80029a0 <MX_GPIO_Init+0x148>)
 80028e6:	f001 fbc3 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2140      	movs	r1, #64	@ 0x40
 80028ee:	482d      	ldr	r0, [pc, #180]	@ (80029a4 <MX_GPIO_Init+0x14c>)
 80028f0:	f001 fbbe 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	4824      	ldr	r0, [pc, #144]	@ (80029a0 <MX_GPIO_Init+0x148>)
 800290e:	f001 f9fb 	bl	8003d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11;
 8002912:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8002916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002918:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800291c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291e:	2301      	movs	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	481d      	ldr	r0, [pc, #116]	@ (80029a0 <MX_GPIO_Init+0x148>)
 800292a:	f001 f9ed 	bl	8003d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800292e:	2344      	movs	r3, #68	@ 0x44
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002932:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002938:	2301      	movs	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	4819      	ldr	r0, [pc, #100]	@ (80029a8 <MX_GPIO_Init+0x150>)
 8002944:	f001 f9e0 	bl	8003d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002948:	2340      	movs	r3, #64	@ 0x40
 800294a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	2301      	movs	r3, #1
 800294e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4619      	mov	r1, r3
 800295e:	4811      	ldr	r0, [pc, #68]	@ (80029a4 <MX_GPIO_Init+0x14c>)
 8002960:	f001 f9d2 	bl	8003d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2101      	movs	r1, #1
 8002968:	2008      	movs	r0, #8
 800296a:	f000 fd90 	bl	800348e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800296e:	2008      	movs	r0, #8
 8002970:	f000 fda9 	bl	80034c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2101      	movs	r1, #1
 8002978:	2017      	movs	r0, #23
 800297a:	f000 fd88 	bl	800348e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800297e:	2017      	movs	r0, #23
 8002980:	f000 fda1 	bl	80034c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002984:	2200      	movs	r2, #0
 8002986:	2101      	movs	r1, #1
 8002988:	2028      	movs	r0, #40	@ 0x28
 800298a:	f000 fd80 	bl	800348e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800298e:	2028      	movs	r0, #40	@ 0x28
 8002990:	f000 fd99 	bl	80034c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002994:	bf00      	nop
 8002996:	3728      	adds	r7, #40	@ 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020c00 	.word	0x40020c00

080029ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <Error_Handler+0x8>

080029b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_MspInit+0x4c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b090      	sub	sp, #64	@ 0x40
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a78      	ldr	r2, [pc, #480]	@ (8002c08 <HAL_TIM_Encoder_MspInit+0x200>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d135      	bne.n	8002a96 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a2e:	4b77      	ldr	r3, [pc, #476]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	4a76      	ldr	r2, [pc, #472]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a3a:	4b74      	ldr	r3, [pc, #464]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4a:	4b70      	ldr	r3, [pc, #448]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	4a6f      	ldr	r2, [pc, #444]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a56:	4b6d      	ldr	r3, [pc, #436]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 8002a62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a74:	2301      	movs	r3, #1
 8002a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4864      	ldr	r0, [pc, #400]	@ (8002c10 <HAL_TIM_Encoder_MspInit+0x208>)
 8002a80:	f001 f942 	bl	8003d08 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2102      	movs	r1, #2
 8002a88:	2018      	movs	r0, #24
 8002a8a:	f000 fd00 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a8e:	2018      	movs	r0, #24
 8002a90:	f000 fd19 	bl	80034c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a94:	e0b3      	b.n	8002bfe <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a9e:	d14b      	bne.n	8002b38 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	4b59      	ldr	r3, [pc, #356]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	4a58      	ldr	r2, [pc, #352]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab0:	4b56      	ldr	r3, [pc, #344]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	4b52      	ldr	r3, [pc, #328]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac4:	4a51      	ldr	r2, [pc, #324]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002acc:	4b4f      	ldr	r3, [pc, #316]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	4b4b      	ldr	r3, [pc, #300]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae8:	4b48      	ldr	r3, [pc, #288]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 8002af4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b06:	2301      	movs	r3, #1
 8002b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	483f      	ldr	r0, [pc, #252]	@ (8002c10 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b12:	f001 f8f9 	bl	8003d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 8002b16:	2308      	movs	r3, #8
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b26:	2301      	movs	r3, #1
 8002b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4838      	ldr	r0, [pc, #224]	@ (8002c14 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002b32:	f001 f8e9 	bl	8003d08 <HAL_GPIO_Init>
}
 8002b36:	e062      	b.n	8002bfe <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a36      	ldr	r2, [pc, #216]	@ (8002c18 <HAL_TIM_Encoder_MspInit+0x210>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12c      	bne.n	8002b9c <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	4b31      	ldr	r3, [pc, #196]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	4a30      	ldr	r2, [pc, #192]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b52:	4b2e      	ldr	r3, [pc, #184]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b2a      	ldr	r3, [pc, #168]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a29      	ldr	r2, [pc, #164]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b27      	ldr	r3, [pc, #156]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 8002b7a:	2330      	movs	r3, #48	@ 0x30
 8002b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b92:	4619      	mov	r1, r3
 8002b94:	481f      	ldr	r0, [pc, #124]	@ (8002c14 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002b96:	f001 f8b7 	bl	8003d08 <HAL_GPIO_Init>
}
 8002b9a:	e030      	b.n	8002bfe <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c1c <HAL_TIM_Encoder_MspInit+0x214>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12b      	bne.n	8002bfe <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b18      	ldr	r3, [pc, #96]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	4a17      	ldr	r2, [pc, #92]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002bb0:	f043 0308 	orr.w	r3, r3, #8
 8002bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	4a10      	ldr	r2, [pc, #64]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c0c <HAL_TIM_Encoder_MspInit+0x204>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 8002bde:	2303      	movs	r3, #3
 8002be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2300      	movs	r3, #0
 8002bec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4805      	ldr	r0, [pc, #20]	@ (8002c10 <HAL_TIM_Encoder_MspInit+0x208>)
 8002bfa:	f001 f885 	bl	8003d08 <HAL_GPIO_Init>
}
 8002bfe:	bf00      	nop
 8002c00:	3740      	adds	r7, #64	@ 0x40
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000c00 	.word	0x40000c00

08002c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a22      	ldr	r2, [pc, #136]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x98>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	4b21      	ldr	r3, [pc, #132]	@ (8002cbc <HAL_TIM_Base_MspInit+0x9c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <HAL_TIM_Base_MspInit+0x9c>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c42:	4b1e      	ldr	r3, [pc, #120]	@ (8002cbc <HAL_TIM_Base_MspInit+0x9c>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002c4e:	e02e      	b.n	8002cae <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <HAL_TIM_Base_MspInit+0xa0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b17      	ldr	r3, [pc, #92]	@ (8002cbc <HAL_TIM_Base_MspInit+0x9c>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	4a16      	ldr	r2, [pc, #88]	@ (8002cbc <HAL_TIM_Base_MspInit+0x9c>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6a:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <HAL_TIM_Base_MspInit+0x9c>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
}
 8002c76:	e01a      	b.n	8002cae <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM9)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a11      	ldr	r2, [pc, #68]	@ (8002cc4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d115      	bne.n	8002cae <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <HAL_TIM_Base_MspInit+0x9c>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002cbc <HAL_TIM_Base_MspInit+0x9c>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c92:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <HAL_TIM_Base_MspInit+0x9c>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	2018      	movs	r0, #24
 8002ca4:	f000 fbf3 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ca8:	2018      	movs	r0, #24
 8002caa:	f000 fc0c 	bl	80034c6 <HAL_NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40010400 	.word	0x40010400
 8002cc4:	40014000 	.word	0x40014000

08002cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	@ 0x28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a37      	ldr	r2, [pc, #220]	@ (8002dc4 <HAL_TIM_MspPostInit+0xfc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d11f      	bne.n	8002d2a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	4b36      	ldr	r3, [pc, #216]	@ (8002dc8 <HAL_TIM_MspPostInit+0x100>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a35      	ldr	r2, [pc, #212]	@ (8002dc8 <HAL_TIM_MspPostInit+0x100>)
 8002cf4:	f043 0308 	orr.w	r3, r3, #8
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b33      	ldr	r3, [pc, #204]	@ (8002dc8 <HAL_TIM_MspPostInit+0x100>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 8002d06:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2300      	movs	r3, #0
 8002d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4619      	mov	r1, r3
 8002d22:	482a      	ldr	r0, [pc, #168]	@ (8002dcc <HAL_TIM_MspPostInit+0x104>)
 8002d24:	f000 fff0 	bl	8003d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002d28:	e047      	b.n	8002dba <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a28      	ldr	r2, [pc, #160]	@ (8002dd0 <HAL_TIM_MspPostInit+0x108>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d11f      	bne.n	8002d74 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	4b23      	ldr	r3, [pc, #140]	@ (8002dc8 <HAL_TIM_MspPostInit+0x100>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	4a22      	ldr	r2, [pc, #136]	@ (8002dc8 <HAL_TIM_MspPostInit+0x100>)
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d44:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <HAL_TIM_MspPostInit+0x100>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 8002d50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d62:	2303      	movs	r3, #3
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4819      	ldr	r0, [pc, #100]	@ (8002dd4 <HAL_TIM_MspPostInit+0x10c>)
 8002d6e:	f000 ffcb 	bl	8003d08 <HAL_GPIO_Init>
}
 8002d72:	e022      	b.n	8002dba <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a17      	ldr	r2, [pc, #92]	@ (8002dd8 <HAL_TIM_MspPostInit+0x110>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d11d      	bne.n	8002dba <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <HAL_TIM_MspPostInit+0x100>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a10      	ldr	r2, [pc, #64]	@ (8002dc8 <HAL_TIM_MspPostInit+0x100>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_TIM_MspPostInit+0x100>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002daa:	2303      	movs	r3, #3
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	4809      	ldr	r0, [pc, #36]	@ (8002ddc <HAL_TIM_MspPostInit+0x114>)
 8002db6:	f000 ffa7 	bl	8003d08 <HAL_GPIO_Init>
}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	@ 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020c00 	.word	0x40020c00
 8002dd0:	40010400 	.word	0x40010400
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	40014000 	.word	0x40014000
 8002ddc:	40020000 	.word	0x40020000

08002de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a35      	ldr	r2, [pc, #212]	@ (8002ed4 <HAL_UART_MspInit+0xf4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d163      	bne.n	8002eca <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	4b34      	ldr	r3, [pc, #208]	@ (8002ed8 <HAL_UART_MspInit+0xf8>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	4a33      	ldr	r2, [pc, #204]	@ (8002ed8 <HAL_UART_MspInit+0xf8>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e12:	4b31      	ldr	r3, [pc, #196]	@ (8002ed8 <HAL_UART_MspInit+0xf8>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed8 <HAL_UART_MspInit+0xf8>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed8 <HAL_UART_MspInit+0xf8>)
 8002e28:	f043 0302 	orr.w	r3, r3, #2
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed8 <HAL_UART_MspInit+0xf8>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	4821      	ldr	r0, [pc, #132]	@ (8002edc <HAL_UART_MspInit+0xfc>)
 8002e58:	f000 ff56 	bl	8003d08 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e5e:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <HAL_UART_MspInit+0x104>)
 8002e60:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e62:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e68:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e7c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e84:	4b16      	ldr	r3, [pc, #88]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e90:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e96:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e98:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e9e:	4810      	ldr	r0, [pc, #64]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002ea0:	f000 fb30 	bl	8003504 <HAL_DMA_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002eaa:	f7ff fd7f 	bl	80029ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <HAL_UART_MspInit+0x100>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2027      	movs	r0, #39	@ 0x27
 8002ec0:	f000 fae5 	bl	800348e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ec4:	2027      	movs	r0, #39	@ 0x27
 8002ec6:	f000 fafe 	bl	80034c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002eca:	bf00      	nop
 8002ecc:	3728      	adds	r7, #40	@ 0x28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40004800 	.word	0x40004800
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	20000514 	.word	0x20000514
 8002ee4:	40026028 	.word	0x40026028

08002ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <NMI_Handler+0x4>

08002ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef4:	bf00      	nop
 8002ef6:	e7fd      	b.n	8002ef4 <HardFault_Handler+0x4>

08002ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002efc:	bf00      	nop
 8002efe:	e7fd      	b.n	8002efc <MemManage_Handler+0x4>

08002f00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <BusFault_Handler+0x4>

08002f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <UsageFault_Handler+0x4>

08002f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f3e:	f000 f995 	bl	800326c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002f4a:	2004      	movs	r0, #4
 8002f4c:	f001 f8c4 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002f58:	4802      	ldr	r0, [pc, #8]	@ (8002f64 <DMA1_Stream1_IRQHandler+0x10>)
 8002f5a:	f000 fc6b 	bl	8003834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000514 	.word	0x20000514

08002f68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002f6c:	2040      	movs	r0, #64	@ 0x40
 8002f6e:	f001 f8b3 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002f72:	2080      	movs	r0, #128	@ 0x80
 8002f74:	f001 f8b0 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f80:	4803      	ldr	r0, [pc, #12]	@ (8002f90 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002f82:	f002 f8d7 	bl	8005134 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002f86:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002f88:	f002 f8d4 	bl	8005134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200002d4 	.word	0x200002d4
 8002f94:	20000484 	.word	0x20000484

08002f98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f9c:	4802      	ldr	r0, [pc, #8]	@ (8002fa8 <USART3_IRQHandler+0x10>)
 8002f9e:	f003 f8a1 	bl	80060e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200004cc 	.word	0x200004cc

08002fac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002fb0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002fb4:	f001 f890 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002fb8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002fbc:	f001 f88c 	bl	80040d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return 1;
 8002fc8:	2301      	movs	r3, #1
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <_kill>:

int _kill(int pid, int sig)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fde:	f005 fe2f 	bl	8008c40 <__errno>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2216      	movs	r2, #22
 8002fe6:	601a      	str	r2, [r3, #0]
  return -1;
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_exit>:

void _exit (int status)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ffe7 	bl	8002fd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003006:	bf00      	nop
 8003008:	e7fd      	b.n	8003006 <_exit+0x12>

0800300a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e00a      	b.n	8003032 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800301c:	f3af 8000 	nop.w
 8003020:	4601      	mov	r1, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	60ba      	str	r2, [r7, #8]
 8003028:	b2ca      	uxtb	r2, r1
 800302a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	dbf0      	blt.n	800301c <_read+0x12>
  }

  return len;
 800303a:	687b      	ldr	r3, [r7, #4]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e009      	b.n	800306a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	60ba      	str	r2, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	3301      	adds	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	429a      	cmp	r2, r3
 8003070:	dbf1      	blt.n	8003056 <_write+0x12>
  }
  return len;
 8003072:	687b      	ldr	r3, [r7, #4]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <_close>:

int _close(int file)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030a4:	605a      	str	r2, [r3, #4]
  return 0;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <_isatty>:

int _isatty(int file)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030bc:	2301      	movs	r3, #1
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030ec:	4a14      	ldr	r2, [pc, #80]	@ (8003140 <_sbrk+0x5c>)
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <_sbrk+0x60>)
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030f8:	4b13      	ldr	r3, [pc, #76]	@ (8003148 <_sbrk+0x64>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d102      	bne.n	8003106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003100:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <_sbrk+0x64>)
 8003102:	4a12      	ldr	r2, [pc, #72]	@ (800314c <_sbrk+0x68>)
 8003104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003106:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <_sbrk+0x64>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	429a      	cmp	r2, r3
 8003112:	d207      	bcs.n	8003124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003114:	f005 fd94 	bl	8008c40 <__errno>
 8003118:	4603      	mov	r3, r0
 800311a:	220c      	movs	r2, #12
 800311c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800311e:	f04f 33ff 	mov.w	r3, #4294967295
 8003122:	e009      	b.n	8003138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003124:	4b08      	ldr	r3, [pc, #32]	@ (8003148 <_sbrk+0x64>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800312a:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <_sbrk+0x64>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	4a05      	ldr	r2, [pc, #20]	@ (8003148 <_sbrk+0x64>)
 8003134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003136:	68fb      	ldr	r3, [r7, #12]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20020000 	.word	0x20020000
 8003144:	00000400 	.word	0x00000400
 8003148:	20000908 	.word	0x20000908
 800314c:	20000a60 	.word	0x20000a60

08003150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003154:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <SystemInit+0x20>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315a:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <SystemInit+0x20>)
 800315c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8003174:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003178:	480d      	ldr	r0, [pc, #52]	@ (80031b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800317a:	490e      	ldr	r1, [pc, #56]	@ (80031b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800317c:	4a0e      	ldr	r2, [pc, #56]	@ (80031b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003180:	e002      	b.n	8003188 <LoopCopyDataInit>

08003182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003186:	3304      	adds	r3, #4

08003188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800318a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800318c:	d3f9      	bcc.n	8003182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318e:	4a0b      	ldr	r2, [pc, #44]	@ (80031bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003190:	4c0b      	ldr	r4, [pc, #44]	@ (80031c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003194:	e001      	b.n	800319a <LoopFillZerobss>

08003196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003198:	3204      	adds	r2, #4

0800319a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800319a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800319c:	d3fb      	bcc.n	8003196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800319e:	f7ff ffd7 	bl	8003150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031a2:	f005 fd53 	bl	8008c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031a6:	f7fe fe39 	bl	8001e1c <main>
  bx  lr    
 80031aa:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 80031ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031b4:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 80031b8:	0800d05c 	.word	0x0800d05c
  ldr r2, =_sbss
 80031bc:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 80031c0:	20000a5c 	.word	0x20000a5c

080031c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c4:	e7fe      	b.n	80031c4 <ADC_IRQHandler>
	...

080031c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003208 <HAL_Init+0x40>)
 80031d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <HAL_Init+0x40>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003208 <HAL_Init+0x40>)
 80031de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e4:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <HAL_Init+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a07      	ldr	r2, [pc, #28]	@ (8003208 <HAL_Init+0x40>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f0:	2003      	movs	r0, #3
 80031f2:	f000 f941 	bl	8003478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031f6:	200f      	movs	r0, #15
 80031f8:	f000 f808 	bl	800320c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031fc:	f7ff fbdc 	bl	80029b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023c00 	.word	0x40023c00

0800320c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003214:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <HAL_InitTick+0x54>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <HAL_InitTick+0x58>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003222:	fbb3 f3f1 	udiv	r3, r3, r1
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f95d 	bl	80034ea <HAL_SYSTICK_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e00e      	b.n	8003258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0f      	cmp	r3, #15
 800323e:	d80a      	bhi.n	8003256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003240:	2200      	movs	r2, #0
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f000 f921 	bl	800348e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800324c:	4a06      	ldr	r2, [pc, #24]	@ (8003268 <HAL_InitTick+0x5c>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	200000e4 	.word	0x200000e4
 8003264:	200000ec 	.word	0x200000ec
 8003268:	200000e8 	.word	0x200000e8

0800326c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_IncTick+0x20>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_IncTick+0x24>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4413      	add	r3, r2
 800327c:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <HAL_IncTick+0x24>)
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	200000ec 	.word	0x200000ec
 8003290:	2000090c 	.word	0x2000090c

08003294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return uwTick;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_GetTick+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000090c 	.word	0x2000090c

080032ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <__NVIC_SetPriorityGrouping+0x44>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c8:	4013      	ands	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032de:	4a04      	ldr	r2, [pc, #16]	@ (80032f0 <__NVIC_SetPriorityGrouping+0x44>)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	60d3      	str	r3, [r2, #12]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f8:	4b04      	ldr	r3, [pc, #16]	@ (800330c <__NVIC_GetPriorityGrouping+0x18>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f003 0307 	and.w	r3, r3, #7
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	2b00      	cmp	r3, #0
 8003320:	db0b      	blt.n	800333a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	4907      	ldr	r1, [pc, #28]	@ (8003348 <__NVIC_EnableIRQ+0x38>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	2001      	movs	r0, #1
 8003332:	fa00 f202 	lsl.w	r2, r0, r2
 8003336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000e100 	.word	0xe000e100

0800334c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	2b00      	cmp	r3, #0
 800335e:	db0a      	blt.n	8003376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	490c      	ldr	r1, [pc, #48]	@ (8003398 <__NVIC_SetPriority+0x4c>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	440b      	add	r3, r1
 8003370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003374:	e00a      	b.n	800338c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4908      	ldr	r1, [pc, #32]	@ (800339c <__NVIC_SetPriority+0x50>)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3b04      	subs	r3, #4
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	440b      	add	r3, r1
 800338a:	761a      	strb	r2, [r3, #24]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000e100 	.word	0xe000e100
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	@ 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	bf28      	it	cs
 80033be:	2304      	movcs	r3, #4
 80033c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d902      	bls.n	80033d0 <NVIC_EncodePriority+0x30>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3b03      	subs	r3, #3
 80033ce:	e000      	b.n	80033d2 <NVIC_EncodePriority+0x32>
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	4313      	orrs	r3, r2
         );
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800340c:	f3bf 8f4f 	dsb	sy
}
 8003410:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <__NVIC_SystemReset+0x24>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800341a:	4904      	ldr	r1, [pc, #16]	@ (800342c <__NVIC_SystemReset+0x24>)
 800341c:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <__NVIC_SystemReset+0x28>)
 800341e:	4313      	orrs	r3, r2
 8003420:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003422:	f3bf 8f4f 	dsb	sy
}
 8003426:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <__NVIC_SystemReset+0x20>
 800342c:	e000ed00 	.word	0xe000ed00
 8003430:	05fa0004 	.word	0x05fa0004

08003434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003444:	d301      	bcc.n	800344a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003446:	2301      	movs	r3, #1
 8003448:	e00f      	b.n	800346a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344a:	4a0a      	ldr	r2, [pc, #40]	@ (8003474 <SysTick_Config+0x40>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003452:	210f      	movs	r1, #15
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	f7ff ff78 	bl	800334c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <SysTick_Config+0x40>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003462:	4b04      	ldr	r3, [pc, #16]	@ (8003474 <SysTick_Config+0x40>)
 8003464:	2207      	movs	r2, #7
 8003466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	e000e010 	.word	0xe000e010

08003478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff13 	bl	80032ac <__NVIC_SetPriorityGrouping>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a0:	f7ff ff28 	bl	80032f4 <__NVIC_GetPriorityGrouping>
 80034a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f7ff ff78 	bl	80033a0 <NVIC_EncodePriority>
 80034b0:	4602      	mov	r2, r0
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b6:	4611      	mov	r1, r2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff47 	bl	800334c <__NVIC_SetPriority>
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff1b 	bl	8003310 <__NVIC_EnableIRQ>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80034e6:	f7ff ff8f 	bl	8003408 <__NVIC_SystemReset>

080034ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ff9e 	bl	8003434 <SysTick_Config>
 80034f8:	4603      	mov	r3, r0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003510:	f7ff fec0 	bl	8003294 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e099      	b.n	8003654 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003540:	e00f      	b.n	8003562 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003542:	f7ff fea7 	bl	8003294 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b05      	cmp	r3, #5
 800354e:	d908      	bls.n	8003562 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2203      	movs	r2, #3
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e078      	b.n	8003654 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e8      	bne.n	8003542 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4b38      	ldr	r3, [pc, #224]	@ (800365c <HAL_DMA_Init+0x158>)
 800357c:	4013      	ands	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d107      	bne.n	80035cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	4313      	orrs	r3, r2
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f023 0307 	bic.w	r3, r3, #7
 80035e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d117      	bne.n	8003626 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fb01 	bl	8003c10 <DMA_CheckFifoParam>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2240      	movs	r2, #64	@ 0x40
 8003618:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003622:	2301      	movs	r3, #1
 8003624:	e016      	b.n	8003654 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fab8 	bl	8003ba4 <DMA_CalcBaseAndBitshift>
 8003634:	4603      	mov	r3, r0
 8003636:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363c:	223f      	movs	r2, #63	@ 0x3f
 800363e:	409a      	lsls	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	f010803f 	.word	0xf010803f

08003660 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003676:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_DMA_Start_IT+0x26>
 8003682:	2302      	movs	r3, #2
 8003684:	e040      	b.n	8003708 <HAL_DMA_Start_IT+0xa8>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d12f      	bne.n	80036fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fa4a 	bl	8003b48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	223f      	movs	r2, #63	@ 0x3f
 80036ba:	409a      	lsls	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0216 	orr.w	r2, r2, #22
 80036ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0208 	orr.w	r2, r2, #8
 80036e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e005      	b.n	8003706 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003702:	2302      	movs	r3, #2
 8003704:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003706:	7dfb      	ldrb	r3, [r7, #23]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800371e:	f7ff fdb9 	bl	8003294 <HAL_GetTick>
 8003722:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d008      	beq.n	8003742 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2280      	movs	r2, #128	@ 0x80
 8003734:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e052      	b.n	80037e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0216 	bic.w	r2, r2, #22
 8003750:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003760:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <HAL_DMA_Abort+0x62>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0208 	bic.w	r2, r2, #8
 8003780:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003792:	e013      	b.n	80037bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003794:	f7ff fd7e 	bl	8003294 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d90c      	bls.n	80037bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2220      	movs	r2, #32
 80037a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2203      	movs	r2, #3
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e015      	b.n	80037e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e4      	bne.n	8003794 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	223f      	movs	r2, #63	@ 0x3f
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d004      	beq.n	800380e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2280      	movs	r2, #128	@ 0x80
 8003808:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e00c      	b.n	8003828 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2205      	movs	r2, #5
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003840:	4b8e      	ldr	r3, [pc, #568]	@ (8003a7c <HAL_DMA_IRQHandler+0x248>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a8e      	ldr	r2, [pc, #568]	@ (8003a80 <HAL_DMA_IRQHandler+0x24c>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0a9b      	lsrs	r3, r3, #10
 800384c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	2208      	movs	r2, #8
 8003860:	409a      	lsls	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01a      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0204 	bic.w	r2, r2, #4
 8003886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	2208      	movs	r2, #8
 800388e:	409a      	lsls	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d012      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c2:	2201      	movs	r2, #1
 80038c4:	409a      	lsls	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ce:	f043 0202 	orr.w	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038da:	2204      	movs	r2, #4
 80038dc:	409a      	lsls	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	2204      	movs	r2, #4
 80038fa:	409a      	lsls	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003904:	f043 0204 	orr.w	r2, r3, #4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003910:	2210      	movs	r2, #16
 8003912:	409a      	lsls	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d043      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03c      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	2210      	movs	r2, #16
 8003930:	409a      	lsls	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d018      	beq.n	8003976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d108      	bne.n	8003964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d024      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
 8003962:	e01f      	b.n	80039a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01b      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
 8003974:	e016      	b.n	80039a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d107      	bne.n	8003994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0208 	bic.w	r2, r2, #8
 8003992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a8:	2220      	movs	r2, #32
 80039aa:	409a      	lsls	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 808f 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8087 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	2220      	movs	r2, #32
 80039cc:	409a      	lsls	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b05      	cmp	r3, #5
 80039dc:	d136      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0216 	bic.w	r2, r2, #22
 80039ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <HAL_DMA_IRQHandler+0x1da>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0208 	bic.w	r2, r2, #8
 8003a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	223f      	movs	r2, #63	@ 0x3f
 8003a24:	409a      	lsls	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d07e      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
        }
        return;
 8003a4a:	e079      	b.n	8003b40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01d      	beq.n	8003a96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10d      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d031      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
 8003a78:	e02c      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
 8003a7a:	bf00      	nop
 8003a7c:	200000e4 	.word	0x200000e4
 8003a80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
 8003a94:	e01e      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10f      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0210 	bic.w	r2, r2, #16
 8003ab2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d032      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d022      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2205      	movs	r2, #5
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d307      	bcc.n	8003b1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f2      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x2cc>
 8003b1a:	e000      	b.n	8003b1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
 8003b3e:	e000      	b.n	8003b42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b40:	bf00      	nop
    }
  }
}
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b40      	cmp	r3, #64	@ 0x40
 8003b74:	d108      	bne.n	8003b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b86:	e007      	b.n	8003b98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	3b10      	subs	r3, #16
 8003bb4:	4a14      	ldr	r2, [pc, #80]	@ (8003c08 <DMA_CalcBaseAndBitshift+0x64>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bbe:	4a13      	ldr	r2, [pc, #76]	@ (8003c0c <DMA_CalcBaseAndBitshift+0x68>)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d909      	bls.n	8003be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	1d1a      	adds	r2, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003be4:	e007      	b.n	8003bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	aaaaaaab 	.word	0xaaaaaaab
 8003c0c:	0800cbfc 	.word	0x0800cbfc

08003c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d11f      	bne.n	8003c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d856      	bhi.n	8003cde <DMA_CheckFifoParam+0xce>
 8003c30:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <DMA_CheckFifoParam+0x28>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c49 	.word	0x08003c49
 8003c3c:	08003c5b 	.word	0x08003c5b
 8003c40:	08003c49 	.word	0x08003c49
 8003c44:	08003cdf 	.word	0x08003cdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d046      	beq.n	8003ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e043      	b.n	8003ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c62:	d140      	bne.n	8003ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c68:	e03d      	b.n	8003ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c72:	d121      	bne.n	8003cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d837      	bhi.n	8003cea <DMA_CheckFifoParam+0xda>
 8003c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <DMA_CheckFifoParam+0x70>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003c97 	.word	0x08003c97
 8003c88:	08003c91 	.word	0x08003c91
 8003c8c:	08003ca9 	.word	0x08003ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
      break;
 8003c94:	e030      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d025      	beq.n	8003cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca6:	e022      	b.n	8003cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cb0:	d11f      	bne.n	8003cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cb6:	e01c      	b.n	8003cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d903      	bls.n	8003cc6 <DMA_CheckFifoParam+0xb6>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d003      	beq.n	8003ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cc4:	e018      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003cca:	e015      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00e      	beq.n	8003cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	73fb      	strb	r3, [r7, #15]
      break;
 8003cdc:	e00b      	b.n	8003cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e00a      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e008      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e006      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cea:	bf00      	nop
 8003cec:	e004      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop

08003d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	@ 0x24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	e16b      	b.n	8003ffc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d24:	2201      	movs	r2, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	f040 815a 	bne.w	8003ff6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d005      	beq.n	8003d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d130      	bne.n	8003dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	2203      	movs	r2, #3
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d90:	2201      	movs	r2, #1
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 0201 	and.w	r2, r3, #1
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d017      	beq.n	8003df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d123      	bne.n	8003e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	08da      	lsrs	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3208      	adds	r2, #8
 8003e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	08da      	lsrs	r2, r3, #3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3208      	adds	r2, #8
 8003e46:	69b9      	ldr	r1, [r7, #24]
 8003e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	2203      	movs	r2, #3
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0203 	and.w	r2, r3, #3
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80b4 	beq.w	8003ff6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	4b60      	ldr	r3, [pc, #384]	@ (8004014 <HAL_GPIO_Init+0x30c>)
 8003e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e96:	4a5f      	ldr	r2, [pc, #380]	@ (8004014 <HAL_GPIO_Init+0x30c>)
 8003e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004014 <HAL_GPIO_Init+0x30c>)
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eaa:	4a5b      	ldr	r2, [pc, #364]	@ (8004018 <HAL_GPIO_Init+0x310>)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a52      	ldr	r2, [pc, #328]	@ (800401c <HAL_GPIO_Init+0x314>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <HAL_GPIO_Init+0x226>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a51      	ldr	r2, [pc, #324]	@ (8004020 <HAL_GPIO_Init+0x318>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d025      	beq.n	8003f2a <HAL_GPIO_Init+0x222>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a50      	ldr	r2, [pc, #320]	@ (8004024 <HAL_GPIO_Init+0x31c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <HAL_GPIO_Init+0x21e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a4f      	ldr	r2, [pc, #316]	@ (8004028 <HAL_GPIO_Init+0x320>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d019      	beq.n	8003f22 <HAL_GPIO_Init+0x21a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4e      	ldr	r2, [pc, #312]	@ (800402c <HAL_GPIO_Init+0x324>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0x216>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	@ (8004030 <HAL_GPIO_Init+0x328>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00d      	beq.n	8003f1a <HAL_GPIO_Init+0x212>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a4c      	ldr	r2, [pc, #304]	@ (8004034 <HAL_GPIO_Init+0x32c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <HAL_GPIO_Init+0x20e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4b      	ldr	r2, [pc, #300]	@ (8004038 <HAL_GPIO_Init+0x330>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_GPIO_Init+0x20a>
 8003f0e:	2307      	movs	r3, #7
 8003f10:	e00e      	b.n	8003f30 <HAL_GPIO_Init+0x228>
 8003f12:	2308      	movs	r3, #8
 8003f14:	e00c      	b.n	8003f30 <HAL_GPIO_Init+0x228>
 8003f16:	2306      	movs	r3, #6
 8003f18:	e00a      	b.n	8003f30 <HAL_GPIO_Init+0x228>
 8003f1a:	2305      	movs	r3, #5
 8003f1c:	e008      	b.n	8003f30 <HAL_GPIO_Init+0x228>
 8003f1e:	2304      	movs	r3, #4
 8003f20:	e006      	b.n	8003f30 <HAL_GPIO_Init+0x228>
 8003f22:	2303      	movs	r3, #3
 8003f24:	e004      	b.n	8003f30 <HAL_GPIO_Init+0x228>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e002      	b.n	8003f30 <HAL_GPIO_Init+0x228>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <HAL_GPIO_Init+0x228>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	f002 0203 	and.w	r2, r2, #3
 8003f36:	0092      	lsls	r2, r2, #2
 8003f38:	4093      	lsls	r3, r2
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f40:	4935      	ldr	r1, [pc, #212]	@ (8004018 <HAL_GPIO_Init+0x310>)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	3302      	adds	r3, #2
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800403c <HAL_GPIO_Init+0x334>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f72:	4a32      	ldr	r2, [pc, #200]	@ (800403c <HAL_GPIO_Init+0x334>)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f78:	4b30      	ldr	r3, [pc, #192]	@ (800403c <HAL_GPIO_Init+0x334>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f9c:	4a27      	ldr	r2, [pc, #156]	@ (800403c <HAL_GPIO_Init+0x334>)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fa2:	4b26      	ldr	r3, [pc, #152]	@ (800403c <HAL_GPIO_Init+0x334>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800403c <HAL_GPIO_Init+0x334>)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <HAL_GPIO_Init+0x334>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff0:	4a12      	ldr	r2, [pc, #72]	@ (800403c <HAL_GPIO_Init+0x334>)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b0f      	cmp	r3, #15
 8004000:	f67f ae90 	bls.w	8003d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	3724      	adds	r7, #36	@ 0x24
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800
 8004018:	40013800 	.word	0x40013800
 800401c:	40020000 	.word	0x40020000
 8004020:	40020400 	.word	0x40020400
 8004024:	40020800 	.word	0x40020800
 8004028:	40020c00 	.word	0x40020c00
 800402c:	40021000 	.word	0x40021000
 8004030:	40021400 	.word	0x40021400
 8004034:	40021800 	.word	0x40021800
 8004038:	40021c00 	.word	0x40021c00
 800403c:	40013c00 	.word	0x40013c00

08004040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	887b      	ldrh	r3, [r7, #2]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e001      	b.n	8004062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
 800407c:	4613      	mov	r3, r2
 800407e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004080:	787b      	ldrb	r3, [r7, #1]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800408c:	e003      	b.n	8004096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800408e:	887b      	ldrh	r3, [r7, #2]
 8004090:	041a      	lsls	r2, r3, #16
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	619a      	str	r2, [r3, #24]
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040b4:	887a      	ldrh	r2, [r7, #2]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4013      	ands	r3, r2
 80040ba:	041a      	lsls	r2, r3, #16
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	43d9      	mvns	r1, r3
 80040c0:	887b      	ldrh	r3, [r7, #2]
 80040c2:	400b      	ands	r3, r1
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	619a      	str	r2, [r3, #24]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040e2:	4b08      	ldr	r3, [pc, #32]	@ (8004104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ee:	4a05      	ldr	r2, [pc, #20]	@ (8004104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fe20 	bl	8001d3c <HAL_GPIO_EXTI_Callback>
  }
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40013c00 	.word	0x40013c00

08004108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e267      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d075      	beq.n	8004212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004126:	4b88      	ldr	r3, [pc, #544]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b04      	cmp	r3, #4
 8004130:	d00c      	beq.n	800414c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004132:	4b85      	ldr	r3, [pc, #532]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800413a:	2b08      	cmp	r3, #8
 800413c:	d112      	bne.n	8004164 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413e:	4b82      	ldr	r3, [pc, #520]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800414a:	d10b      	bne.n	8004164 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	4b7e      	ldr	r3, [pc, #504]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05b      	beq.n	8004210 <HAL_RCC_OscConfig+0x108>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d157      	bne.n	8004210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e242      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416c:	d106      	bne.n	800417c <HAL_RCC_OscConfig+0x74>
 800416e:	4b76      	ldr	r3, [pc, #472]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a75      	ldr	r2, [pc, #468]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e01d      	b.n	80041b8 <HAL_RCC_OscConfig+0xb0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x98>
 8004186:	4b70      	ldr	r3, [pc, #448]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a6f      	ldr	r2, [pc, #444]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800418c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b6d      	ldr	r3, [pc, #436]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6c      	ldr	r2, [pc, #432]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_OscConfig+0xb0>
 80041a0:	4b69      	ldr	r3, [pc, #420]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a68      	ldr	r2, [pc, #416]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b66      	ldr	r3, [pc, #408]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a65      	ldr	r2, [pc, #404]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7ff f868 	bl	8003294 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c8:	f7ff f864 	bl	8003294 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	@ 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e207      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b5b      	ldr	r3, [pc, #364]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0xc0>
 80041e6:	e014      	b.n	8004212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7ff f854 	bl	8003294 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f0:	f7ff f850 	bl	8003294 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	@ 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e1f3      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	4b51      	ldr	r3, [pc, #324]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0xe8>
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d063      	beq.n	80042e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800421e:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800422a:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004232:	2b08      	cmp	r3, #8
 8004234:	d11c      	bne.n	8004270 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004236:	4b44      	ldr	r3, [pc, #272]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d116      	bne.n	8004270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	4b41      	ldr	r3, [pc, #260]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_RCC_OscConfig+0x152>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e1c7      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4937      	ldr	r1, [pc, #220]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426e:	e03a      	b.n	80042e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004278:	4b34      	ldr	r3, [pc, #208]	@ (800434c <HAL_RCC_OscConfig+0x244>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7ff f809 	bl	8003294 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004286:	f7ff f805 	bl	8003294 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e1a8      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	4b2b      	ldr	r3, [pc, #172]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b28      	ldr	r3, [pc, #160]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4925      	ldr	r1, [pc, #148]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ba:	4b24      	ldr	r3, [pc, #144]	@ (800434c <HAL_RCC_OscConfig+0x244>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fe ffe8 	bl	8003294 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c8:	f7fe ffe4 	bl	8003294 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e187      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d036      	beq.n	8004360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <HAL_RCC_OscConfig+0x248>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fe ffc8 	bl	8003294 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004308:	f7fe ffc4 	bl	8003294 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e167      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <HAL_RCC_OscConfig+0x240>)
 800431c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x200>
 8004326:	e01b      	b.n	8004360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004328:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCC_OscConfig+0x248>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432e:	f7fe ffb1 	bl	8003294 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	e00e      	b.n	8004354 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004336:	f7fe ffad 	bl	8003294 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d907      	bls.n	8004354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e150      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
 8004348:	40023800 	.word	0x40023800
 800434c:	42470000 	.word	0x42470000
 8004350:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b88      	ldr	r3, [pc, #544]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ea      	bne.n	8004336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8097 	beq.w	800449c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004372:	4b81      	ldr	r3, [pc, #516]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b7d      	ldr	r3, [pc, #500]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	4a7c      	ldr	r2, [pc, #496]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	@ 0x40
 800438e:	4b7a      	ldr	r3, [pc, #488]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	4b77      	ldr	r3, [pc, #476]	@ (800457c <HAL_RCC_OscConfig+0x474>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d118      	bne.n	80043dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043aa:	4b74      	ldr	r3, [pc, #464]	@ (800457c <HAL_RCC_OscConfig+0x474>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a73      	ldr	r2, [pc, #460]	@ (800457c <HAL_RCC_OscConfig+0x474>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b6:	f7fe ff6d 	bl	8003294 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043be:	f7fe ff69 	bl	8003294 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e10c      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	4b6a      	ldr	r3, [pc, #424]	@ (800457c <HAL_RCC_OscConfig+0x474>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x2ea>
 80043e4:	4b64      	ldr	r3, [pc, #400]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	4a63      	ldr	r2, [pc, #396]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f0:	e01c      	b.n	800442c <HAL_RCC_OscConfig+0x324>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x30c>
 80043fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	@ 0x70
 8004406:	4b5c      	ldr	r3, [pc, #368]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a5b      	ldr	r2, [pc, #364]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0x324>
 8004414:	4b58      	ldr	r3, [pc, #352]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004418:	4a57      	ldr	r2, [pc, #348]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004420:	4b55      	ldr	r3, [pc, #340]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	4a54      	ldr	r2, [pc, #336]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004426:	f023 0304 	bic.w	r3, r3, #4
 800442a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fe ff2e 	bl	8003294 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	e00a      	b.n	8004452 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fe ff2a 	bl	8003294 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0cb      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	4b49      	ldr	r3, [pc, #292]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ee      	beq.n	800443c <HAL_RCC_OscConfig+0x334>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004460:	f7fe ff18 	bl	8003294 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004466:	e00a      	b.n	800447e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fe ff14 	bl	8003294 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0b5      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1ee      	bne.n	8004468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004490:	4b39      	ldr	r3, [pc, #228]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	4a38      	ldr	r2, [pc, #224]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800449a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a1 	beq.w	80045e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044a6:	4b34      	ldr	r3, [pc, #208]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d05c      	beq.n	800456c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d141      	bne.n	800453e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b31      	ldr	r3, [pc, #196]	@ (8004580 <HAL_RCC_OscConfig+0x478>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fe fee8 	bl	8003294 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fe fee4 	bl	8003294 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e087      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	4b27      	ldr	r3, [pc, #156]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	3b01      	subs	r3, #1
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	491b      	ldr	r1, [pc, #108]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 800450c:	4313      	orrs	r3, r2
 800450e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004510:	4b1b      	ldr	r3, [pc, #108]	@ (8004580 <HAL_RCC_OscConfig+0x478>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fe febd 	bl	8003294 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451e:	f7fe feb9 	bl	8003294 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e05c      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004530:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x416>
 800453c:	e054      	b.n	80045e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453e:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <HAL_RCC_OscConfig+0x478>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fe fea6 	bl	8003294 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fe fea2 	bl	8003294 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e045      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <HAL_RCC_OscConfig+0x470>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x444>
 800456a:	e03d      	b.n	80045e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d107      	bne.n	8004584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e038      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
 8004578:	40023800 	.word	0x40023800
 800457c:	40007000 	.word	0x40007000
 8004580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004584:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_RCC_OscConfig+0x4ec>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d028      	beq.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d121      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d11a      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045b4:	4013      	ands	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045bc:	4293      	cmp	r3, r2
 80045be:	d111      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	3b01      	subs	r3, #1
 80045ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800

080045f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0cc      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800460c:	4b68      	ldr	r3, [pc, #416]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d90c      	bls.n	8004634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b65      	ldr	r3, [pc, #404]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b63      	ldr	r3, [pc, #396]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0b8      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d020      	beq.n	8004682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800464c:	4b59      	ldr	r3, [pc, #356]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a58      	ldr	r2, [pc, #352]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004664:	4b53      	ldr	r3, [pc, #332]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a52      	ldr	r2, [pc, #328]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800466e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004670:	4b50      	ldr	r3, [pc, #320]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	494d      	ldr	r1, [pc, #308]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d044      	beq.n	8004718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	4b47      	ldr	r3, [pc, #284]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d119      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e07f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b6:	4b3f      	ldr	r3, [pc, #252]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e06f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c6:	4b3b      	ldr	r3, [pc, #236]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e067      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046d6:	4b37      	ldr	r3, [pc, #220]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f023 0203 	bic.w	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4934      	ldr	r1, [pc, #208]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e8:	f7fe fdd4 	bl	8003294 <HAL_GetTick>
 80046ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f0:	f7fe fdd0 	bl	8003294 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e04f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	4b2b      	ldr	r3, [pc, #172]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 020c 	and.w	r2, r3, #12
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	429a      	cmp	r2, r3
 8004716:	d1eb      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004718:	4b25      	ldr	r3, [pc, #148]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d20c      	bcs.n	8004740 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b22      	ldr	r3, [pc, #136]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e032      	b.n	80047a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800474c:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4916      	ldr	r1, [pc, #88]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800476a:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	490e      	ldr	r1, [pc, #56]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800477e:	f000 f821 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8004782:	4602      	mov	r2, r0
 8004784:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	490a      	ldr	r1, [pc, #40]	@ (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004790:	5ccb      	ldrb	r3, [r1, r3]
 8004792:	fa22 f303 	lsr.w	r3, r2, r3
 8004796:	4a09      	ldr	r2, [pc, #36]	@ (80047bc <HAL_RCC_ClockConfig+0x1c4>)
 8004798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800479a:	4b09      	ldr	r3, [pc, #36]	@ (80047c0 <HAL_RCC_ClockConfig+0x1c8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe fd34 	bl	800320c <HAL_InitTick>

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40023c00 	.word	0x40023c00
 80047b4:	40023800 	.word	0x40023800
 80047b8:	0800cbe4 	.word	0x0800cbe4
 80047bc:	200000e4 	.word	0x200000e4
 80047c0:	200000e8 	.word	0x200000e8

080047c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c8:	b094      	sub	sp, #80	@ 0x50
 80047ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047dc:	4b79      	ldr	r3, [pc, #484]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d00d      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x40>
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	f200 80e1 	bhi.w	80049b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x34>
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d003      	beq.n	80047fe <HAL_RCC_GetSysClockFreq+0x3a>
 80047f6:	e0db      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047f8:	4b73      	ldr	r3, [pc, #460]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80047fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047fc:	e0db      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047fe:	4b73      	ldr	r3, [pc, #460]	@ (80049cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004800:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004802:	e0d8      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004804:	4b6f      	ldr	r3, [pc, #444]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800480c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800480e:	4b6d      	ldr	r3, [pc, #436]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d063      	beq.n	80048e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481a:	4b6a      	ldr	r3, [pc, #424]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	099b      	lsrs	r3, r3, #6
 8004820:	2200      	movs	r2, #0
 8004822:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004824:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482c:	633b      	str	r3, [r7, #48]	@ 0x30
 800482e:	2300      	movs	r3, #0
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34
 8004832:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	f04f 0000 	mov.w	r0, #0
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	0159      	lsls	r1, r3, #5
 8004844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004848:	0150      	lsls	r0, r2, #5
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4621      	mov	r1, r4
 8004850:	1a51      	subs	r1, r2, r1
 8004852:	6139      	str	r1, [r7, #16]
 8004854:	4629      	mov	r1, r5
 8004856:	eb63 0301 	sbc.w	r3, r3, r1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004868:	4659      	mov	r1, fp
 800486a:	018b      	lsls	r3, r1, #6
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004872:	4651      	mov	r1, sl
 8004874:	018a      	lsls	r2, r1, #6
 8004876:	4651      	mov	r1, sl
 8004878:	ebb2 0801 	subs.w	r8, r2, r1
 800487c:	4659      	mov	r1, fp
 800487e:	eb63 0901 	sbc.w	r9, r3, r1
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800488e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004896:	4690      	mov	r8, r2
 8004898:	4699      	mov	r9, r3
 800489a:	4623      	mov	r3, r4
 800489c:	eb18 0303 	adds.w	r3, r8, r3
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	462b      	mov	r3, r5
 80048a4:	eb49 0303 	adc.w	r3, r9, r3
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048b6:	4629      	mov	r1, r5
 80048b8:	024b      	lsls	r3, r1, #9
 80048ba:	4621      	mov	r1, r4
 80048bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048c0:	4621      	mov	r1, r4
 80048c2:	024a      	lsls	r2, r1, #9
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ca:	2200      	movs	r2, #0
 80048cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048d4:	f7fc fae6 	bl	8000ea4 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4613      	mov	r3, r2
 80048de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e0:	e058      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e2:	4b38      	ldr	r3, [pc, #224]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	099b      	lsrs	r3, r3, #6
 80048e8:	2200      	movs	r2, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	4611      	mov	r1, r2
 80048ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048f2:	623b      	str	r3, [r7, #32]
 80048f4:	2300      	movs	r3, #0
 80048f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	f04f 0000 	mov.w	r0, #0
 8004904:	f04f 0100 	mov.w	r1, #0
 8004908:	0159      	lsls	r1, r3, #5
 800490a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490e:	0150      	lsls	r0, r2, #5
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4641      	mov	r1, r8
 8004916:	ebb2 0a01 	subs.w	sl, r2, r1
 800491a:	4649      	mov	r1, r9
 800491c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800492c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004930:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004934:	ebb2 040a 	subs.w	r4, r2, sl
 8004938:	eb63 050b 	sbc.w	r5, r3, fp
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	00eb      	lsls	r3, r5, #3
 8004946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800494a:	00e2      	lsls	r2, r4, #3
 800494c:	4614      	mov	r4, r2
 800494e:	461d      	mov	r5, r3
 8004950:	4643      	mov	r3, r8
 8004952:	18e3      	adds	r3, r4, r3
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	464b      	mov	r3, r9
 8004958:	eb45 0303 	adc.w	r3, r5, r3
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800496a:	4629      	mov	r1, r5
 800496c:	028b      	lsls	r3, r1, #10
 800496e:	4621      	mov	r1, r4
 8004970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004974:	4621      	mov	r1, r4
 8004976:	028a      	lsls	r2, r1, #10
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800497e:	2200      	movs	r2, #0
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	61fa      	str	r2, [r7, #28]
 8004984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004988:	f7fc fa8c 	bl	8000ea4 <__aeabi_uldivmod>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4613      	mov	r3, r2
 8004992:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004994:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	3301      	adds	r3, #1
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80049a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049ae:	e002      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3750      	adds	r7, #80	@ 0x50
 80049bc:	46bd      	mov	sp, r7
 80049be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800
 80049c8:	00f42400 	.word	0x00f42400
 80049cc:	007a1200 	.word	0x007a1200

080049d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d4:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	200000e4 	.word	0x200000e4

080049e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049ec:	f7ff fff0 	bl	80049d0 <HAL_RCC_GetHCLKFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b05      	ldr	r3, [pc, #20]	@ (8004a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	0a9b      	lsrs	r3, r3, #10
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	4903      	ldr	r1, [pc, #12]	@ (8004a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	0800cbf4 	.word	0x0800cbf4

08004a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a14:	f7ff ffdc 	bl	80049d0 <HAL_RCC_GetHCLKFreq>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0b5b      	lsrs	r3, r3, #13
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4903      	ldr	r1, [pc, #12]	@ (8004a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a26:	5ccb      	ldrb	r3, [r1, r3]
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40023800 	.word	0x40023800
 8004a34:	0800cbf4 	.word	0x0800cbf4

08004a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e041      	b.n	8004ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fe f8de 	bl	8002c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f000 fdfe 	bl	8005678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d001      	beq.n	8004af0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e046      	b.n	8004b7e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a23      	ldr	r2, [pc, #140]	@ (8004b8c <HAL_TIM_Base_Start+0xb4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d022      	beq.n	8004b48 <HAL_TIM_Base_Start+0x70>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b0a:	d01d      	beq.n	8004b48 <HAL_TIM_Base_Start+0x70>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1f      	ldr	r2, [pc, #124]	@ (8004b90 <HAL_TIM_Base_Start+0xb8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d018      	beq.n	8004b48 <HAL_TIM_Base_Start+0x70>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b94 <HAL_TIM_Base_Start+0xbc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d013      	beq.n	8004b48 <HAL_TIM_Base_Start+0x70>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1c      	ldr	r2, [pc, #112]	@ (8004b98 <HAL_TIM_Base_Start+0xc0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00e      	beq.n	8004b48 <HAL_TIM_Base_Start+0x70>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <HAL_TIM_Base_Start+0xc4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d009      	beq.n	8004b48 <HAL_TIM_Base_Start+0x70>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a19      	ldr	r2, [pc, #100]	@ (8004ba0 <HAL_TIM_Base_Start+0xc8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <HAL_TIM_Base_Start+0x70>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a18      	ldr	r2, [pc, #96]	@ (8004ba4 <HAL_TIM_Base_Start+0xcc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d111      	bne.n	8004b6c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b06      	cmp	r3, #6
 8004b58:	d010      	beq.n	8004b7c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0201 	orr.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6a:	e007      	b.n	8004b7c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40010400 	.word	0x40010400
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40001800 	.word	0x40001800

08004ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d001      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e04e      	b.n	8004c5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bea:	d01d      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1c      	ldr	r2, [pc, #112]	@ (8004c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a19      	ldr	r2, [pc, #100]	@ (8004c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a18      	ldr	r2, [pc, #96]	@ (8004c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d111      	bne.n	8004c4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d010      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	e007      	b.n	8004c5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40001800 	.word	0x40001800

08004c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e041      	b.n	8004d1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f839 	bl	8004d26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fcd6 	bl	8005678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x24>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e022      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d109      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x3e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	e015      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIM_PWM_Start+0x58>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e008      	b.n	8004da6 <HAL_TIM_PWM_Start+0x6a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07c      	b.n	8004ea8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_PWM_Start+0x82>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dbc:	e013      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0x92>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dcc:	e00b      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0xa2>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ddc:	e003      	b.n	8004de6 <HAL_TIM_PWM_Start+0xaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2201      	movs	r2, #1
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 ff38 	bl	8005c64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb0 <HAL_TIM_PWM_Start+0x174>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIM_PWM_Start+0xcc>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb4 <HAL_TIM_PWM_Start+0x178>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d101      	bne.n	8004e0c <HAL_TIM_PWM_Start+0xd0>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_TIM_PWM_Start+0xd2>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a22      	ldr	r2, [pc, #136]	@ (8004eb0 <HAL_TIM_PWM_Start+0x174>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e34:	d01d      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb8 <HAL_TIM_PWM_Start+0x17c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1d      	ldr	r2, [pc, #116]	@ (8004ebc <HAL_TIM_PWM_Start+0x180>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec0 <HAL_TIM_PWM_Start+0x184>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <HAL_TIM_PWM_Start+0x178>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a18      	ldr	r2, [pc, #96]	@ (8004ec4 <HAL_TIM_PWM_Start+0x188>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x136>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	@ (8004ec8 <HAL_TIM_PWM_Start+0x18c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d111      	bne.n	8004e96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d010      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e94:	e007      	b.n	8004ea6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40010000 	.word	0x40010000
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40001800 	.word	0x40001800

08004ecc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e097      	b.n	8005010 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fd fd87 	bl	8002a08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f10:	f023 0307 	bic.w	r3, r3, #7
 8004f14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 fba9 	bl	8005678 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004f6c:	f023 030c 	bic.w	r3, r3, #12
 8004f70:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	011a      	lsls	r2, r3, #4
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	031b      	lsls	r3, r3, #12
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005028:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005030:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005038:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005040:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d110      	bne.n	800506a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d102      	bne.n	8005054 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800504e:	7b7b      	ldrb	r3, [r7, #13]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e069      	b.n	800512c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005068:	e031      	b.n	80050ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d110      	bne.n	8005092 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005070:	7bbb      	ldrb	r3, [r7, #14]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d102      	bne.n	800507c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005076:	7b3b      	ldrb	r3, [r7, #12]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d001      	beq.n	8005080 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e055      	b.n	800512c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005090:	e01d      	b.n	80050ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d108      	bne.n	80050aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005098:	7bbb      	ldrb	r3, [r7, #14]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d105      	bne.n	80050aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800509e:	7b7b      	ldrb	r3, [r7, #13]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d102      	bne.n	80050aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050a4:	7b3b      	ldrb	r3, [r7, #12]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d001      	beq.n	80050ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e03e      	b.n	800512c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_TIM_Encoder_Start+0xc4>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d008      	beq.n	80050ec <HAL_TIM_Encoder_Start+0xd4>
 80050da:	e00f      	b.n	80050fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2201      	movs	r2, #1
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fdbd 	bl	8005c64 <TIM_CCxChannelCmd>
      break;
 80050ea:	e016      	b.n	800511a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	2104      	movs	r1, #4
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fdb5 	bl	8005c64 <TIM_CCxChannelCmd>
      break;
 80050fa:	e00e      	b.n	800511a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2201      	movs	r2, #1
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fdad 	bl	8005c64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2201      	movs	r2, #1
 8005110:	2104      	movs	r1, #4
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fda6 	bl	8005c64 <TIM_CCxChannelCmd>
      break;
 8005118:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d020      	beq.n	8005198 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01b      	beq.n	8005198 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0202 	mvn.w	r2, #2
 8005168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fa5b 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa4d 	bl	8005626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fa5e 	bl	800564e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d020      	beq.n	80051e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0204 	mvn.w	r2, #4
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa35 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa27 	bl	8005626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fa38 	bl	800564e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0208 	mvn.w	r2, #8
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2204      	movs	r2, #4
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa0f 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa01 	bl	8005626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa12 	bl	800564e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	2b00      	cmp	r3, #0
 8005238:	d020      	beq.n	800527c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0210 	mvn.w	r2, #16
 800524c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2208      	movs	r2, #8
 8005252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9e9 	bl	800563a <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f9db 	bl	8005626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f9ec 	bl	800564e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0201 	mvn.w	r2, #1
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fc f8f4 	bl	8001488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00c      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fdce 	bl	8005e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f9bd 	bl	8005662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00c      	beq.n	800530c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0220 	mvn.w	r2, #32
 8005304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fda0 	bl	8005e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800532e:	2302      	movs	r3, #2
 8005330:	e0ae      	b.n	8005490 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b0c      	cmp	r3, #12
 800533e:	f200 809f 	bhi.w	8005480 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	0800537d 	.word	0x0800537d
 800534c:	08005481 	.word	0x08005481
 8005350:	08005481 	.word	0x08005481
 8005354:	08005481 	.word	0x08005481
 8005358:	080053bd 	.word	0x080053bd
 800535c:	08005481 	.word	0x08005481
 8005360:	08005481 	.word	0x08005481
 8005364:	08005481 	.word	0x08005481
 8005368:	080053ff 	.word	0x080053ff
 800536c:	08005481 	.word	0x08005481
 8005370:	08005481 	.word	0x08005481
 8005374:	08005481 	.word	0x08005481
 8005378:	0800543f 	.word	0x0800543f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fa24 	bl	80057d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0208 	orr.w	r2, r2, #8
 8005396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0204 	bic.w	r2, r2, #4
 80053a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6999      	ldr	r1, [r3, #24]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	619a      	str	r2, [r3, #24]
      break;
 80053ba:	e064      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fa74 	bl	80058b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6999      	ldr	r1, [r3, #24]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	021a      	lsls	r2, r3, #8
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	619a      	str	r2, [r3, #24]
      break;
 80053fc:	e043      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fac9 	bl	800599c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0208 	orr.w	r2, r2, #8
 8005418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0204 	bic.w	r2, r2, #4
 8005428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69d9      	ldr	r1, [r3, #28]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	61da      	str	r2, [r3, #28]
      break;
 800543c:	e023      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fb1d 	bl	8005a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69d9      	ldr	r1, [r3, #28]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	021a      	lsls	r2, r3, #8
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	61da      	str	r2, [r3, #28]
      break;
 800547e:	e002      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
      break;
 8005484:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800548e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_TIM_ConfigClockSource+0x1c>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e0b4      	b.n	800561e <HAL_TIM_ConfigClockSource+0x186>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ec:	d03e      	beq.n	800556c <HAL_TIM_ConfigClockSource+0xd4>
 80054ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054f2:	f200 8087 	bhi.w	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fa:	f000 8086 	beq.w	800560a <HAL_TIM_ConfigClockSource+0x172>
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005502:	d87f      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b70      	cmp	r3, #112	@ 0x70
 8005506:	d01a      	beq.n	800553e <HAL_TIM_ConfigClockSource+0xa6>
 8005508:	2b70      	cmp	r3, #112	@ 0x70
 800550a:	d87b      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b60      	cmp	r3, #96	@ 0x60
 800550e:	d050      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x11a>
 8005510:	2b60      	cmp	r3, #96	@ 0x60
 8005512:	d877      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b50      	cmp	r3, #80	@ 0x50
 8005516:	d03c      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0xfa>
 8005518:	2b50      	cmp	r3, #80	@ 0x50
 800551a:	d873      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b40      	cmp	r3, #64	@ 0x40
 800551e:	d058      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x13a>
 8005520:	2b40      	cmp	r3, #64	@ 0x40
 8005522:	d86f      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b30      	cmp	r3, #48	@ 0x30
 8005526:	d064      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005528:	2b30      	cmp	r3, #48	@ 0x30
 800552a:	d86b      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d060      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d867      	bhi.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d05c      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	2b10      	cmp	r3, #16
 800553a:	d05a      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x15a>
 800553c:	e062      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800554e:	f000 fb69 	bl	8005c24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	609a      	str	r2, [r3, #8]
      break;
 800556a:	e04f      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800557c:	f000 fb52 	bl	8005c24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800558e:	609a      	str	r2, [r3, #8]
      break;
 8005590:	e03c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559e:	461a      	mov	r2, r3
 80055a0:	f000 fac6 	bl	8005b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2150      	movs	r1, #80	@ 0x50
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fb1f 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 80055b0:	e02c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 fae5 	bl	8005b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2160      	movs	r1, #96	@ 0x60
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fb0f 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 80055d0:	e01c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055de:	461a      	mov	r2, r3
 80055e0:	f000 faa6 	bl	8005b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2140      	movs	r1, #64	@ 0x40
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 faff 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 80055f0:	e00c      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f000 faf6 	bl	8005bee <TIM_ITRx_SetConfig>
      break;
 8005602:	e003      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
      break;
 8005608:	e000      	b.n	800560c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800560a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a46      	ldr	r2, [pc, #280]	@ (80057a4 <TIM_Base_SetConfig+0x12c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005696:	d00f      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a43      	ldr	r2, [pc, #268]	@ (80057a8 <TIM_Base_SetConfig+0x130>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00b      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a42      	ldr	r2, [pc, #264]	@ (80057ac <TIM_Base_SetConfig+0x134>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d007      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a41      	ldr	r2, [pc, #260]	@ (80057b0 <TIM_Base_SetConfig+0x138>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a40      	ldr	r2, [pc, #256]	@ (80057b4 <TIM_Base_SetConfig+0x13c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d108      	bne.n	80056ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a35      	ldr	r2, [pc, #212]	@ (80057a4 <TIM_Base_SetConfig+0x12c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d02b      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d8:	d027      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a32      	ldr	r2, [pc, #200]	@ (80057a8 <TIM_Base_SetConfig+0x130>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d023      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a31      	ldr	r2, [pc, #196]	@ (80057ac <TIM_Base_SetConfig+0x134>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d01f      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a30      	ldr	r2, [pc, #192]	@ (80057b0 <TIM_Base_SetConfig+0x138>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01b      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2f      	ldr	r2, [pc, #188]	@ (80057b4 <TIM_Base_SetConfig+0x13c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d017      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2e      	ldr	r2, [pc, #184]	@ (80057b8 <TIM_Base_SetConfig+0x140>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2d      	ldr	r2, [pc, #180]	@ (80057bc <TIM_Base_SetConfig+0x144>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00f      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2c      	ldr	r2, [pc, #176]	@ (80057c0 <TIM_Base_SetConfig+0x148>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2b      	ldr	r2, [pc, #172]	@ (80057c4 <TIM_Base_SetConfig+0x14c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2a      	ldr	r2, [pc, #168]	@ (80057c8 <TIM_Base_SetConfig+0x150>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a29      	ldr	r2, [pc, #164]	@ (80057cc <TIM_Base_SetConfig+0x154>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d108      	bne.n	800573c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a10      	ldr	r2, [pc, #64]	@ (80057a4 <TIM_Base_SetConfig+0x12c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_Base_SetConfig+0xf8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a12      	ldr	r2, [pc, #72]	@ (80057b4 <TIM_Base_SetConfig+0x13c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d103      	bne.n	8005778 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d105      	bne.n	8005796 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f023 0201 	bic.w	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	611a      	str	r2, [r3, #16]
  }
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40014400 	.word	0x40014400
 80057c0:	40014800 	.word	0x40014800
 80057c4:	40001800 	.word	0x40001800
 80057c8:	40001c00 	.word	0x40001c00
 80057cc:	40002000 	.word	0x40002000

080057d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f023 0201 	bic.w	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f023 0302 	bic.w	r3, r3, #2
 8005818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a20      	ldr	r2, [pc, #128]	@ (80058a8 <TIM_OC1_SetConfig+0xd8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_OC1_SetConfig+0x64>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1f      	ldr	r2, [pc, #124]	@ (80058ac <TIM_OC1_SetConfig+0xdc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d10c      	bne.n	800584e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0308 	bic.w	r3, r3, #8
 800583a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 0304 	bic.w	r3, r3, #4
 800584c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a15      	ldr	r2, [pc, #84]	@ (80058a8 <TIM_OC1_SetConfig+0xd8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_OC1_SetConfig+0x8e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a14      	ldr	r2, [pc, #80]	@ (80058ac <TIM_OC1_SetConfig+0xdc>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d111      	bne.n	8005882 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40010400 	.word	0x40010400

080058b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f023 0210 	bic.w	r2, r3, #16
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f023 0320 	bic.w	r3, r3, #32
 80058fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a22      	ldr	r2, [pc, #136]	@ (8005994 <TIM_OC2_SetConfig+0xe4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_OC2_SetConfig+0x68>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a21      	ldr	r2, [pc, #132]	@ (8005998 <TIM_OC2_SetConfig+0xe8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10d      	bne.n	8005934 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800591e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005932:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a17      	ldr	r2, [pc, #92]	@ (8005994 <TIM_OC2_SetConfig+0xe4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_OC2_SetConfig+0x94>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <TIM_OC2_SetConfig+0xe8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d113      	bne.n	800596c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800594a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40010000 	.word	0x40010000
 8005998:	40010400 	.word	0x40010400

0800599c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0303 	bic.w	r3, r3, #3
 80059d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a21      	ldr	r2, [pc, #132]	@ (8005a7c <TIM_OC3_SetConfig+0xe0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_OC3_SetConfig+0x66>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a20      	ldr	r2, [pc, #128]	@ (8005a80 <TIM_OC3_SetConfig+0xe4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10d      	bne.n	8005a1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a16      	ldr	r2, [pc, #88]	@ (8005a7c <TIM_OC3_SetConfig+0xe0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_OC3_SetConfig+0x92>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a15      	ldr	r2, [pc, #84]	@ (8005a80 <TIM_OC3_SetConfig+0xe4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d113      	bne.n	8005a56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	621a      	str	r2, [r3, #32]
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40010400 	.word	0x40010400

08005a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	031b      	lsls	r3, r3, #12
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a12      	ldr	r2, [pc, #72]	@ (8005b28 <TIM_OC4_SetConfig+0xa4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_OC4_SetConfig+0x68>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a11      	ldr	r2, [pc, #68]	@ (8005b2c <TIM_OC4_SetConfig+0xa8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d109      	bne.n	8005b00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	019b      	lsls	r3, r3, #6
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40010400 	.word	0x40010400

08005b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0201 	bic.w	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 030a 	bic.w	r3, r3, #10
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	621a      	str	r2, [r3, #32]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f023 0210 	bic.w	r2, r3, #16
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f043 0307 	orr.w	r3, r3, #7
 8005c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	609a      	str	r2, [r3, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	021a      	lsls	r2, r3, #8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	2201      	movs	r2, #1
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	43db      	mvns	r3, r3
 8005c86:	401a      	ands	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e05a      	b.n	8005d7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a21      	ldr	r2, [pc, #132]	@ (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d022      	beq.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d14:	d01d      	beq.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d018      	beq.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1b      	ldr	r2, [pc, #108]	@ (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00e      	beq.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d009      	beq.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a17      	ldr	r2, [pc, #92]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d004      	beq.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d10c      	bne.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40010000 	.word	0x40010000
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40010400 	.word	0x40010400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40001800 	.word	0x40001800

08005da8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e03d      	b.n	8005e40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e042      	b.n	8005f0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fc ffa0 	bl	8002de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2224      	movs	r2, #36	@ 0x24
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 ff85 	bl	8006dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d175      	bne.n	8006020 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <HAL_UART_Transmit+0x2c>
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e06e      	b.n	8006022 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2221      	movs	r2, #33	@ 0x21
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f52:	f7fd f99f 	bl	8003294 <HAL_GetTick>
 8005f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	88fa      	ldrh	r2, [r7, #6]
 8005f62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x6c>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f88:	e02e      	b.n	8005fe8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2200      	movs	r2, #0
 8005f92:	2180      	movs	r1, #128	@ 0x80
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 fc5d 	bl	8006854 <UART_WaitOnFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e03a      	b.n	8006022 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e007      	b.n	8005fda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1cb      	bne.n	8005f8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2140      	movs	r1, #64	@ 0x40
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fc29 	bl	8006854 <UART_WaitOnFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e006      	b.n	8006022 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e000      	b.n	8006022 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006020:	2302      	movs	r3, #2
  }
}
 8006022:	4618      	mov	r0, r3
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b08c      	sub	sp, #48	@ 0x30
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	4613      	mov	r3, r2
 8006036:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b20      	cmp	r3, #32
 8006042:	d14a      	bne.n	80060da <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e043      	b.n	80060dc <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	461a      	mov	r2, r3
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fc4e 	bl	8006908 <UART_Start_Receive_DMA>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006072:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006076:	2b00      	cmp	r3, #0
 8006078:	d12c      	bne.n	80060d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607e:	2b01      	cmp	r3, #1
 8006080:	d125      	bne.n	80060ce <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006082:	2300      	movs	r3, #0
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	617b      	str	r3, [r7, #20]
   return(result);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f043 0310 	orr.w	r3, r3, #16
 80060ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80060ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6a39      	ldr	r1, [r7, #32]
 80060be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80060cc:	e002      	b.n	80060d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80060d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060d8:	e000      	b.n	80060dc <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80060da:	2302      	movs	r3, #2
  }
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3730      	adds	r7, #48	@ 0x30
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b0ba      	sub	sp, #232	@ 0xe8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800610a:	2300      	movs	r3, #0
 800610c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10f      	bne.n	800614a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800612a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d009      	beq.n	800614a <HAL_UART_IRQHandler+0x66>
 8006136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fd81 	bl	8006c4a <UART_Receive_IT>
      return;
 8006148:	e25b      	b.n	8006602 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800614a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80de 	beq.w	8006310 <HAL_UART_IRQHandler+0x22c>
 8006154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006164:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80d1 	beq.w	8006310 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00b      	beq.n	8006192 <HAL_UART_IRQHandler+0xae>
 800617a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800617e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618a:	f043 0201 	orr.w	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <HAL_UART_IRQHandler+0xd2>
 800619e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	f043 0202 	orr.w	r2, r3, #2
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <HAL_UART_IRQHandler+0xf6>
 80061c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d2:	f043 0204 	orr.w	r2, r3, #4
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061de:	f003 0308 	and.w	r3, r3, #8
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d011      	beq.n	800620a <HAL_UART_IRQHandler+0x126>
 80061e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d105      	bne.n	80061fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006202:	f043 0208 	orr.w	r2, r3, #8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 81f2 	beq.w	80065f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <HAL_UART_IRQHandler+0x14e>
 8006220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fd0c 	bl	8006c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623c:	2b40      	cmp	r3, #64	@ 0x40
 800623e:	bf0c      	ite	eq
 8006240:	2301      	moveq	r3, #1
 8006242:	2300      	movne	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <HAL_UART_IRQHandler+0x17a>
 8006256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800625a:	2b00      	cmp	r3, #0
 800625c:	d04f      	beq.n	80062fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fc14 	bl	8006a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626e:	2b40      	cmp	r3, #64	@ 0x40
 8006270:	d141      	bne.n	80062f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3314      	adds	r3, #20
 8006278:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800628c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3314      	adds	r3, #20
 800629a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800629e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1d9      	bne.n	8006272 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d013      	beq.n	80062ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ca:	4a7e      	ldr	r2, [pc, #504]	@ (80064c4 <HAL_UART_IRQHandler+0x3e0>)
 80062cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fd fa8c 	bl	80037f0 <HAL_DMA_Abort_IT>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d016      	beq.n	800630c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062e8:	4610      	mov	r0, r2
 80062ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	e00e      	b.n	800630c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f9a8 	bl	8006644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	e00a      	b.n	800630c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9a4 	bl	8006644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fc:	e006      	b.n	800630c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f9a0 	bl	8006644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800630a:	e175      	b.n	80065f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630c:	bf00      	nop
    return;
 800630e:	e173      	b.n	80065f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006314:	2b01      	cmp	r3, #1
 8006316:	f040 814f 	bne.w	80065b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631e:	f003 0310 	and.w	r3, r3, #16
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8148 	beq.w	80065b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 8141 	beq.w	80065b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006336:	2300      	movs	r3, #0
 8006338:	60bb      	str	r3, [r7, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60bb      	str	r3, [r7, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006356:	2b40      	cmp	r3, #64	@ 0x40
 8006358:	f040 80b6 	bne.w	80064c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006368:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8145 	beq.w	80065fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800637a:	429a      	cmp	r2, r3
 800637c:	f080 813e 	bcs.w	80065fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006386:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006392:	f000 8088 	beq.w	80064a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80063c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1d9      	bne.n	8006396 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3314      	adds	r3, #20
 80063e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063f4:	f023 0301 	bic.w	r3, r3, #1
 80063f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3314      	adds	r3, #20
 8006402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006406:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800640a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800640e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006418:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e1      	bne.n	80063e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3314      	adds	r3, #20
 8006424:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800642e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3314      	adds	r3, #20
 800643e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006442:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006444:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006448:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1e3      	bne.n	800641e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	330c      	adds	r3, #12
 800646a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006476:	f023 0310 	bic.w	r3, r3, #16
 800647a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	330c      	adds	r3, #12
 8006484:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006488:	65ba      	str	r2, [r7, #88]	@ 0x58
 800648a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800648e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006490:	e841 2300 	strex	r3, r2, [r1]
 8006494:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1e3      	bne.n	8006464 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fd f935 	bl	8003710 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fa ff49 	bl	8001354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064c2:	e09b      	b.n	80065fc <HAL_UART_IRQHandler+0x518>
 80064c4:	08006b53 	.word	0x08006b53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 808e 	beq.w	8006600 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80064e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 8089 	beq.w	8006600 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006504:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006512:	647a      	str	r2, [r7, #68]	@ 0x44
 8006514:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006518:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3314      	adds	r3, #20
 800652c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	623b      	str	r3, [r7, #32]
   return(result);
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3314      	adds	r3, #20
 8006546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800654a:	633a      	str	r2, [r7, #48]	@ 0x30
 800654c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e3      	bne.n	8006526 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	330c      	adds	r3, #12
 8006572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	60fb      	str	r3, [r7, #12]
   return(result);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0310 	bic.w	r3, r3, #16
 8006582:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006590:	61fa      	str	r2, [r7, #28]
 8006592:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	69b9      	ldr	r1, [r7, #24]
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	e841 2300 	strex	r3, r2, [r1]
 800659c:	617b      	str	r3, [r7, #20]
   return(result);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e3      	bne.n	800656c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7fa fecf 	bl	8001354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065b6:	e023      	b.n	8006600 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <HAL_UART_IRQHandler+0x4f4>
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fad2 	bl	8006b7a <UART_Transmit_IT>
    return;
 80065d6:	e014      	b.n	8006602 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00e      	beq.n	8006602 <HAL_UART_IRQHandler+0x51e>
 80065e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fb12 	bl	8006c1a <UART_EndTransmit_IT>
    return;
 80065f6:	e004      	b.n	8006602 <HAL_UART_IRQHandler+0x51e>
    return;
 80065f8:	bf00      	nop
 80065fa:	e002      	b.n	8006602 <HAL_UART_IRQHandler+0x51e>
      return;
 80065fc:	bf00      	nop
 80065fe:	e000      	b.n	8006602 <HAL_UART_IRQHandler+0x51e>
      return;
 8006600:	bf00      	nop
  }
}
 8006602:	37e8      	adds	r7, #232	@ 0xe8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b09c      	sub	sp, #112	@ 0x70
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006664:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006670:	2b00      	cmp	r3, #0
 8006672:	d172      	bne.n	800675a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006676:	2200      	movs	r2, #0
 8006678:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800667a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800668a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800668c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	330c      	adds	r3, #12
 8006698:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800669a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800669c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e5      	bne.n	800667a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3314      	adds	r3, #20
 80066b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80066c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3314      	adds	r3, #20
 80066cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80066ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80066d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3314      	adds	r3, #20
 80066e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	623b      	str	r3, [r7, #32]
   return(result);
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80066fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3314      	adds	r3, #20
 8006700:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006702:	633a      	str	r2, [r7, #48]	@ 0x30
 8006704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006718:	2220      	movs	r2, #32
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800671e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006722:	2b01      	cmp	r3, #1
 8006724:	d119      	bne.n	800675a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	60fb      	str	r3, [r7, #12]
   return(result);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f023 0310 	bic.w	r3, r3, #16
 800673c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800673e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006746:	61fa      	str	r2, [r7, #28]
 8006748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	69b9      	ldr	r1, [r7, #24]
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	617b      	str	r3, [r7, #20]
   return(result);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e5      	bne.n	8006726 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800675a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800675c:	2200      	movs	r2, #0
 800675e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006764:	2b01      	cmp	r3, #1
 8006766:	d106      	bne.n	8006776 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800676a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800676c:	4619      	mov	r1, r3
 800676e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006770:	f7fa fdf0 	bl	8001354 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006774:	e002      	b.n	800677c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006776:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006778:	f7ff ff50 	bl	800661c <HAL_UART_RxCpltCallback>
}
 800677c:	bf00      	nop
 800677e:	3770      	adds	r7, #112	@ 0x70
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679c:	2b01      	cmp	r3, #1
 800679e:	d108      	bne.n	80067b2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	4619      	mov	r1, r3
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7fa fdd2 	bl	8001354 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067b0:	e002      	b.n	80067b8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff ff3c 	bl	8006630 <HAL_UART_RxHalfCpltCallback>
}
 80067b8:	bf00      	nop
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067dc:	2b80      	cmp	r3, #128	@ 0x80
 80067de:	bf0c      	ite	eq
 80067e0:	2301      	moveq	r3, #1
 80067e2:	2300      	movne	r3, #0
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b21      	cmp	r3, #33	@ 0x21
 80067f2:	d108      	bne.n	8006806 <UART_DMAError+0x46>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006800:	68b8      	ldr	r0, [r7, #8]
 8006802:	f000 f91b 	bl	8006a3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b40      	cmp	r3, #64	@ 0x40
 8006812:	bf0c      	ite	eq
 8006814:	2301      	moveq	r3, #1
 8006816:	2300      	movne	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b22      	cmp	r3, #34	@ 0x22
 8006826:	d108      	bne.n	800683a <UART_DMAError+0x7a>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2200      	movs	r2, #0
 8006832:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006834:	68b8      	ldr	r0, [r7, #8]
 8006836:	f000 f929 	bl	8006a8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683e:	f043 0210 	orr.w	r2, r3, #16
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006846:	68b8      	ldr	r0, [r7, #8]
 8006848:	f7ff fefc 	bl	8006644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006864:	e03b      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686c:	d037      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686e:	f7fc fd11 	bl	8003294 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	6a3a      	ldr	r2, [r7, #32]
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <UART_WaitOnFlagUntilTimeout+0x30>
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e03a      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d023      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0x8a>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b80      	cmp	r3, #128	@ 0x80
 800689a:	d020      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0x8a>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b40      	cmp	r3, #64	@ 0x40
 80068a0:	d01d      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d116      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 f8e0 	bl	8006a8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2208      	movs	r2, #8
 80068d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e00f      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	bf0c      	ite	eq
 80068ee:	2301      	moveq	r3, #1
 80068f0:	2300      	movne	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d0b4      	beq.n	8006866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b098      	sub	sp, #96	@ 0x60
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	88fa      	ldrh	r2, [r7, #6]
 8006920:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2222      	movs	r2, #34	@ 0x22
 800692c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006934:	4a3e      	ldr	r2, [pc, #248]	@ (8006a30 <UART_Start_Receive_DMA+0x128>)
 8006936:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	4a3d      	ldr	r2, [pc, #244]	@ (8006a34 <UART_Start_Receive_DMA+0x12c>)
 800693e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006944:	4a3c      	ldr	r2, [pc, #240]	@ (8006a38 <UART_Start_Receive_DMA+0x130>)
 8006946:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694c:	2200      	movs	r2, #0
 800694e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006950:	f107 0308 	add.w	r3, r7, #8
 8006954:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	88fb      	ldrh	r3, [r7, #6]
 8006968:	f7fc fe7a 	bl	8003660 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800696c:	2300      	movs	r3, #0
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d019      	beq.n	80069be <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800699a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800699c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069aa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80069ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80069b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e5      	bne.n	800698a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3314      	adds	r3, #20
 80069c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3314      	adds	r3, #20
 80069dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069de:	63ba      	str	r2, [r7, #56]	@ 0x38
 80069e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80069e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e5      	bne.n	80069be <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3314      	adds	r3, #20
 80069f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	617b      	str	r3, [r7, #20]
   return(result);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a08:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a12:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6a39      	ldr	r1, [r7, #32]
 8006a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3760      	adds	r7, #96	@ 0x60
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	08006659 	.word	0x08006659
 8006a34:	08006785 	.word	0x08006785
 8006a38:	080067c1 	.word	0x080067c1

08006a3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b089      	sub	sp, #36	@ 0x24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	330c      	adds	r3, #12
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	61ba      	str	r2, [r7, #24]
 8006a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6979      	ldr	r1, [r7, #20]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	613b      	str	r3, [r7, #16]
   return(result);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e5      	bne.n	8006a44 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006a80:	bf00      	nop
 8006a82:	3724      	adds	r7, #36	@ 0x24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b095      	sub	sp, #84	@ 0x54
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ab4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e5      	bne.n	8006a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f023 0301 	bic.w	r3, r3, #1
 8006ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d119      	bne.n	8006b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f023 0310 	bic.w	r3, r3, #16
 8006b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b24:	61ba      	str	r2, [r7, #24]
 8006b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6979      	ldr	r1, [r7, #20]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	613b      	str	r3, [r7, #16]
   return(result);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e5      	bne.n	8006b04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b46:	bf00      	nop
 8006b48:	3754      	adds	r7, #84	@ 0x54
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fd69 	bl	8006644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b21      	cmp	r3, #33	@ 0x21
 8006b8c:	d13e      	bne.n	8006c0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b96:	d114      	bne.n	8006bc2 <UART_Transmit_IT+0x48>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d110      	bne.n	8006bc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	1c9a      	adds	r2, r3, #2
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	621a      	str	r2, [r3, #32]
 8006bc0:	e008      	b.n	8006bd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	1c59      	adds	r1, r3, #1
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6211      	str	r1, [r2, #32]
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	4619      	mov	r1, r3
 8006be2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10f      	bne.n	8006c08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bf6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e000      	b.n	8006c0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c0c:	2302      	movs	r3, #2
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fce4 	bl	8006608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b08c      	sub	sp, #48	@ 0x30
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b22      	cmp	r3, #34	@ 0x22
 8006c5c:	f040 80ae 	bne.w	8006dbc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c68:	d117      	bne.n	8006c9a <UART_Receive_IT+0x50>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d113      	bne.n	8006c9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c92:	1c9a      	adds	r2, r3, #2
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c98:	e026      	b.n	8006ce8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cac:	d007      	beq.n	8006cbe <UART_Receive_IT+0x74>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <UART_Receive_IT+0x82>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	e008      	b.n	8006cde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d15d      	bne.n	8006db8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0220 	bic.w	r2, r2, #32
 8006d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d135      	bne.n	8006dae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	613b      	str	r3, [r7, #16]
   return(result);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f023 0310 	bic.w	r3, r3, #16
 8006d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	330c      	adds	r3, #12
 8006d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d68:	623a      	str	r2, [r7, #32]
 8006d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	69f9      	ldr	r1, [r7, #28]
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e5      	bne.n	8006d48 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d10a      	bne.n	8006da0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fa fad4 	bl	8001354 <HAL_UARTEx_RxEventCallback>
 8006dac:	e002      	b.n	8006db4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fc34 	bl	800661c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	e002      	b.n	8006dbe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e000      	b.n	8006dbe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
  }
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3730      	adds	r7, #48	@ 0x30
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dcc:	b0c0      	sub	sp, #256	@ 0x100
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	68d9      	ldr	r1, [r3, #12]
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	ea40 0301 	orr.w	r3, r0, r1
 8006df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e20:	f021 010c 	bic.w	r1, r1, #12
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e42:	6999      	ldr	r1, [r3, #24]
 8006e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	ea40 0301 	orr.w	r3, r0, r1
 8006e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4b8f      	ldr	r3, [pc, #572]	@ (8007094 <UART_SetConfig+0x2cc>)
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d005      	beq.n	8006e68 <UART_SetConfig+0xa0>
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b8d      	ldr	r3, [pc, #564]	@ (8007098 <UART_SetConfig+0x2d0>)
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d104      	bne.n	8006e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e68:	f7fd fdd2 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 8006e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e70:	e003      	b.n	8006e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e72:	f7fd fdb9 	bl	80049e8 <HAL_RCC_GetPCLK1Freq>
 8006e76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e84:	f040 810c 	bne.w	80070a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	1891      	adds	r1, r2, r2
 8006ea0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ea2:	415b      	adcs	r3, r3
 8006ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006eaa:	4621      	mov	r1, r4
 8006eac:	eb12 0801 	adds.w	r8, r2, r1
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	eb43 0901 	adc.w	r9, r3, r1
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eca:	4690      	mov	r8, r2
 8006ecc:	4699      	mov	r9, r3
 8006ece:	4623      	mov	r3, r4
 8006ed0:	eb18 0303 	adds.w	r3, r8, r3
 8006ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ed8:	462b      	mov	r3, r5
 8006eda:	eb49 0303 	adc.w	r3, r9, r3
 8006ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006eee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	18db      	adds	r3, r3, r3
 8006efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006efc:	4613      	mov	r3, r2
 8006efe:	eb42 0303 	adc.w	r3, r2, r3
 8006f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f0c:	f7f9 ffca 	bl	8000ea4 <__aeabi_uldivmod>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4b61      	ldr	r3, [pc, #388]	@ (800709c <UART_SetConfig+0x2d4>)
 8006f16:	fba3 2302 	umull	r2, r3, r3, r2
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	011c      	lsls	r4, r3, #4
 8006f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	1891      	adds	r1, r2, r2
 8006f36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f38:	415b      	adcs	r3, r3
 8006f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f40:	4641      	mov	r1, r8
 8006f42:	eb12 0a01 	adds.w	sl, r2, r1
 8006f46:	4649      	mov	r1, r9
 8006f48:	eb43 0b01 	adc.w	fp, r3, r1
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f60:	4692      	mov	sl, r2
 8006f62:	469b      	mov	fp, r3
 8006f64:	4643      	mov	r3, r8
 8006f66:	eb1a 0303 	adds.w	r3, sl, r3
 8006f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	eb4b 0303 	adc.w	r3, fp, r3
 8006f74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	18db      	adds	r3, r3, r3
 8006f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f92:	4613      	mov	r3, r2
 8006f94:	eb42 0303 	adc.w	r3, r2, r3
 8006f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006fa2:	f7f9 ff7f 	bl	8000ea4 <__aeabi_uldivmod>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	4b3b      	ldr	r3, [pc, #236]	@ (800709c <UART_SetConfig+0x2d4>)
 8006fae:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	2264      	movs	r2, #100	@ 0x64
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	1acb      	subs	r3, r1, r3
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006fc2:	4b36      	ldr	r3, [pc, #216]	@ (800709c <UART_SetConfig+0x2d4>)
 8006fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006fd0:	441c      	add	r4, r3
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fe4:	4642      	mov	r2, r8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	1891      	adds	r1, r2, r2
 8006fea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fec:	415b      	adcs	r3, r3
 8006fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	1851      	adds	r1, r2, r1
 8006ff8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	414b      	adcs	r3, r1
 8006ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007000:	f04f 0200 	mov.w	r2, #0
 8007004:	f04f 0300 	mov.w	r3, #0
 8007008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800700c:	4659      	mov	r1, fp
 800700e:	00cb      	lsls	r3, r1, #3
 8007010:	4651      	mov	r1, sl
 8007012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007016:	4651      	mov	r1, sl
 8007018:	00ca      	lsls	r2, r1, #3
 800701a:	4610      	mov	r0, r2
 800701c:	4619      	mov	r1, r3
 800701e:	4603      	mov	r3, r0
 8007020:	4642      	mov	r2, r8
 8007022:	189b      	adds	r3, r3, r2
 8007024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007028:	464b      	mov	r3, r9
 800702a:	460a      	mov	r2, r1
 800702c:	eb42 0303 	adc.w	r3, r2, r3
 8007030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007040:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007048:	460b      	mov	r3, r1
 800704a:	18db      	adds	r3, r3, r3
 800704c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800704e:	4613      	mov	r3, r2
 8007050:	eb42 0303 	adc.w	r3, r2, r3
 8007054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800705a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800705e:	f7f9 ff21 	bl	8000ea4 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <UART_SetConfig+0x2d4>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	@ 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	3332      	adds	r3, #50	@ 0x32
 800707a:	4a08      	ldr	r2, [pc, #32]	@ (800709c <UART_SetConfig+0x2d4>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	f003 0207 	and.w	r2, r3, #7
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4422      	add	r2, r4
 800708e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007090:	e106      	b.n	80072a0 <UART_SetConfig+0x4d8>
 8007092:	bf00      	nop
 8007094:	40011000 	.word	0x40011000
 8007098:	40011400 	.word	0x40011400
 800709c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80070ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80070b2:	4642      	mov	r2, r8
 80070b4:	464b      	mov	r3, r9
 80070b6:	1891      	adds	r1, r2, r2
 80070b8:	6239      	str	r1, [r7, #32]
 80070ba:	415b      	adcs	r3, r3
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80070be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070c2:	4641      	mov	r1, r8
 80070c4:	1854      	adds	r4, r2, r1
 80070c6:	4649      	mov	r1, r9
 80070c8:	eb43 0501 	adc.w	r5, r3, r1
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	00eb      	lsls	r3, r5, #3
 80070d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070da:	00e2      	lsls	r2, r4, #3
 80070dc:	4614      	mov	r4, r2
 80070de:	461d      	mov	r5, r3
 80070e0:	4643      	mov	r3, r8
 80070e2:	18e3      	adds	r3, r4, r3
 80070e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070e8:	464b      	mov	r3, r9
 80070ea:	eb45 0303 	adc.w	r3, r5, r3
 80070ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800710e:	4629      	mov	r1, r5
 8007110:	008b      	lsls	r3, r1, #2
 8007112:	4621      	mov	r1, r4
 8007114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007118:	4621      	mov	r1, r4
 800711a:	008a      	lsls	r2, r1, #2
 800711c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007120:	f7f9 fec0 	bl	8000ea4 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4b60      	ldr	r3, [pc, #384]	@ (80072ac <UART_SetConfig+0x4e4>)
 800712a:	fba3 2302 	umull	r2, r3, r3, r2
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	011c      	lsls	r4, r3, #4
 8007132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007136:	2200      	movs	r2, #0
 8007138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800713c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	1891      	adds	r1, r2, r2
 800714a:	61b9      	str	r1, [r7, #24]
 800714c:	415b      	adcs	r3, r3
 800714e:	61fb      	str	r3, [r7, #28]
 8007150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007154:	4641      	mov	r1, r8
 8007156:	1851      	adds	r1, r2, r1
 8007158:	6139      	str	r1, [r7, #16]
 800715a:	4649      	mov	r1, r9
 800715c:	414b      	adcs	r3, r1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800716c:	4659      	mov	r1, fp
 800716e:	00cb      	lsls	r3, r1, #3
 8007170:	4651      	mov	r1, sl
 8007172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007176:	4651      	mov	r1, sl
 8007178:	00ca      	lsls	r2, r1, #3
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	4603      	mov	r3, r0
 8007180:	4642      	mov	r2, r8
 8007182:	189b      	adds	r3, r3, r2
 8007184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007188:	464b      	mov	r3, r9
 800718a:	460a      	mov	r2, r1
 800718c:	eb42 0303 	adc.w	r3, r2, r3
 8007190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800719e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80071ac:	4649      	mov	r1, r9
 80071ae:	008b      	lsls	r3, r1, #2
 80071b0:	4641      	mov	r1, r8
 80071b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071b6:	4641      	mov	r1, r8
 80071b8:	008a      	lsls	r2, r1, #2
 80071ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80071be:	f7f9 fe71 	bl	8000ea4 <__aeabi_uldivmod>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4611      	mov	r1, r2
 80071c8:	4b38      	ldr	r3, [pc, #224]	@ (80072ac <UART_SetConfig+0x4e4>)
 80071ca:	fba3 2301 	umull	r2, r3, r3, r1
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	2264      	movs	r2, #100	@ 0x64
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	1acb      	subs	r3, r1, r3
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	3332      	adds	r3, #50	@ 0x32
 80071dc:	4a33      	ldr	r2, [pc, #204]	@ (80072ac <UART_SetConfig+0x4e4>)
 80071de:	fba2 2303 	umull	r2, r3, r2, r3
 80071e2:	095b      	lsrs	r3, r3, #5
 80071e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071e8:	441c      	add	r4, r3
 80071ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ee:	2200      	movs	r2, #0
 80071f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80071f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80071f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	1891      	adds	r1, r2, r2
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	415b      	adcs	r3, r3
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007208:	4641      	mov	r1, r8
 800720a:	1851      	adds	r1, r2, r1
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	4649      	mov	r1, r9
 8007210:	414b      	adcs	r3, r1
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007220:	4659      	mov	r1, fp
 8007222:	00cb      	lsls	r3, r1, #3
 8007224:	4651      	mov	r1, sl
 8007226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800722a:	4651      	mov	r1, sl
 800722c:	00ca      	lsls	r2, r1, #3
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	4603      	mov	r3, r0
 8007234:	4642      	mov	r2, r8
 8007236:	189b      	adds	r3, r3, r2
 8007238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800723a:	464b      	mov	r3, r9
 800723c:	460a      	mov	r2, r1
 800723e:	eb42 0303 	adc.w	r3, r2, r3
 8007242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	663b      	str	r3, [r7, #96]	@ 0x60
 800724e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	f04f 0300 	mov.w	r3, #0
 8007258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800725c:	4649      	mov	r1, r9
 800725e:	008b      	lsls	r3, r1, #2
 8007260:	4641      	mov	r1, r8
 8007262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007266:	4641      	mov	r1, r8
 8007268:	008a      	lsls	r2, r1, #2
 800726a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800726e:	f7f9 fe19 	bl	8000ea4 <__aeabi_uldivmod>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <UART_SetConfig+0x4e4>)
 8007278:	fba3 1302 	umull	r1, r3, r3, r2
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	2164      	movs	r1, #100	@ 0x64
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	3332      	adds	r3, #50	@ 0x32
 800728a:	4a08      	ldr	r2, [pc, #32]	@ (80072ac <UART_SetConfig+0x4e4>)
 800728c:	fba2 2303 	umull	r2, r3, r2, r3
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	f003 020f 	and.w	r2, r3, #15
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4422      	add	r2, r4
 800729e:	609a      	str	r2, [r3, #8]
}
 80072a0:	bf00      	nop
 80072a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80072a6:	46bd      	mov	sp, r7
 80072a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ac:	51eb851f 	.word	0x51eb851f

080072b0 <MOTOR_driver_setupPWM>:
 */

#include "MOTOR_DRIVER.h"
#include <math.h>
void MOTOR_driver_setupPWM(MOTOR_DRIVER_t *motor, TIM_HandleTypeDef *htimPWM,
		uint32_t CH1, uint32_t CH2) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
	motor->htimPWM = htimPWM;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	605a      	str	r2, [r3, #4]
	motor->PWM_CH1 = CH1;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	611a      	str	r2, [r3, #16]
	motor->PWM_CH2 = CH2;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH1);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fd fd2e 	bl	8004d3c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH2);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f7fd fd26 	bl	8004d3c <HAL_TIM_PWM_Start>
}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <MOTOR_driver_setupENCODER>:
void MOTOR_driver_setupENCODER(MOTOR_DRIVER_t *motor,
		TIM_HandleTypeDef *htimENC, uint32_t CH1, uint32_t CH2) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
	motor->htimENC = htimENC;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	601a      	str	r2, [r3, #0]
	motor->ENC_CH1 = CH1;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	619a      	str	r2, [r3, #24]
	motor->ENC_CH2 = CH2;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	61da      	str	r2, [r3, #28]
	HAL_TIM_Base_Start(motor->htimENC);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4618      	mov	r0, r3
 800731e:	f7fd fbdb 	bl	8004ad8 <HAL_TIM_Base_Start>
	HAL_TIM_Encoder_Start(motor->htimENC, motor->ENC_CH1 | motor->ENC_CH1);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f7fd fe73 	bl	8005018 <HAL_TIM_Encoder_Start>
}
 8007332:	bf00      	nop
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <MOTOR_driver_rotary>:
void MOTOR_driver_rotary(MOTOR_DRIVER_t *motor, float duty) {
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	ed87 0a00 	vstr	s0, [r7]
	uint16_t pwm = abs((int)duty);
 8007346:	edd7 7a00 	vldr	s15, [r7]
 800734a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800734e:	ee17 3a90 	vmov	r3, s15
 8007352:	2b00      	cmp	r3, #0
 8007354:	bfb8      	it	lt
 8007356:	425b      	neglt	r3, r3
 8007358:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, 0);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d105      	bne.n	800736e <MOTOR_driver_rotary+0x34>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2200      	movs	r2, #0
 800736a:	635a      	str	r2, [r3, #52]	@ 0x34
 800736c:	e018      	b.n	80073a0 <MOTOR_driver_rotary+0x66>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b04      	cmp	r3, #4
 8007374:	d105      	bne.n	8007382 <MOTOR_driver_rotary+0x48>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	2300      	movs	r3, #0
 800737e:	6393      	str	r3, [r2, #56]	@ 0x38
 8007380:	e00e      	b.n	80073a0 <MOTOR_driver_rotary+0x66>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b08      	cmp	r3, #8
 8007388:	d105      	bne.n	8007396 <MOTOR_driver_rotary+0x5c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8007394:	e004      	b.n	80073a0 <MOTOR_driver_rotary+0x66>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	2300      	movs	r3, #0
 800739e:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, 0);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d105      	bne.n	80073b4 <MOTOR_driver_rotary+0x7a>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2200      	movs	r2, #0
 80073b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80073b2:	e018      	b.n	80073e6 <MOTOR_driver_rotary+0xac>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	d105      	bne.n	80073c8 <MOTOR_driver_rotary+0x8e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	2300      	movs	r3, #0
 80073c4:	6393      	str	r3, [r2, #56]	@ 0x38
 80073c6:	e00e      	b.n	80073e6 <MOTOR_driver_rotary+0xac>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d105      	bne.n	80073dc <MOTOR_driver_rotary+0xa2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	2300      	movs	r3, #0
 80073d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80073da:	e004      	b.n	80073e6 <MOTOR_driver_rotary+0xac>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	2300      	movs	r3, #0
 80073e4:	6413      	str	r3, [r2, #64]	@ 0x40
	if (duty >= 0) {
 80073e6:	edd7 7a00 	vldr	s15, [r7]
 80073ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f2:	db23      	blt.n	800743c <MOTOR_driver_rotary+0x102>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)pwm);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <MOTOR_driver_rotary+0xce>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	89fa      	ldrh	r2, [r7, #14]
 8007404:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
	}
}
 8007406:	e03d      	b.n	8007484 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)pwm);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b04      	cmp	r3, #4
 800740e:	d105      	bne.n	800741c <MOTOR_driver_rotary+0xe2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	89fb      	ldrh	r3, [r7, #14]
 8007418:	6393      	str	r3, [r2, #56]	@ 0x38
 800741a:	e033      	b.n	8007484 <MOTOR_driver_rotary+0x14a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d105      	bne.n	8007430 <MOTOR_driver_rotary+0xf6>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	89fb      	ldrh	r3, [r7, #14]
 800742c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800742e:	e029      	b.n	8007484 <MOTOR_driver_rotary+0x14a>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	89fb      	ldrh	r3, [r7, #14]
 8007438:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800743a:	e023      	b.n	8007484 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d105      	bne.n	8007450 <MOTOR_driver_rotary+0x116>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	89fa      	ldrh	r2, [r7, #14]
 800744c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800744e:	e019      	b.n	8007484 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	2b04      	cmp	r3, #4
 8007456:	d105      	bne.n	8007464 <MOTOR_driver_rotary+0x12a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	89fb      	ldrh	r3, [r7, #14]
 8007460:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007462:	e00f      	b.n	8007484 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d105      	bne.n	8007478 <MOTOR_driver_rotary+0x13e>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	89fb      	ldrh	r3, [r7, #14]
 8007474:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8007476:	e005      	b.n	8007484 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	89fb      	ldrh	r3, [r7, #14]
 8007480:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8007482:	e7ff      	b.n	8007484 <MOTOR_driver_rotary+0x14a>
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <MOTOR_driver_readPosAndSpeed>:
void MOTOR_driver_readPosAndSpeed(MOTOR_DRIVER_t *motor, float *pos,
		float *speed, float Ts) {
 8007490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	ed87 0a00 	vstr	s0, [r7]
	motor->EncCount += (int16_t) motor->htimENC->Instance->CNT; // Đọc xung encoder
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074aa:	b219      	sxth	r1, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80074b2:	b209      	sxth	r1, r1
 80074b4:	17c8      	asrs	r0, r1, #31
 80074b6:	460c      	mov	r4, r1
 80074b8:	4605      	mov	r5, r0
 80074ba:	eb12 0804 	adds.w	r8, r2, r4
 80074be:	eb43 0905 	adc.w	r9, r3, r5
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	e9c3 8902 	strd	r8, r9, [r3, #8]
	__HAL_TIM_SET_COUNTER(motor->htimENC, 0); // Reset xung encoder
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2200      	movs	r2, #0
 80074d0:	625a      	str	r2, [r3, #36]	@ 0x24

	*pos = motor->pos = (float) motor->EncCount / motor->ratio; // Tính góc hiện tại của trục động cơ
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80074d8:	4610      	mov	r0, r2
 80074da:	4619      	mov	r1, r3
 80074dc:	f7f9 fca4 	bl	8000e28 <__aeabi_l2f>
 80074e0:	ee06 0a90 	vmov	s13, r0
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80074ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	601a      	str	r2, [r3, #0]
	*speed = motor->speed = (motor->pos - motor->prePos) * 1000 / Ts; // tính vận tốc xoay góc
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800750c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800753c <MOTOR_driver_readPosAndSpeed+0xac>
 8007510:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007514:	ed97 7a00 	vldr	s14, [r7]
 8007518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	edc3 7a08 	vstr	s15, [r3, #32]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6a1a      	ldr	r2, [r3, #32]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	601a      	str	r2, [r3, #0]
	motor->prePos = motor->pos;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800753c:	447a0000 	.word	0x447a0000

08007540 <MOTOR_driver_reset>:
void MOTOR_driver_reset(MOTOR_DRIVER_t *motor) {
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	motor->EncCount = 0;
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	e9c1 2302 	strd	r2, r3, [r1, #8]
	motor->pos = 0;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->prePos = 0;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->speed = 0;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	621a      	str	r2, [r3, #32]
	motor->preSpeed = 0;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_COUNTER(motor->htimENC, 0);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2200      	movs	r2, #0
 800757e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <MOTOR_setPIDVelocity>:
 *  Created on: Nov 28, 2024
 *      Author: namdhay
 */
#include "MOTOR_PID_CONTROL.h"
void MOTOR_setPIDVelocity(MOTOR_t *motor, float Kp, float Ki, float Kd,
		float Ts) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6178      	str	r0, [r7, #20]
 8007594:	ed87 0a04 	vstr	s0, [r7, #16]
 8007598:	edc7 0a03 	vstr	s1, [r7, #12]
 800759c:	ed87 1a02 	vstr	s2, [r7, #8]
 80075a0:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_init(&motor->PIDVelocity, Kp, Ki, Kd, Ts);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	edd7 1a01 	vldr	s3, [r7, #4]
 80075aa:	ed97 1a02 	vldr	s2, [r7, #8]
 80075ae:	edd7 0a03 	vldr	s1, [r7, #12]
 80075b2:	ed97 0a04 	vldr	s0, [r7, #16]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f989 	bl	80078ce <PID_init>
}
 80075bc:	bf00      	nop
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <MOTOR_setPIDPosition>:
void MOTOR_setPIDPosition(MOTOR_t *motor, float Kp, float Ki, float Kd,
		float Ts) {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6178      	str	r0, [r7, #20]
 80075cc:	ed87 0a04 	vstr	s0, [r7, #16]
 80075d0:	edc7 0a03 	vstr	s1, [r7, #12]
 80075d4:	ed87 1a02 	vstr	s2, [r7, #8]
 80075d8:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_init(&motor->PIDPosition, Kp, Ki, Kd, Ts);
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	3348      	adds	r3, #72	@ 0x48
 80075e0:	edd7 1a01 	vldr	s3, [r7, #4]
 80075e4:	ed97 1a02 	vldr	s2, [r7, #8]
 80075e8:	edd7 0a03 	vldr	s1, [r7, #12]
 80075ec:	ed97 0a04 	vldr	s0, [r7, #16]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 f96c 	bl	80078ce <PID_init>
}
 80075f6:	bf00      	nop
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <MOTOR_setOutputRange>:
void MOTOR_setOutputRange(MOTOR_t *motor, float OutMin, float OutMax) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	ed87 0a02 	vstr	s0, [r7, #8]
 800760c:	edc7 0a01 	vstr	s1, [r7, #4]
	PID_setOutputRange(&motor->PIDPosition, -900, 900);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3348      	adds	r3, #72	@ 0x48
 8007614:	eddf 0a09 	vldr	s1, [pc, #36]	@ 800763c <MOTOR_setOutputRange+0x3c>
 8007618:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8007640 <MOTOR_setOutputRange+0x40>
 800761c:	4618      	mov	r0, r3
 800761e:	f000 f993 	bl	8007948 <PID_setOutputRange>
	PID_setOutputRange(&motor->PIDVelocity, OutMin, OutMax);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	edd7 0a01 	vldr	s1, [r7, #4]
 8007628:	ed97 0a02 	vldr	s0, [r7, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f98b 	bl	8007948 <PID_setOutputRange>
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	44610000 	.word	0x44610000
 8007640:	c4610000 	.word	0xc4610000

08007644 <MOTOR_setWindupRange>:
void MOTOR_setWindupRange(MOTOR_t *motor, float OutMin, float OutMax) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007650:	edc7 0a01 	vstr	s1, [r7, #4]
	PID_setWindupGain(&motor->PIDVelocity, 0);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007678 <MOTOR_setWindupRange+0x34>
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f99c 	bl	8007998 <PID_setWindupGain>
	PID_setWindupRange(&motor->PIDVelocity, OutMin, OutMax);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	edd7 0a01 	vldr	s1, [r7, #4]
 8007666:	ed97 0a02 	vldr	s0, [r7, #8]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f980 	bl	8007970 <PID_setWindupRange>
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	00000000 	.word	0x00000000

0800767c <MOTOR_setAngle>:
void MOTOR_setAngle(MOTOR_t *motor, float setAngle) {
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	ed87 0a00 	vstr	s0, [r7]
	motor->setPoint = setAngle * motor->ratioJoint;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 800768e:	edd7 7a00 	vldr	s15, [r7]
 8007692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <MOTOR_runAngle>:
void MOTOR_runAngle(MOTOR_t *motor) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
//        PID_clear(&motor->PIDPosition);
//        PID_clear(&motor->PIDVelocity);
//        motor->preSetPoint = motor->setPoint;
//    }

	MOTOR_driver_readPosAndSpeed(motor->motorDriver, &motor->pos, &motor->speed,
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f103 01ac 	add.w	r1, r3, #172	@ 0xac
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
			motor->PIDPosition.Sample_time);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
	MOTOR_driver_readPosAndSpeed(motor->motorDriver, &motor->pos, &motor->speed,
 80076c8:	eeb0 0a67 	vmov.f32	s0, s15
 80076cc:	f7ff fee0 	bl	8007490 <MOTOR_driver_readPosAndSpeed>
	motor->error = motor->setPoint - motor->pos;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	ed93 7a26 	vldr	s14, [r3, #152]	@ 0x98
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 80076dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
//    motor->error = motor->setPoint;

// PD+PI controller
	PID_compute(&motor->PIDPosition, motor->error);  // tinh PD
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 80076f2:	eeb0 0a67 	vmov.f32	s0, s15
 80076f6:	4610      	mov	r0, r2
 80076f8:	f000 f95e 	bl	80079b8 <PID_compute>
	PID_compute(&motor->PIDVelocity, motor->PIDPosition.Output - motor->speed); // tinh PI
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	ed93 7a20 	vldr	s14, [r3, #128]	@ 0x80
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 800770a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800770e:	eeb0 0a67 	vmov.f32	s0, s15
 8007712:	4610      	mov	r0, r2
 8007714:	f000 f950 	bl	80079b8 <PID_compute>

	if (fabs(motor->pos) < motor->limitPos) {
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 800771e:	eeb0 7ae7 	vabs.f32	s14, s15
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8007728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007730:	d50b      	bpl.n	800774a <MOTOR_runAngle+0xa2>
		MOTOR_driver_rotary(motor->motorDriver, motor->PIDVelocity.Output);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800773e:	eeb0 0a67 	vmov.f32	s0, s15
 8007742:	4610      	mov	r0, r2
 8007744:	f7ff fdf9 	bl	800733a <MOTOR_driver_rotary>
	} else {
		MOTOR_driver_rotary(motor->motorDriver, 0);
	}
}
 8007748:	e007      	b.n	800775a <MOTOR_runAngle+0xb2>
		MOTOR_driver_rotary(motor->motorDriver, 0);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007750:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8007764 <MOTOR_runAngle+0xbc>
 8007754:	4618      	mov	r0, r3
 8007756:	f7ff fdf0 	bl	800733a <MOTOR_driver_rotary>
}
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	00000000 	.word	0x00000000

08007768 <MOTOR_init>:
void MOTOR_init(MOTOR_t *motor, MOTOR_DRIVER_t *motorDriver, float ratio,
		uint16_t pinSetHome, float limitPos) {
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6178      	str	r0, [r7, #20]
 8007770:	6139      	str	r1, [r7, #16]
 8007772:	ed87 0a03 	vstr	s0, [r7, #12]
 8007776:	4613      	mov	r3, r2
 8007778:	edc7 0a01 	vstr	s1, [r7, #4]
 800777c:	817b      	strh	r3, [r7, #10]
	motor->ratioJoint = ratio;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	motor->pinSetHome = 0;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2200      	movs	r2, #0
 800778a:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	motor->setPoint = 0;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f04f 0200 	mov.w	r2, #0
 8007794:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	motor->preSetPoint = 0;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	motor->error = 0;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f04f 0200 	mov.w	r2, #0
 80077a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	motor->preError = 0;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	motor->pos = 0;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	motor->speed = 0;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	motor->motorDriver = motorDriver;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	motor->limitPos = limitPos * motor->ratioJoint;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 80077d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80077dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
	MOTOR_driver_setupPWM(motor->motorDriver, motor->motorDriver->htimPWM,
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f2:	6859      	ldr	r1, [r3, #4]
			motor->motorDriver->PWM_CH1, motor->motorDriver->PWM_CH2);
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	MOTOR_driver_setupPWM(motor->motorDriver, motor->motorDriver->htimPWM,
 80077fa:	691a      	ldr	r2, [r3, #16]
			motor->motorDriver->PWM_CH1, motor->motorDriver->PWM_CH2);
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	MOTOR_driver_setupPWM(motor->motorDriver, motor->motorDriver->htimPWM,
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	f7ff fd54 	bl	80072b0 <MOTOR_driver_setupPWM>
	MOTOR_driver_setupENCODER(motor->motorDriver, motor->motorDriver->htimENC,
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007814:	6819      	ldr	r1, [r3, #0]
			motor->motorDriver->ENC_CH1, motor->motorDriver->ENC_CH2);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	MOTOR_driver_setupENCODER(motor->motorDriver, motor->motorDriver->htimENC,
 800781c:	699a      	ldr	r2, [r3, #24]
			motor->motorDriver->ENC_CH1, motor->motorDriver->ENC_CH2);
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	MOTOR_driver_setupENCODER(motor->motorDriver, motor->motorDriver->htimENC,
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f7ff fd67 	bl	80072f8 <MOTOR_driver_setupENCODER>
}
 800782a:	bf00      	nop
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <MOTOR_reset>:
void MOTOR_reset(MOTOR_t *motor) {
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
	motor->pinSetHome = 0;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	motor->setPoint = 0;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	motor->preSetPoint = 0;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	motor->error = 0;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f04f 0200 	mov.w	r2, #0
 800785c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	motor->preError = 0;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f04f 0200 	mov.w	r2, #0
 8007866:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	motor->pos = 0;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	motor->speed = 0;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	MOTOR_driver_reset(motor->motorDriver);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff fe5b 	bl	8007540 <MOTOR_driver_reset>
	PID_clear(&motor->PIDPosition);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3348      	adds	r3, #72	@ 0x48
 800788e:	4618      	mov	r0, r3
 8007890:	f000 f83c 	bl	800790c <PID_clear>
	PID_clear(&motor->PIDVelocity);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 f838 	bl	800790c <PID_clear>
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <MOTOR_getPos>:
float MOTOR_getPos(MOTOR_t *motor) {
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	return motor->pos / motor->ratioJoint;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80078b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80078bc:	eef0 7a66 	vmov.f32	s15, s13
}
 80078c0:	eeb0 0a67 	vmov.f32	s0, s15
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <PID_init>:
 *  Created on: Nov 28, 2024
 *      Author: namdhay
 */
#include "PID.h"
#include "stdint.h"
void PID_init(PID_TypeDef *pid, float Kp, float Ki, float Kd, float Sample_time) {
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b086      	sub	sp, #24
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6178      	str	r0, [r7, #20]
 80078d6:	ed87 0a04 	vstr	s0, [r7, #16]
 80078da:	edc7 0a03 	vstr	s1, [r7, #12]
 80078de:	ed87 1a02 	vstr	s2, [r7, #8]
 80078e2:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_clear(pid);
 80078e6:	6978      	ldr	r0, [r7, #20]
 80078e8:	f000 f810 	bl	800790c <PID_clear>
	pid->Kp = Kp;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	609a      	str	r2, [r3, #8]
	pid->Sample_time = Sample_time;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8007904:	bf00      	nop
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <PID_clear>:
void PID_clear(PID_TypeDef *pid) {
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	pid->PTerm = 0;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	61da      	str	r2, [r3, #28]
	pid->ITerm = 0;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	621a      	str	r2, [r3, #32]
	pid->DTerm = 0;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->Output = 0;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->FeedbackWindup = 0;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <PID_setOutputRange>:
	pid->Kd = value;
}
void PID_setSampleTime(PID_TypeDef *pid, float value) {
	pid->Sample_time = value;
}
void PID_setOutputRange(PID_TypeDef *pid, float valueMin, float valueMax) {
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	ed87 0a02 	vstr	s0, [r7, #8]
 8007954:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->OutMax = valueMax;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->OutMin = valueMin;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007964:	bf00      	nop
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <PID_setWindupRange>:
void PID_setWindupRange(PID_TypeDef *pid, float valueMin, float valueMax) {
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	ed87 0a02 	vstr	s0, [r7, #8]
 800797c:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->WindupMax = valueMax;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->WindupMin = valueMin;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800798c:	bf00      	nop
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <PID_setWindupGain>:
void PID_setWindupGain(PID_TypeDef *pid, float value) {
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	ed87 0a00 	vstr	s0, [r7]
	pid->Kb = value;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	60da      	str	r2, [r3, #12]
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <PID_compute>:
float PID_compute(PID_TypeDef *pid, float Error) {
 80079b8:	b5b0      	push	{r4, r5, r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	ed87 0a00 	vstr	s0, [r7]

	pid->PTerm = pid->Kp * Error;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	ed93 7a00 	vldr	s14, [r3]
 80079ca:	edd7 7a00 	vldr	s15, [r7]
 80079ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	edc3 7a07 	vstr	s15, [r3, #28]

	pid->ITerm += ((Error + pid->Last_error) * pid->Ki * 0.5
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	ed93 7a05 	vldr	s14, [r3, #20]
 80079de:	edd7 7a00 	vldr	s15, [r7]
 80079e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80079ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f0:	ee17 0a90 	vmov	r0, s15
 80079f4:	f7f8 fda8 	bl	8000548 <__aeabi_f2d>
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	4b75      	ldr	r3, [pc, #468]	@ (8007bd4 <PID_compute+0x21c>)
 80079fe:	f7f8 fdfb 	bl	80005f8 <__aeabi_dmul>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4614      	mov	r4, r2
 8007a08:	461d      	mov	r5, r3
			+ pid->FeedbackWindup * pid->Kb) * (pid->Sample_time / 1000.0);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	edd3 7a03 	vldr	s15, [r3, #12]
 8007a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1a:	ee17 0a90 	vmov	r0, s15
 8007a1e:	f7f8 fd93 	bl	8000548 <__aeabi_f2d>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4620      	mov	r0, r4
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7f8 fc2f 	bl	800028c <__adddf3>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4614      	mov	r4, r2
 8007a34:	461d      	mov	r5, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7f8 fd84 	bl	8000548 <__aeabi_f2d>
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	4b64      	ldr	r3, [pc, #400]	@ (8007bd8 <PID_compute+0x220>)
 8007a46:	f7f8 ff01 	bl	800084c <__aeabi_ddiv>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	f7f8 fdd1 	bl	80005f8 <__aeabi_dmul>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4614      	mov	r4, r2
 8007a5c:	461d      	mov	r5, r3
	pid->ITerm += ((Error + pid->Last_error) * pid->Ki * 0.5
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7f8 fd70 	bl	8000548 <__aeabi_f2d>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	f7f8 fc0c 	bl	800028c <__adddf3>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	f7f9 f8b4 	bl	8000be8 <__aeabi_d2f>
 8007a80:	4602      	mov	r2, r0
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	621a      	str	r2, [r3, #32]
	if (pid->ITerm > pid->WindupMax)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	ed93 7a08 	vldr	s14, [r3, #32]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8007a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a9a:	dd04      	ble.n	8007aa6 <PID_compute+0xee>
		pid->ITerm = pid->WindupMax;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	621a      	str	r2, [r3, #32]
 8007aa4:	e00e      	b.n	8007ac4 <PID_compute+0x10c>
	else if (pid->ITerm < pid->WindupMin)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	ed93 7a08 	vldr	s14, [r3, #32]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aba:	d503      	bpl.n	8007ac4 <PID_compute+0x10c>
		pid->ITerm = pid->WindupMin;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	621a      	str	r2, [r3, #32]

	pid->Delta_error = Error - pid->Last_error;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	edd3 7a05 	vldr	s15, [r3, #20]
 8007aca:	ed97 7a00 	vldr	s14, [r7]
 8007ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	pid->DTerm = pid->Kd * pid->Delta_error / (pid->Sample_time / 1000.0);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	ed93 7a02 	vldr	s14, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8007ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ae8:	ee17 0a90 	vmov	r0, s15
 8007aec:	f7f8 fd2c 	bl	8000548 <__aeabi_f2d>
 8007af0:	4604      	mov	r4, r0
 8007af2:	460d      	mov	r5, r1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7f8 fd25 	bl	8000548 <__aeabi_f2d>
 8007afe:	f04f 0200 	mov.w	r2, #0
 8007b02:	4b35      	ldr	r3, [pc, #212]	@ (8007bd8 <PID_compute+0x220>)
 8007b04:	f7f8 fea2 	bl	800084c <__aeabi_ddiv>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	4629      	mov	r1, r5
 8007b10:	f7f8 fe9c 	bl	800084c <__aeabi_ddiv>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f7f9 f864 	bl	8000be8 <__aeabi_d2f>
 8007b20:	4602      	mov	r2, r0
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->Last_error = Error;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	615a      	str	r2, [r3, #20]

	pid->Output = pid->PTerm + pid->ITerm + pid->DTerm;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	ed93 7a07 	vldr	s14, [r3, #28]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	edd3 7a08 	vldr	s15, [r3, #32]
 8007b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	if (pid->Output > pid->OutMax) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8007b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b60:	dd0f      	ble.n	8007b82 <PID_compute+0x1ca>
		pid->FeedbackWindup = pid->Output - pid->OutMax;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8007b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		pid->Output = pid->OutMax;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b80:	e01e      	b.n	8007bc0 <PID_compute+0x208>
	} else if (pid->Output < pid->OutMin) {
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b96:	d50f      	bpl.n	8007bb8 <PID_compute+0x200>
		pid->FeedbackWindup = pid->Output - pid->OutMin;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		pid->Output = pid->OutMin;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8007bb6:	e003      	b.n	8007bc0 <PID_compute+0x208>
	} else {
		pid->FeedbackWindup = 0;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f04f 0200 	mov.w	r2, #0
 8007bbe:	631a      	str	r2, [r3, #48]	@ 0x30
	}
	return pid->Output;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc4:	ee07 3a90 	vmov	s15, r3
}
 8007bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	3fe00000 	.word	0x3fe00000
 8007bd8:	408f4000 	.word	0x408f4000

08007bdc <__cvt>:
 8007bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	ec57 6b10 	vmov	r6, r7, d0
 8007be4:	2f00      	cmp	r7, #0
 8007be6:	460c      	mov	r4, r1
 8007be8:	4619      	mov	r1, r3
 8007bea:	463b      	mov	r3, r7
 8007bec:	bfbb      	ittet	lt
 8007bee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007bf2:	461f      	movlt	r7, r3
 8007bf4:	2300      	movge	r3, #0
 8007bf6:	232d      	movlt	r3, #45	@ 0x2d
 8007bf8:	700b      	strb	r3, [r1, #0]
 8007bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bfc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c00:	4691      	mov	r9, r2
 8007c02:	f023 0820 	bic.w	r8, r3, #32
 8007c06:	bfbc      	itt	lt
 8007c08:	4632      	movlt	r2, r6
 8007c0a:	4616      	movlt	r6, r2
 8007c0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c10:	d005      	beq.n	8007c1e <__cvt+0x42>
 8007c12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c16:	d100      	bne.n	8007c1a <__cvt+0x3e>
 8007c18:	3401      	adds	r4, #1
 8007c1a:	2102      	movs	r1, #2
 8007c1c:	e000      	b.n	8007c20 <__cvt+0x44>
 8007c1e:	2103      	movs	r1, #3
 8007c20:	ab03      	add	r3, sp, #12
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	ab02      	add	r3, sp, #8
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	ec47 6b10 	vmov	d0, r6, r7
 8007c2c:	4653      	mov	r3, sl
 8007c2e:	4622      	mov	r2, r4
 8007c30:	f001 f8c2 	bl	8008db8 <_dtoa_r>
 8007c34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c38:	4605      	mov	r5, r0
 8007c3a:	d119      	bne.n	8007c70 <__cvt+0x94>
 8007c3c:	f019 0f01 	tst.w	r9, #1
 8007c40:	d00e      	beq.n	8007c60 <__cvt+0x84>
 8007c42:	eb00 0904 	add.w	r9, r0, r4
 8007c46:	2200      	movs	r2, #0
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	f7f8 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c52:	b108      	cbz	r0, 8007c58 <__cvt+0x7c>
 8007c54:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c58:	2230      	movs	r2, #48	@ 0x30
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	454b      	cmp	r3, r9
 8007c5e:	d31e      	bcc.n	8007c9e <__cvt+0xc2>
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c64:	1b5b      	subs	r3, r3, r5
 8007c66:	4628      	mov	r0, r5
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	b004      	add	sp, #16
 8007c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c74:	eb00 0904 	add.w	r9, r0, r4
 8007c78:	d1e5      	bne.n	8007c46 <__cvt+0x6a>
 8007c7a:	7803      	ldrb	r3, [r0, #0]
 8007c7c:	2b30      	cmp	r3, #48	@ 0x30
 8007c7e:	d10a      	bne.n	8007c96 <__cvt+0xba>
 8007c80:	2200      	movs	r2, #0
 8007c82:	2300      	movs	r3, #0
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c8c:	b918      	cbnz	r0, 8007c96 <__cvt+0xba>
 8007c8e:	f1c4 0401 	rsb	r4, r4, #1
 8007c92:	f8ca 4000 	str.w	r4, [sl]
 8007c96:	f8da 3000 	ldr.w	r3, [sl]
 8007c9a:	4499      	add	r9, r3
 8007c9c:	e7d3      	b.n	8007c46 <__cvt+0x6a>
 8007c9e:	1c59      	adds	r1, r3, #1
 8007ca0:	9103      	str	r1, [sp, #12]
 8007ca2:	701a      	strb	r2, [r3, #0]
 8007ca4:	e7d9      	b.n	8007c5a <__cvt+0x7e>

08007ca6 <__exponent>:
 8007ca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	bfba      	itte	lt
 8007cac:	4249      	neglt	r1, r1
 8007cae:	232d      	movlt	r3, #45	@ 0x2d
 8007cb0:	232b      	movge	r3, #43	@ 0x2b
 8007cb2:	2909      	cmp	r1, #9
 8007cb4:	7002      	strb	r2, [r0, #0]
 8007cb6:	7043      	strb	r3, [r0, #1]
 8007cb8:	dd29      	ble.n	8007d0e <__exponent+0x68>
 8007cba:	f10d 0307 	add.w	r3, sp, #7
 8007cbe:	461d      	mov	r5, r3
 8007cc0:	270a      	movs	r7, #10
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cc8:	fb07 1416 	mls	r4, r7, r6, r1
 8007ccc:	3430      	adds	r4, #48	@ 0x30
 8007cce:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	2c63      	cmp	r4, #99	@ 0x63
 8007cd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cda:	4631      	mov	r1, r6
 8007cdc:	dcf1      	bgt.n	8007cc2 <__exponent+0x1c>
 8007cde:	3130      	adds	r1, #48	@ 0x30
 8007ce0:	1e94      	subs	r4, r2, #2
 8007ce2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ce6:	1c41      	adds	r1, r0, #1
 8007ce8:	4623      	mov	r3, r4
 8007cea:	42ab      	cmp	r3, r5
 8007cec:	d30a      	bcc.n	8007d04 <__exponent+0x5e>
 8007cee:	f10d 0309 	add.w	r3, sp, #9
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	42ac      	cmp	r4, r5
 8007cf6:	bf88      	it	hi
 8007cf8:	2300      	movhi	r3, #0
 8007cfa:	3302      	adds	r3, #2
 8007cfc:	4403      	add	r3, r0
 8007cfe:	1a18      	subs	r0, r3, r0
 8007d00:	b003      	add	sp, #12
 8007d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d04:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d08:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d0c:	e7ed      	b.n	8007cea <__exponent+0x44>
 8007d0e:	2330      	movs	r3, #48	@ 0x30
 8007d10:	3130      	adds	r1, #48	@ 0x30
 8007d12:	7083      	strb	r3, [r0, #2]
 8007d14:	70c1      	strb	r1, [r0, #3]
 8007d16:	1d03      	adds	r3, r0, #4
 8007d18:	e7f1      	b.n	8007cfe <__exponent+0x58>
	...

08007d1c <_printf_float>:
 8007d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	b08d      	sub	sp, #52	@ 0x34
 8007d22:	460c      	mov	r4, r1
 8007d24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d28:	4616      	mov	r6, r2
 8007d2a:	461f      	mov	r7, r3
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	f000 ff3d 	bl	8008bac <_localeconv_r>
 8007d32:	6803      	ldr	r3, [r0, #0]
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7f8 fa9a 	bl	8000270 <strlen>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d40:	f8d8 3000 	ldr.w	r3, [r8]
 8007d44:	9005      	str	r0, [sp, #20]
 8007d46:	3307      	adds	r3, #7
 8007d48:	f023 0307 	bic.w	r3, r3, #7
 8007d4c:	f103 0208 	add.w	r2, r3, #8
 8007d50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d54:	f8d4 b000 	ldr.w	fp, [r4]
 8007d58:	f8c8 2000 	str.w	r2, [r8]
 8007d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d64:	9307      	str	r3, [sp, #28]
 8007d66:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d72:	4b9c      	ldr	r3, [pc, #624]	@ (8007fe4 <_printf_float+0x2c8>)
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295
 8007d78:	f7f8 fed8 	bl	8000b2c <__aeabi_dcmpun>
 8007d7c:	bb70      	cbnz	r0, 8007ddc <_printf_float+0xc0>
 8007d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d82:	4b98      	ldr	r3, [pc, #608]	@ (8007fe4 <_printf_float+0x2c8>)
 8007d84:	f04f 32ff 	mov.w	r2, #4294967295
 8007d88:	f7f8 feb2 	bl	8000af0 <__aeabi_dcmple>
 8007d8c:	bb30      	cbnz	r0, 8007ddc <_printf_float+0xc0>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2300      	movs	r3, #0
 8007d92:	4640      	mov	r0, r8
 8007d94:	4649      	mov	r1, r9
 8007d96:	f7f8 fea1 	bl	8000adc <__aeabi_dcmplt>
 8007d9a:	b110      	cbz	r0, 8007da2 <_printf_float+0x86>
 8007d9c:	232d      	movs	r3, #45	@ 0x2d
 8007d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007da2:	4a91      	ldr	r2, [pc, #580]	@ (8007fe8 <_printf_float+0x2cc>)
 8007da4:	4b91      	ldr	r3, [pc, #580]	@ (8007fec <_printf_float+0x2d0>)
 8007da6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007daa:	bf94      	ite	ls
 8007dac:	4690      	movls	r8, r2
 8007dae:	4698      	movhi	r8, r3
 8007db0:	2303      	movs	r3, #3
 8007db2:	6123      	str	r3, [r4, #16]
 8007db4:	f02b 0304 	bic.w	r3, fp, #4
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	f04f 0900 	mov.w	r9, #0
 8007dbe:	9700      	str	r7, [sp, #0]
 8007dc0:	4633      	mov	r3, r6
 8007dc2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f9d2 	bl	8008170 <_printf_common>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	f040 808d 	bne.w	8007eec <_printf_float+0x1d0>
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd6:	b00d      	add	sp, #52	@ 0x34
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	4642      	mov	r2, r8
 8007dde:	464b      	mov	r3, r9
 8007de0:	4640      	mov	r0, r8
 8007de2:	4649      	mov	r1, r9
 8007de4:	f7f8 fea2 	bl	8000b2c <__aeabi_dcmpun>
 8007de8:	b140      	cbz	r0, 8007dfc <_printf_float+0xe0>
 8007dea:	464b      	mov	r3, r9
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfbc      	itt	lt
 8007df0:	232d      	movlt	r3, #45	@ 0x2d
 8007df2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007df6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ff0 <_printf_float+0x2d4>)
 8007df8:	4b7e      	ldr	r3, [pc, #504]	@ (8007ff4 <_printf_float+0x2d8>)
 8007dfa:	e7d4      	b.n	8007da6 <_printf_float+0x8a>
 8007dfc:	6863      	ldr	r3, [r4, #4]
 8007dfe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e02:	9206      	str	r2, [sp, #24]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	d13b      	bne.n	8007e80 <_printf_float+0x164>
 8007e08:	2306      	movs	r3, #6
 8007e0a:	6063      	str	r3, [r4, #4]
 8007e0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e10:	2300      	movs	r3, #0
 8007e12:	6022      	str	r2, [r4, #0]
 8007e14:	9303      	str	r3, [sp, #12]
 8007e16:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e1c:	ab09      	add	r3, sp, #36	@ 0x24
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	6861      	ldr	r1, [r4, #4]
 8007e22:	ec49 8b10 	vmov	d0, r8, r9
 8007e26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f7ff fed6 	bl	8007bdc <__cvt>
 8007e30:	9b06      	ldr	r3, [sp, #24]
 8007e32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e34:	2b47      	cmp	r3, #71	@ 0x47
 8007e36:	4680      	mov	r8, r0
 8007e38:	d129      	bne.n	8007e8e <_printf_float+0x172>
 8007e3a:	1cc8      	adds	r0, r1, #3
 8007e3c:	db02      	blt.n	8007e44 <_printf_float+0x128>
 8007e3e:	6863      	ldr	r3, [r4, #4]
 8007e40:	4299      	cmp	r1, r3
 8007e42:	dd41      	ble.n	8007ec8 <_printf_float+0x1ac>
 8007e44:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e48:	fa5f fa8a 	uxtb.w	sl, sl
 8007e4c:	3901      	subs	r1, #1
 8007e4e:	4652      	mov	r2, sl
 8007e50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e54:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e56:	f7ff ff26 	bl	8007ca6 <__exponent>
 8007e5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e5c:	1813      	adds	r3, r2, r0
 8007e5e:	2a01      	cmp	r2, #1
 8007e60:	4681      	mov	r9, r0
 8007e62:	6123      	str	r3, [r4, #16]
 8007e64:	dc02      	bgt.n	8007e6c <_printf_float+0x150>
 8007e66:	6822      	ldr	r2, [r4, #0]
 8007e68:	07d2      	lsls	r2, r2, #31
 8007e6a:	d501      	bpl.n	8007e70 <_printf_float+0x154>
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	6123      	str	r3, [r4, #16]
 8007e70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0a2      	beq.n	8007dbe <_printf_float+0xa2>
 8007e78:	232d      	movs	r3, #45	@ 0x2d
 8007e7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e7e:	e79e      	b.n	8007dbe <_printf_float+0xa2>
 8007e80:	9a06      	ldr	r2, [sp, #24]
 8007e82:	2a47      	cmp	r2, #71	@ 0x47
 8007e84:	d1c2      	bne.n	8007e0c <_printf_float+0xf0>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1c0      	bne.n	8007e0c <_printf_float+0xf0>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e7bd      	b.n	8007e0a <_printf_float+0xee>
 8007e8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e92:	d9db      	bls.n	8007e4c <_printf_float+0x130>
 8007e94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e98:	d118      	bne.n	8007ecc <_printf_float+0x1b0>
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	6863      	ldr	r3, [r4, #4]
 8007e9e:	dd0b      	ble.n	8007eb8 <_printf_float+0x19c>
 8007ea0:	6121      	str	r1, [r4, #16]
 8007ea2:	b913      	cbnz	r3, 8007eaa <_printf_float+0x18e>
 8007ea4:	6822      	ldr	r2, [r4, #0]
 8007ea6:	07d0      	lsls	r0, r2, #31
 8007ea8:	d502      	bpl.n	8007eb0 <_printf_float+0x194>
 8007eaa:	3301      	adds	r3, #1
 8007eac:	440b      	add	r3, r1
 8007eae:	6123      	str	r3, [r4, #16]
 8007eb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007eb2:	f04f 0900 	mov.w	r9, #0
 8007eb6:	e7db      	b.n	8007e70 <_printf_float+0x154>
 8007eb8:	b913      	cbnz	r3, 8007ec0 <_printf_float+0x1a4>
 8007eba:	6822      	ldr	r2, [r4, #0]
 8007ebc:	07d2      	lsls	r2, r2, #31
 8007ebe:	d501      	bpl.n	8007ec4 <_printf_float+0x1a8>
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	e7f4      	b.n	8007eae <_printf_float+0x192>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e7f2      	b.n	8007eae <_printf_float+0x192>
 8007ec8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ece:	4299      	cmp	r1, r3
 8007ed0:	db05      	blt.n	8007ede <_printf_float+0x1c2>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	6121      	str	r1, [r4, #16]
 8007ed6:	07d8      	lsls	r0, r3, #31
 8007ed8:	d5ea      	bpl.n	8007eb0 <_printf_float+0x194>
 8007eda:	1c4b      	adds	r3, r1, #1
 8007edc:	e7e7      	b.n	8007eae <_printf_float+0x192>
 8007ede:	2900      	cmp	r1, #0
 8007ee0:	bfd4      	ite	le
 8007ee2:	f1c1 0202 	rsble	r2, r1, #2
 8007ee6:	2201      	movgt	r2, #1
 8007ee8:	4413      	add	r3, r2
 8007eea:	e7e0      	b.n	8007eae <_printf_float+0x192>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	055a      	lsls	r2, r3, #21
 8007ef0:	d407      	bmi.n	8007f02 <_printf_float+0x1e6>
 8007ef2:	6923      	ldr	r3, [r4, #16]
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	d12b      	bne.n	8007f58 <_printf_float+0x23c>
 8007f00:	e767      	b.n	8007dd2 <_printf_float+0xb6>
 8007f02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f06:	f240 80dd 	bls.w	80080c4 <_printf_float+0x3a8>
 8007f0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2300      	movs	r3, #0
 8007f12:	f7f8 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d033      	beq.n	8007f82 <_printf_float+0x266>
 8007f1a:	4a37      	ldr	r2, [pc, #220]	@ (8007ff8 <_printf_float+0x2dc>)
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4628      	mov	r0, r5
 8007f22:	47b8      	blx	r7
 8007f24:	3001      	adds	r0, #1
 8007f26:	f43f af54 	beq.w	8007dd2 <_printf_float+0xb6>
 8007f2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f2e:	4543      	cmp	r3, r8
 8007f30:	db02      	blt.n	8007f38 <_printf_float+0x21c>
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	07d8      	lsls	r0, r3, #31
 8007f36:	d50f      	bpl.n	8007f58 <_printf_float+0x23c>
 8007f38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b8      	blx	r7
 8007f42:	3001      	adds	r0, #1
 8007f44:	f43f af45 	beq.w	8007dd2 <_printf_float+0xb6>
 8007f48:	f04f 0900 	mov.w	r9, #0
 8007f4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f50:	f104 0a1a 	add.w	sl, r4, #26
 8007f54:	45c8      	cmp	r8, r9
 8007f56:	dc09      	bgt.n	8007f6c <_printf_float+0x250>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	079b      	lsls	r3, r3, #30
 8007f5c:	f100 8103 	bmi.w	8008166 <_printf_float+0x44a>
 8007f60:	68e0      	ldr	r0, [r4, #12]
 8007f62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f64:	4298      	cmp	r0, r3
 8007f66:	bfb8      	it	lt
 8007f68:	4618      	movlt	r0, r3
 8007f6a:	e734      	b.n	8007dd6 <_printf_float+0xba>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	4652      	mov	r2, sl
 8007f70:	4631      	mov	r1, r6
 8007f72:	4628      	mov	r0, r5
 8007f74:	47b8      	blx	r7
 8007f76:	3001      	adds	r0, #1
 8007f78:	f43f af2b 	beq.w	8007dd2 <_printf_float+0xb6>
 8007f7c:	f109 0901 	add.w	r9, r9, #1
 8007f80:	e7e8      	b.n	8007f54 <_printf_float+0x238>
 8007f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	dc39      	bgt.n	8007ffc <_printf_float+0x2e0>
 8007f88:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff8 <_printf_float+0x2dc>)
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	4628      	mov	r0, r5
 8007f90:	47b8      	blx	r7
 8007f92:	3001      	adds	r0, #1
 8007f94:	f43f af1d 	beq.w	8007dd2 <_printf_float+0xb6>
 8007f98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f9c:	ea59 0303 	orrs.w	r3, r9, r3
 8007fa0:	d102      	bne.n	8007fa8 <_printf_float+0x28c>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	07d9      	lsls	r1, r3, #31
 8007fa6:	d5d7      	bpl.n	8007f58 <_printf_float+0x23c>
 8007fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f af0d 	beq.w	8007dd2 <_printf_float+0xb6>
 8007fb8:	f04f 0a00 	mov.w	sl, #0
 8007fbc:	f104 0b1a 	add.w	fp, r4, #26
 8007fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc2:	425b      	negs	r3, r3
 8007fc4:	4553      	cmp	r3, sl
 8007fc6:	dc01      	bgt.n	8007fcc <_printf_float+0x2b0>
 8007fc8:	464b      	mov	r3, r9
 8007fca:	e793      	b.n	8007ef4 <_printf_float+0x1d8>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	465a      	mov	r2, fp
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f aefb 	beq.w	8007dd2 <_printf_float+0xb6>
 8007fdc:	f10a 0a01 	add.w	sl, sl, #1
 8007fe0:	e7ee      	b.n	8007fc0 <_printf_float+0x2a4>
 8007fe2:	bf00      	nop
 8007fe4:	7fefffff 	.word	0x7fefffff
 8007fe8:	0800cc04 	.word	0x0800cc04
 8007fec:	0800cc08 	.word	0x0800cc08
 8007ff0:	0800cc0c 	.word	0x0800cc0c
 8007ff4:	0800cc10 	.word	0x0800cc10
 8007ff8:	0800cfa0 	.word	0x0800cfa0
 8007ffc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ffe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008002:	4553      	cmp	r3, sl
 8008004:	bfa8      	it	ge
 8008006:	4653      	movge	r3, sl
 8008008:	2b00      	cmp	r3, #0
 800800a:	4699      	mov	r9, r3
 800800c:	dc36      	bgt.n	800807c <_printf_float+0x360>
 800800e:	f04f 0b00 	mov.w	fp, #0
 8008012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008016:	f104 021a 	add.w	r2, r4, #26
 800801a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800801c:	9306      	str	r3, [sp, #24]
 800801e:	eba3 0309 	sub.w	r3, r3, r9
 8008022:	455b      	cmp	r3, fp
 8008024:	dc31      	bgt.n	800808a <_printf_float+0x36e>
 8008026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008028:	459a      	cmp	sl, r3
 800802a:	dc3a      	bgt.n	80080a2 <_printf_float+0x386>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	07da      	lsls	r2, r3, #31
 8008030:	d437      	bmi.n	80080a2 <_printf_float+0x386>
 8008032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008034:	ebaa 0903 	sub.w	r9, sl, r3
 8008038:	9b06      	ldr	r3, [sp, #24]
 800803a:	ebaa 0303 	sub.w	r3, sl, r3
 800803e:	4599      	cmp	r9, r3
 8008040:	bfa8      	it	ge
 8008042:	4699      	movge	r9, r3
 8008044:	f1b9 0f00 	cmp.w	r9, #0
 8008048:	dc33      	bgt.n	80080b2 <_printf_float+0x396>
 800804a:	f04f 0800 	mov.w	r8, #0
 800804e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008052:	f104 0b1a 	add.w	fp, r4, #26
 8008056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008058:	ebaa 0303 	sub.w	r3, sl, r3
 800805c:	eba3 0309 	sub.w	r3, r3, r9
 8008060:	4543      	cmp	r3, r8
 8008062:	f77f af79 	ble.w	8007f58 <_printf_float+0x23c>
 8008066:	2301      	movs	r3, #1
 8008068:	465a      	mov	r2, fp
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	f43f aeae 	beq.w	8007dd2 <_printf_float+0xb6>
 8008076:	f108 0801 	add.w	r8, r8, #1
 800807a:	e7ec      	b.n	8008056 <_printf_float+0x33a>
 800807c:	4642      	mov	r2, r8
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	d1c2      	bne.n	800800e <_printf_float+0x2f2>
 8008088:	e6a3      	b.n	8007dd2 <_printf_float+0xb6>
 800808a:	2301      	movs	r3, #1
 800808c:	4631      	mov	r1, r6
 800808e:	4628      	mov	r0, r5
 8008090:	9206      	str	r2, [sp, #24]
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	f43f ae9c 	beq.w	8007dd2 <_printf_float+0xb6>
 800809a:	9a06      	ldr	r2, [sp, #24]
 800809c:	f10b 0b01 	add.w	fp, fp, #1
 80080a0:	e7bb      	b.n	800801a <_printf_float+0x2fe>
 80080a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080a6:	4631      	mov	r1, r6
 80080a8:	4628      	mov	r0, r5
 80080aa:	47b8      	blx	r7
 80080ac:	3001      	adds	r0, #1
 80080ae:	d1c0      	bne.n	8008032 <_printf_float+0x316>
 80080b0:	e68f      	b.n	8007dd2 <_printf_float+0xb6>
 80080b2:	9a06      	ldr	r2, [sp, #24]
 80080b4:	464b      	mov	r3, r9
 80080b6:	4442      	add	r2, r8
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	d1c3      	bne.n	800804a <_printf_float+0x32e>
 80080c2:	e686      	b.n	8007dd2 <_printf_float+0xb6>
 80080c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080c8:	f1ba 0f01 	cmp.w	sl, #1
 80080cc:	dc01      	bgt.n	80080d2 <_printf_float+0x3b6>
 80080ce:	07db      	lsls	r3, r3, #31
 80080d0:	d536      	bpl.n	8008140 <_printf_float+0x424>
 80080d2:	2301      	movs	r3, #1
 80080d4:	4642      	mov	r2, r8
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	f43f ae78 	beq.w	8007dd2 <_printf_float+0xb6>
 80080e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	f43f ae70 	beq.w	8007dd2 <_printf_float+0xb6>
 80080f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080f6:	2200      	movs	r2, #0
 80080f8:	2300      	movs	r3, #0
 80080fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080fe:	f7f8 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008102:	b9c0      	cbnz	r0, 8008136 <_printf_float+0x41a>
 8008104:	4653      	mov	r3, sl
 8008106:	f108 0201 	add.w	r2, r8, #1
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	d10c      	bne.n	800812e <_printf_float+0x412>
 8008114:	e65d      	b.n	8007dd2 <_printf_float+0xb6>
 8008116:	2301      	movs	r3, #1
 8008118:	465a      	mov	r2, fp
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f ae56 	beq.w	8007dd2 <_printf_float+0xb6>
 8008126:	f108 0801 	add.w	r8, r8, #1
 800812a:	45d0      	cmp	r8, sl
 800812c:	dbf3      	blt.n	8008116 <_printf_float+0x3fa>
 800812e:	464b      	mov	r3, r9
 8008130:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008134:	e6df      	b.n	8007ef6 <_printf_float+0x1da>
 8008136:	f04f 0800 	mov.w	r8, #0
 800813a:	f104 0b1a 	add.w	fp, r4, #26
 800813e:	e7f4      	b.n	800812a <_printf_float+0x40e>
 8008140:	2301      	movs	r3, #1
 8008142:	4642      	mov	r2, r8
 8008144:	e7e1      	b.n	800810a <_printf_float+0x3ee>
 8008146:	2301      	movs	r3, #1
 8008148:	464a      	mov	r2, r9
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f ae3e 	beq.w	8007dd2 <_printf_float+0xb6>
 8008156:	f108 0801 	add.w	r8, r8, #1
 800815a:	68e3      	ldr	r3, [r4, #12]
 800815c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800815e:	1a5b      	subs	r3, r3, r1
 8008160:	4543      	cmp	r3, r8
 8008162:	dcf0      	bgt.n	8008146 <_printf_float+0x42a>
 8008164:	e6fc      	b.n	8007f60 <_printf_float+0x244>
 8008166:	f04f 0800 	mov.w	r8, #0
 800816a:	f104 0919 	add.w	r9, r4, #25
 800816e:	e7f4      	b.n	800815a <_printf_float+0x43e>

08008170 <_printf_common>:
 8008170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008174:	4616      	mov	r6, r2
 8008176:	4698      	mov	r8, r3
 8008178:	688a      	ldr	r2, [r1, #8]
 800817a:	690b      	ldr	r3, [r1, #16]
 800817c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008180:	4293      	cmp	r3, r2
 8008182:	bfb8      	it	lt
 8008184:	4613      	movlt	r3, r2
 8008186:	6033      	str	r3, [r6, #0]
 8008188:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800818c:	4607      	mov	r7, r0
 800818e:	460c      	mov	r4, r1
 8008190:	b10a      	cbz	r2, 8008196 <_printf_common+0x26>
 8008192:	3301      	adds	r3, #1
 8008194:	6033      	str	r3, [r6, #0]
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	0699      	lsls	r1, r3, #26
 800819a:	bf42      	ittt	mi
 800819c:	6833      	ldrmi	r3, [r6, #0]
 800819e:	3302      	addmi	r3, #2
 80081a0:	6033      	strmi	r3, [r6, #0]
 80081a2:	6825      	ldr	r5, [r4, #0]
 80081a4:	f015 0506 	ands.w	r5, r5, #6
 80081a8:	d106      	bne.n	80081b8 <_printf_common+0x48>
 80081aa:	f104 0a19 	add.w	sl, r4, #25
 80081ae:	68e3      	ldr	r3, [r4, #12]
 80081b0:	6832      	ldr	r2, [r6, #0]
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	42ab      	cmp	r3, r5
 80081b6:	dc26      	bgt.n	8008206 <_printf_common+0x96>
 80081b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081bc:	6822      	ldr	r2, [r4, #0]
 80081be:	3b00      	subs	r3, #0
 80081c0:	bf18      	it	ne
 80081c2:	2301      	movne	r3, #1
 80081c4:	0692      	lsls	r2, r2, #26
 80081c6:	d42b      	bmi.n	8008220 <_printf_common+0xb0>
 80081c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081cc:	4641      	mov	r1, r8
 80081ce:	4638      	mov	r0, r7
 80081d0:	47c8      	blx	r9
 80081d2:	3001      	adds	r0, #1
 80081d4:	d01e      	beq.n	8008214 <_printf_common+0xa4>
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	6922      	ldr	r2, [r4, #16]
 80081da:	f003 0306 	and.w	r3, r3, #6
 80081de:	2b04      	cmp	r3, #4
 80081e0:	bf02      	ittt	eq
 80081e2:	68e5      	ldreq	r5, [r4, #12]
 80081e4:	6833      	ldreq	r3, [r6, #0]
 80081e6:	1aed      	subeq	r5, r5, r3
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	bf0c      	ite	eq
 80081ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081f0:	2500      	movne	r5, #0
 80081f2:	4293      	cmp	r3, r2
 80081f4:	bfc4      	itt	gt
 80081f6:	1a9b      	subgt	r3, r3, r2
 80081f8:	18ed      	addgt	r5, r5, r3
 80081fa:	2600      	movs	r6, #0
 80081fc:	341a      	adds	r4, #26
 80081fe:	42b5      	cmp	r5, r6
 8008200:	d11a      	bne.n	8008238 <_printf_common+0xc8>
 8008202:	2000      	movs	r0, #0
 8008204:	e008      	b.n	8008218 <_printf_common+0xa8>
 8008206:	2301      	movs	r3, #1
 8008208:	4652      	mov	r2, sl
 800820a:	4641      	mov	r1, r8
 800820c:	4638      	mov	r0, r7
 800820e:	47c8      	blx	r9
 8008210:	3001      	adds	r0, #1
 8008212:	d103      	bne.n	800821c <_printf_common+0xac>
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821c:	3501      	adds	r5, #1
 800821e:	e7c6      	b.n	80081ae <_printf_common+0x3e>
 8008220:	18e1      	adds	r1, r4, r3
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	2030      	movs	r0, #48	@ 0x30
 8008226:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800822a:	4422      	add	r2, r4
 800822c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008234:	3302      	adds	r3, #2
 8008236:	e7c7      	b.n	80081c8 <_printf_common+0x58>
 8008238:	2301      	movs	r3, #1
 800823a:	4622      	mov	r2, r4
 800823c:	4641      	mov	r1, r8
 800823e:	4638      	mov	r0, r7
 8008240:	47c8      	blx	r9
 8008242:	3001      	adds	r0, #1
 8008244:	d0e6      	beq.n	8008214 <_printf_common+0xa4>
 8008246:	3601      	adds	r6, #1
 8008248:	e7d9      	b.n	80081fe <_printf_common+0x8e>
	...

0800824c <_printf_i>:
 800824c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008250:	7e0f      	ldrb	r7, [r1, #24]
 8008252:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008254:	2f78      	cmp	r7, #120	@ 0x78
 8008256:	4691      	mov	r9, r2
 8008258:	4680      	mov	r8, r0
 800825a:	460c      	mov	r4, r1
 800825c:	469a      	mov	sl, r3
 800825e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008262:	d807      	bhi.n	8008274 <_printf_i+0x28>
 8008264:	2f62      	cmp	r7, #98	@ 0x62
 8008266:	d80a      	bhi.n	800827e <_printf_i+0x32>
 8008268:	2f00      	cmp	r7, #0
 800826a:	f000 80d2 	beq.w	8008412 <_printf_i+0x1c6>
 800826e:	2f58      	cmp	r7, #88	@ 0x58
 8008270:	f000 80b9 	beq.w	80083e6 <_printf_i+0x19a>
 8008274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008278:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800827c:	e03a      	b.n	80082f4 <_printf_i+0xa8>
 800827e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008282:	2b15      	cmp	r3, #21
 8008284:	d8f6      	bhi.n	8008274 <_printf_i+0x28>
 8008286:	a101      	add	r1, pc, #4	@ (adr r1, 800828c <_printf_i+0x40>)
 8008288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800828c:	080082e5 	.word	0x080082e5
 8008290:	080082f9 	.word	0x080082f9
 8008294:	08008275 	.word	0x08008275
 8008298:	08008275 	.word	0x08008275
 800829c:	08008275 	.word	0x08008275
 80082a0:	08008275 	.word	0x08008275
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	08008275 	.word	0x08008275
 80082ac:	08008275 	.word	0x08008275
 80082b0:	08008275 	.word	0x08008275
 80082b4:	08008275 	.word	0x08008275
 80082b8:	080083f9 	.word	0x080083f9
 80082bc:	08008323 	.word	0x08008323
 80082c0:	080083b3 	.word	0x080083b3
 80082c4:	08008275 	.word	0x08008275
 80082c8:	08008275 	.word	0x08008275
 80082cc:	0800841b 	.word	0x0800841b
 80082d0:	08008275 	.word	0x08008275
 80082d4:	08008323 	.word	0x08008323
 80082d8:	08008275 	.word	0x08008275
 80082dc:	08008275 	.word	0x08008275
 80082e0:	080083bb 	.word	0x080083bb
 80082e4:	6833      	ldr	r3, [r6, #0]
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6032      	str	r2, [r6, #0]
 80082ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082f4:	2301      	movs	r3, #1
 80082f6:	e09d      	b.n	8008434 <_printf_i+0x1e8>
 80082f8:	6833      	ldr	r3, [r6, #0]
 80082fa:	6820      	ldr	r0, [r4, #0]
 80082fc:	1d19      	adds	r1, r3, #4
 80082fe:	6031      	str	r1, [r6, #0]
 8008300:	0606      	lsls	r6, r0, #24
 8008302:	d501      	bpl.n	8008308 <_printf_i+0xbc>
 8008304:	681d      	ldr	r5, [r3, #0]
 8008306:	e003      	b.n	8008310 <_printf_i+0xc4>
 8008308:	0645      	lsls	r5, r0, #25
 800830a:	d5fb      	bpl.n	8008304 <_printf_i+0xb8>
 800830c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008310:	2d00      	cmp	r5, #0
 8008312:	da03      	bge.n	800831c <_printf_i+0xd0>
 8008314:	232d      	movs	r3, #45	@ 0x2d
 8008316:	426d      	negs	r5, r5
 8008318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800831c:	4859      	ldr	r0, [pc, #356]	@ (8008484 <_printf_i+0x238>)
 800831e:	230a      	movs	r3, #10
 8008320:	e011      	b.n	8008346 <_printf_i+0xfa>
 8008322:	6821      	ldr	r1, [r4, #0]
 8008324:	6833      	ldr	r3, [r6, #0]
 8008326:	0608      	lsls	r0, r1, #24
 8008328:	f853 5b04 	ldr.w	r5, [r3], #4
 800832c:	d402      	bmi.n	8008334 <_printf_i+0xe8>
 800832e:	0649      	lsls	r1, r1, #25
 8008330:	bf48      	it	mi
 8008332:	b2ad      	uxthmi	r5, r5
 8008334:	2f6f      	cmp	r7, #111	@ 0x6f
 8008336:	4853      	ldr	r0, [pc, #332]	@ (8008484 <_printf_i+0x238>)
 8008338:	6033      	str	r3, [r6, #0]
 800833a:	bf14      	ite	ne
 800833c:	230a      	movne	r3, #10
 800833e:	2308      	moveq	r3, #8
 8008340:	2100      	movs	r1, #0
 8008342:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008346:	6866      	ldr	r6, [r4, #4]
 8008348:	60a6      	str	r6, [r4, #8]
 800834a:	2e00      	cmp	r6, #0
 800834c:	bfa2      	ittt	ge
 800834e:	6821      	ldrge	r1, [r4, #0]
 8008350:	f021 0104 	bicge.w	r1, r1, #4
 8008354:	6021      	strge	r1, [r4, #0]
 8008356:	b90d      	cbnz	r5, 800835c <_printf_i+0x110>
 8008358:	2e00      	cmp	r6, #0
 800835a:	d04b      	beq.n	80083f4 <_printf_i+0x1a8>
 800835c:	4616      	mov	r6, r2
 800835e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008362:	fb03 5711 	mls	r7, r3, r1, r5
 8008366:	5dc7      	ldrb	r7, [r0, r7]
 8008368:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800836c:	462f      	mov	r7, r5
 800836e:	42bb      	cmp	r3, r7
 8008370:	460d      	mov	r5, r1
 8008372:	d9f4      	bls.n	800835e <_printf_i+0x112>
 8008374:	2b08      	cmp	r3, #8
 8008376:	d10b      	bne.n	8008390 <_printf_i+0x144>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	07df      	lsls	r7, r3, #31
 800837c:	d508      	bpl.n	8008390 <_printf_i+0x144>
 800837e:	6923      	ldr	r3, [r4, #16]
 8008380:	6861      	ldr	r1, [r4, #4]
 8008382:	4299      	cmp	r1, r3
 8008384:	bfde      	ittt	le
 8008386:	2330      	movle	r3, #48	@ 0x30
 8008388:	f806 3c01 	strble.w	r3, [r6, #-1]
 800838c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008390:	1b92      	subs	r2, r2, r6
 8008392:	6122      	str	r2, [r4, #16]
 8008394:	f8cd a000 	str.w	sl, [sp]
 8008398:	464b      	mov	r3, r9
 800839a:	aa03      	add	r2, sp, #12
 800839c:	4621      	mov	r1, r4
 800839e:	4640      	mov	r0, r8
 80083a0:	f7ff fee6 	bl	8008170 <_printf_common>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d14a      	bne.n	800843e <_printf_i+0x1f2>
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	b004      	add	sp, #16
 80083ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	f043 0320 	orr.w	r3, r3, #32
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	4833      	ldr	r0, [pc, #204]	@ (8008488 <_printf_i+0x23c>)
 80083bc:	2778      	movs	r7, #120	@ 0x78
 80083be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	6831      	ldr	r1, [r6, #0]
 80083c6:	061f      	lsls	r7, r3, #24
 80083c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80083cc:	d402      	bmi.n	80083d4 <_printf_i+0x188>
 80083ce:	065f      	lsls	r7, r3, #25
 80083d0:	bf48      	it	mi
 80083d2:	b2ad      	uxthmi	r5, r5
 80083d4:	6031      	str	r1, [r6, #0]
 80083d6:	07d9      	lsls	r1, r3, #31
 80083d8:	bf44      	itt	mi
 80083da:	f043 0320 	orrmi.w	r3, r3, #32
 80083de:	6023      	strmi	r3, [r4, #0]
 80083e0:	b11d      	cbz	r5, 80083ea <_printf_i+0x19e>
 80083e2:	2310      	movs	r3, #16
 80083e4:	e7ac      	b.n	8008340 <_printf_i+0xf4>
 80083e6:	4827      	ldr	r0, [pc, #156]	@ (8008484 <_printf_i+0x238>)
 80083e8:	e7e9      	b.n	80083be <_printf_i+0x172>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	f023 0320 	bic.w	r3, r3, #32
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	e7f6      	b.n	80083e2 <_printf_i+0x196>
 80083f4:	4616      	mov	r6, r2
 80083f6:	e7bd      	b.n	8008374 <_printf_i+0x128>
 80083f8:	6833      	ldr	r3, [r6, #0]
 80083fa:	6825      	ldr	r5, [r4, #0]
 80083fc:	6961      	ldr	r1, [r4, #20]
 80083fe:	1d18      	adds	r0, r3, #4
 8008400:	6030      	str	r0, [r6, #0]
 8008402:	062e      	lsls	r6, r5, #24
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	d501      	bpl.n	800840c <_printf_i+0x1c0>
 8008408:	6019      	str	r1, [r3, #0]
 800840a:	e002      	b.n	8008412 <_printf_i+0x1c6>
 800840c:	0668      	lsls	r0, r5, #25
 800840e:	d5fb      	bpl.n	8008408 <_printf_i+0x1bc>
 8008410:	8019      	strh	r1, [r3, #0]
 8008412:	2300      	movs	r3, #0
 8008414:	6123      	str	r3, [r4, #16]
 8008416:	4616      	mov	r6, r2
 8008418:	e7bc      	b.n	8008394 <_printf_i+0x148>
 800841a:	6833      	ldr	r3, [r6, #0]
 800841c:	1d1a      	adds	r2, r3, #4
 800841e:	6032      	str	r2, [r6, #0]
 8008420:	681e      	ldr	r6, [r3, #0]
 8008422:	6862      	ldr	r2, [r4, #4]
 8008424:	2100      	movs	r1, #0
 8008426:	4630      	mov	r0, r6
 8008428:	f7f7 fed2 	bl	80001d0 <memchr>
 800842c:	b108      	cbz	r0, 8008432 <_printf_i+0x1e6>
 800842e:	1b80      	subs	r0, r0, r6
 8008430:	6060      	str	r0, [r4, #4]
 8008432:	6863      	ldr	r3, [r4, #4]
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	2300      	movs	r3, #0
 8008438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800843c:	e7aa      	b.n	8008394 <_printf_i+0x148>
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	4632      	mov	r2, r6
 8008442:	4649      	mov	r1, r9
 8008444:	4640      	mov	r0, r8
 8008446:	47d0      	blx	sl
 8008448:	3001      	adds	r0, #1
 800844a:	d0ad      	beq.n	80083a8 <_printf_i+0x15c>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	079b      	lsls	r3, r3, #30
 8008450:	d413      	bmi.n	800847a <_printf_i+0x22e>
 8008452:	68e0      	ldr	r0, [r4, #12]
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	4298      	cmp	r0, r3
 8008458:	bfb8      	it	lt
 800845a:	4618      	movlt	r0, r3
 800845c:	e7a6      	b.n	80083ac <_printf_i+0x160>
 800845e:	2301      	movs	r3, #1
 8008460:	4632      	mov	r2, r6
 8008462:	4649      	mov	r1, r9
 8008464:	4640      	mov	r0, r8
 8008466:	47d0      	blx	sl
 8008468:	3001      	adds	r0, #1
 800846a:	d09d      	beq.n	80083a8 <_printf_i+0x15c>
 800846c:	3501      	adds	r5, #1
 800846e:	68e3      	ldr	r3, [r4, #12]
 8008470:	9903      	ldr	r1, [sp, #12]
 8008472:	1a5b      	subs	r3, r3, r1
 8008474:	42ab      	cmp	r3, r5
 8008476:	dcf2      	bgt.n	800845e <_printf_i+0x212>
 8008478:	e7eb      	b.n	8008452 <_printf_i+0x206>
 800847a:	2500      	movs	r5, #0
 800847c:	f104 0619 	add.w	r6, r4, #25
 8008480:	e7f5      	b.n	800846e <_printf_i+0x222>
 8008482:	bf00      	nop
 8008484:	0800cc14 	.word	0x0800cc14
 8008488:	0800cc25 	.word	0x0800cc25

0800848c <_scanf_float>:
 800848c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	b087      	sub	sp, #28
 8008492:	4617      	mov	r7, r2
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	688b      	ldr	r3, [r1, #8]
 8008498:	1e5a      	subs	r2, r3, #1
 800849a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800849e:	bf81      	itttt	hi
 80084a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80084a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084ac:	608b      	strhi	r3, [r1, #8]
 80084ae:	680b      	ldr	r3, [r1, #0]
 80084b0:	460a      	mov	r2, r1
 80084b2:	f04f 0500 	mov.w	r5, #0
 80084b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80084ba:	f842 3b1c 	str.w	r3, [r2], #28
 80084be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084c2:	4680      	mov	r8, r0
 80084c4:	460c      	mov	r4, r1
 80084c6:	bf98      	it	ls
 80084c8:	f04f 0b00 	movls.w	fp, #0
 80084cc:	9201      	str	r2, [sp, #4]
 80084ce:	4616      	mov	r6, r2
 80084d0:	46aa      	mov	sl, r5
 80084d2:	46a9      	mov	r9, r5
 80084d4:	9502      	str	r5, [sp, #8]
 80084d6:	68a2      	ldr	r2, [r4, #8]
 80084d8:	b152      	cbz	r2, 80084f0 <_scanf_float+0x64>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b4e      	cmp	r3, #78	@ 0x4e
 80084e0:	d864      	bhi.n	80085ac <_scanf_float+0x120>
 80084e2:	2b40      	cmp	r3, #64	@ 0x40
 80084e4:	d83c      	bhi.n	8008560 <_scanf_float+0xd4>
 80084e6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80084ea:	b2c8      	uxtb	r0, r1
 80084ec:	280e      	cmp	r0, #14
 80084ee:	d93a      	bls.n	8008566 <_scanf_float+0xda>
 80084f0:	f1b9 0f00 	cmp.w	r9, #0
 80084f4:	d003      	beq.n	80084fe <_scanf_float+0x72>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008502:	f1ba 0f01 	cmp.w	sl, #1
 8008506:	f200 8117 	bhi.w	8008738 <_scanf_float+0x2ac>
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	429e      	cmp	r6, r3
 800850e:	f200 8108 	bhi.w	8008722 <_scanf_float+0x296>
 8008512:	2001      	movs	r0, #1
 8008514:	b007      	add	sp, #28
 8008516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800851e:	2a0d      	cmp	r2, #13
 8008520:	d8e6      	bhi.n	80084f0 <_scanf_float+0x64>
 8008522:	a101      	add	r1, pc, #4	@ (adr r1, 8008528 <_scanf_float+0x9c>)
 8008524:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008528:	0800866f 	.word	0x0800866f
 800852c:	080084f1 	.word	0x080084f1
 8008530:	080084f1 	.word	0x080084f1
 8008534:	080084f1 	.word	0x080084f1
 8008538:	080086cf 	.word	0x080086cf
 800853c:	080086a7 	.word	0x080086a7
 8008540:	080084f1 	.word	0x080084f1
 8008544:	080084f1 	.word	0x080084f1
 8008548:	0800867d 	.word	0x0800867d
 800854c:	080084f1 	.word	0x080084f1
 8008550:	080084f1 	.word	0x080084f1
 8008554:	080084f1 	.word	0x080084f1
 8008558:	080084f1 	.word	0x080084f1
 800855c:	08008635 	.word	0x08008635
 8008560:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008564:	e7db      	b.n	800851e <_scanf_float+0x92>
 8008566:	290e      	cmp	r1, #14
 8008568:	d8c2      	bhi.n	80084f0 <_scanf_float+0x64>
 800856a:	a001      	add	r0, pc, #4	@ (adr r0, 8008570 <_scanf_float+0xe4>)
 800856c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008570:	08008625 	.word	0x08008625
 8008574:	080084f1 	.word	0x080084f1
 8008578:	08008625 	.word	0x08008625
 800857c:	080086bb 	.word	0x080086bb
 8008580:	080084f1 	.word	0x080084f1
 8008584:	080085cd 	.word	0x080085cd
 8008588:	0800860b 	.word	0x0800860b
 800858c:	0800860b 	.word	0x0800860b
 8008590:	0800860b 	.word	0x0800860b
 8008594:	0800860b 	.word	0x0800860b
 8008598:	0800860b 	.word	0x0800860b
 800859c:	0800860b 	.word	0x0800860b
 80085a0:	0800860b 	.word	0x0800860b
 80085a4:	0800860b 	.word	0x0800860b
 80085a8:	0800860b 	.word	0x0800860b
 80085ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80085ae:	d809      	bhi.n	80085c4 <_scanf_float+0x138>
 80085b0:	2b60      	cmp	r3, #96	@ 0x60
 80085b2:	d8b2      	bhi.n	800851a <_scanf_float+0x8e>
 80085b4:	2b54      	cmp	r3, #84	@ 0x54
 80085b6:	d07b      	beq.n	80086b0 <_scanf_float+0x224>
 80085b8:	2b59      	cmp	r3, #89	@ 0x59
 80085ba:	d199      	bne.n	80084f0 <_scanf_float+0x64>
 80085bc:	2d07      	cmp	r5, #7
 80085be:	d197      	bne.n	80084f0 <_scanf_float+0x64>
 80085c0:	2508      	movs	r5, #8
 80085c2:	e02c      	b.n	800861e <_scanf_float+0x192>
 80085c4:	2b74      	cmp	r3, #116	@ 0x74
 80085c6:	d073      	beq.n	80086b0 <_scanf_float+0x224>
 80085c8:	2b79      	cmp	r3, #121	@ 0x79
 80085ca:	e7f6      	b.n	80085ba <_scanf_float+0x12e>
 80085cc:	6821      	ldr	r1, [r4, #0]
 80085ce:	05c8      	lsls	r0, r1, #23
 80085d0:	d51b      	bpl.n	800860a <_scanf_float+0x17e>
 80085d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80085d6:	6021      	str	r1, [r4, #0]
 80085d8:	f109 0901 	add.w	r9, r9, #1
 80085dc:	f1bb 0f00 	cmp.w	fp, #0
 80085e0:	d003      	beq.n	80085ea <_scanf_float+0x15e>
 80085e2:	3201      	adds	r2, #1
 80085e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085e8:	60a2      	str	r2, [r4, #8]
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	60a3      	str	r3, [r4, #8]
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	3301      	adds	r3, #1
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	607b      	str	r3, [r7, #4]
 80085fe:	f340 8087 	ble.w	8008710 <_scanf_float+0x284>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	3301      	adds	r3, #1
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	e765      	b.n	80084d6 <_scanf_float+0x4a>
 800860a:	eb1a 0105 	adds.w	r1, sl, r5
 800860e:	f47f af6f 	bne.w	80084f0 <_scanf_float+0x64>
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	460d      	mov	r5, r1
 800861c:	468a      	mov	sl, r1
 800861e:	f806 3b01 	strb.w	r3, [r6], #1
 8008622:	e7e2      	b.n	80085ea <_scanf_float+0x15e>
 8008624:	6822      	ldr	r2, [r4, #0]
 8008626:	0610      	lsls	r0, r2, #24
 8008628:	f57f af62 	bpl.w	80084f0 <_scanf_float+0x64>
 800862c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008630:	6022      	str	r2, [r4, #0]
 8008632:	e7f4      	b.n	800861e <_scanf_float+0x192>
 8008634:	f1ba 0f00 	cmp.w	sl, #0
 8008638:	d10e      	bne.n	8008658 <_scanf_float+0x1cc>
 800863a:	f1b9 0f00 	cmp.w	r9, #0
 800863e:	d10e      	bne.n	800865e <_scanf_float+0x1d2>
 8008640:	6822      	ldr	r2, [r4, #0]
 8008642:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008646:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800864a:	d108      	bne.n	800865e <_scanf_float+0x1d2>
 800864c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008650:	6022      	str	r2, [r4, #0]
 8008652:	f04f 0a01 	mov.w	sl, #1
 8008656:	e7e2      	b.n	800861e <_scanf_float+0x192>
 8008658:	f1ba 0f02 	cmp.w	sl, #2
 800865c:	d055      	beq.n	800870a <_scanf_float+0x27e>
 800865e:	2d01      	cmp	r5, #1
 8008660:	d002      	beq.n	8008668 <_scanf_float+0x1dc>
 8008662:	2d04      	cmp	r5, #4
 8008664:	f47f af44 	bne.w	80084f0 <_scanf_float+0x64>
 8008668:	3501      	adds	r5, #1
 800866a:	b2ed      	uxtb	r5, r5
 800866c:	e7d7      	b.n	800861e <_scanf_float+0x192>
 800866e:	f1ba 0f01 	cmp.w	sl, #1
 8008672:	f47f af3d 	bne.w	80084f0 <_scanf_float+0x64>
 8008676:	f04f 0a02 	mov.w	sl, #2
 800867a:	e7d0      	b.n	800861e <_scanf_float+0x192>
 800867c:	b97d      	cbnz	r5, 800869e <_scanf_float+0x212>
 800867e:	f1b9 0f00 	cmp.w	r9, #0
 8008682:	f47f af38 	bne.w	80084f6 <_scanf_float+0x6a>
 8008686:	6822      	ldr	r2, [r4, #0]
 8008688:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800868c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008690:	f040 8108 	bne.w	80088a4 <_scanf_float+0x418>
 8008694:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008698:	6022      	str	r2, [r4, #0]
 800869a:	2501      	movs	r5, #1
 800869c:	e7bf      	b.n	800861e <_scanf_float+0x192>
 800869e:	2d03      	cmp	r5, #3
 80086a0:	d0e2      	beq.n	8008668 <_scanf_float+0x1dc>
 80086a2:	2d05      	cmp	r5, #5
 80086a4:	e7de      	b.n	8008664 <_scanf_float+0x1d8>
 80086a6:	2d02      	cmp	r5, #2
 80086a8:	f47f af22 	bne.w	80084f0 <_scanf_float+0x64>
 80086ac:	2503      	movs	r5, #3
 80086ae:	e7b6      	b.n	800861e <_scanf_float+0x192>
 80086b0:	2d06      	cmp	r5, #6
 80086b2:	f47f af1d 	bne.w	80084f0 <_scanf_float+0x64>
 80086b6:	2507      	movs	r5, #7
 80086b8:	e7b1      	b.n	800861e <_scanf_float+0x192>
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	0591      	lsls	r1, r2, #22
 80086be:	f57f af17 	bpl.w	80084f0 <_scanf_float+0x64>
 80086c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80086c6:	6022      	str	r2, [r4, #0]
 80086c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80086cc:	e7a7      	b.n	800861e <_scanf_float+0x192>
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80086d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80086d8:	d006      	beq.n	80086e8 <_scanf_float+0x25c>
 80086da:	0550      	lsls	r0, r2, #21
 80086dc:	f57f af08 	bpl.w	80084f0 <_scanf_float+0x64>
 80086e0:	f1b9 0f00 	cmp.w	r9, #0
 80086e4:	f000 80de 	beq.w	80088a4 <_scanf_float+0x418>
 80086e8:	0591      	lsls	r1, r2, #22
 80086ea:	bf58      	it	pl
 80086ec:	9902      	ldrpl	r1, [sp, #8]
 80086ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086f2:	bf58      	it	pl
 80086f4:	eba9 0101 	subpl.w	r1, r9, r1
 80086f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80086fc:	bf58      	it	pl
 80086fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008702:	6022      	str	r2, [r4, #0]
 8008704:	f04f 0900 	mov.w	r9, #0
 8008708:	e789      	b.n	800861e <_scanf_float+0x192>
 800870a:	f04f 0a03 	mov.w	sl, #3
 800870e:	e786      	b.n	800861e <_scanf_float+0x192>
 8008710:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008714:	4639      	mov	r1, r7
 8008716:	4640      	mov	r0, r8
 8008718:	4798      	blx	r3
 800871a:	2800      	cmp	r0, #0
 800871c:	f43f aedb 	beq.w	80084d6 <_scanf_float+0x4a>
 8008720:	e6e6      	b.n	80084f0 <_scanf_float+0x64>
 8008722:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008726:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800872a:	463a      	mov	r2, r7
 800872c:	4640      	mov	r0, r8
 800872e:	4798      	blx	r3
 8008730:	6923      	ldr	r3, [r4, #16]
 8008732:	3b01      	subs	r3, #1
 8008734:	6123      	str	r3, [r4, #16]
 8008736:	e6e8      	b.n	800850a <_scanf_float+0x7e>
 8008738:	1e6b      	subs	r3, r5, #1
 800873a:	2b06      	cmp	r3, #6
 800873c:	d824      	bhi.n	8008788 <_scanf_float+0x2fc>
 800873e:	2d02      	cmp	r5, #2
 8008740:	d836      	bhi.n	80087b0 <_scanf_float+0x324>
 8008742:	9b01      	ldr	r3, [sp, #4]
 8008744:	429e      	cmp	r6, r3
 8008746:	f67f aee4 	bls.w	8008512 <_scanf_float+0x86>
 800874a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800874e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008752:	463a      	mov	r2, r7
 8008754:	4640      	mov	r0, r8
 8008756:	4798      	blx	r3
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	3b01      	subs	r3, #1
 800875c:	6123      	str	r3, [r4, #16]
 800875e:	e7f0      	b.n	8008742 <_scanf_float+0x2b6>
 8008760:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008764:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008768:	463a      	mov	r2, r7
 800876a:	4640      	mov	r0, r8
 800876c:	4798      	blx	r3
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	3b01      	subs	r3, #1
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008778:	fa5f fa8a 	uxtb.w	sl, sl
 800877c:	f1ba 0f02 	cmp.w	sl, #2
 8008780:	d1ee      	bne.n	8008760 <_scanf_float+0x2d4>
 8008782:	3d03      	subs	r5, #3
 8008784:	b2ed      	uxtb	r5, r5
 8008786:	1b76      	subs	r6, r6, r5
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	05da      	lsls	r2, r3, #23
 800878c:	d530      	bpl.n	80087f0 <_scanf_float+0x364>
 800878e:	055b      	lsls	r3, r3, #21
 8008790:	d511      	bpl.n	80087b6 <_scanf_float+0x32a>
 8008792:	9b01      	ldr	r3, [sp, #4]
 8008794:	429e      	cmp	r6, r3
 8008796:	f67f aebc 	bls.w	8008512 <_scanf_float+0x86>
 800879a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800879e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087a2:	463a      	mov	r2, r7
 80087a4:	4640      	mov	r0, r8
 80087a6:	4798      	blx	r3
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	e7f0      	b.n	8008792 <_scanf_float+0x306>
 80087b0:	46aa      	mov	sl, r5
 80087b2:	46b3      	mov	fp, r6
 80087b4:	e7de      	b.n	8008774 <_scanf_float+0x2e8>
 80087b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	2965      	cmp	r1, #101	@ 0x65
 80087be:	f103 33ff 	add.w	r3, r3, #4294967295
 80087c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80087c6:	6123      	str	r3, [r4, #16]
 80087c8:	d00c      	beq.n	80087e4 <_scanf_float+0x358>
 80087ca:	2945      	cmp	r1, #69	@ 0x45
 80087cc:	d00a      	beq.n	80087e4 <_scanf_float+0x358>
 80087ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087d2:	463a      	mov	r2, r7
 80087d4:	4640      	mov	r0, r8
 80087d6:	4798      	blx	r3
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087de:	3b01      	subs	r3, #1
 80087e0:	1eb5      	subs	r5, r6, #2
 80087e2:	6123      	str	r3, [r4, #16]
 80087e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087e8:	463a      	mov	r2, r7
 80087ea:	4640      	mov	r0, r8
 80087ec:	4798      	blx	r3
 80087ee:	462e      	mov	r6, r5
 80087f0:	6822      	ldr	r2, [r4, #0]
 80087f2:	f012 0210 	ands.w	r2, r2, #16
 80087f6:	d001      	beq.n	80087fc <_scanf_float+0x370>
 80087f8:	2000      	movs	r0, #0
 80087fa:	e68b      	b.n	8008514 <_scanf_float+0x88>
 80087fc:	7032      	strb	r2, [r6, #0]
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008808:	d11c      	bne.n	8008844 <_scanf_float+0x3b8>
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	454b      	cmp	r3, r9
 800880e:	eba3 0209 	sub.w	r2, r3, r9
 8008812:	d123      	bne.n	800885c <_scanf_float+0x3d0>
 8008814:	9901      	ldr	r1, [sp, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	4640      	mov	r0, r8
 800881a:	f002 fc45 	bl	800b0a8 <_strtod_r>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	6821      	ldr	r1, [r4, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f011 0f02 	tst.w	r1, #2
 8008828:	ec57 6b10 	vmov	r6, r7, d0
 800882c:	f103 0204 	add.w	r2, r3, #4
 8008830:	d01f      	beq.n	8008872 <_scanf_float+0x3e6>
 8008832:	9903      	ldr	r1, [sp, #12]
 8008834:	600a      	str	r2, [r1, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	e9c3 6700 	strd	r6, r7, [r3]
 800883c:	68e3      	ldr	r3, [r4, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60e3      	str	r3, [r4, #12]
 8008842:	e7d9      	b.n	80087f8 <_scanf_float+0x36c>
 8008844:	9b04      	ldr	r3, [sp, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0e4      	beq.n	8008814 <_scanf_float+0x388>
 800884a:	9905      	ldr	r1, [sp, #20]
 800884c:	230a      	movs	r3, #10
 800884e:	3101      	adds	r1, #1
 8008850:	4640      	mov	r0, r8
 8008852:	f002 fca9 	bl	800b1a8 <_strtol_r>
 8008856:	9b04      	ldr	r3, [sp, #16]
 8008858:	9e05      	ldr	r6, [sp, #20]
 800885a:	1ac2      	subs	r2, r0, r3
 800885c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008860:	429e      	cmp	r6, r3
 8008862:	bf28      	it	cs
 8008864:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008868:	4910      	ldr	r1, [pc, #64]	@ (80088ac <_scanf_float+0x420>)
 800886a:	4630      	mov	r0, r6
 800886c:	f000 f8e4 	bl	8008a38 <siprintf>
 8008870:	e7d0      	b.n	8008814 <_scanf_float+0x388>
 8008872:	f011 0f04 	tst.w	r1, #4
 8008876:	9903      	ldr	r1, [sp, #12]
 8008878:	600a      	str	r2, [r1, #0]
 800887a:	d1dc      	bne.n	8008836 <_scanf_float+0x3aa>
 800887c:	681d      	ldr	r5, [r3, #0]
 800887e:	4632      	mov	r2, r6
 8008880:	463b      	mov	r3, r7
 8008882:	4630      	mov	r0, r6
 8008884:	4639      	mov	r1, r7
 8008886:	f7f8 f951 	bl	8000b2c <__aeabi_dcmpun>
 800888a:	b128      	cbz	r0, 8008898 <_scanf_float+0x40c>
 800888c:	4808      	ldr	r0, [pc, #32]	@ (80088b0 <_scanf_float+0x424>)
 800888e:	f000 fa05 	bl	8008c9c <nanf>
 8008892:	ed85 0a00 	vstr	s0, [r5]
 8008896:	e7d1      	b.n	800883c <_scanf_float+0x3b0>
 8008898:	4630      	mov	r0, r6
 800889a:	4639      	mov	r1, r7
 800889c:	f7f8 f9a4 	bl	8000be8 <__aeabi_d2f>
 80088a0:	6028      	str	r0, [r5, #0]
 80088a2:	e7cb      	b.n	800883c <_scanf_float+0x3b0>
 80088a4:	f04f 0900 	mov.w	r9, #0
 80088a8:	e629      	b.n	80084fe <_scanf_float+0x72>
 80088aa:	bf00      	nop
 80088ac:	0800cc36 	.word	0x0800cc36
 80088b0:	0800cfe8 	.word	0x0800cfe8

080088b4 <std>:
 80088b4:	2300      	movs	r3, #0
 80088b6:	b510      	push	{r4, lr}
 80088b8:	4604      	mov	r4, r0
 80088ba:	e9c0 3300 	strd	r3, r3, [r0]
 80088be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088c2:	6083      	str	r3, [r0, #8]
 80088c4:	8181      	strh	r1, [r0, #12]
 80088c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80088c8:	81c2      	strh	r2, [r0, #14]
 80088ca:	6183      	str	r3, [r0, #24]
 80088cc:	4619      	mov	r1, r3
 80088ce:	2208      	movs	r2, #8
 80088d0:	305c      	adds	r0, #92	@ 0x5c
 80088d2:	f000 f940 	bl	8008b56 <memset>
 80088d6:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <std+0x58>)
 80088d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80088da:	4b0d      	ldr	r3, [pc, #52]	@ (8008910 <std+0x5c>)
 80088dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088de:	4b0d      	ldr	r3, [pc, #52]	@ (8008914 <std+0x60>)
 80088e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008918 <std+0x64>)
 80088e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80088e6:	4b0d      	ldr	r3, [pc, #52]	@ (800891c <std+0x68>)
 80088e8:	6224      	str	r4, [r4, #32]
 80088ea:	429c      	cmp	r4, r3
 80088ec:	d006      	beq.n	80088fc <std+0x48>
 80088ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088f2:	4294      	cmp	r4, r2
 80088f4:	d002      	beq.n	80088fc <std+0x48>
 80088f6:	33d0      	adds	r3, #208	@ 0xd0
 80088f8:	429c      	cmp	r4, r3
 80088fa:	d105      	bne.n	8008908 <std+0x54>
 80088fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008904:	f000 b9c6 	b.w	8008c94 <__retarget_lock_init_recursive>
 8008908:	bd10      	pop	{r4, pc}
 800890a:	bf00      	nop
 800890c:	08008acd 	.word	0x08008acd
 8008910:	08008af3 	.word	0x08008af3
 8008914:	08008b2b 	.word	0x08008b2b
 8008918:	08008b4f 	.word	0x08008b4f
 800891c:	20000910 	.word	0x20000910

08008920 <stdio_exit_handler>:
 8008920:	4a02      	ldr	r2, [pc, #8]	@ (800892c <stdio_exit_handler+0xc>)
 8008922:	4903      	ldr	r1, [pc, #12]	@ (8008930 <stdio_exit_handler+0x10>)
 8008924:	4803      	ldr	r0, [pc, #12]	@ (8008934 <stdio_exit_handler+0x14>)
 8008926:	f000 b869 	b.w	80089fc <_fwalk_sglue>
 800892a:	bf00      	nop
 800892c:	200000f0 	.word	0x200000f0
 8008930:	0800bb99 	.word	0x0800bb99
 8008934:	20000100 	.word	0x20000100

08008938 <cleanup_stdio>:
 8008938:	6841      	ldr	r1, [r0, #4]
 800893a:	4b0c      	ldr	r3, [pc, #48]	@ (800896c <cleanup_stdio+0x34>)
 800893c:	4299      	cmp	r1, r3
 800893e:	b510      	push	{r4, lr}
 8008940:	4604      	mov	r4, r0
 8008942:	d001      	beq.n	8008948 <cleanup_stdio+0x10>
 8008944:	f003 f928 	bl	800bb98 <_fflush_r>
 8008948:	68a1      	ldr	r1, [r4, #8]
 800894a:	4b09      	ldr	r3, [pc, #36]	@ (8008970 <cleanup_stdio+0x38>)
 800894c:	4299      	cmp	r1, r3
 800894e:	d002      	beq.n	8008956 <cleanup_stdio+0x1e>
 8008950:	4620      	mov	r0, r4
 8008952:	f003 f921 	bl	800bb98 <_fflush_r>
 8008956:	68e1      	ldr	r1, [r4, #12]
 8008958:	4b06      	ldr	r3, [pc, #24]	@ (8008974 <cleanup_stdio+0x3c>)
 800895a:	4299      	cmp	r1, r3
 800895c:	d004      	beq.n	8008968 <cleanup_stdio+0x30>
 800895e:	4620      	mov	r0, r4
 8008960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008964:	f003 b918 	b.w	800bb98 <_fflush_r>
 8008968:	bd10      	pop	{r4, pc}
 800896a:	bf00      	nop
 800896c:	20000910 	.word	0x20000910
 8008970:	20000978 	.word	0x20000978
 8008974:	200009e0 	.word	0x200009e0

08008978 <global_stdio_init.part.0>:
 8008978:	b510      	push	{r4, lr}
 800897a:	4b0b      	ldr	r3, [pc, #44]	@ (80089a8 <global_stdio_init.part.0+0x30>)
 800897c:	4c0b      	ldr	r4, [pc, #44]	@ (80089ac <global_stdio_init.part.0+0x34>)
 800897e:	4a0c      	ldr	r2, [pc, #48]	@ (80089b0 <global_stdio_init.part.0+0x38>)
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	4620      	mov	r0, r4
 8008984:	2200      	movs	r2, #0
 8008986:	2104      	movs	r1, #4
 8008988:	f7ff ff94 	bl	80088b4 <std>
 800898c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008990:	2201      	movs	r2, #1
 8008992:	2109      	movs	r1, #9
 8008994:	f7ff ff8e 	bl	80088b4 <std>
 8008998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800899c:	2202      	movs	r2, #2
 800899e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a2:	2112      	movs	r1, #18
 80089a4:	f7ff bf86 	b.w	80088b4 <std>
 80089a8:	20000a48 	.word	0x20000a48
 80089ac:	20000910 	.word	0x20000910
 80089b0:	08008921 	.word	0x08008921

080089b4 <__sfp_lock_acquire>:
 80089b4:	4801      	ldr	r0, [pc, #4]	@ (80089bc <__sfp_lock_acquire+0x8>)
 80089b6:	f000 b96e 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 80089ba:	bf00      	nop
 80089bc:	20000a51 	.word	0x20000a51

080089c0 <__sfp_lock_release>:
 80089c0:	4801      	ldr	r0, [pc, #4]	@ (80089c8 <__sfp_lock_release+0x8>)
 80089c2:	f000 b969 	b.w	8008c98 <__retarget_lock_release_recursive>
 80089c6:	bf00      	nop
 80089c8:	20000a51 	.word	0x20000a51

080089cc <__sinit>:
 80089cc:	b510      	push	{r4, lr}
 80089ce:	4604      	mov	r4, r0
 80089d0:	f7ff fff0 	bl	80089b4 <__sfp_lock_acquire>
 80089d4:	6a23      	ldr	r3, [r4, #32]
 80089d6:	b11b      	cbz	r3, 80089e0 <__sinit+0x14>
 80089d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089dc:	f7ff bff0 	b.w	80089c0 <__sfp_lock_release>
 80089e0:	4b04      	ldr	r3, [pc, #16]	@ (80089f4 <__sinit+0x28>)
 80089e2:	6223      	str	r3, [r4, #32]
 80089e4:	4b04      	ldr	r3, [pc, #16]	@ (80089f8 <__sinit+0x2c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f5      	bne.n	80089d8 <__sinit+0xc>
 80089ec:	f7ff ffc4 	bl	8008978 <global_stdio_init.part.0>
 80089f0:	e7f2      	b.n	80089d8 <__sinit+0xc>
 80089f2:	bf00      	nop
 80089f4:	08008939 	.word	0x08008939
 80089f8:	20000a48 	.word	0x20000a48

080089fc <_fwalk_sglue>:
 80089fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a00:	4607      	mov	r7, r0
 8008a02:	4688      	mov	r8, r1
 8008a04:	4614      	mov	r4, r2
 8008a06:	2600      	movs	r6, #0
 8008a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a10:	d505      	bpl.n	8008a1e <_fwalk_sglue+0x22>
 8008a12:	6824      	ldr	r4, [r4, #0]
 8008a14:	2c00      	cmp	r4, #0
 8008a16:	d1f7      	bne.n	8008a08 <_fwalk_sglue+0xc>
 8008a18:	4630      	mov	r0, r6
 8008a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1e:	89ab      	ldrh	r3, [r5, #12]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d907      	bls.n	8008a34 <_fwalk_sglue+0x38>
 8008a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	d003      	beq.n	8008a34 <_fwalk_sglue+0x38>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4638      	mov	r0, r7
 8008a30:	47c0      	blx	r8
 8008a32:	4306      	orrs	r6, r0
 8008a34:	3568      	adds	r5, #104	@ 0x68
 8008a36:	e7e9      	b.n	8008a0c <_fwalk_sglue+0x10>

08008a38 <siprintf>:
 8008a38:	b40e      	push	{r1, r2, r3}
 8008a3a:	b500      	push	{lr}
 8008a3c:	b09c      	sub	sp, #112	@ 0x70
 8008a3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a40:	9002      	str	r0, [sp, #8]
 8008a42:	9006      	str	r0, [sp, #24]
 8008a44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a48:	4809      	ldr	r0, [pc, #36]	@ (8008a70 <siprintf+0x38>)
 8008a4a:	9107      	str	r1, [sp, #28]
 8008a4c:	9104      	str	r1, [sp, #16]
 8008a4e:	4909      	ldr	r1, [pc, #36]	@ (8008a74 <siprintf+0x3c>)
 8008a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a54:	9105      	str	r1, [sp, #20]
 8008a56:	6800      	ldr	r0, [r0, #0]
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	a902      	add	r1, sp, #8
 8008a5c:	f002 fc02 	bl	800b264 <_svfiprintf_r>
 8008a60:	9b02      	ldr	r3, [sp, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	b01c      	add	sp, #112	@ 0x70
 8008a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a6c:	b003      	add	sp, #12
 8008a6e:	4770      	bx	lr
 8008a70:	200000fc 	.word	0x200000fc
 8008a74:	ffff0208 	.word	0xffff0208

08008a78 <siscanf>:
 8008a78:	b40e      	push	{r1, r2, r3}
 8008a7a:	b530      	push	{r4, r5, lr}
 8008a7c:	b09c      	sub	sp, #112	@ 0x70
 8008a7e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008a80:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008a84:	f854 5b04 	ldr.w	r5, [r4], #4
 8008a88:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008a8c:	9002      	str	r0, [sp, #8]
 8008a8e:	9006      	str	r0, [sp, #24]
 8008a90:	f7f7 fbee 	bl	8000270 <strlen>
 8008a94:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac4 <siscanf+0x4c>)
 8008a96:	9003      	str	r0, [sp, #12]
 8008a98:	9007      	str	r0, [sp, #28]
 8008a9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a9c:	480a      	ldr	r0, [pc, #40]	@ (8008ac8 <siscanf+0x50>)
 8008a9e:	9401      	str	r4, [sp, #4]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008aa4:	9314      	str	r3, [sp, #80]	@ 0x50
 8008aa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008aaa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008aae:	462a      	mov	r2, r5
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	a902      	add	r1, sp, #8
 8008ab4:	6800      	ldr	r0, [r0, #0]
 8008ab6:	f002 fd29 	bl	800b50c <__ssvfiscanf_r>
 8008aba:	b01c      	add	sp, #112	@ 0x70
 8008abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ac0:	b003      	add	sp, #12
 8008ac2:	4770      	bx	lr
 8008ac4:	08008aef 	.word	0x08008aef
 8008ac8:	200000fc 	.word	0x200000fc

08008acc <__sread>:
 8008acc:	b510      	push	{r4, lr}
 8008ace:	460c      	mov	r4, r1
 8008ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad4:	f000 f890 	bl	8008bf8 <_read_r>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	bfab      	itete	ge
 8008adc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ade:	89a3      	ldrhlt	r3, [r4, #12]
 8008ae0:	181b      	addge	r3, r3, r0
 8008ae2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ae6:	bfac      	ite	ge
 8008ae8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008aea:	81a3      	strhlt	r3, [r4, #12]
 8008aec:	bd10      	pop	{r4, pc}

08008aee <__seofread>:
 8008aee:	2000      	movs	r0, #0
 8008af0:	4770      	bx	lr

08008af2 <__swrite>:
 8008af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af6:	461f      	mov	r7, r3
 8008af8:	898b      	ldrh	r3, [r1, #12]
 8008afa:	05db      	lsls	r3, r3, #23
 8008afc:	4605      	mov	r5, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	4616      	mov	r6, r2
 8008b02:	d505      	bpl.n	8008b10 <__swrite+0x1e>
 8008b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b08:	2302      	movs	r3, #2
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f000 f862 	bl	8008bd4 <_lseek_r>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	4632      	mov	r2, r6
 8008b1e:	463b      	mov	r3, r7
 8008b20:	4628      	mov	r0, r5
 8008b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b26:	f000 b879 	b.w	8008c1c <_write_r>

08008b2a <__sseek>:
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b32:	f000 f84f 	bl	8008bd4 <_lseek_r>
 8008b36:	1c43      	adds	r3, r0, #1
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	bf15      	itete	ne
 8008b3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b46:	81a3      	strheq	r3, [r4, #12]
 8008b48:	bf18      	it	ne
 8008b4a:	81a3      	strhne	r3, [r4, #12]
 8008b4c:	bd10      	pop	{r4, pc}

08008b4e <__sclose>:
 8008b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b52:	f000 b82f 	b.w	8008bb4 <_close_r>

08008b56 <memset>:
 8008b56:	4402      	add	r2, r0
 8008b58:	4603      	mov	r3, r0
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d100      	bne.n	8008b60 <memset+0xa>
 8008b5e:	4770      	bx	lr
 8008b60:	f803 1b01 	strb.w	r1, [r3], #1
 8008b64:	e7f9      	b.n	8008b5a <memset+0x4>

08008b66 <strchr>:
 8008b66:	b2c9      	uxtb	r1, r1
 8008b68:	4603      	mov	r3, r0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b70:	b112      	cbz	r2, 8008b78 <strchr+0x12>
 8008b72:	428a      	cmp	r2, r1
 8008b74:	d1f9      	bne.n	8008b6a <strchr+0x4>
 8008b76:	4770      	bx	lr
 8008b78:	2900      	cmp	r1, #0
 8008b7a:	bf18      	it	ne
 8008b7c:	2000      	movne	r0, #0
 8008b7e:	4770      	bx	lr

08008b80 <strstr>:
 8008b80:	780a      	ldrb	r2, [r1, #0]
 8008b82:	b570      	push	{r4, r5, r6, lr}
 8008b84:	b96a      	cbnz	r2, 8008ba2 <strstr+0x22>
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d109      	bne.n	8008ba0 <strstr+0x20>
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	4605      	mov	r5, r0
 8008b90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0f6      	beq.n	8008b86 <strstr+0x6>
 8008b98:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008b9c:	429e      	cmp	r6, r3
 8008b9e:	d0f7      	beq.n	8008b90 <strstr+0x10>
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	7803      	ldrb	r3, [r0, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1ef      	bne.n	8008b88 <strstr+0x8>
 8008ba8:	4618      	mov	r0, r3
 8008baa:	e7ec      	b.n	8008b86 <strstr+0x6>

08008bac <_localeconv_r>:
 8008bac:	4800      	ldr	r0, [pc, #0]	@ (8008bb0 <_localeconv_r+0x4>)
 8008bae:	4770      	bx	lr
 8008bb0:	2000023c 	.word	0x2000023c

08008bb4 <_close_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d06      	ldr	r5, [pc, #24]	@ (8008bd0 <_close_r+0x1c>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7fa fa5c 	bl	800307c <_close>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_close_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_close_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20000a4c 	.word	0x20000a4c

08008bd4 <_lseek_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	@ (8008bf4 <_lseek_r+0x20>)
 8008bd8:	4604      	mov	r4, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7fa fa71 	bl	80030ca <_lseek>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_lseek_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_lseek_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20000a4c 	.word	0x20000a4c

08008bf8 <_read_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d07      	ldr	r5, [pc, #28]	@ (8008c18 <_read_r+0x20>)
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	4608      	mov	r0, r1
 8008c00:	4611      	mov	r1, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	602a      	str	r2, [r5, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7fa f9ff 	bl	800300a <_read>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_read_r+0x1e>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_read_r+0x1e>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20000a4c 	.word	0x20000a4c

08008c1c <_write_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d07      	ldr	r5, [pc, #28]	@ (8008c3c <_write_r+0x20>)
 8008c20:	4604      	mov	r4, r0
 8008c22:	4608      	mov	r0, r1
 8008c24:	4611      	mov	r1, r2
 8008c26:	2200      	movs	r2, #0
 8008c28:	602a      	str	r2, [r5, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f7fa fa0a 	bl	8003044 <_write>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_write_r+0x1e>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_write_r+0x1e>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	20000a4c 	.word	0x20000a4c

08008c40 <__errno>:
 8008c40:	4b01      	ldr	r3, [pc, #4]	@ (8008c48 <__errno+0x8>)
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	200000fc 	.word	0x200000fc

08008c4c <__libc_init_array>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008c84 <__libc_init_array+0x38>)
 8008c50:	4c0d      	ldr	r4, [pc, #52]	@ (8008c88 <__libc_init_array+0x3c>)
 8008c52:	1b64      	subs	r4, r4, r5
 8008c54:	10a4      	asrs	r4, r4, #2
 8008c56:	2600      	movs	r6, #0
 8008c58:	42a6      	cmp	r6, r4
 8008c5a:	d109      	bne.n	8008c70 <__libc_init_array+0x24>
 8008c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008c8c <__libc_init_array+0x40>)
 8008c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008c90 <__libc_init_array+0x44>)
 8008c60:	f003 ff72 	bl	800cb48 <_init>
 8008c64:	1b64      	subs	r4, r4, r5
 8008c66:	10a4      	asrs	r4, r4, #2
 8008c68:	2600      	movs	r6, #0
 8008c6a:	42a6      	cmp	r6, r4
 8008c6c:	d105      	bne.n	8008c7a <__libc_init_array+0x2e>
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c74:	4798      	blx	r3
 8008c76:	3601      	adds	r6, #1
 8008c78:	e7ee      	b.n	8008c58 <__libc_init_array+0xc>
 8008c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c7e:	4798      	blx	r3
 8008c80:	3601      	adds	r6, #1
 8008c82:	e7f2      	b.n	8008c6a <__libc_init_array+0x1e>
 8008c84:	0800d054 	.word	0x0800d054
 8008c88:	0800d054 	.word	0x0800d054
 8008c8c:	0800d054 	.word	0x0800d054
 8008c90:	0800d058 	.word	0x0800d058

08008c94 <__retarget_lock_init_recursive>:
 8008c94:	4770      	bx	lr

08008c96 <__retarget_lock_acquire_recursive>:
 8008c96:	4770      	bx	lr

08008c98 <__retarget_lock_release_recursive>:
 8008c98:	4770      	bx	lr
	...

08008c9c <nanf>:
 8008c9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ca4 <nanf+0x8>
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	7fc00000 	.word	0x7fc00000

08008ca8 <quorem>:
 8008ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	6903      	ldr	r3, [r0, #16]
 8008cae:	690c      	ldr	r4, [r1, #16]
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	db7e      	blt.n	8008db4 <quorem+0x10c>
 8008cb6:	3c01      	subs	r4, #1
 8008cb8:	f101 0814 	add.w	r8, r1, #20
 8008cbc:	00a3      	lsls	r3, r4, #2
 8008cbe:	f100 0514 	add.w	r5, r0, #20
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cda:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cde:	d32e      	bcc.n	8008d3e <quorem+0x96>
 8008ce0:	f04f 0a00 	mov.w	sl, #0
 8008ce4:	46c4      	mov	ip, r8
 8008ce6:	46ae      	mov	lr, r5
 8008ce8:	46d3      	mov	fp, sl
 8008cea:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008cee:	b298      	uxth	r0, r3
 8008cf0:	fb06 a000 	mla	r0, r6, r0, sl
 8008cf4:	0c02      	lsrs	r2, r0, #16
 8008cf6:	0c1b      	lsrs	r3, r3, #16
 8008cf8:	fb06 2303 	mla	r3, r6, r3, r2
 8008cfc:	f8de 2000 	ldr.w	r2, [lr]
 8008d00:	b280      	uxth	r0, r0
 8008d02:	b292      	uxth	r2, r2
 8008d04:	1a12      	subs	r2, r2, r0
 8008d06:	445a      	add	r2, fp
 8008d08:	f8de 0000 	ldr.w	r0, [lr]
 8008d0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d16:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d1a:	b292      	uxth	r2, r2
 8008d1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d20:	45e1      	cmp	r9, ip
 8008d22:	f84e 2b04 	str.w	r2, [lr], #4
 8008d26:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d2a:	d2de      	bcs.n	8008cea <quorem+0x42>
 8008d2c:	9b00      	ldr	r3, [sp, #0]
 8008d2e:	58eb      	ldr	r3, [r5, r3]
 8008d30:	b92b      	cbnz	r3, 8008d3e <quorem+0x96>
 8008d32:	9b01      	ldr	r3, [sp, #4]
 8008d34:	3b04      	subs	r3, #4
 8008d36:	429d      	cmp	r5, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	d32f      	bcc.n	8008d9c <quorem+0xf4>
 8008d3c:	613c      	str	r4, [r7, #16]
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f001 f9c2 	bl	800a0c8 <__mcmp>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	db25      	blt.n	8008d94 <quorem+0xec>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d50:	f8d1 c000 	ldr.w	ip, [r1]
 8008d54:	fa1f fe82 	uxth.w	lr, r2
 8008d58:	fa1f f38c 	uxth.w	r3, ip
 8008d5c:	eba3 030e 	sub.w	r3, r3, lr
 8008d60:	4403      	add	r3, r0
 8008d62:	0c12      	lsrs	r2, r2, #16
 8008d64:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d68:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d72:	45c1      	cmp	r9, r8
 8008d74:	f841 3b04 	str.w	r3, [r1], #4
 8008d78:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d7c:	d2e6      	bcs.n	8008d4c <quorem+0xa4>
 8008d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d86:	b922      	cbnz	r2, 8008d92 <quorem+0xea>
 8008d88:	3b04      	subs	r3, #4
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	d30b      	bcc.n	8008da8 <quorem+0x100>
 8008d90:	613c      	str	r4, [r7, #16]
 8008d92:	3601      	adds	r6, #1
 8008d94:	4630      	mov	r0, r6
 8008d96:	b003      	add	sp, #12
 8008d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	3b04      	subs	r3, #4
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	d1cb      	bne.n	8008d3c <quorem+0x94>
 8008da4:	3c01      	subs	r4, #1
 8008da6:	e7c6      	b.n	8008d36 <quorem+0x8e>
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	3b04      	subs	r3, #4
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	d1ef      	bne.n	8008d90 <quorem+0xe8>
 8008db0:	3c01      	subs	r4, #1
 8008db2:	e7ea      	b.n	8008d8a <quorem+0xe2>
 8008db4:	2000      	movs	r0, #0
 8008db6:	e7ee      	b.n	8008d96 <quorem+0xee>

08008db8 <_dtoa_r>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	69c7      	ldr	r7, [r0, #28]
 8008dbe:	b099      	sub	sp, #100	@ 0x64
 8008dc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008dc4:	ec55 4b10 	vmov	r4, r5, d0
 8008dc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008dca:	9109      	str	r1, [sp, #36]	@ 0x24
 8008dcc:	4683      	mov	fp, r0
 8008dce:	920e      	str	r2, [sp, #56]	@ 0x38
 8008dd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008dd2:	b97f      	cbnz	r7, 8008df4 <_dtoa_r+0x3c>
 8008dd4:	2010      	movs	r0, #16
 8008dd6:	f000 fdfd 	bl	80099d4 <malloc>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	f8cb 001c 	str.w	r0, [fp, #28]
 8008de0:	b920      	cbnz	r0, 8008dec <_dtoa_r+0x34>
 8008de2:	4ba7      	ldr	r3, [pc, #668]	@ (8009080 <_dtoa_r+0x2c8>)
 8008de4:	21ef      	movs	r1, #239	@ 0xef
 8008de6:	48a7      	ldr	r0, [pc, #668]	@ (8009084 <_dtoa_r+0x2cc>)
 8008de8:	f002 ffc6 	bl	800bd78 <__assert_func>
 8008dec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008df0:	6007      	str	r7, [r0, #0]
 8008df2:	60c7      	str	r7, [r0, #12]
 8008df4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008df8:	6819      	ldr	r1, [r3, #0]
 8008dfa:	b159      	cbz	r1, 8008e14 <_dtoa_r+0x5c>
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	604a      	str	r2, [r1, #4]
 8008e00:	2301      	movs	r3, #1
 8008e02:	4093      	lsls	r3, r2
 8008e04:	608b      	str	r3, [r1, #8]
 8008e06:	4658      	mov	r0, fp
 8008e08:	f000 feda 	bl	8009bc0 <_Bfree>
 8008e0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	1e2b      	subs	r3, r5, #0
 8008e16:	bfb9      	ittee	lt
 8008e18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e1c:	9303      	strlt	r3, [sp, #12]
 8008e1e:	2300      	movge	r3, #0
 8008e20:	6033      	strge	r3, [r6, #0]
 8008e22:	9f03      	ldr	r7, [sp, #12]
 8008e24:	4b98      	ldr	r3, [pc, #608]	@ (8009088 <_dtoa_r+0x2d0>)
 8008e26:	bfbc      	itt	lt
 8008e28:	2201      	movlt	r2, #1
 8008e2a:	6032      	strlt	r2, [r6, #0]
 8008e2c:	43bb      	bics	r3, r7
 8008e2e:	d112      	bne.n	8008e56 <_dtoa_r+0x9e>
 8008e30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e3c:	4323      	orrs	r3, r4
 8008e3e:	f000 854d 	beq.w	80098dc <_dtoa_r+0xb24>
 8008e42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800909c <_dtoa_r+0x2e4>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 854f 	beq.w	80098ec <_dtoa_r+0xb34>
 8008e4e:	f10a 0303 	add.w	r3, sl, #3
 8008e52:	f000 bd49 	b.w	80098e8 <_dtoa_r+0xb30>
 8008e56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	ec51 0b17 	vmov	r0, r1, d7
 8008e60:	2300      	movs	r3, #0
 8008e62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e66:	f7f7 fe2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e6a:	4680      	mov	r8, r0
 8008e6c:	b158      	cbz	r0, 8008e86 <_dtoa_r+0xce>
 8008e6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e70:	2301      	movs	r3, #1
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e76:	b113      	cbz	r3, 8008e7e <_dtoa_r+0xc6>
 8008e78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e7a:	4b84      	ldr	r3, [pc, #528]	@ (800908c <_dtoa_r+0x2d4>)
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80090a0 <_dtoa_r+0x2e8>
 8008e82:	f000 bd33 	b.w	80098ec <_dtoa_r+0xb34>
 8008e86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e8a:	aa16      	add	r2, sp, #88	@ 0x58
 8008e8c:	a917      	add	r1, sp, #92	@ 0x5c
 8008e8e:	4658      	mov	r0, fp
 8008e90:	f001 fa3a 	bl	800a308 <__d2b>
 8008e94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e98:	4681      	mov	r9, r0
 8008e9a:	2e00      	cmp	r6, #0
 8008e9c:	d077      	beq.n	8008f8e <_dtoa_r+0x1d6>
 8008e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ea0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008eb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008eb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008eb8:	4619      	mov	r1, r3
 8008eba:	2200      	movs	r2, #0
 8008ebc:	4b74      	ldr	r3, [pc, #464]	@ (8009090 <_dtoa_r+0x2d8>)
 8008ebe:	f7f7 f9e3 	bl	8000288 <__aeabi_dsub>
 8008ec2:	a369      	add	r3, pc, #420	@ (adr r3, 8009068 <_dtoa_r+0x2b0>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 fb96 	bl	80005f8 <__aeabi_dmul>
 8008ecc:	a368      	add	r3, pc, #416	@ (adr r3, 8009070 <_dtoa_r+0x2b8>)
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	f7f7 f9db 	bl	800028c <__adddf3>
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4630      	mov	r0, r6
 8008eda:	460d      	mov	r5, r1
 8008edc:	f7f7 fb22 	bl	8000524 <__aeabi_i2d>
 8008ee0:	a365      	add	r3, pc, #404	@ (adr r3, 8009078 <_dtoa_r+0x2c0>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f7f7 fb87 	bl	80005f8 <__aeabi_dmul>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 f9cb 	bl	800028c <__adddf3>
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	460d      	mov	r5, r1
 8008efa:	f7f7 fe2d 	bl	8000b58 <__aeabi_d2iz>
 8008efe:	2200      	movs	r2, #0
 8008f00:	4607      	mov	r7, r0
 8008f02:	2300      	movs	r3, #0
 8008f04:	4620      	mov	r0, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	f7f7 fde8 	bl	8000adc <__aeabi_dcmplt>
 8008f0c:	b140      	cbz	r0, 8008f20 <_dtoa_r+0x168>
 8008f0e:	4638      	mov	r0, r7
 8008f10:	f7f7 fb08 	bl	8000524 <__aeabi_i2d>
 8008f14:	4622      	mov	r2, r4
 8008f16:	462b      	mov	r3, r5
 8008f18:	f7f7 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f1c:	b900      	cbnz	r0, 8008f20 <_dtoa_r+0x168>
 8008f1e:	3f01      	subs	r7, #1
 8008f20:	2f16      	cmp	r7, #22
 8008f22:	d851      	bhi.n	8008fc8 <_dtoa_r+0x210>
 8008f24:	4b5b      	ldr	r3, [pc, #364]	@ (8009094 <_dtoa_r+0x2dc>)
 8008f26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f32:	f7f7 fdd3 	bl	8000adc <__aeabi_dcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d048      	beq.n	8008fcc <_dtoa_r+0x214>
 8008f3a:	3f01      	subs	r7, #1
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f42:	1b9b      	subs	r3, r3, r6
 8008f44:	1e5a      	subs	r2, r3, #1
 8008f46:	bf44      	itt	mi
 8008f48:	f1c3 0801 	rsbmi	r8, r3, #1
 8008f4c:	2300      	movmi	r3, #0
 8008f4e:	9208      	str	r2, [sp, #32]
 8008f50:	bf54      	ite	pl
 8008f52:	f04f 0800 	movpl.w	r8, #0
 8008f56:	9308      	strmi	r3, [sp, #32]
 8008f58:	2f00      	cmp	r7, #0
 8008f5a:	db39      	blt.n	8008fd0 <_dtoa_r+0x218>
 8008f5c:	9b08      	ldr	r3, [sp, #32]
 8008f5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f60:	443b      	add	r3, r7
 8008f62:	9308      	str	r3, [sp, #32]
 8008f64:	2300      	movs	r3, #0
 8008f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	d864      	bhi.n	8009038 <_dtoa_r+0x280>
 8008f6e:	2b05      	cmp	r3, #5
 8008f70:	bfc4      	itt	gt
 8008f72:	3b04      	subgt	r3, #4
 8008f74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f78:	f1a3 0302 	sub.w	r3, r3, #2
 8008f7c:	bfcc      	ite	gt
 8008f7e:	2400      	movgt	r4, #0
 8008f80:	2401      	movle	r4, #1
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d863      	bhi.n	800904e <_dtoa_r+0x296>
 8008f86:	e8df f003 	tbb	[pc, r3]
 8008f8a:	372a      	.short	0x372a
 8008f8c:	5535      	.short	0x5535
 8008f8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008f92:	441e      	add	r6, r3
 8008f94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f98:	2b20      	cmp	r3, #32
 8008f9a:	bfc1      	itttt	gt
 8008f9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008fa0:	409f      	lslgt	r7, r3
 8008fa2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008fa6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008faa:	bfd6      	itet	le
 8008fac:	f1c3 0320 	rsble	r3, r3, #32
 8008fb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008fb4:	fa04 f003 	lslle.w	r0, r4, r3
 8008fb8:	f7f7 faa4 	bl	8000504 <__aeabi_ui2d>
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008fc2:	3e01      	subs	r6, #1
 8008fc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008fc6:	e777      	b.n	8008eb8 <_dtoa_r+0x100>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e7b8      	b.n	8008f3e <_dtoa_r+0x186>
 8008fcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008fce:	e7b7      	b.n	8008f40 <_dtoa_r+0x188>
 8008fd0:	427b      	negs	r3, r7
 8008fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	eba8 0807 	sub.w	r8, r8, r7
 8008fda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fdc:	e7c4      	b.n	8008f68 <_dtoa_r+0x1b0>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dc35      	bgt.n	8009054 <_dtoa_r+0x29c>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	9307      	str	r3, [sp, #28]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ff2:	e00b      	b.n	800900c <_dtoa_r+0x254>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e7f3      	b.n	8008fe0 <_dtoa_r+0x228>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ffe:	18fb      	adds	r3, r7, r3
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	2b01      	cmp	r3, #1
 8009006:	9307      	str	r3, [sp, #28]
 8009008:	bfb8      	it	lt
 800900a:	2301      	movlt	r3, #1
 800900c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009010:	2100      	movs	r1, #0
 8009012:	2204      	movs	r2, #4
 8009014:	f102 0514 	add.w	r5, r2, #20
 8009018:	429d      	cmp	r5, r3
 800901a:	d91f      	bls.n	800905c <_dtoa_r+0x2a4>
 800901c:	6041      	str	r1, [r0, #4]
 800901e:	4658      	mov	r0, fp
 8009020:	f000 fd8e 	bl	8009b40 <_Balloc>
 8009024:	4682      	mov	sl, r0
 8009026:	2800      	cmp	r0, #0
 8009028:	d13c      	bne.n	80090a4 <_dtoa_r+0x2ec>
 800902a:	4b1b      	ldr	r3, [pc, #108]	@ (8009098 <_dtoa_r+0x2e0>)
 800902c:	4602      	mov	r2, r0
 800902e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009032:	e6d8      	b.n	8008de6 <_dtoa_r+0x2e>
 8009034:	2301      	movs	r3, #1
 8009036:	e7e0      	b.n	8008ffa <_dtoa_r+0x242>
 8009038:	2401      	movs	r4, #1
 800903a:	2300      	movs	r3, #0
 800903c:	9309      	str	r3, [sp, #36]	@ 0x24
 800903e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009040:	f04f 33ff 	mov.w	r3, #4294967295
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	2200      	movs	r2, #0
 800904a:	2312      	movs	r3, #18
 800904c:	e7d0      	b.n	8008ff0 <_dtoa_r+0x238>
 800904e:	2301      	movs	r3, #1
 8009050:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009052:	e7f5      	b.n	8009040 <_dtoa_r+0x288>
 8009054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	9307      	str	r3, [sp, #28]
 800905a:	e7d7      	b.n	800900c <_dtoa_r+0x254>
 800905c:	3101      	adds	r1, #1
 800905e:	0052      	lsls	r2, r2, #1
 8009060:	e7d8      	b.n	8009014 <_dtoa_r+0x25c>
 8009062:	bf00      	nop
 8009064:	f3af 8000 	nop.w
 8009068:	636f4361 	.word	0x636f4361
 800906c:	3fd287a7 	.word	0x3fd287a7
 8009070:	8b60c8b3 	.word	0x8b60c8b3
 8009074:	3fc68a28 	.word	0x3fc68a28
 8009078:	509f79fb 	.word	0x509f79fb
 800907c:	3fd34413 	.word	0x3fd34413
 8009080:	0800cc48 	.word	0x0800cc48
 8009084:	0800cc5f 	.word	0x0800cc5f
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	0800cfa1 	.word	0x0800cfa1
 8009090:	3ff80000 	.word	0x3ff80000
 8009094:	0800cd58 	.word	0x0800cd58
 8009098:	0800ccb7 	.word	0x0800ccb7
 800909c:	0800cc44 	.word	0x0800cc44
 80090a0:	0800cfa0 	.word	0x0800cfa0
 80090a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090a8:	6018      	str	r0, [r3, #0]
 80090aa:	9b07      	ldr	r3, [sp, #28]
 80090ac:	2b0e      	cmp	r3, #14
 80090ae:	f200 80a4 	bhi.w	80091fa <_dtoa_r+0x442>
 80090b2:	2c00      	cmp	r4, #0
 80090b4:	f000 80a1 	beq.w	80091fa <_dtoa_r+0x442>
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	dd33      	ble.n	8009124 <_dtoa_r+0x36c>
 80090bc:	4bad      	ldr	r3, [pc, #692]	@ (8009374 <_dtoa_r+0x5bc>)
 80090be:	f007 020f 	and.w	r2, r7, #15
 80090c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090c6:	ed93 7b00 	vldr	d7, [r3]
 80090ca:	05f8      	lsls	r0, r7, #23
 80090cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80090d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80090d4:	d516      	bpl.n	8009104 <_dtoa_r+0x34c>
 80090d6:	4ba8      	ldr	r3, [pc, #672]	@ (8009378 <_dtoa_r+0x5c0>)
 80090d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090e0:	f7f7 fbb4 	bl	800084c <__aeabi_ddiv>
 80090e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090e8:	f004 040f 	and.w	r4, r4, #15
 80090ec:	2603      	movs	r6, #3
 80090ee:	4da2      	ldr	r5, [pc, #648]	@ (8009378 <_dtoa_r+0x5c0>)
 80090f0:	b954      	cbnz	r4, 8009108 <_dtoa_r+0x350>
 80090f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090fa:	f7f7 fba7 	bl	800084c <__aeabi_ddiv>
 80090fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009102:	e028      	b.n	8009156 <_dtoa_r+0x39e>
 8009104:	2602      	movs	r6, #2
 8009106:	e7f2      	b.n	80090ee <_dtoa_r+0x336>
 8009108:	07e1      	lsls	r1, r4, #31
 800910a:	d508      	bpl.n	800911e <_dtoa_r+0x366>
 800910c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009110:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009114:	f7f7 fa70 	bl	80005f8 <__aeabi_dmul>
 8009118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800911c:	3601      	adds	r6, #1
 800911e:	1064      	asrs	r4, r4, #1
 8009120:	3508      	adds	r5, #8
 8009122:	e7e5      	b.n	80090f0 <_dtoa_r+0x338>
 8009124:	f000 80d2 	beq.w	80092cc <_dtoa_r+0x514>
 8009128:	427c      	negs	r4, r7
 800912a:	4b92      	ldr	r3, [pc, #584]	@ (8009374 <_dtoa_r+0x5bc>)
 800912c:	4d92      	ldr	r5, [pc, #584]	@ (8009378 <_dtoa_r+0x5c0>)
 800912e:	f004 020f 	and.w	r2, r4, #15
 8009132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800913e:	f7f7 fa5b 	bl	80005f8 <__aeabi_dmul>
 8009142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009146:	1124      	asrs	r4, r4, #4
 8009148:	2300      	movs	r3, #0
 800914a:	2602      	movs	r6, #2
 800914c:	2c00      	cmp	r4, #0
 800914e:	f040 80b2 	bne.w	80092b6 <_dtoa_r+0x4fe>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1d3      	bne.n	80090fe <_dtoa_r+0x346>
 8009156:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009158:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 80b7 	beq.w	80092d0 <_dtoa_r+0x518>
 8009162:	4b86      	ldr	r3, [pc, #536]	@ (800937c <_dtoa_r+0x5c4>)
 8009164:	2200      	movs	r2, #0
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800916e:	2800      	cmp	r0, #0
 8009170:	f000 80ae 	beq.w	80092d0 <_dtoa_r+0x518>
 8009174:	9b07      	ldr	r3, [sp, #28]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 80aa 	beq.w	80092d0 <_dtoa_r+0x518>
 800917c:	9b00      	ldr	r3, [sp, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	dd37      	ble.n	80091f2 <_dtoa_r+0x43a>
 8009182:	1e7b      	subs	r3, r7, #1
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	4620      	mov	r0, r4
 8009188:	4b7d      	ldr	r3, [pc, #500]	@ (8009380 <_dtoa_r+0x5c8>)
 800918a:	2200      	movs	r2, #0
 800918c:	4629      	mov	r1, r5
 800918e:	f7f7 fa33 	bl	80005f8 <__aeabi_dmul>
 8009192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009196:	9c00      	ldr	r4, [sp, #0]
 8009198:	3601      	adds	r6, #1
 800919a:	4630      	mov	r0, r6
 800919c:	f7f7 f9c2 	bl	8000524 <__aeabi_i2d>
 80091a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091a4:	f7f7 fa28 	bl	80005f8 <__aeabi_dmul>
 80091a8:	4b76      	ldr	r3, [pc, #472]	@ (8009384 <_dtoa_r+0x5cc>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	f7f7 f86e 	bl	800028c <__adddf3>
 80091b0:	4605      	mov	r5, r0
 80091b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	f040 808d 	bne.w	80092d6 <_dtoa_r+0x51e>
 80091bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091c0:	4b71      	ldr	r3, [pc, #452]	@ (8009388 <_dtoa_r+0x5d0>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	f7f7 f860 	bl	8000288 <__aeabi_dsub>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091d0:	462a      	mov	r2, r5
 80091d2:	4633      	mov	r3, r6
 80091d4:	f7f7 fca0 	bl	8000b18 <__aeabi_dcmpgt>
 80091d8:	2800      	cmp	r0, #0
 80091da:	f040 828b 	bne.w	80096f4 <_dtoa_r+0x93c>
 80091de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091e2:	462a      	mov	r2, r5
 80091e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80091e8:	f7f7 fc78 	bl	8000adc <__aeabi_dcmplt>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f040 8128 	bne.w	8009442 <_dtoa_r+0x68a>
 80091f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80091f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80091fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f2c0 815a 	blt.w	80094b6 <_dtoa_r+0x6fe>
 8009202:	2f0e      	cmp	r7, #14
 8009204:	f300 8157 	bgt.w	80094b6 <_dtoa_r+0x6fe>
 8009208:	4b5a      	ldr	r3, [pc, #360]	@ (8009374 <_dtoa_r+0x5bc>)
 800920a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800920e:	ed93 7b00 	vldr	d7, [r3]
 8009212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009214:	2b00      	cmp	r3, #0
 8009216:	ed8d 7b00 	vstr	d7, [sp]
 800921a:	da03      	bge.n	8009224 <_dtoa_r+0x46c>
 800921c:	9b07      	ldr	r3, [sp, #28]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f340 8101 	ble.w	8009426 <_dtoa_r+0x66e>
 8009224:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009228:	4656      	mov	r6, sl
 800922a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 fb0b 	bl	800084c <__aeabi_ddiv>
 8009236:	f7f7 fc8f 	bl	8000b58 <__aeabi_d2iz>
 800923a:	4680      	mov	r8, r0
 800923c:	f7f7 f972 	bl	8000524 <__aeabi_i2d>
 8009240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009244:	f7f7 f9d8 	bl	80005f8 <__aeabi_dmul>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4620      	mov	r0, r4
 800924e:	4629      	mov	r1, r5
 8009250:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009254:	f7f7 f818 	bl	8000288 <__aeabi_dsub>
 8009258:	f806 4b01 	strb.w	r4, [r6], #1
 800925c:	9d07      	ldr	r5, [sp, #28]
 800925e:	eba6 040a 	sub.w	r4, r6, sl
 8009262:	42a5      	cmp	r5, r4
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	f040 8117 	bne.w	800949a <_dtoa_r+0x6e2>
 800926c:	f7f7 f80e 	bl	800028c <__adddf3>
 8009270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	f7f7 fc4e 	bl	8000b18 <__aeabi_dcmpgt>
 800927c:	2800      	cmp	r0, #0
 800927e:	f040 80f9 	bne.w	8009474 <_dtoa_r+0x6bc>
 8009282:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009286:	4620      	mov	r0, r4
 8009288:	4629      	mov	r1, r5
 800928a:	f7f7 fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800928e:	b118      	cbz	r0, 8009298 <_dtoa_r+0x4e0>
 8009290:	f018 0f01 	tst.w	r8, #1
 8009294:	f040 80ee 	bne.w	8009474 <_dtoa_r+0x6bc>
 8009298:	4649      	mov	r1, r9
 800929a:	4658      	mov	r0, fp
 800929c:	f000 fc90 	bl	8009bc0 <_Bfree>
 80092a0:	2300      	movs	r3, #0
 80092a2:	7033      	strb	r3, [r6, #0]
 80092a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092a6:	3701      	adds	r7, #1
 80092a8:	601f      	str	r7, [r3, #0]
 80092aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 831d 	beq.w	80098ec <_dtoa_r+0xb34>
 80092b2:	601e      	str	r6, [r3, #0]
 80092b4:	e31a      	b.n	80098ec <_dtoa_r+0xb34>
 80092b6:	07e2      	lsls	r2, r4, #31
 80092b8:	d505      	bpl.n	80092c6 <_dtoa_r+0x50e>
 80092ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092be:	f7f7 f99b 	bl	80005f8 <__aeabi_dmul>
 80092c2:	3601      	adds	r6, #1
 80092c4:	2301      	movs	r3, #1
 80092c6:	1064      	asrs	r4, r4, #1
 80092c8:	3508      	adds	r5, #8
 80092ca:	e73f      	b.n	800914c <_dtoa_r+0x394>
 80092cc:	2602      	movs	r6, #2
 80092ce:	e742      	b.n	8009156 <_dtoa_r+0x39e>
 80092d0:	9c07      	ldr	r4, [sp, #28]
 80092d2:	9704      	str	r7, [sp, #16]
 80092d4:	e761      	b.n	800919a <_dtoa_r+0x3e2>
 80092d6:	4b27      	ldr	r3, [pc, #156]	@ (8009374 <_dtoa_r+0x5bc>)
 80092d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092e2:	4454      	add	r4, sl
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d053      	beq.n	8009390 <_dtoa_r+0x5d8>
 80092e8:	4928      	ldr	r1, [pc, #160]	@ (800938c <_dtoa_r+0x5d4>)
 80092ea:	2000      	movs	r0, #0
 80092ec:	f7f7 faae 	bl	800084c <__aeabi_ddiv>
 80092f0:	4633      	mov	r3, r6
 80092f2:	462a      	mov	r2, r5
 80092f4:	f7f6 ffc8 	bl	8000288 <__aeabi_dsub>
 80092f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092fc:	4656      	mov	r6, sl
 80092fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009302:	f7f7 fc29 	bl	8000b58 <__aeabi_d2iz>
 8009306:	4605      	mov	r5, r0
 8009308:	f7f7 f90c 	bl	8000524 <__aeabi_i2d>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009314:	f7f6 ffb8 	bl	8000288 <__aeabi_dsub>
 8009318:	3530      	adds	r5, #48	@ 0x30
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009322:	f806 5b01 	strb.w	r5, [r6], #1
 8009326:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800932a:	f7f7 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800932e:	2800      	cmp	r0, #0
 8009330:	d171      	bne.n	8009416 <_dtoa_r+0x65e>
 8009332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009336:	4911      	ldr	r1, [pc, #68]	@ (800937c <_dtoa_r+0x5c4>)
 8009338:	2000      	movs	r0, #0
 800933a:	f7f6 ffa5 	bl	8000288 <__aeabi_dsub>
 800933e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009342:	f7f7 fbcb 	bl	8000adc <__aeabi_dcmplt>
 8009346:	2800      	cmp	r0, #0
 8009348:	f040 8095 	bne.w	8009476 <_dtoa_r+0x6be>
 800934c:	42a6      	cmp	r6, r4
 800934e:	f43f af50 	beq.w	80091f2 <_dtoa_r+0x43a>
 8009352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009356:	4b0a      	ldr	r3, [pc, #40]	@ (8009380 <_dtoa_r+0x5c8>)
 8009358:	2200      	movs	r2, #0
 800935a:	f7f7 f94d 	bl	80005f8 <__aeabi_dmul>
 800935e:	4b08      	ldr	r3, [pc, #32]	@ (8009380 <_dtoa_r+0x5c8>)
 8009360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009364:	2200      	movs	r2, #0
 8009366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800936a:	f7f7 f945 	bl	80005f8 <__aeabi_dmul>
 800936e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009372:	e7c4      	b.n	80092fe <_dtoa_r+0x546>
 8009374:	0800cd58 	.word	0x0800cd58
 8009378:	0800cd30 	.word	0x0800cd30
 800937c:	3ff00000 	.word	0x3ff00000
 8009380:	40240000 	.word	0x40240000
 8009384:	401c0000 	.word	0x401c0000
 8009388:	40140000 	.word	0x40140000
 800938c:	3fe00000 	.word	0x3fe00000
 8009390:	4631      	mov	r1, r6
 8009392:	4628      	mov	r0, r5
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800939c:	9415      	str	r4, [sp, #84]	@ 0x54
 800939e:	4656      	mov	r6, sl
 80093a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093a4:	f7f7 fbd8 	bl	8000b58 <__aeabi_d2iz>
 80093a8:	4605      	mov	r5, r0
 80093aa:	f7f7 f8bb 	bl	8000524 <__aeabi_i2d>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b6:	f7f6 ff67 	bl	8000288 <__aeabi_dsub>
 80093ba:	3530      	adds	r5, #48	@ 0x30
 80093bc:	f806 5b01 	strb.w	r5, [r6], #1
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	42a6      	cmp	r6, r4
 80093c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093ca:	f04f 0200 	mov.w	r2, #0
 80093ce:	d124      	bne.n	800941a <_dtoa_r+0x662>
 80093d0:	4bac      	ldr	r3, [pc, #688]	@ (8009684 <_dtoa_r+0x8cc>)
 80093d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80093d6:	f7f6 ff59 	bl	800028c <__adddf3>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e2:	f7f7 fb99 	bl	8000b18 <__aeabi_dcmpgt>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d145      	bne.n	8009476 <_dtoa_r+0x6be>
 80093ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093ee:	49a5      	ldr	r1, [pc, #660]	@ (8009684 <_dtoa_r+0x8cc>)
 80093f0:	2000      	movs	r0, #0
 80093f2:	f7f6 ff49 	bl	8000288 <__aeabi_dsub>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093fe:	f7f7 fb6d 	bl	8000adc <__aeabi_dcmplt>
 8009402:	2800      	cmp	r0, #0
 8009404:	f43f aef5 	beq.w	80091f2 <_dtoa_r+0x43a>
 8009408:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800940a:	1e73      	subs	r3, r6, #1
 800940c:	9315      	str	r3, [sp, #84]	@ 0x54
 800940e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009412:	2b30      	cmp	r3, #48	@ 0x30
 8009414:	d0f8      	beq.n	8009408 <_dtoa_r+0x650>
 8009416:	9f04      	ldr	r7, [sp, #16]
 8009418:	e73e      	b.n	8009298 <_dtoa_r+0x4e0>
 800941a:	4b9b      	ldr	r3, [pc, #620]	@ (8009688 <_dtoa_r+0x8d0>)
 800941c:	f7f7 f8ec 	bl	80005f8 <__aeabi_dmul>
 8009420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009424:	e7bc      	b.n	80093a0 <_dtoa_r+0x5e8>
 8009426:	d10c      	bne.n	8009442 <_dtoa_r+0x68a>
 8009428:	4b98      	ldr	r3, [pc, #608]	@ (800968c <_dtoa_r+0x8d4>)
 800942a:	2200      	movs	r2, #0
 800942c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009430:	f7f7 f8e2 	bl	80005f8 <__aeabi_dmul>
 8009434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009438:	f7f7 fb64 	bl	8000b04 <__aeabi_dcmpge>
 800943c:	2800      	cmp	r0, #0
 800943e:	f000 8157 	beq.w	80096f0 <_dtoa_r+0x938>
 8009442:	2400      	movs	r4, #0
 8009444:	4625      	mov	r5, r4
 8009446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009448:	43db      	mvns	r3, r3
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	4656      	mov	r6, sl
 800944e:	2700      	movs	r7, #0
 8009450:	4621      	mov	r1, r4
 8009452:	4658      	mov	r0, fp
 8009454:	f000 fbb4 	bl	8009bc0 <_Bfree>
 8009458:	2d00      	cmp	r5, #0
 800945a:	d0dc      	beq.n	8009416 <_dtoa_r+0x65e>
 800945c:	b12f      	cbz	r7, 800946a <_dtoa_r+0x6b2>
 800945e:	42af      	cmp	r7, r5
 8009460:	d003      	beq.n	800946a <_dtoa_r+0x6b2>
 8009462:	4639      	mov	r1, r7
 8009464:	4658      	mov	r0, fp
 8009466:	f000 fbab 	bl	8009bc0 <_Bfree>
 800946a:	4629      	mov	r1, r5
 800946c:	4658      	mov	r0, fp
 800946e:	f000 fba7 	bl	8009bc0 <_Bfree>
 8009472:	e7d0      	b.n	8009416 <_dtoa_r+0x65e>
 8009474:	9704      	str	r7, [sp, #16]
 8009476:	4633      	mov	r3, r6
 8009478:	461e      	mov	r6, r3
 800947a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800947e:	2a39      	cmp	r2, #57	@ 0x39
 8009480:	d107      	bne.n	8009492 <_dtoa_r+0x6da>
 8009482:	459a      	cmp	sl, r3
 8009484:	d1f8      	bne.n	8009478 <_dtoa_r+0x6c0>
 8009486:	9a04      	ldr	r2, [sp, #16]
 8009488:	3201      	adds	r2, #1
 800948a:	9204      	str	r2, [sp, #16]
 800948c:	2230      	movs	r2, #48	@ 0x30
 800948e:	f88a 2000 	strb.w	r2, [sl]
 8009492:	781a      	ldrb	r2, [r3, #0]
 8009494:	3201      	adds	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]
 8009498:	e7bd      	b.n	8009416 <_dtoa_r+0x65e>
 800949a:	4b7b      	ldr	r3, [pc, #492]	@ (8009688 <_dtoa_r+0x8d0>)
 800949c:	2200      	movs	r2, #0
 800949e:	f7f7 f8ab 	bl	80005f8 <__aeabi_dmul>
 80094a2:	2200      	movs	r2, #0
 80094a4:	2300      	movs	r3, #0
 80094a6:	4604      	mov	r4, r0
 80094a8:	460d      	mov	r5, r1
 80094aa:	f7f7 fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f43f aebb 	beq.w	800922a <_dtoa_r+0x472>
 80094b4:	e6f0      	b.n	8009298 <_dtoa_r+0x4e0>
 80094b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80094b8:	2a00      	cmp	r2, #0
 80094ba:	f000 80db 	beq.w	8009674 <_dtoa_r+0x8bc>
 80094be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094c0:	2a01      	cmp	r2, #1
 80094c2:	f300 80bf 	bgt.w	8009644 <_dtoa_r+0x88c>
 80094c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	f000 80b7 	beq.w	800963c <_dtoa_r+0x884>
 80094ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80094d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80094d4:	4646      	mov	r6, r8
 80094d6:	9a08      	ldr	r2, [sp, #32]
 80094d8:	2101      	movs	r1, #1
 80094da:	441a      	add	r2, r3
 80094dc:	4658      	mov	r0, fp
 80094de:	4498      	add	r8, r3
 80094e0:	9208      	str	r2, [sp, #32]
 80094e2:	f000 fc6b 	bl	8009dbc <__i2b>
 80094e6:	4605      	mov	r5, r0
 80094e8:	b15e      	cbz	r6, 8009502 <_dtoa_r+0x74a>
 80094ea:	9b08      	ldr	r3, [sp, #32]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dd08      	ble.n	8009502 <_dtoa_r+0x74a>
 80094f0:	42b3      	cmp	r3, r6
 80094f2:	9a08      	ldr	r2, [sp, #32]
 80094f4:	bfa8      	it	ge
 80094f6:	4633      	movge	r3, r6
 80094f8:	eba8 0803 	sub.w	r8, r8, r3
 80094fc:	1af6      	subs	r6, r6, r3
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	9308      	str	r3, [sp, #32]
 8009502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009504:	b1f3      	cbz	r3, 8009544 <_dtoa_r+0x78c>
 8009506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 80b7 	beq.w	800967c <_dtoa_r+0x8c4>
 800950e:	b18c      	cbz	r4, 8009534 <_dtoa_r+0x77c>
 8009510:	4629      	mov	r1, r5
 8009512:	4622      	mov	r2, r4
 8009514:	4658      	mov	r0, fp
 8009516:	f000 fd11 	bl	8009f3c <__pow5mult>
 800951a:	464a      	mov	r2, r9
 800951c:	4601      	mov	r1, r0
 800951e:	4605      	mov	r5, r0
 8009520:	4658      	mov	r0, fp
 8009522:	f000 fc61 	bl	8009de8 <__multiply>
 8009526:	4649      	mov	r1, r9
 8009528:	9004      	str	r0, [sp, #16]
 800952a:	4658      	mov	r0, fp
 800952c:	f000 fb48 	bl	8009bc0 <_Bfree>
 8009530:	9b04      	ldr	r3, [sp, #16]
 8009532:	4699      	mov	r9, r3
 8009534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009536:	1b1a      	subs	r2, r3, r4
 8009538:	d004      	beq.n	8009544 <_dtoa_r+0x78c>
 800953a:	4649      	mov	r1, r9
 800953c:	4658      	mov	r0, fp
 800953e:	f000 fcfd 	bl	8009f3c <__pow5mult>
 8009542:	4681      	mov	r9, r0
 8009544:	2101      	movs	r1, #1
 8009546:	4658      	mov	r0, fp
 8009548:	f000 fc38 	bl	8009dbc <__i2b>
 800954c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800954e:	4604      	mov	r4, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 81cf 	beq.w	80098f4 <_dtoa_r+0xb3c>
 8009556:	461a      	mov	r2, r3
 8009558:	4601      	mov	r1, r0
 800955a:	4658      	mov	r0, fp
 800955c:	f000 fcee 	bl	8009f3c <__pow5mult>
 8009560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009562:	2b01      	cmp	r3, #1
 8009564:	4604      	mov	r4, r0
 8009566:	f300 8095 	bgt.w	8009694 <_dtoa_r+0x8dc>
 800956a:	9b02      	ldr	r3, [sp, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8087 	bne.w	8009680 <_dtoa_r+0x8c8>
 8009572:	9b03      	ldr	r3, [sp, #12]
 8009574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009578:	2b00      	cmp	r3, #0
 800957a:	f040 8089 	bne.w	8009690 <_dtoa_r+0x8d8>
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009584:	0d1b      	lsrs	r3, r3, #20
 8009586:	051b      	lsls	r3, r3, #20
 8009588:	b12b      	cbz	r3, 8009596 <_dtoa_r+0x7de>
 800958a:	9b08      	ldr	r3, [sp, #32]
 800958c:	3301      	adds	r3, #1
 800958e:	9308      	str	r3, [sp, #32]
 8009590:	f108 0801 	add.w	r8, r8, #1
 8009594:	2301      	movs	r3, #1
 8009596:	930a      	str	r3, [sp, #40]	@ 0x28
 8009598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 81b0 	beq.w	8009900 <_dtoa_r+0xb48>
 80095a0:	6923      	ldr	r3, [r4, #16]
 80095a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095a6:	6918      	ldr	r0, [r3, #16]
 80095a8:	f000 fbbc 	bl	8009d24 <__hi0bits>
 80095ac:	f1c0 0020 	rsb	r0, r0, #32
 80095b0:	9b08      	ldr	r3, [sp, #32]
 80095b2:	4418      	add	r0, r3
 80095b4:	f010 001f 	ands.w	r0, r0, #31
 80095b8:	d077      	beq.n	80096aa <_dtoa_r+0x8f2>
 80095ba:	f1c0 0320 	rsb	r3, r0, #32
 80095be:	2b04      	cmp	r3, #4
 80095c0:	dd6b      	ble.n	800969a <_dtoa_r+0x8e2>
 80095c2:	9b08      	ldr	r3, [sp, #32]
 80095c4:	f1c0 001c 	rsb	r0, r0, #28
 80095c8:	4403      	add	r3, r0
 80095ca:	4480      	add	r8, r0
 80095cc:	4406      	add	r6, r0
 80095ce:	9308      	str	r3, [sp, #32]
 80095d0:	f1b8 0f00 	cmp.w	r8, #0
 80095d4:	dd05      	ble.n	80095e2 <_dtoa_r+0x82a>
 80095d6:	4649      	mov	r1, r9
 80095d8:	4642      	mov	r2, r8
 80095da:	4658      	mov	r0, fp
 80095dc:	f000 fd08 	bl	8009ff0 <__lshift>
 80095e0:	4681      	mov	r9, r0
 80095e2:	9b08      	ldr	r3, [sp, #32]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dd05      	ble.n	80095f4 <_dtoa_r+0x83c>
 80095e8:	4621      	mov	r1, r4
 80095ea:	461a      	mov	r2, r3
 80095ec:	4658      	mov	r0, fp
 80095ee:	f000 fcff 	bl	8009ff0 <__lshift>
 80095f2:	4604      	mov	r4, r0
 80095f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d059      	beq.n	80096ae <_dtoa_r+0x8f6>
 80095fa:	4621      	mov	r1, r4
 80095fc:	4648      	mov	r0, r9
 80095fe:	f000 fd63 	bl	800a0c8 <__mcmp>
 8009602:	2800      	cmp	r0, #0
 8009604:	da53      	bge.n	80096ae <_dtoa_r+0x8f6>
 8009606:	1e7b      	subs	r3, r7, #1
 8009608:	9304      	str	r3, [sp, #16]
 800960a:	4649      	mov	r1, r9
 800960c:	2300      	movs	r3, #0
 800960e:	220a      	movs	r2, #10
 8009610:	4658      	mov	r0, fp
 8009612:	f000 faf7 	bl	8009c04 <__multadd>
 8009616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009618:	4681      	mov	r9, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 8172 	beq.w	8009904 <_dtoa_r+0xb4c>
 8009620:	2300      	movs	r3, #0
 8009622:	4629      	mov	r1, r5
 8009624:	220a      	movs	r2, #10
 8009626:	4658      	mov	r0, fp
 8009628:	f000 faec 	bl	8009c04 <__multadd>
 800962c:	9b00      	ldr	r3, [sp, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	4605      	mov	r5, r0
 8009632:	dc67      	bgt.n	8009704 <_dtoa_r+0x94c>
 8009634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009636:	2b02      	cmp	r3, #2
 8009638:	dc41      	bgt.n	80096be <_dtoa_r+0x906>
 800963a:	e063      	b.n	8009704 <_dtoa_r+0x94c>
 800963c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800963e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009642:	e746      	b.n	80094d2 <_dtoa_r+0x71a>
 8009644:	9b07      	ldr	r3, [sp, #28]
 8009646:	1e5c      	subs	r4, r3, #1
 8009648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800964a:	42a3      	cmp	r3, r4
 800964c:	bfbf      	itttt	lt
 800964e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009650:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009652:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009654:	1ae3      	sublt	r3, r4, r3
 8009656:	bfb4      	ite	lt
 8009658:	18d2      	addlt	r2, r2, r3
 800965a:	1b1c      	subge	r4, r3, r4
 800965c:	9b07      	ldr	r3, [sp, #28]
 800965e:	bfbc      	itt	lt
 8009660:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009662:	2400      	movlt	r4, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfb5      	itete	lt
 8009668:	eba8 0603 	sublt.w	r6, r8, r3
 800966c:	9b07      	ldrge	r3, [sp, #28]
 800966e:	2300      	movlt	r3, #0
 8009670:	4646      	movge	r6, r8
 8009672:	e730      	b.n	80094d6 <_dtoa_r+0x71e>
 8009674:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009676:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009678:	4646      	mov	r6, r8
 800967a:	e735      	b.n	80094e8 <_dtoa_r+0x730>
 800967c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800967e:	e75c      	b.n	800953a <_dtoa_r+0x782>
 8009680:	2300      	movs	r3, #0
 8009682:	e788      	b.n	8009596 <_dtoa_r+0x7de>
 8009684:	3fe00000 	.word	0x3fe00000
 8009688:	40240000 	.word	0x40240000
 800968c:	40140000 	.word	0x40140000
 8009690:	9b02      	ldr	r3, [sp, #8]
 8009692:	e780      	b.n	8009596 <_dtoa_r+0x7de>
 8009694:	2300      	movs	r3, #0
 8009696:	930a      	str	r3, [sp, #40]	@ 0x28
 8009698:	e782      	b.n	80095a0 <_dtoa_r+0x7e8>
 800969a:	d099      	beq.n	80095d0 <_dtoa_r+0x818>
 800969c:	9a08      	ldr	r2, [sp, #32]
 800969e:	331c      	adds	r3, #28
 80096a0:	441a      	add	r2, r3
 80096a2:	4498      	add	r8, r3
 80096a4:	441e      	add	r6, r3
 80096a6:	9208      	str	r2, [sp, #32]
 80096a8:	e792      	b.n	80095d0 <_dtoa_r+0x818>
 80096aa:	4603      	mov	r3, r0
 80096ac:	e7f6      	b.n	800969c <_dtoa_r+0x8e4>
 80096ae:	9b07      	ldr	r3, [sp, #28]
 80096b0:	9704      	str	r7, [sp, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dc20      	bgt.n	80096f8 <_dtoa_r+0x940>
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	dd1e      	ble.n	80096fc <_dtoa_r+0x944>
 80096be:	9b00      	ldr	r3, [sp, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f47f aec0 	bne.w	8009446 <_dtoa_r+0x68e>
 80096c6:	4621      	mov	r1, r4
 80096c8:	2205      	movs	r2, #5
 80096ca:	4658      	mov	r0, fp
 80096cc:	f000 fa9a 	bl	8009c04 <__multadd>
 80096d0:	4601      	mov	r1, r0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4648      	mov	r0, r9
 80096d6:	f000 fcf7 	bl	800a0c8 <__mcmp>
 80096da:	2800      	cmp	r0, #0
 80096dc:	f77f aeb3 	ble.w	8009446 <_dtoa_r+0x68e>
 80096e0:	4656      	mov	r6, sl
 80096e2:	2331      	movs	r3, #49	@ 0x31
 80096e4:	f806 3b01 	strb.w	r3, [r6], #1
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	3301      	adds	r3, #1
 80096ec:	9304      	str	r3, [sp, #16]
 80096ee:	e6ae      	b.n	800944e <_dtoa_r+0x696>
 80096f0:	9c07      	ldr	r4, [sp, #28]
 80096f2:	9704      	str	r7, [sp, #16]
 80096f4:	4625      	mov	r5, r4
 80096f6:	e7f3      	b.n	80096e0 <_dtoa_r+0x928>
 80096f8:	9b07      	ldr	r3, [sp, #28]
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 8104 	beq.w	800990c <_dtoa_r+0xb54>
 8009704:	2e00      	cmp	r6, #0
 8009706:	dd05      	ble.n	8009714 <_dtoa_r+0x95c>
 8009708:	4629      	mov	r1, r5
 800970a:	4632      	mov	r2, r6
 800970c:	4658      	mov	r0, fp
 800970e:	f000 fc6f 	bl	8009ff0 <__lshift>
 8009712:	4605      	mov	r5, r0
 8009714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009716:	2b00      	cmp	r3, #0
 8009718:	d05a      	beq.n	80097d0 <_dtoa_r+0xa18>
 800971a:	6869      	ldr	r1, [r5, #4]
 800971c:	4658      	mov	r0, fp
 800971e:	f000 fa0f 	bl	8009b40 <_Balloc>
 8009722:	4606      	mov	r6, r0
 8009724:	b928      	cbnz	r0, 8009732 <_dtoa_r+0x97a>
 8009726:	4b84      	ldr	r3, [pc, #528]	@ (8009938 <_dtoa_r+0xb80>)
 8009728:	4602      	mov	r2, r0
 800972a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800972e:	f7ff bb5a 	b.w	8008de6 <_dtoa_r+0x2e>
 8009732:	692a      	ldr	r2, [r5, #16]
 8009734:	3202      	adds	r2, #2
 8009736:	0092      	lsls	r2, r2, #2
 8009738:	f105 010c 	add.w	r1, r5, #12
 800973c:	300c      	adds	r0, #12
 800973e:	f002 fb03 	bl	800bd48 <memcpy>
 8009742:	2201      	movs	r2, #1
 8009744:	4631      	mov	r1, r6
 8009746:	4658      	mov	r0, fp
 8009748:	f000 fc52 	bl	8009ff0 <__lshift>
 800974c:	f10a 0301 	add.w	r3, sl, #1
 8009750:	9307      	str	r3, [sp, #28]
 8009752:	9b00      	ldr	r3, [sp, #0]
 8009754:	4453      	add	r3, sl
 8009756:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009758:	9b02      	ldr	r3, [sp, #8]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	462f      	mov	r7, r5
 8009760:	930a      	str	r3, [sp, #40]	@ 0x28
 8009762:	4605      	mov	r5, r0
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	4621      	mov	r1, r4
 8009768:	3b01      	subs	r3, #1
 800976a:	4648      	mov	r0, r9
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	f7ff fa9b 	bl	8008ca8 <quorem>
 8009772:	4639      	mov	r1, r7
 8009774:	9002      	str	r0, [sp, #8]
 8009776:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800977a:	4648      	mov	r0, r9
 800977c:	f000 fca4 	bl	800a0c8 <__mcmp>
 8009780:	462a      	mov	r2, r5
 8009782:	9008      	str	r0, [sp, #32]
 8009784:	4621      	mov	r1, r4
 8009786:	4658      	mov	r0, fp
 8009788:	f000 fcba 	bl	800a100 <__mdiff>
 800978c:	68c2      	ldr	r2, [r0, #12]
 800978e:	4606      	mov	r6, r0
 8009790:	bb02      	cbnz	r2, 80097d4 <_dtoa_r+0xa1c>
 8009792:	4601      	mov	r1, r0
 8009794:	4648      	mov	r0, r9
 8009796:	f000 fc97 	bl	800a0c8 <__mcmp>
 800979a:	4602      	mov	r2, r0
 800979c:	4631      	mov	r1, r6
 800979e:	4658      	mov	r0, fp
 80097a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80097a2:	f000 fa0d 	bl	8009bc0 <_Bfree>
 80097a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097aa:	9e07      	ldr	r6, [sp, #28]
 80097ac:	ea43 0102 	orr.w	r1, r3, r2
 80097b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097b2:	4319      	orrs	r1, r3
 80097b4:	d110      	bne.n	80097d8 <_dtoa_r+0xa20>
 80097b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097ba:	d029      	beq.n	8009810 <_dtoa_r+0xa58>
 80097bc:	9b08      	ldr	r3, [sp, #32]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	dd02      	ble.n	80097c8 <_dtoa_r+0xa10>
 80097c2:	9b02      	ldr	r3, [sp, #8]
 80097c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	f883 8000 	strb.w	r8, [r3]
 80097ce:	e63f      	b.n	8009450 <_dtoa_r+0x698>
 80097d0:	4628      	mov	r0, r5
 80097d2:	e7bb      	b.n	800974c <_dtoa_r+0x994>
 80097d4:	2201      	movs	r2, #1
 80097d6:	e7e1      	b.n	800979c <_dtoa_r+0x9e4>
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	db04      	blt.n	80097e8 <_dtoa_r+0xa30>
 80097de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097e0:	430b      	orrs	r3, r1
 80097e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097e4:	430b      	orrs	r3, r1
 80097e6:	d120      	bne.n	800982a <_dtoa_r+0xa72>
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	dded      	ble.n	80097c8 <_dtoa_r+0xa10>
 80097ec:	4649      	mov	r1, r9
 80097ee:	2201      	movs	r2, #1
 80097f0:	4658      	mov	r0, fp
 80097f2:	f000 fbfd 	bl	8009ff0 <__lshift>
 80097f6:	4621      	mov	r1, r4
 80097f8:	4681      	mov	r9, r0
 80097fa:	f000 fc65 	bl	800a0c8 <__mcmp>
 80097fe:	2800      	cmp	r0, #0
 8009800:	dc03      	bgt.n	800980a <_dtoa_r+0xa52>
 8009802:	d1e1      	bne.n	80097c8 <_dtoa_r+0xa10>
 8009804:	f018 0f01 	tst.w	r8, #1
 8009808:	d0de      	beq.n	80097c8 <_dtoa_r+0xa10>
 800980a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800980e:	d1d8      	bne.n	80097c2 <_dtoa_r+0xa0a>
 8009810:	9a00      	ldr	r2, [sp, #0]
 8009812:	2339      	movs	r3, #57	@ 0x39
 8009814:	7013      	strb	r3, [r2, #0]
 8009816:	4633      	mov	r3, r6
 8009818:	461e      	mov	r6, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009820:	2a39      	cmp	r2, #57	@ 0x39
 8009822:	d052      	beq.n	80098ca <_dtoa_r+0xb12>
 8009824:	3201      	adds	r2, #1
 8009826:	701a      	strb	r2, [r3, #0]
 8009828:	e612      	b.n	8009450 <_dtoa_r+0x698>
 800982a:	2a00      	cmp	r2, #0
 800982c:	dd07      	ble.n	800983e <_dtoa_r+0xa86>
 800982e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009832:	d0ed      	beq.n	8009810 <_dtoa_r+0xa58>
 8009834:	9a00      	ldr	r2, [sp, #0]
 8009836:	f108 0301 	add.w	r3, r8, #1
 800983a:	7013      	strb	r3, [r2, #0]
 800983c:	e608      	b.n	8009450 <_dtoa_r+0x698>
 800983e:	9b07      	ldr	r3, [sp, #28]
 8009840:	9a07      	ldr	r2, [sp, #28]
 8009842:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009848:	4293      	cmp	r3, r2
 800984a:	d028      	beq.n	800989e <_dtoa_r+0xae6>
 800984c:	4649      	mov	r1, r9
 800984e:	2300      	movs	r3, #0
 8009850:	220a      	movs	r2, #10
 8009852:	4658      	mov	r0, fp
 8009854:	f000 f9d6 	bl	8009c04 <__multadd>
 8009858:	42af      	cmp	r7, r5
 800985a:	4681      	mov	r9, r0
 800985c:	f04f 0300 	mov.w	r3, #0
 8009860:	f04f 020a 	mov.w	r2, #10
 8009864:	4639      	mov	r1, r7
 8009866:	4658      	mov	r0, fp
 8009868:	d107      	bne.n	800987a <_dtoa_r+0xac2>
 800986a:	f000 f9cb 	bl	8009c04 <__multadd>
 800986e:	4607      	mov	r7, r0
 8009870:	4605      	mov	r5, r0
 8009872:	9b07      	ldr	r3, [sp, #28]
 8009874:	3301      	adds	r3, #1
 8009876:	9307      	str	r3, [sp, #28]
 8009878:	e774      	b.n	8009764 <_dtoa_r+0x9ac>
 800987a:	f000 f9c3 	bl	8009c04 <__multadd>
 800987e:	4629      	mov	r1, r5
 8009880:	4607      	mov	r7, r0
 8009882:	2300      	movs	r3, #0
 8009884:	220a      	movs	r2, #10
 8009886:	4658      	mov	r0, fp
 8009888:	f000 f9bc 	bl	8009c04 <__multadd>
 800988c:	4605      	mov	r5, r0
 800988e:	e7f0      	b.n	8009872 <_dtoa_r+0xaba>
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	bfcc      	ite	gt
 8009896:	461e      	movgt	r6, r3
 8009898:	2601      	movle	r6, #1
 800989a:	4456      	add	r6, sl
 800989c:	2700      	movs	r7, #0
 800989e:	4649      	mov	r1, r9
 80098a0:	2201      	movs	r2, #1
 80098a2:	4658      	mov	r0, fp
 80098a4:	f000 fba4 	bl	8009ff0 <__lshift>
 80098a8:	4621      	mov	r1, r4
 80098aa:	4681      	mov	r9, r0
 80098ac:	f000 fc0c 	bl	800a0c8 <__mcmp>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	dcb0      	bgt.n	8009816 <_dtoa_r+0xa5e>
 80098b4:	d102      	bne.n	80098bc <_dtoa_r+0xb04>
 80098b6:	f018 0f01 	tst.w	r8, #1
 80098ba:	d1ac      	bne.n	8009816 <_dtoa_r+0xa5e>
 80098bc:	4633      	mov	r3, r6
 80098be:	461e      	mov	r6, r3
 80098c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098c4:	2a30      	cmp	r2, #48	@ 0x30
 80098c6:	d0fa      	beq.n	80098be <_dtoa_r+0xb06>
 80098c8:	e5c2      	b.n	8009450 <_dtoa_r+0x698>
 80098ca:	459a      	cmp	sl, r3
 80098cc:	d1a4      	bne.n	8009818 <_dtoa_r+0xa60>
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	3301      	adds	r3, #1
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	2331      	movs	r3, #49	@ 0x31
 80098d6:	f88a 3000 	strb.w	r3, [sl]
 80098da:	e5b9      	b.n	8009450 <_dtoa_r+0x698>
 80098dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800993c <_dtoa_r+0xb84>
 80098e2:	b11b      	cbz	r3, 80098ec <_dtoa_r+0xb34>
 80098e4:	f10a 0308 	add.w	r3, sl, #8
 80098e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	4650      	mov	r0, sl
 80098ee:	b019      	add	sp, #100	@ 0x64
 80098f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	f77f ae37 	ble.w	800956a <_dtoa_r+0x7b2>
 80098fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009900:	2001      	movs	r0, #1
 8009902:	e655      	b.n	80095b0 <_dtoa_r+0x7f8>
 8009904:	9b00      	ldr	r3, [sp, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	f77f aed6 	ble.w	80096b8 <_dtoa_r+0x900>
 800990c:	4656      	mov	r6, sl
 800990e:	4621      	mov	r1, r4
 8009910:	4648      	mov	r0, r9
 8009912:	f7ff f9c9 	bl	8008ca8 <quorem>
 8009916:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800991a:	f806 8b01 	strb.w	r8, [r6], #1
 800991e:	9b00      	ldr	r3, [sp, #0]
 8009920:	eba6 020a 	sub.w	r2, r6, sl
 8009924:	4293      	cmp	r3, r2
 8009926:	ddb3      	ble.n	8009890 <_dtoa_r+0xad8>
 8009928:	4649      	mov	r1, r9
 800992a:	2300      	movs	r3, #0
 800992c:	220a      	movs	r2, #10
 800992e:	4658      	mov	r0, fp
 8009930:	f000 f968 	bl	8009c04 <__multadd>
 8009934:	4681      	mov	r9, r0
 8009936:	e7ea      	b.n	800990e <_dtoa_r+0xb56>
 8009938:	0800ccb7 	.word	0x0800ccb7
 800993c:	0800cc3b 	.word	0x0800cc3b

08009940 <_free_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4605      	mov	r5, r0
 8009944:	2900      	cmp	r1, #0
 8009946:	d041      	beq.n	80099cc <_free_r+0x8c>
 8009948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800994c:	1f0c      	subs	r4, r1, #4
 800994e:	2b00      	cmp	r3, #0
 8009950:	bfb8      	it	lt
 8009952:	18e4      	addlt	r4, r4, r3
 8009954:	f000 f8e8 	bl	8009b28 <__malloc_lock>
 8009958:	4a1d      	ldr	r2, [pc, #116]	@ (80099d0 <_free_r+0x90>)
 800995a:	6813      	ldr	r3, [r2, #0]
 800995c:	b933      	cbnz	r3, 800996c <_free_r+0x2c>
 800995e:	6063      	str	r3, [r4, #4]
 8009960:	6014      	str	r4, [r2, #0]
 8009962:	4628      	mov	r0, r5
 8009964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009968:	f000 b8e4 	b.w	8009b34 <__malloc_unlock>
 800996c:	42a3      	cmp	r3, r4
 800996e:	d908      	bls.n	8009982 <_free_r+0x42>
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	1821      	adds	r1, r4, r0
 8009974:	428b      	cmp	r3, r1
 8009976:	bf01      	itttt	eq
 8009978:	6819      	ldreq	r1, [r3, #0]
 800997a:	685b      	ldreq	r3, [r3, #4]
 800997c:	1809      	addeq	r1, r1, r0
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	e7ed      	b.n	800995e <_free_r+0x1e>
 8009982:	461a      	mov	r2, r3
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	b10b      	cbz	r3, 800998c <_free_r+0x4c>
 8009988:	42a3      	cmp	r3, r4
 800998a:	d9fa      	bls.n	8009982 <_free_r+0x42>
 800998c:	6811      	ldr	r1, [r2, #0]
 800998e:	1850      	adds	r0, r2, r1
 8009990:	42a0      	cmp	r0, r4
 8009992:	d10b      	bne.n	80099ac <_free_r+0x6c>
 8009994:	6820      	ldr	r0, [r4, #0]
 8009996:	4401      	add	r1, r0
 8009998:	1850      	adds	r0, r2, r1
 800999a:	4283      	cmp	r3, r0
 800999c:	6011      	str	r1, [r2, #0]
 800999e:	d1e0      	bne.n	8009962 <_free_r+0x22>
 80099a0:	6818      	ldr	r0, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	6053      	str	r3, [r2, #4]
 80099a6:	4408      	add	r0, r1
 80099a8:	6010      	str	r0, [r2, #0]
 80099aa:	e7da      	b.n	8009962 <_free_r+0x22>
 80099ac:	d902      	bls.n	80099b4 <_free_r+0x74>
 80099ae:	230c      	movs	r3, #12
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	e7d6      	b.n	8009962 <_free_r+0x22>
 80099b4:	6820      	ldr	r0, [r4, #0]
 80099b6:	1821      	adds	r1, r4, r0
 80099b8:	428b      	cmp	r3, r1
 80099ba:	bf04      	itt	eq
 80099bc:	6819      	ldreq	r1, [r3, #0]
 80099be:	685b      	ldreq	r3, [r3, #4]
 80099c0:	6063      	str	r3, [r4, #4]
 80099c2:	bf04      	itt	eq
 80099c4:	1809      	addeq	r1, r1, r0
 80099c6:	6021      	streq	r1, [r4, #0]
 80099c8:	6054      	str	r4, [r2, #4]
 80099ca:	e7ca      	b.n	8009962 <_free_r+0x22>
 80099cc:	bd38      	pop	{r3, r4, r5, pc}
 80099ce:	bf00      	nop
 80099d0:	20000a58 	.word	0x20000a58

080099d4 <malloc>:
 80099d4:	4b02      	ldr	r3, [pc, #8]	@ (80099e0 <malloc+0xc>)
 80099d6:	4601      	mov	r1, r0
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	f000 b825 	b.w	8009a28 <_malloc_r>
 80099de:	bf00      	nop
 80099e0:	200000fc 	.word	0x200000fc

080099e4 <sbrk_aligned>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009a24 <sbrk_aligned+0x40>)
 80099e8:	460c      	mov	r4, r1
 80099ea:	6831      	ldr	r1, [r6, #0]
 80099ec:	4605      	mov	r5, r0
 80099ee:	b911      	cbnz	r1, 80099f6 <sbrk_aligned+0x12>
 80099f0:	f002 f99a 	bl	800bd28 <_sbrk_r>
 80099f4:	6030      	str	r0, [r6, #0]
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f002 f995 	bl	800bd28 <_sbrk_r>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	d103      	bne.n	8009a0a <sbrk_aligned+0x26>
 8009a02:	f04f 34ff 	mov.w	r4, #4294967295
 8009a06:	4620      	mov	r0, r4
 8009a08:	bd70      	pop	{r4, r5, r6, pc}
 8009a0a:	1cc4      	adds	r4, r0, #3
 8009a0c:	f024 0403 	bic.w	r4, r4, #3
 8009a10:	42a0      	cmp	r0, r4
 8009a12:	d0f8      	beq.n	8009a06 <sbrk_aligned+0x22>
 8009a14:	1a21      	subs	r1, r4, r0
 8009a16:	4628      	mov	r0, r5
 8009a18:	f002 f986 	bl	800bd28 <_sbrk_r>
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	d1f2      	bne.n	8009a06 <sbrk_aligned+0x22>
 8009a20:	e7ef      	b.n	8009a02 <sbrk_aligned+0x1e>
 8009a22:	bf00      	nop
 8009a24:	20000a54 	.word	0x20000a54

08009a28 <_malloc_r>:
 8009a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a2c:	1ccd      	adds	r5, r1, #3
 8009a2e:	f025 0503 	bic.w	r5, r5, #3
 8009a32:	3508      	adds	r5, #8
 8009a34:	2d0c      	cmp	r5, #12
 8009a36:	bf38      	it	cc
 8009a38:	250c      	movcc	r5, #12
 8009a3a:	2d00      	cmp	r5, #0
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	db01      	blt.n	8009a44 <_malloc_r+0x1c>
 8009a40:	42a9      	cmp	r1, r5
 8009a42:	d904      	bls.n	8009a4e <_malloc_r+0x26>
 8009a44:	230c      	movs	r3, #12
 8009a46:	6033      	str	r3, [r6, #0]
 8009a48:	2000      	movs	r0, #0
 8009a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b24 <_malloc_r+0xfc>
 8009a52:	f000 f869 	bl	8009b28 <__malloc_lock>
 8009a56:	f8d8 3000 	ldr.w	r3, [r8]
 8009a5a:	461c      	mov	r4, r3
 8009a5c:	bb44      	cbnz	r4, 8009ab0 <_malloc_r+0x88>
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff ffbf 	bl	80099e4 <sbrk_aligned>
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	4604      	mov	r4, r0
 8009a6a:	d158      	bne.n	8009b1e <_malloc_r+0xf6>
 8009a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a70:	4627      	mov	r7, r4
 8009a72:	2f00      	cmp	r7, #0
 8009a74:	d143      	bne.n	8009afe <_malloc_r+0xd6>
 8009a76:	2c00      	cmp	r4, #0
 8009a78:	d04b      	beq.n	8009b12 <_malloc_r+0xea>
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4630      	mov	r0, r6
 8009a80:	eb04 0903 	add.w	r9, r4, r3
 8009a84:	f002 f950 	bl	800bd28 <_sbrk_r>
 8009a88:	4581      	cmp	r9, r0
 8009a8a:	d142      	bne.n	8009b12 <_malloc_r+0xea>
 8009a8c:	6821      	ldr	r1, [r4, #0]
 8009a8e:	1a6d      	subs	r5, r5, r1
 8009a90:	4629      	mov	r1, r5
 8009a92:	4630      	mov	r0, r6
 8009a94:	f7ff ffa6 	bl	80099e4 <sbrk_aligned>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d03a      	beq.n	8009b12 <_malloc_r+0xea>
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	442b      	add	r3, r5
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	bb62      	cbnz	r2, 8009b04 <_malloc_r+0xdc>
 8009aaa:	f8c8 7000 	str.w	r7, [r8]
 8009aae:	e00f      	b.n	8009ad0 <_malloc_r+0xa8>
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	1b52      	subs	r2, r2, r5
 8009ab4:	d420      	bmi.n	8009af8 <_malloc_r+0xd0>
 8009ab6:	2a0b      	cmp	r2, #11
 8009ab8:	d917      	bls.n	8009aea <_malloc_r+0xc2>
 8009aba:	1961      	adds	r1, r4, r5
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	6025      	str	r5, [r4, #0]
 8009ac0:	bf18      	it	ne
 8009ac2:	6059      	strne	r1, [r3, #4]
 8009ac4:	6863      	ldr	r3, [r4, #4]
 8009ac6:	bf08      	it	eq
 8009ac8:	f8c8 1000 	streq.w	r1, [r8]
 8009acc:	5162      	str	r2, [r4, r5]
 8009ace:	604b      	str	r3, [r1, #4]
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f000 f82f 	bl	8009b34 <__malloc_unlock>
 8009ad6:	f104 000b 	add.w	r0, r4, #11
 8009ada:	1d23      	adds	r3, r4, #4
 8009adc:	f020 0007 	bic.w	r0, r0, #7
 8009ae0:	1ac2      	subs	r2, r0, r3
 8009ae2:	bf1c      	itt	ne
 8009ae4:	1a1b      	subne	r3, r3, r0
 8009ae6:	50a3      	strne	r3, [r4, r2]
 8009ae8:	e7af      	b.n	8009a4a <_malloc_r+0x22>
 8009aea:	6862      	ldr	r2, [r4, #4]
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	bf0c      	ite	eq
 8009af0:	f8c8 2000 	streq.w	r2, [r8]
 8009af4:	605a      	strne	r2, [r3, #4]
 8009af6:	e7eb      	b.n	8009ad0 <_malloc_r+0xa8>
 8009af8:	4623      	mov	r3, r4
 8009afa:	6864      	ldr	r4, [r4, #4]
 8009afc:	e7ae      	b.n	8009a5c <_malloc_r+0x34>
 8009afe:	463c      	mov	r4, r7
 8009b00:	687f      	ldr	r7, [r7, #4]
 8009b02:	e7b6      	b.n	8009a72 <_malloc_r+0x4a>
 8009b04:	461a      	mov	r2, r3
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	d1fb      	bne.n	8009b04 <_malloc_r+0xdc>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	6053      	str	r3, [r2, #4]
 8009b10:	e7de      	b.n	8009ad0 <_malloc_r+0xa8>
 8009b12:	230c      	movs	r3, #12
 8009b14:	6033      	str	r3, [r6, #0]
 8009b16:	4630      	mov	r0, r6
 8009b18:	f000 f80c 	bl	8009b34 <__malloc_unlock>
 8009b1c:	e794      	b.n	8009a48 <_malloc_r+0x20>
 8009b1e:	6005      	str	r5, [r0, #0]
 8009b20:	e7d6      	b.n	8009ad0 <_malloc_r+0xa8>
 8009b22:	bf00      	nop
 8009b24:	20000a58 	.word	0x20000a58

08009b28 <__malloc_lock>:
 8009b28:	4801      	ldr	r0, [pc, #4]	@ (8009b30 <__malloc_lock+0x8>)
 8009b2a:	f7ff b8b4 	b.w	8008c96 <__retarget_lock_acquire_recursive>
 8009b2e:	bf00      	nop
 8009b30:	20000a50 	.word	0x20000a50

08009b34 <__malloc_unlock>:
 8009b34:	4801      	ldr	r0, [pc, #4]	@ (8009b3c <__malloc_unlock+0x8>)
 8009b36:	f7ff b8af 	b.w	8008c98 <__retarget_lock_release_recursive>
 8009b3a:	bf00      	nop
 8009b3c:	20000a50 	.word	0x20000a50

08009b40 <_Balloc>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	69c6      	ldr	r6, [r0, #28]
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	b976      	cbnz	r6, 8009b68 <_Balloc+0x28>
 8009b4a:	2010      	movs	r0, #16
 8009b4c:	f7ff ff42 	bl	80099d4 <malloc>
 8009b50:	4602      	mov	r2, r0
 8009b52:	61e0      	str	r0, [r4, #28]
 8009b54:	b920      	cbnz	r0, 8009b60 <_Balloc+0x20>
 8009b56:	4b18      	ldr	r3, [pc, #96]	@ (8009bb8 <_Balloc+0x78>)
 8009b58:	4818      	ldr	r0, [pc, #96]	@ (8009bbc <_Balloc+0x7c>)
 8009b5a:	216b      	movs	r1, #107	@ 0x6b
 8009b5c:	f002 f90c 	bl	800bd78 <__assert_func>
 8009b60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b64:	6006      	str	r6, [r0, #0]
 8009b66:	60c6      	str	r6, [r0, #12]
 8009b68:	69e6      	ldr	r6, [r4, #28]
 8009b6a:	68f3      	ldr	r3, [r6, #12]
 8009b6c:	b183      	cbz	r3, 8009b90 <_Balloc+0x50>
 8009b6e:	69e3      	ldr	r3, [r4, #28]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b76:	b9b8      	cbnz	r0, 8009ba8 <_Balloc+0x68>
 8009b78:	2101      	movs	r1, #1
 8009b7a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b7e:	1d72      	adds	r2, r6, #5
 8009b80:	0092      	lsls	r2, r2, #2
 8009b82:	4620      	mov	r0, r4
 8009b84:	f002 f916 	bl	800bdb4 <_calloc_r>
 8009b88:	b160      	cbz	r0, 8009ba4 <_Balloc+0x64>
 8009b8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b8e:	e00e      	b.n	8009bae <_Balloc+0x6e>
 8009b90:	2221      	movs	r2, #33	@ 0x21
 8009b92:	2104      	movs	r1, #4
 8009b94:	4620      	mov	r0, r4
 8009b96:	f002 f90d 	bl	800bdb4 <_calloc_r>
 8009b9a:	69e3      	ldr	r3, [r4, #28]
 8009b9c:	60f0      	str	r0, [r6, #12]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1e4      	bne.n	8009b6e <_Balloc+0x2e>
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	6802      	ldr	r2, [r0, #0]
 8009baa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bb4:	e7f7      	b.n	8009ba6 <_Balloc+0x66>
 8009bb6:	bf00      	nop
 8009bb8:	0800cc48 	.word	0x0800cc48
 8009bbc:	0800ccc8 	.word	0x0800ccc8

08009bc0 <_Bfree>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	69c6      	ldr	r6, [r0, #28]
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	b976      	cbnz	r6, 8009be8 <_Bfree+0x28>
 8009bca:	2010      	movs	r0, #16
 8009bcc:	f7ff ff02 	bl	80099d4 <malloc>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	61e8      	str	r0, [r5, #28]
 8009bd4:	b920      	cbnz	r0, 8009be0 <_Bfree+0x20>
 8009bd6:	4b09      	ldr	r3, [pc, #36]	@ (8009bfc <_Bfree+0x3c>)
 8009bd8:	4809      	ldr	r0, [pc, #36]	@ (8009c00 <_Bfree+0x40>)
 8009bda:	218f      	movs	r1, #143	@ 0x8f
 8009bdc:	f002 f8cc 	bl	800bd78 <__assert_func>
 8009be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009be4:	6006      	str	r6, [r0, #0]
 8009be6:	60c6      	str	r6, [r0, #12]
 8009be8:	b13c      	cbz	r4, 8009bfa <_Bfree+0x3a>
 8009bea:	69eb      	ldr	r3, [r5, #28]
 8009bec:	6862      	ldr	r2, [r4, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bf4:	6021      	str	r1, [r4, #0]
 8009bf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	0800cc48 	.word	0x0800cc48
 8009c00:	0800ccc8 	.word	0x0800ccc8

08009c04 <__multadd>:
 8009c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c08:	690d      	ldr	r5, [r1, #16]
 8009c0a:	4607      	mov	r7, r0
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	461e      	mov	r6, r3
 8009c10:	f101 0c14 	add.w	ip, r1, #20
 8009c14:	2000      	movs	r0, #0
 8009c16:	f8dc 3000 	ldr.w	r3, [ip]
 8009c1a:	b299      	uxth	r1, r3
 8009c1c:	fb02 6101 	mla	r1, r2, r1, r6
 8009c20:	0c1e      	lsrs	r6, r3, #16
 8009c22:	0c0b      	lsrs	r3, r1, #16
 8009c24:	fb02 3306 	mla	r3, r2, r6, r3
 8009c28:	b289      	uxth	r1, r1
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c30:	4285      	cmp	r5, r0
 8009c32:	f84c 1b04 	str.w	r1, [ip], #4
 8009c36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c3a:	dcec      	bgt.n	8009c16 <__multadd+0x12>
 8009c3c:	b30e      	cbz	r6, 8009c82 <__multadd+0x7e>
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	42ab      	cmp	r3, r5
 8009c42:	dc19      	bgt.n	8009c78 <__multadd+0x74>
 8009c44:	6861      	ldr	r1, [r4, #4]
 8009c46:	4638      	mov	r0, r7
 8009c48:	3101      	adds	r1, #1
 8009c4a:	f7ff ff79 	bl	8009b40 <_Balloc>
 8009c4e:	4680      	mov	r8, r0
 8009c50:	b928      	cbnz	r0, 8009c5e <__multadd+0x5a>
 8009c52:	4602      	mov	r2, r0
 8009c54:	4b0c      	ldr	r3, [pc, #48]	@ (8009c88 <__multadd+0x84>)
 8009c56:	480d      	ldr	r0, [pc, #52]	@ (8009c8c <__multadd+0x88>)
 8009c58:	21ba      	movs	r1, #186	@ 0xba
 8009c5a:	f002 f88d 	bl	800bd78 <__assert_func>
 8009c5e:	6922      	ldr	r2, [r4, #16]
 8009c60:	3202      	adds	r2, #2
 8009c62:	f104 010c 	add.w	r1, r4, #12
 8009c66:	0092      	lsls	r2, r2, #2
 8009c68:	300c      	adds	r0, #12
 8009c6a:	f002 f86d 	bl	800bd48 <memcpy>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4638      	mov	r0, r7
 8009c72:	f7ff ffa5 	bl	8009bc0 <_Bfree>
 8009c76:	4644      	mov	r4, r8
 8009c78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c7c:	3501      	adds	r5, #1
 8009c7e:	615e      	str	r6, [r3, #20]
 8009c80:	6125      	str	r5, [r4, #16]
 8009c82:	4620      	mov	r0, r4
 8009c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c88:	0800ccb7 	.word	0x0800ccb7
 8009c8c:	0800ccc8 	.word	0x0800ccc8

08009c90 <__s2b>:
 8009c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c94:	460c      	mov	r4, r1
 8009c96:	4615      	mov	r5, r2
 8009c98:	461f      	mov	r7, r3
 8009c9a:	2209      	movs	r2, #9
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	db09      	blt.n	8009cc0 <__s2b+0x30>
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7ff ff47 	bl	8009b40 <_Balloc>
 8009cb2:	b940      	cbnz	r0, 8009cc6 <__s2b+0x36>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	4b19      	ldr	r3, [pc, #100]	@ (8009d1c <__s2b+0x8c>)
 8009cb8:	4819      	ldr	r0, [pc, #100]	@ (8009d20 <__s2b+0x90>)
 8009cba:	21d3      	movs	r1, #211	@ 0xd3
 8009cbc:	f002 f85c 	bl	800bd78 <__assert_func>
 8009cc0:	0052      	lsls	r2, r2, #1
 8009cc2:	3101      	adds	r1, #1
 8009cc4:	e7f0      	b.n	8009ca8 <__s2b+0x18>
 8009cc6:	9b08      	ldr	r3, [sp, #32]
 8009cc8:	6143      	str	r3, [r0, #20]
 8009cca:	2d09      	cmp	r5, #9
 8009ccc:	f04f 0301 	mov.w	r3, #1
 8009cd0:	6103      	str	r3, [r0, #16]
 8009cd2:	dd16      	ble.n	8009d02 <__s2b+0x72>
 8009cd4:	f104 0909 	add.w	r9, r4, #9
 8009cd8:	46c8      	mov	r8, r9
 8009cda:	442c      	add	r4, r5
 8009cdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	3b30      	subs	r3, #48	@ 0x30
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff ff8c 	bl	8009c04 <__multadd>
 8009cec:	45a0      	cmp	r8, r4
 8009cee:	d1f5      	bne.n	8009cdc <__s2b+0x4c>
 8009cf0:	f1a5 0408 	sub.w	r4, r5, #8
 8009cf4:	444c      	add	r4, r9
 8009cf6:	1b2d      	subs	r5, r5, r4
 8009cf8:	1963      	adds	r3, r4, r5
 8009cfa:	42bb      	cmp	r3, r7
 8009cfc:	db04      	blt.n	8009d08 <__s2b+0x78>
 8009cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d02:	340a      	adds	r4, #10
 8009d04:	2509      	movs	r5, #9
 8009d06:	e7f6      	b.n	8009cf6 <__s2b+0x66>
 8009d08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d0c:	4601      	mov	r1, r0
 8009d0e:	3b30      	subs	r3, #48	@ 0x30
 8009d10:	220a      	movs	r2, #10
 8009d12:	4630      	mov	r0, r6
 8009d14:	f7ff ff76 	bl	8009c04 <__multadd>
 8009d18:	e7ee      	b.n	8009cf8 <__s2b+0x68>
 8009d1a:	bf00      	nop
 8009d1c:	0800ccb7 	.word	0x0800ccb7
 8009d20:	0800ccc8 	.word	0x0800ccc8

08009d24 <__hi0bits>:
 8009d24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d28:	4603      	mov	r3, r0
 8009d2a:	bf36      	itet	cc
 8009d2c:	0403      	lslcc	r3, r0, #16
 8009d2e:	2000      	movcs	r0, #0
 8009d30:	2010      	movcc	r0, #16
 8009d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d36:	bf3c      	itt	cc
 8009d38:	021b      	lslcc	r3, r3, #8
 8009d3a:	3008      	addcc	r0, #8
 8009d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d40:	bf3c      	itt	cc
 8009d42:	011b      	lslcc	r3, r3, #4
 8009d44:	3004      	addcc	r0, #4
 8009d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d4a:	bf3c      	itt	cc
 8009d4c:	009b      	lslcc	r3, r3, #2
 8009d4e:	3002      	addcc	r0, #2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db05      	blt.n	8009d60 <__hi0bits+0x3c>
 8009d54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d58:	f100 0001 	add.w	r0, r0, #1
 8009d5c:	bf08      	it	eq
 8009d5e:	2020      	moveq	r0, #32
 8009d60:	4770      	bx	lr

08009d62 <__lo0bits>:
 8009d62:	6803      	ldr	r3, [r0, #0]
 8009d64:	4602      	mov	r2, r0
 8009d66:	f013 0007 	ands.w	r0, r3, #7
 8009d6a:	d00b      	beq.n	8009d84 <__lo0bits+0x22>
 8009d6c:	07d9      	lsls	r1, r3, #31
 8009d6e:	d421      	bmi.n	8009db4 <__lo0bits+0x52>
 8009d70:	0798      	lsls	r0, r3, #30
 8009d72:	bf49      	itett	mi
 8009d74:	085b      	lsrmi	r3, r3, #1
 8009d76:	089b      	lsrpl	r3, r3, #2
 8009d78:	2001      	movmi	r0, #1
 8009d7a:	6013      	strmi	r3, [r2, #0]
 8009d7c:	bf5c      	itt	pl
 8009d7e:	6013      	strpl	r3, [r2, #0]
 8009d80:	2002      	movpl	r0, #2
 8009d82:	4770      	bx	lr
 8009d84:	b299      	uxth	r1, r3
 8009d86:	b909      	cbnz	r1, 8009d8c <__lo0bits+0x2a>
 8009d88:	0c1b      	lsrs	r3, r3, #16
 8009d8a:	2010      	movs	r0, #16
 8009d8c:	b2d9      	uxtb	r1, r3
 8009d8e:	b909      	cbnz	r1, 8009d94 <__lo0bits+0x32>
 8009d90:	3008      	adds	r0, #8
 8009d92:	0a1b      	lsrs	r3, r3, #8
 8009d94:	0719      	lsls	r1, r3, #28
 8009d96:	bf04      	itt	eq
 8009d98:	091b      	lsreq	r3, r3, #4
 8009d9a:	3004      	addeq	r0, #4
 8009d9c:	0799      	lsls	r1, r3, #30
 8009d9e:	bf04      	itt	eq
 8009da0:	089b      	lsreq	r3, r3, #2
 8009da2:	3002      	addeq	r0, #2
 8009da4:	07d9      	lsls	r1, r3, #31
 8009da6:	d403      	bmi.n	8009db0 <__lo0bits+0x4e>
 8009da8:	085b      	lsrs	r3, r3, #1
 8009daa:	f100 0001 	add.w	r0, r0, #1
 8009dae:	d003      	beq.n	8009db8 <__lo0bits+0x56>
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	4770      	bx	lr
 8009db4:	2000      	movs	r0, #0
 8009db6:	4770      	bx	lr
 8009db8:	2020      	movs	r0, #32
 8009dba:	4770      	bx	lr

08009dbc <__i2b>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	f7ff febd 	bl	8009b40 <_Balloc>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	b928      	cbnz	r0, 8009dd6 <__i2b+0x1a>
 8009dca:	4b05      	ldr	r3, [pc, #20]	@ (8009de0 <__i2b+0x24>)
 8009dcc:	4805      	ldr	r0, [pc, #20]	@ (8009de4 <__i2b+0x28>)
 8009dce:	f240 1145 	movw	r1, #325	@ 0x145
 8009dd2:	f001 ffd1 	bl	800bd78 <__assert_func>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	6144      	str	r4, [r0, #20]
 8009dda:	6103      	str	r3, [r0, #16]
 8009ddc:	bd10      	pop	{r4, pc}
 8009dde:	bf00      	nop
 8009de0:	0800ccb7 	.word	0x0800ccb7
 8009de4:	0800ccc8 	.word	0x0800ccc8

08009de8 <__multiply>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	4614      	mov	r4, r2
 8009dee:	690a      	ldr	r2, [r1, #16]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	bfa8      	it	ge
 8009df6:	4623      	movge	r3, r4
 8009df8:	460f      	mov	r7, r1
 8009dfa:	bfa4      	itt	ge
 8009dfc:	460c      	movge	r4, r1
 8009dfe:	461f      	movge	r7, r3
 8009e00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009e04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009e08:	68a3      	ldr	r3, [r4, #8]
 8009e0a:	6861      	ldr	r1, [r4, #4]
 8009e0c:	eb0a 0609 	add.w	r6, sl, r9
 8009e10:	42b3      	cmp	r3, r6
 8009e12:	b085      	sub	sp, #20
 8009e14:	bfb8      	it	lt
 8009e16:	3101      	addlt	r1, #1
 8009e18:	f7ff fe92 	bl	8009b40 <_Balloc>
 8009e1c:	b930      	cbnz	r0, 8009e2c <__multiply+0x44>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	4b44      	ldr	r3, [pc, #272]	@ (8009f34 <__multiply+0x14c>)
 8009e22:	4845      	ldr	r0, [pc, #276]	@ (8009f38 <__multiply+0x150>)
 8009e24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e28:	f001 ffa6 	bl	800bd78 <__assert_func>
 8009e2c:	f100 0514 	add.w	r5, r0, #20
 8009e30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e34:	462b      	mov	r3, r5
 8009e36:	2200      	movs	r2, #0
 8009e38:	4543      	cmp	r3, r8
 8009e3a:	d321      	bcc.n	8009e80 <__multiply+0x98>
 8009e3c:	f107 0114 	add.w	r1, r7, #20
 8009e40:	f104 0214 	add.w	r2, r4, #20
 8009e44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009e48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009e4c:	9302      	str	r3, [sp, #8]
 8009e4e:	1b13      	subs	r3, r2, r4
 8009e50:	3b15      	subs	r3, #21
 8009e52:	f023 0303 	bic.w	r3, r3, #3
 8009e56:	3304      	adds	r3, #4
 8009e58:	f104 0715 	add.w	r7, r4, #21
 8009e5c:	42ba      	cmp	r2, r7
 8009e5e:	bf38      	it	cc
 8009e60:	2304      	movcc	r3, #4
 8009e62:	9301      	str	r3, [sp, #4]
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	9103      	str	r1, [sp, #12]
 8009e68:	428b      	cmp	r3, r1
 8009e6a:	d80c      	bhi.n	8009e86 <__multiply+0x9e>
 8009e6c:	2e00      	cmp	r6, #0
 8009e6e:	dd03      	ble.n	8009e78 <__multiply+0x90>
 8009e70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d05b      	beq.n	8009f30 <__multiply+0x148>
 8009e78:	6106      	str	r6, [r0, #16]
 8009e7a:	b005      	add	sp, #20
 8009e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e80:	f843 2b04 	str.w	r2, [r3], #4
 8009e84:	e7d8      	b.n	8009e38 <__multiply+0x50>
 8009e86:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e8a:	f1ba 0f00 	cmp.w	sl, #0
 8009e8e:	d024      	beq.n	8009eda <__multiply+0xf2>
 8009e90:	f104 0e14 	add.w	lr, r4, #20
 8009e94:	46a9      	mov	r9, r5
 8009e96:	f04f 0c00 	mov.w	ip, #0
 8009e9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e9e:	f8d9 3000 	ldr.w	r3, [r9]
 8009ea2:	fa1f fb87 	uxth.w	fp, r7
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	fb0a 330b 	mla	r3, sl, fp, r3
 8009eac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009eb0:	f8d9 7000 	ldr.w	r7, [r9]
 8009eb4:	4463      	add	r3, ip
 8009eb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009eba:	fb0a c70b 	mla	r7, sl, fp, ip
 8009ebe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ec8:	4572      	cmp	r2, lr
 8009eca:	f849 3b04 	str.w	r3, [r9], #4
 8009ece:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ed2:	d8e2      	bhi.n	8009e9a <__multiply+0xb2>
 8009ed4:	9b01      	ldr	r3, [sp, #4]
 8009ed6:	f845 c003 	str.w	ip, [r5, r3]
 8009eda:	9b03      	ldr	r3, [sp, #12]
 8009edc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009ee0:	3104      	adds	r1, #4
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	d021      	beq.n	8009f2c <__multiply+0x144>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	f104 0c14 	add.w	ip, r4, #20
 8009eee:	46ae      	mov	lr, r5
 8009ef0:	f04f 0a00 	mov.w	sl, #0
 8009ef4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ef8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009efc:	fb09 770b 	mla	r7, r9, fp, r7
 8009f00:	4457      	add	r7, sl
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f08:	f84e 3b04 	str.w	r3, [lr], #4
 8009f0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f14:	f8be 3000 	ldrh.w	r3, [lr]
 8009f18:	fb09 330a 	mla	r3, r9, sl, r3
 8009f1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009f20:	4562      	cmp	r2, ip
 8009f22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f26:	d8e5      	bhi.n	8009ef4 <__multiply+0x10c>
 8009f28:	9f01      	ldr	r7, [sp, #4]
 8009f2a:	51eb      	str	r3, [r5, r7]
 8009f2c:	3504      	adds	r5, #4
 8009f2e:	e799      	b.n	8009e64 <__multiply+0x7c>
 8009f30:	3e01      	subs	r6, #1
 8009f32:	e79b      	b.n	8009e6c <__multiply+0x84>
 8009f34:	0800ccb7 	.word	0x0800ccb7
 8009f38:	0800ccc8 	.word	0x0800ccc8

08009f3c <__pow5mult>:
 8009f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f40:	4615      	mov	r5, r2
 8009f42:	f012 0203 	ands.w	r2, r2, #3
 8009f46:	4607      	mov	r7, r0
 8009f48:	460e      	mov	r6, r1
 8009f4a:	d007      	beq.n	8009f5c <__pow5mult+0x20>
 8009f4c:	4c25      	ldr	r4, [pc, #148]	@ (8009fe4 <__pow5mult+0xa8>)
 8009f4e:	3a01      	subs	r2, #1
 8009f50:	2300      	movs	r3, #0
 8009f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f56:	f7ff fe55 	bl	8009c04 <__multadd>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	10ad      	asrs	r5, r5, #2
 8009f5e:	d03d      	beq.n	8009fdc <__pow5mult+0xa0>
 8009f60:	69fc      	ldr	r4, [r7, #28]
 8009f62:	b97c      	cbnz	r4, 8009f84 <__pow5mult+0x48>
 8009f64:	2010      	movs	r0, #16
 8009f66:	f7ff fd35 	bl	80099d4 <malloc>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	61f8      	str	r0, [r7, #28]
 8009f6e:	b928      	cbnz	r0, 8009f7c <__pow5mult+0x40>
 8009f70:	4b1d      	ldr	r3, [pc, #116]	@ (8009fe8 <__pow5mult+0xac>)
 8009f72:	481e      	ldr	r0, [pc, #120]	@ (8009fec <__pow5mult+0xb0>)
 8009f74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f78:	f001 fefe 	bl	800bd78 <__assert_func>
 8009f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f80:	6004      	str	r4, [r0, #0]
 8009f82:	60c4      	str	r4, [r0, #12]
 8009f84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f8c:	b94c      	cbnz	r4, 8009fa2 <__pow5mult+0x66>
 8009f8e:	f240 2171 	movw	r1, #625	@ 0x271
 8009f92:	4638      	mov	r0, r7
 8009f94:	f7ff ff12 	bl	8009dbc <__i2b>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	f04f 0900 	mov.w	r9, #0
 8009fa6:	07eb      	lsls	r3, r5, #31
 8009fa8:	d50a      	bpl.n	8009fc0 <__pow5mult+0x84>
 8009faa:	4631      	mov	r1, r6
 8009fac:	4622      	mov	r2, r4
 8009fae:	4638      	mov	r0, r7
 8009fb0:	f7ff ff1a 	bl	8009de8 <__multiply>
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	4638      	mov	r0, r7
 8009fba:	f7ff fe01 	bl	8009bc0 <_Bfree>
 8009fbe:	4646      	mov	r6, r8
 8009fc0:	106d      	asrs	r5, r5, #1
 8009fc2:	d00b      	beq.n	8009fdc <__pow5mult+0xa0>
 8009fc4:	6820      	ldr	r0, [r4, #0]
 8009fc6:	b938      	cbnz	r0, 8009fd8 <__pow5mult+0x9c>
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4621      	mov	r1, r4
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7ff ff0b 	bl	8009de8 <__multiply>
 8009fd2:	6020      	str	r0, [r4, #0]
 8009fd4:	f8c0 9000 	str.w	r9, [r0]
 8009fd8:	4604      	mov	r4, r0
 8009fda:	e7e4      	b.n	8009fa6 <__pow5mult+0x6a>
 8009fdc:	4630      	mov	r0, r6
 8009fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800cd24 	.word	0x0800cd24
 8009fe8:	0800cc48 	.word	0x0800cc48
 8009fec:	0800ccc8 	.word	0x0800ccc8

08009ff0 <__lshift>:
 8009ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	6849      	ldr	r1, [r1, #4]
 8009ff8:	6923      	ldr	r3, [r4, #16]
 8009ffa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	4607      	mov	r7, r0
 800a002:	4691      	mov	r9, r2
 800a004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a008:	f108 0601 	add.w	r6, r8, #1
 800a00c:	42b3      	cmp	r3, r6
 800a00e:	db0b      	blt.n	800a028 <__lshift+0x38>
 800a010:	4638      	mov	r0, r7
 800a012:	f7ff fd95 	bl	8009b40 <_Balloc>
 800a016:	4605      	mov	r5, r0
 800a018:	b948      	cbnz	r0, 800a02e <__lshift+0x3e>
 800a01a:	4602      	mov	r2, r0
 800a01c:	4b28      	ldr	r3, [pc, #160]	@ (800a0c0 <__lshift+0xd0>)
 800a01e:	4829      	ldr	r0, [pc, #164]	@ (800a0c4 <__lshift+0xd4>)
 800a020:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a024:	f001 fea8 	bl	800bd78 <__assert_func>
 800a028:	3101      	adds	r1, #1
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	e7ee      	b.n	800a00c <__lshift+0x1c>
 800a02e:	2300      	movs	r3, #0
 800a030:	f100 0114 	add.w	r1, r0, #20
 800a034:	f100 0210 	add.w	r2, r0, #16
 800a038:	4618      	mov	r0, r3
 800a03a:	4553      	cmp	r3, sl
 800a03c:	db33      	blt.n	800a0a6 <__lshift+0xb6>
 800a03e:	6920      	ldr	r0, [r4, #16]
 800a040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a044:	f104 0314 	add.w	r3, r4, #20
 800a048:	f019 091f 	ands.w	r9, r9, #31
 800a04c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a054:	d02b      	beq.n	800a0ae <__lshift+0xbe>
 800a056:	f1c9 0e20 	rsb	lr, r9, #32
 800a05a:	468a      	mov	sl, r1
 800a05c:	2200      	movs	r2, #0
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	fa00 f009 	lsl.w	r0, r0, r9
 800a064:	4310      	orrs	r0, r2
 800a066:	f84a 0b04 	str.w	r0, [sl], #4
 800a06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a06e:	459c      	cmp	ip, r3
 800a070:	fa22 f20e 	lsr.w	r2, r2, lr
 800a074:	d8f3      	bhi.n	800a05e <__lshift+0x6e>
 800a076:	ebac 0304 	sub.w	r3, ip, r4
 800a07a:	3b15      	subs	r3, #21
 800a07c:	f023 0303 	bic.w	r3, r3, #3
 800a080:	3304      	adds	r3, #4
 800a082:	f104 0015 	add.w	r0, r4, #21
 800a086:	4584      	cmp	ip, r0
 800a088:	bf38      	it	cc
 800a08a:	2304      	movcc	r3, #4
 800a08c:	50ca      	str	r2, [r1, r3]
 800a08e:	b10a      	cbz	r2, 800a094 <__lshift+0xa4>
 800a090:	f108 0602 	add.w	r6, r8, #2
 800a094:	3e01      	subs	r6, #1
 800a096:	4638      	mov	r0, r7
 800a098:	612e      	str	r6, [r5, #16]
 800a09a:	4621      	mov	r1, r4
 800a09c:	f7ff fd90 	bl	8009bc0 <_Bfree>
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	e7c5      	b.n	800a03a <__lshift+0x4a>
 800a0ae:	3904      	subs	r1, #4
 800a0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0b8:	459c      	cmp	ip, r3
 800a0ba:	d8f9      	bhi.n	800a0b0 <__lshift+0xc0>
 800a0bc:	e7ea      	b.n	800a094 <__lshift+0xa4>
 800a0be:	bf00      	nop
 800a0c0:	0800ccb7 	.word	0x0800ccb7
 800a0c4:	0800ccc8 	.word	0x0800ccc8

0800a0c8 <__mcmp>:
 800a0c8:	690a      	ldr	r2, [r1, #16]
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	6900      	ldr	r0, [r0, #16]
 800a0ce:	1a80      	subs	r0, r0, r2
 800a0d0:	b530      	push	{r4, r5, lr}
 800a0d2:	d10e      	bne.n	800a0f2 <__mcmp+0x2a>
 800a0d4:	3314      	adds	r3, #20
 800a0d6:	3114      	adds	r1, #20
 800a0d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a0dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0e8:	4295      	cmp	r5, r2
 800a0ea:	d003      	beq.n	800a0f4 <__mcmp+0x2c>
 800a0ec:	d205      	bcs.n	800a0fa <__mcmp+0x32>
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f2:	bd30      	pop	{r4, r5, pc}
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d3f3      	bcc.n	800a0e0 <__mcmp+0x18>
 800a0f8:	e7fb      	b.n	800a0f2 <__mcmp+0x2a>
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	e7f9      	b.n	800a0f2 <__mcmp+0x2a>
	...

0800a100 <__mdiff>:
 800a100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	4689      	mov	r9, r1
 800a106:	4606      	mov	r6, r0
 800a108:	4611      	mov	r1, r2
 800a10a:	4648      	mov	r0, r9
 800a10c:	4614      	mov	r4, r2
 800a10e:	f7ff ffdb 	bl	800a0c8 <__mcmp>
 800a112:	1e05      	subs	r5, r0, #0
 800a114:	d112      	bne.n	800a13c <__mdiff+0x3c>
 800a116:	4629      	mov	r1, r5
 800a118:	4630      	mov	r0, r6
 800a11a:	f7ff fd11 	bl	8009b40 <_Balloc>
 800a11e:	4602      	mov	r2, r0
 800a120:	b928      	cbnz	r0, 800a12e <__mdiff+0x2e>
 800a122:	4b3f      	ldr	r3, [pc, #252]	@ (800a220 <__mdiff+0x120>)
 800a124:	f240 2137 	movw	r1, #567	@ 0x237
 800a128:	483e      	ldr	r0, [pc, #248]	@ (800a224 <__mdiff+0x124>)
 800a12a:	f001 fe25 	bl	800bd78 <__assert_func>
 800a12e:	2301      	movs	r3, #1
 800a130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a134:	4610      	mov	r0, r2
 800a136:	b003      	add	sp, #12
 800a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13c:	bfbc      	itt	lt
 800a13e:	464b      	movlt	r3, r9
 800a140:	46a1      	movlt	r9, r4
 800a142:	4630      	mov	r0, r6
 800a144:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a148:	bfba      	itte	lt
 800a14a:	461c      	movlt	r4, r3
 800a14c:	2501      	movlt	r5, #1
 800a14e:	2500      	movge	r5, #0
 800a150:	f7ff fcf6 	bl	8009b40 <_Balloc>
 800a154:	4602      	mov	r2, r0
 800a156:	b918      	cbnz	r0, 800a160 <__mdiff+0x60>
 800a158:	4b31      	ldr	r3, [pc, #196]	@ (800a220 <__mdiff+0x120>)
 800a15a:	f240 2145 	movw	r1, #581	@ 0x245
 800a15e:	e7e3      	b.n	800a128 <__mdiff+0x28>
 800a160:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a164:	6926      	ldr	r6, [r4, #16]
 800a166:	60c5      	str	r5, [r0, #12]
 800a168:	f109 0310 	add.w	r3, r9, #16
 800a16c:	f109 0514 	add.w	r5, r9, #20
 800a170:	f104 0e14 	add.w	lr, r4, #20
 800a174:	f100 0b14 	add.w	fp, r0, #20
 800a178:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a17c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	46d9      	mov	r9, fp
 800a184:	f04f 0c00 	mov.w	ip, #0
 800a188:	9b01      	ldr	r3, [sp, #4]
 800a18a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a18e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	fa1f f38a 	uxth.w	r3, sl
 800a198:	4619      	mov	r1, r3
 800a19a:	b283      	uxth	r3, r0
 800a19c:	1acb      	subs	r3, r1, r3
 800a19e:	0c00      	lsrs	r0, r0, #16
 800a1a0:	4463      	add	r3, ip
 800a1a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a1a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a1b0:	4576      	cmp	r6, lr
 800a1b2:	f849 3b04 	str.w	r3, [r9], #4
 800a1b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1ba:	d8e5      	bhi.n	800a188 <__mdiff+0x88>
 800a1bc:	1b33      	subs	r3, r6, r4
 800a1be:	3b15      	subs	r3, #21
 800a1c0:	f023 0303 	bic.w	r3, r3, #3
 800a1c4:	3415      	adds	r4, #21
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	42a6      	cmp	r6, r4
 800a1ca:	bf38      	it	cc
 800a1cc:	2304      	movcc	r3, #4
 800a1ce:	441d      	add	r5, r3
 800a1d0:	445b      	add	r3, fp
 800a1d2:	461e      	mov	r6, r3
 800a1d4:	462c      	mov	r4, r5
 800a1d6:	4544      	cmp	r4, r8
 800a1d8:	d30e      	bcc.n	800a1f8 <__mdiff+0xf8>
 800a1da:	f108 0103 	add.w	r1, r8, #3
 800a1de:	1b49      	subs	r1, r1, r5
 800a1e0:	f021 0103 	bic.w	r1, r1, #3
 800a1e4:	3d03      	subs	r5, #3
 800a1e6:	45a8      	cmp	r8, r5
 800a1e8:	bf38      	it	cc
 800a1ea:	2100      	movcc	r1, #0
 800a1ec:	440b      	add	r3, r1
 800a1ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1f2:	b191      	cbz	r1, 800a21a <__mdiff+0x11a>
 800a1f4:	6117      	str	r7, [r2, #16]
 800a1f6:	e79d      	b.n	800a134 <__mdiff+0x34>
 800a1f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a1fc:	46e6      	mov	lr, ip
 800a1fe:	0c08      	lsrs	r0, r1, #16
 800a200:	fa1c fc81 	uxtah	ip, ip, r1
 800a204:	4471      	add	r1, lr
 800a206:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a20a:	b289      	uxth	r1, r1
 800a20c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a210:	f846 1b04 	str.w	r1, [r6], #4
 800a214:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a218:	e7dd      	b.n	800a1d6 <__mdiff+0xd6>
 800a21a:	3f01      	subs	r7, #1
 800a21c:	e7e7      	b.n	800a1ee <__mdiff+0xee>
 800a21e:	bf00      	nop
 800a220:	0800ccb7 	.word	0x0800ccb7
 800a224:	0800ccc8 	.word	0x0800ccc8

0800a228 <__ulp>:
 800a228:	b082      	sub	sp, #8
 800a22a:	ed8d 0b00 	vstr	d0, [sp]
 800a22e:	9a01      	ldr	r2, [sp, #4]
 800a230:	4b0f      	ldr	r3, [pc, #60]	@ (800a270 <__ulp+0x48>)
 800a232:	4013      	ands	r3, r2
 800a234:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dc08      	bgt.n	800a24e <__ulp+0x26>
 800a23c:	425b      	negs	r3, r3
 800a23e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a242:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a246:	da04      	bge.n	800a252 <__ulp+0x2a>
 800a248:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a24c:	4113      	asrs	r3, r2
 800a24e:	2200      	movs	r2, #0
 800a250:	e008      	b.n	800a264 <__ulp+0x3c>
 800a252:	f1a2 0314 	sub.w	r3, r2, #20
 800a256:	2b1e      	cmp	r3, #30
 800a258:	bfda      	itte	le
 800a25a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a25e:	40da      	lsrle	r2, r3
 800a260:	2201      	movgt	r2, #1
 800a262:	2300      	movs	r3, #0
 800a264:	4619      	mov	r1, r3
 800a266:	4610      	mov	r0, r2
 800a268:	ec41 0b10 	vmov	d0, r0, r1
 800a26c:	b002      	add	sp, #8
 800a26e:	4770      	bx	lr
 800a270:	7ff00000 	.word	0x7ff00000

0800a274 <__b2d>:
 800a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a278:	6906      	ldr	r6, [r0, #16]
 800a27a:	f100 0814 	add.w	r8, r0, #20
 800a27e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a282:	1f37      	subs	r7, r6, #4
 800a284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a288:	4610      	mov	r0, r2
 800a28a:	f7ff fd4b 	bl	8009d24 <__hi0bits>
 800a28e:	f1c0 0320 	rsb	r3, r0, #32
 800a292:	280a      	cmp	r0, #10
 800a294:	600b      	str	r3, [r1, #0]
 800a296:	491b      	ldr	r1, [pc, #108]	@ (800a304 <__b2d+0x90>)
 800a298:	dc15      	bgt.n	800a2c6 <__b2d+0x52>
 800a29a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a29e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a2a2:	45b8      	cmp	r8, r7
 800a2a4:	ea43 0501 	orr.w	r5, r3, r1
 800a2a8:	bf34      	ite	cc
 800a2aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a2ae:	2300      	movcs	r3, #0
 800a2b0:	3015      	adds	r0, #21
 800a2b2:	fa02 f000 	lsl.w	r0, r2, r0
 800a2b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a2ba:	4303      	orrs	r3, r0
 800a2bc:	461c      	mov	r4, r3
 800a2be:	ec45 4b10 	vmov	d0, r4, r5
 800a2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c6:	45b8      	cmp	r8, r7
 800a2c8:	bf3a      	itte	cc
 800a2ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a2ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800a2d2:	2300      	movcs	r3, #0
 800a2d4:	380b      	subs	r0, #11
 800a2d6:	d012      	beq.n	800a2fe <__b2d+0x8a>
 800a2d8:	f1c0 0120 	rsb	r1, r0, #32
 800a2dc:	fa23 f401 	lsr.w	r4, r3, r1
 800a2e0:	4082      	lsls	r2, r0
 800a2e2:	4322      	orrs	r2, r4
 800a2e4:	4547      	cmp	r7, r8
 800a2e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a2ea:	bf8c      	ite	hi
 800a2ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a2f0:	2200      	movls	r2, #0
 800a2f2:	4083      	lsls	r3, r0
 800a2f4:	40ca      	lsrs	r2, r1
 800a2f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	e7de      	b.n	800a2bc <__b2d+0x48>
 800a2fe:	ea42 0501 	orr.w	r5, r2, r1
 800a302:	e7db      	b.n	800a2bc <__b2d+0x48>
 800a304:	3ff00000 	.word	0x3ff00000

0800a308 <__d2b>:
 800a308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a30c:	460f      	mov	r7, r1
 800a30e:	2101      	movs	r1, #1
 800a310:	ec59 8b10 	vmov	r8, r9, d0
 800a314:	4616      	mov	r6, r2
 800a316:	f7ff fc13 	bl	8009b40 <_Balloc>
 800a31a:	4604      	mov	r4, r0
 800a31c:	b930      	cbnz	r0, 800a32c <__d2b+0x24>
 800a31e:	4602      	mov	r2, r0
 800a320:	4b23      	ldr	r3, [pc, #140]	@ (800a3b0 <__d2b+0xa8>)
 800a322:	4824      	ldr	r0, [pc, #144]	@ (800a3b4 <__d2b+0xac>)
 800a324:	f240 310f 	movw	r1, #783	@ 0x30f
 800a328:	f001 fd26 	bl	800bd78 <__assert_func>
 800a32c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a334:	b10d      	cbz	r5, 800a33a <__d2b+0x32>
 800a336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	f1b8 0300 	subs.w	r3, r8, #0
 800a340:	d023      	beq.n	800a38a <__d2b+0x82>
 800a342:	4668      	mov	r0, sp
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	f7ff fd0c 	bl	8009d62 <__lo0bits>
 800a34a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a34e:	b1d0      	cbz	r0, 800a386 <__d2b+0x7e>
 800a350:	f1c0 0320 	rsb	r3, r0, #32
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	430b      	orrs	r3, r1
 800a35a:	40c2      	lsrs	r2, r0
 800a35c:	6163      	str	r3, [r4, #20]
 800a35e:	9201      	str	r2, [sp, #4]
 800a360:	9b01      	ldr	r3, [sp, #4]
 800a362:	61a3      	str	r3, [r4, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	bf0c      	ite	eq
 800a368:	2201      	moveq	r2, #1
 800a36a:	2202      	movne	r2, #2
 800a36c:	6122      	str	r2, [r4, #16]
 800a36e:	b1a5      	cbz	r5, 800a39a <__d2b+0x92>
 800a370:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a374:	4405      	add	r5, r0
 800a376:	603d      	str	r5, [r7, #0]
 800a378:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a37c:	6030      	str	r0, [r6, #0]
 800a37e:	4620      	mov	r0, r4
 800a380:	b003      	add	sp, #12
 800a382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a386:	6161      	str	r1, [r4, #20]
 800a388:	e7ea      	b.n	800a360 <__d2b+0x58>
 800a38a:	a801      	add	r0, sp, #4
 800a38c:	f7ff fce9 	bl	8009d62 <__lo0bits>
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	6163      	str	r3, [r4, #20]
 800a394:	3020      	adds	r0, #32
 800a396:	2201      	movs	r2, #1
 800a398:	e7e8      	b.n	800a36c <__d2b+0x64>
 800a39a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a39e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a3a2:	6038      	str	r0, [r7, #0]
 800a3a4:	6918      	ldr	r0, [r3, #16]
 800a3a6:	f7ff fcbd 	bl	8009d24 <__hi0bits>
 800a3aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3ae:	e7e5      	b.n	800a37c <__d2b+0x74>
 800a3b0:	0800ccb7 	.word	0x0800ccb7
 800a3b4:	0800ccc8 	.word	0x0800ccc8

0800a3b8 <__ratio>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	e9cd 1000 	strd	r1, r0, [sp]
 800a3c2:	a902      	add	r1, sp, #8
 800a3c4:	f7ff ff56 	bl	800a274 <__b2d>
 800a3c8:	9800      	ldr	r0, [sp, #0]
 800a3ca:	a903      	add	r1, sp, #12
 800a3cc:	ec55 4b10 	vmov	r4, r5, d0
 800a3d0:	f7ff ff50 	bl	800a274 <__b2d>
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	6919      	ldr	r1, [r3, #16]
 800a3d8:	9b00      	ldr	r3, [sp, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	1ac9      	subs	r1, r1, r3
 800a3de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a3e2:	1a9b      	subs	r3, r3, r2
 800a3e4:	ec5b ab10 	vmov	sl, fp, d0
 800a3e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	bfce      	itee	gt
 800a3f0:	462a      	movgt	r2, r5
 800a3f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3f6:	465a      	movle	r2, fp
 800a3f8:	462f      	mov	r7, r5
 800a3fa:	46d9      	mov	r9, fp
 800a3fc:	bfcc      	ite	gt
 800a3fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a402:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a406:	464b      	mov	r3, r9
 800a408:	4652      	mov	r2, sl
 800a40a:	4620      	mov	r0, r4
 800a40c:	4639      	mov	r1, r7
 800a40e:	f7f6 fa1d 	bl	800084c <__aeabi_ddiv>
 800a412:	ec41 0b10 	vmov	d0, r0, r1
 800a416:	b005      	add	sp, #20
 800a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a41c <__copybits>:
 800a41c:	3901      	subs	r1, #1
 800a41e:	b570      	push	{r4, r5, r6, lr}
 800a420:	1149      	asrs	r1, r1, #5
 800a422:	6914      	ldr	r4, [r2, #16]
 800a424:	3101      	adds	r1, #1
 800a426:	f102 0314 	add.w	r3, r2, #20
 800a42a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a42e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a432:	1f05      	subs	r5, r0, #4
 800a434:	42a3      	cmp	r3, r4
 800a436:	d30c      	bcc.n	800a452 <__copybits+0x36>
 800a438:	1aa3      	subs	r3, r4, r2
 800a43a:	3b11      	subs	r3, #17
 800a43c:	f023 0303 	bic.w	r3, r3, #3
 800a440:	3211      	adds	r2, #17
 800a442:	42a2      	cmp	r2, r4
 800a444:	bf88      	it	hi
 800a446:	2300      	movhi	r3, #0
 800a448:	4418      	add	r0, r3
 800a44a:	2300      	movs	r3, #0
 800a44c:	4288      	cmp	r0, r1
 800a44e:	d305      	bcc.n	800a45c <__copybits+0x40>
 800a450:	bd70      	pop	{r4, r5, r6, pc}
 800a452:	f853 6b04 	ldr.w	r6, [r3], #4
 800a456:	f845 6f04 	str.w	r6, [r5, #4]!
 800a45a:	e7eb      	b.n	800a434 <__copybits+0x18>
 800a45c:	f840 3b04 	str.w	r3, [r0], #4
 800a460:	e7f4      	b.n	800a44c <__copybits+0x30>

0800a462 <__any_on>:
 800a462:	f100 0214 	add.w	r2, r0, #20
 800a466:	6900      	ldr	r0, [r0, #16]
 800a468:	114b      	asrs	r3, r1, #5
 800a46a:	4298      	cmp	r0, r3
 800a46c:	b510      	push	{r4, lr}
 800a46e:	db11      	blt.n	800a494 <__any_on+0x32>
 800a470:	dd0a      	ble.n	800a488 <__any_on+0x26>
 800a472:	f011 011f 	ands.w	r1, r1, #31
 800a476:	d007      	beq.n	800a488 <__any_on+0x26>
 800a478:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a47c:	fa24 f001 	lsr.w	r0, r4, r1
 800a480:	fa00 f101 	lsl.w	r1, r0, r1
 800a484:	428c      	cmp	r4, r1
 800a486:	d10b      	bne.n	800a4a0 <__any_on+0x3e>
 800a488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d803      	bhi.n	800a498 <__any_on+0x36>
 800a490:	2000      	movs	r0, #0
 800a492:	bd10      	pop	{r4, pc}
 800a494:	4603      	mov	r3, r0
 800a496:	e7f7      	b.n	800a488 <__any_on+0x26>
 800a498:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a49c:	2900      	cmp	r1, #0
 800a49e:	d0f5      	beq.n	800a48c <__any_on+0x2a>
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	e7f6      	b.n	800a492 <__any_on+0x30>

0800a4a4 <sulp>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	ec45 4b10 	vmov	d0, r4, r5
 800a4ae:	4616      	mov	r6, r2
 800a4b0:	f7ff feba 	bl	800a228 <__ulp>
 800a4b4:	ec51 0b10 	vmov	r0, r1, d0
 800a4b8:	b17e      	cbz	r6, 800a4da <sulp+0x36>
 800a4ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dd09      	ble.n	800a4da <sulp+0x36>
 800a4c6:	051b      	lsls	r3, r3, #20
 800a4c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a4cc:	2400      	movs	r4, #0
 800a4ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	ec41 0b10 	vmov	d0, r0, r1
 800a4de:	bd70      	pop	{r4, r5, r6, pc}

0800a4e0 <_strtod_l>:
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	b09f      	sub	sp, #124	@ 0x7c
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800a4ee:	9005      	str	r0, [sp, #20]
 800a4f0:	f04f 0a00 	mov.w	sl, #0
 800a4f4:	f04f 0b00 	mov.w	fp, #0
 800a4f8:	460a      	mov	r2, r1
 800a4fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4fc:	7811      	ldrb	r1, [r2, #0]
 800a4fe:	292b      	cmp	r1, #43	@ 0x2b
 800a500:	d04a      	beq.n	800a598 <_strtod_l+0xb8>
 800a502:	d838      	bhi.n	800a576 <_strtod_l+0x96>
 800a504:	290d      	cmp	r1, #13
 800a506:	d832      	bhi.n	800a56e <_strtod_l+0x8e>
 800a508:	2908      	cmp	r1, #8
 800a50a:	d832      	bhi.n	800a572 <_strtod_l+0x92>
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d03b      	beq.n	800a588 <_strtod_l+0xa8>
 800a510:	2200      	movs	r2, #0
 800a512:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a514:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a516:	782a      	ldrb	r2, [r5, #0]
 800a518:	2a30      	cmp	r2, #48	@ 0x30
 800a51a:	f040 80b3 	bne.w	800a684 <_strtod_l+0x1a4>
 800a51e:	786a      	ldrb	r2, [r5, #1]
 800a520:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a524:	2a58      	cmp	r2, #88	@ 0x58
 800a526:	d16e      	bne.n	800a606 <_strtod_l+0x126>
 800a528:	9302      	str	r3, [sp, #8]
 800a52a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	4a8e      	ldr	r2, [pc, #568]	@ (800a76c <_strtod_l+0x28c>)
 800a534:	9805      	ldr	r0, [sp, #20]
 800a536:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a538:	a919      	add	r1, sp, #100	@ 0x64
 800a53a:	f001 fcb7 	bl	800beac <__gethex>
 800a53e:	f010 060f 	ands.w	r6, r0, #15
 800a542:	4604      	mov	r4, r0
 800a544:	d005      	beq.n	800a552 <_strtod_l+0x72>
 800a546:	2e06      	cmp	r6, #6
 800a548:	d128      	bne.n	800a59c <_strtod_l+0xbc>
 800a54a:	3501      	adds	r5, #1
 800a54c:	2300      	movs	r3, #0
 800a54e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a550:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a552:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a554:	2b00      	cmp	r3, #0
 800a556:	f040 858e 	bne.w	800b076 <_strtod_l+0xb96>
 800a55a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a55c:	b1cb      	cbz	r3, 800a592 <_strtod_l+0xb2>
 800a55e:	4652      	mov	r2, sl
 800a560:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a564:	ec43 2b10 	vmov	d0, r2, r3
 800a568:	b01f      	add	sp, #124	@ 0x7c
 800a56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56e:	2920      	cmp	r1, #32
 800a570:	d1ce      	bne.n	800a510 <_strtod_l+0x30>
 800a572:	3201      	adds	r2, #1
 800a574:	e7c1      	b.n	800a4fa <_strtod_l+0x1a>
 800a576:	292d      	cmp	r1, #45	@ 0x2d
 800a578:	d1ca      	bne.n	800a510 <_strtod_l+0x30>
 800a57a:	2101      	movs	r1, #1
 800a57c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a57e:	1c51      	adds	r1, r2, #1
 800a580:	9119      	str	r1, [sp, #100]	@ 0x64
 800a582:	7852      	ldrb	r2, [r2, #1]
 800a584:	2a00      	cmp	r2, #0
 800a586:	d1c5      	bne.n	800a514 <_strtod_l+0x34>
 800a588:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a58a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 8570 	bne.w	800b072 <_strtod_l+0xb92>
 800a592:	4652      	mov	r2, sl
 800a594:	465b      	mov	r3, fp
 800a596:	e7e5      	b.n	800a564 <_strtod_l+0x84>
 800a598:	2100      	movs	r1, #0
 800a59a:	e7ef      	b.n	800a57c <_strtod_l+0x9c>
 800a59c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a59e:	b13a      	cbz	r2, 800a5b0 <_strtod_l+0xd0>
 800a5a0:	2135      	movs	r1, #53	@ 0x35
 800a5a2:	a81c      	add	r0, sp, #112	@ 0x70
 800a5a4:	f7ff ff3a 	bl	800a41c <__copybits>
 800a5a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5aa:	9805      	ldr	r0, [sp, #20]
 800a5ac:	f7ff fb08 	bl	8009bc0 <_Bfree>
 800a5b0:	3e01      	subs	r6, #1
 800a5b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a5b4:	2e04      	cmp	r6, #4
 800a5b6:	d806      	bhi.n	800a5c6 <_strtod_l+0xe6>
 800a5b8:	e8df f006 	tbb	[pc, r6]
 800a5bc:	201d0314 	.word	0x201d0314
 800a5c0:	14          	.byte	0x14
 800a5c1:	00          	.byte	0x00
 800a5c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a5c6:	05e1      	lsls	r1, r4, #23
 800a5c8:	bf48      	it	mi
 800a5ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a5ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5d2:	0d1b      	lsrs	r3, r3, #20
 800a5d4:	051b      	lsls	r3, r3, #20
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1bb      	bne.n	800a552 <_strtod_l+0x72>
 800a5da:	f7fe fb31 	bl	8008c40 <__errno>
 800a5de:	2322      	movs	r3, #34	@ 0x22
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	e7b6      	b.n	800a552 <_strtod_l+0x72>
 800a5e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a5e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a5ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a5f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a5f4:	e7e7      	b.n	800a5c6 <_strtod_l+0xe6>
 800a5f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a774 <_strtod_l+0x294>
 800a5fa:	e7e4      	b.n	800a5c6 <_strtod_l+0xe6>
 800a5fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a600:	f04f 3aff 	mov.w	sl, #4294967295
 800a604:	e7df      	b.n	800a5c6 <_strtod_l+0xe6>
 800a606:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a608:	1c5a      	adds	r2, r3, #1
 800a60a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b30      	cmp	r3, #48	@ 0x30
 800a610:	d0f9      	beq.n	800a606 <_strtod_l+0x126>
 800a612:	2b00      	cmp	r3, #0
 800a614:	d09d      	beq.n	800a552 <_strtod_l+0x72>
 800a616:	2301      	movs	r3, #1
 800a618:	9309      	str	r3, [sp, #36]	@ 0x24
 800a61a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a61c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a61e:	2300      	movs	r3, #0
 800a620:	9308      	str	r3, [sp, #32]
 800a622:	930a      	str	r3, [sp, #40]	@ 0x28
 800a624:	461f      	mov	r7, r3
 800a626:	220a      	movs	r2, #10
 800a628:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a62a:	7805      	ldrb	r5, [r0, #0]
 800a62c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a630:	b2d9      	uxtb	r1, r3
 800a632:	2909      	cmp	r1, #9
 800a634:	d928      	bls.n	800a688 <_strtod_l+0x1a8>
 800a636:	494e      	ldr	r1, [pc, #312]	@ (800a770 <_strtod_l+0x290>)
 800a638:	2201      	movs	r2, #1
 800a63a:	f001 fb62 	bl	800bd02 <strncmp>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d032      	beq.n	800a6a8 <_strtod_l+0x1c8>
 800a642:	2000      	movs	r0, #0
 800a644:	462a      	mov	r2, r5
 800a646:	4681      	mov	r9, r0
 800a648:	463d      	mov	r5, r7
 800a64a:	4603      	mov	r3, r0
 800a64c:	2a65      	cmp	r2, #101	@ 0x65
 800a64e:	d001      	beq.n	800a654 <_strtod_l+0x174>
 800a650:	2a45      	cmp	r2, #69	@ 0x45
 800a652:	d114      	bne.n	800a67e <_strtod_l+0x19e>
 800a654:	b91d      	cbnz	r5, 800a65e <_strtod_l+0x17e>
 800a656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a658:	4302      	orrs	r2, r0
 800a65a:	d095      	beq.n	800a588 <_strtod_l+0xa8>
 800a65c:	2500      	movs	r5, #0
 800a65e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a660:	1c62      	adds	r2, r4, #1
 800a662:	9219      	str	r2, [sp, #100]	@ 0x64
 800a664:	7862      	ldrb	r2, [r4, #1]
 800a666:	2a2b      	cmp	r2, #43	@ 0x2b
 800a668:	d077      	beq.n	800a75a <_strtod_l+0x27a>
 800a66a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a66c:	d07b      	beq.n	800a766 <_strtod_l+0x286>
 800a66e:	f04f 0c00 	mov.w	ip, #0
 800a672:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a676:	2909      	cmp	r1, #9
 800a678:	f240 8082 	bls.w	800a780 <_strtod_l+0x2a0>
 800a67c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	e0a2      	b.n	800a7ca <_strtod_l+0x2ea>
 800a684:	2300      	movs	r3, #0
 800a686:	e7c7      	b.n	800a618 <_strtod_l+0x138>
 800a688:	2f08      	cmp	r7, #8
 800a68a:	bfd5      	itete	le
 800a68c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a68e:	9908      	ldrgt	r1, [sp, #32]
 800a690:	fb02 3301 	mlale	r3, r2, r1, r3
 800a694:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a698:	f100 0001 	add.w	r0, r0, #1
 800a69c:	bfd4      	ite	le
 800a69e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a6a0:	9308      	strgt	r3, [sp, #32]
 800a6a2:	3701      	adds	r7, #1
 800a6a4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a6a6:	e7bf      	b.n	800a628 <_strtod_l+0x148>
 800a6a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6ae:	785a      	ldrb	r2, [r3, #1]
 800a6b0:	b37f      	cbz	r7, 800a712 <_strtod_l+0x232>
 800a6b2:	4681      	mov	r9, r0
 800a6b4:	463d      	mov	r5, r7
 800a6b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a6ba:	2b09      	cmp	r3, #9
 800a6bc:	d912      	bls.n	800a6e4 <_strtod_l+0x204>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e7c4      	b.n	800a64c <_strtod_l+0x16c>
 800a6c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6c8:	785a      	ldrb	r2, [r3, #1]
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	2a30      	cmp	r2, #48	@ 0x30
 800a6ce:	d0f8      	beq.n	800a6c2 <_strtod_l+0x1e2>
 800a6d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a6d4:	2b08      	cmp	r3, #8
 800a6d6:	f200 84d3 	bhi.w	800b080 <_strtod_l+0xba0>
 800a6da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6de:	4681      	mov	r9, r0
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	3a30      	subs	r2, #48	@ 0x30
 800a6e6:	f100 0301 	add.w	r3, r0, #1
 800a6ea:	d02a      	beq.n	800a742 <_strtod_l+0x262>
 800a6ec:	4499      	add	r9, r3
 800a6ee:	eb00 0c05 	add.w	ip, r0, r5
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	210a      	movs	r1, #10
 800a6f6:	4563      	cmp	r3, ip
 800a6f8:	d10d      	bne.n	800a716 <_strtod_l+0x236>
 800a6fa:	1c69      	adds	r1, r5, #1
 800a6fc:	4401      	add	r1, r0
 800a6fe:	4428      	add	r0, r5
 800a700:	2808      	cmp	r0, #8
 800a702:	dc16      	bgt.n	800a732 <_strtod_l+0x252>
 800a704:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a706:	230a      	movs	r3, #10
 800a708:	fb03 2300 	mla	r3, r3, r0, r2
 800a70c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a70e:	2300      	movs	r3, #0
 800a710:	e018      	b.n	800a744 <_strtod_l+0x264>
 800a712:	4638      	mov	r0, r7
 800a714:	e7da      	b.n	800a6cc <_strtod_l+0x1ec>
 800a716:	2b08      	cmp	r3, #8
 800a718:	f103 0301 	add.w	r3, r3, #1
 800a71c:	dc03      	bgt.n	800a726 <_strtod_l+0x246>
 800a71e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a720:	434e      	muls	r6, r1
 800a722:	960a      	str	r6, [sp, #40]	@ 0x28
 800a724:	e7e7      	b.n	800a6f6 <_strtod_l+0x216>
 800a726:	2b10      	cmp	r3, #16
 800a728:	bfde      	ittt	le
 800a72a:	9e08      	ldrle	r6, [sp, #32]
 800a72c:	434e      	mulle	r6, r1
 800a72e:	9608      	strle	r6, [sp, #32]
 800a730:	e7e1      	b.n	800a6f6 <_strtod_l+0x216>
 800a732:	280f      	cmp	r0, #15
 800a734:	dceb      	bgt.n	800a70e <_strtod_l+0x22e>
 800a736:	9808      	ldr	r0, [sp, #32]
 800a738:	230a      	movs	r3, #10
 800a73a:	fb03 2300 	mla	r3, r3, r0, r2
 800a73e:	9308      	str	r3, [sp, #32]
 800a740:	e7e5      	b.n	800a70e <_strtod_l+0x22e>
 800a742:	4629      	mov	r1, r5
 800a744:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a746:	1c50      	adds	r0, r2, #1
 800a748:	9019      	str	r0, [sp, #100]	@ 0x64
 800a74a:	7852      	ldrb	r2, [r2, #1]
 800a74c:	4618      	mov	r0, r3
 800a74e:	460d      	mov	r5, r1
 800a750:	e7b1      	b.n	800a6b6 <_strtod_l+0x1d6>
 800a752:	f04f 0900 	mov.w	r9, #0
 800a756:	2301      	movs	r3, #1
 800a758:	e77d      	b.n	800a656 <_strtod_l+0x176>
 800a75a:	f04f 0c00 	mov.w	ip, #0
 800a75e:	1ca2      	adds	r2, r4, #2
 800a760:	9219      	str	r2, [sp, #100]	@ 0x64
 800a762:	78a2      	ldrb	r2, [r4, #2]
 800a764:	e785      	b.n	800a672 <_strtod_l+0x192>
 800a766:	f04f 0c01 	mov.w	ip, #1
 800a76a:	e7f8      	b.n	800a75e <_strtod_l+0x27e>
 800a76c:	0800ce38 	.word	0x0800ce38
 800a770:	0800ce20 	.word	0x0800ce20
 800a774:	7ff00000 	.word	0x7ff00000
 800a778:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a77a:	1c51      	adds	r1, r2, #1
 800a77c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a77e:	7852      	ldrb	r2, [r2, #1]
 800a780:	2a30      	cmp	r2, #48	@ 0x30
 800a782:	d0f9      	beq.n	800a778 <_strtod_l+0x298>
 800a784:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a788:	2908      	cmp	r1, #8
 800a78a:	f63f af78 	bhi.w	800a67e <_strtod_l+0x19e>
 800a78e:	3a30      	subs	r2, #48	@ 0x30
 800a790:	920e      	str	r2, [sp, #56]	@ 0x38
 800a792:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a794:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a796:	f04f 080a 	mov.w	r8, #10
 800a79a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a79c:	1c56      	adds	r6, r2, #1
 800a79e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a7a0:	7852      	ldrb	r2, [r2, #1]
 800a7a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a7a6:	f1be 0f09 	cmp.w	lr, #9
 800a7aa:	d939      	bls.n	800a820 <_strtod_l+0x340>
 800a7ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a7ae:	1a76      	subs	r6, r6, r1
 800a7b0:	2e08      	cmp	r6, #8
 800a7b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a7b6:	dc03      	bgt.n	800a7c0 <_strtod_l+0x2e0>
 800a7b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a7ba:	4588      	cmp	r8, r1
 800a7bc:	bfa8      	it	ge
 800a7be:	4688      	movge	r8, r1
 800a7c0:	f1bc 0f00 	cmp.w	ip, #0
 800a7c4:	d001      	beq.n	800a7ca <_strtod_l+0x2ea>
 800a7c6:	f1c8 0800 	rsb	r8, r8, #0
 800a7ca:	2d00      	cmp	r5, #0
 800a7cc:	d14e      	bne.n	800a86c <_strtod_l+0x38c>
 800a7ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7d0:	4308      	orrs	r0, r1
 800a7d2:	f47f aebe 	bne.w	800a552 <_strtod_l+0x72>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f47f aed6 	bne.w	800a588 <_strtod_l+0xa8>
 800a7dc:	2a69      	cmp	r2, #105	@ 0x69
 800a7de:	d028      	beq.n	800a832 <_strtod_l+0x352>
 800a7e0:	dc25      	bgt.n	800a82e <_strtod_l+0x34e>
 800a7e2:	2a49      	cmp	r2, #73	@ 0x49
 800a7e4:	d025      	beq.n	800a832 <_strtod_l+0x352>
 800a7e6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a7e8:	f47f aece 	bne.w	800a588 <_strtod_l+0xa8>
 800a7ec:	499b      	ldr	r1, [pc, #620]	@ (800aa5c <_strtod_l+0x57c>)
 800a7ee:	a819      	add	r0, sp, #100	@ 0x64
 800a7f0:	f001 fd7e 	bl	800c2f0 <__match>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	f43f aec7 	beq.w	800a588 <_strtod_l+0xa8>
 800a7fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b28      	cmp	r3, #40	@ 0x28
 800a800:	d12e      	bne.n	800a860 <_strtod_l+0x380>
 800a802:	4997      	ldr	r1, [pc, #604]	@ (800aa60 <_strtod_l+0x580>)
 800a804:	aa1c      	add	r2, sp, #112	@ 0x70
 800a806:	a819      	add	r0, sp, #100	@ 0x64
 800a808:	f001 fd86 	bl	800c318 <__hexnan>
 800a80c:	2805      	cmp	r0, #5
 800a80e:	d127      	bne.n	800a860 <_strtod_l+0x380>
 800a810:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a812:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a816:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a81a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a81e:	e698      	b.n	800a552 <_strtod_l+0x72>
 800a820:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a822:	fb08 2101 	mla	r1, r8, r1, r2
 800a826:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a82a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a82c:	e7b5      	b.n	800a79a <_strtod_l+0x2ba>
 800a82e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a830:	e7da      	b.n	800a7e8 <_strtod_l+0x308>
 800a832:	498c      	ldr	r1, [pc, #560]	@ (800aa64 <_strtod_l+0x584>)
 800a834:	a819      	add	r0, sp, #100	@ 0x64
 800a836:	f001 fd5b 	bl	800c2f0 <__match>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	f43f aea4 	beq.w	800a588 <_strtod_l+0xa8>
 800a840:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a842:	4989      	ldr	r1, [pc, #548]	@ (800aa68 <_strtod_l+0x588>)
 800a844:	3b01      	subs	r3, #1
 800a846:	a819      	add	r0, sp, #100	@ 0x64
 800a848:	9319      	str	r3, [sp, #100]	@ 0x64
 800a84a:	f001 fd51 	bl	800c2f0 <__match>
 800a84e:	b910      	cbnz	r0, 800a856 <_strtod_l+0x376>
 800a850:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a852:	3301      	adds	r3, #1
 800a854:	9319      	str	r3, [sp, #100]	@ 0x64
 800a856:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aa78 <_strtod_l+0x598>
 800a85a:	f04f 0a00 	mov.w	sl, #0
 800a85e:	e678      	b.n	800a552 <_strtod_l+0x72>
 800a860:	4882      	ldr	r0, [pc, #520]	@ (800aa6c <_strtod_l+0x58c>)
 800a862:	f001 fa81 	bl	800bd68 <nan>
 800a866:	ec5b ab10 	vmov	sl, fp, d0
 800a86a:	e672      	b.n	800a552 <_strtod_l+0x72>
 800a86c:	eba8 0309 	sub.w	r3, r8, r9
 800a870:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a872:	9309      	str	r3, [sp, #36]	@ 0x24
 800a874:	2f00      	cmp	r7, #0
 800a876:	bf08      	it	eq
 800a878:	462f      	moveq	r7, r5
 800a87a:	2d10      	cmp	r5, #16
 800a87c:	462c      	mov	r4, r5
 800a87e:	bfa8      	it	ge
 800a880:	2410      	movge	r4, #16
 800a882:	f7f5 fe3f 	bl	8000504 <__aeabi_ui2d>
 800a886:	2d09      	cmp	r5, #9
 800a888:	4682      	mov	sl, r0
 800a88a:	468b      	mov	fp, r1
 800a88c:	dc13      	bgt.n	800a8b6 <_strtod_l+0x3d6>
 800a88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a890:	2b00      	cmp	r3, #0
 800a892:	f43f ae5e 	beq.w	800a552 <_strtod_l+0x72>
 800a896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a898:	dd78      	ble.n	800a98c <_strtod_l+0x4ac>
 800a89a:	2b16      	cmp	r3, #22
 800a89c:	dc5f      	bgt.n	800a95e <_strtod_l+0x47e>
 800a89e:	4974      	ldr	r1, [pc, #464]	@ (800aa70 <_strtod_l+0x590>)
 800a8a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	465b      	mov	r3, fp
 800a8ac:	f7f5 fea4 	bl	80005f8 <__aeabi_dmul>
 800a8b0:	4682      	mov	sl, r0
 800a8b2:	468b      	mov	fp, r1
 800a8b4:	e64d      	b.n	800a552 <_strtod_l+0x72>
 800a8b6:	4b6e      	ldr	r3, [pc, #440]	@ (800aa70 <_strtod_l+0x590>)
 800a8b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a8c0:	f7f5 fe9a 	bl	80005f8 <__aeabi_dmul>
 800a8c4:	4682      	mov	sl, r0
 800a8c6:	9808      	ldr	r0, [sp, #32]
 800a8c8:	468b      	mov	fp, r1
 800a8ca:	f7f5 fe1b 	bl	8000504 <__aeabi_ui2d>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	f7f5 fcd9 	bl	800028c <__adddf3>
 800a8da:	2d0f      	cmp	r5, #15
 800a8dc:	4682      	mov	sl, r0
 800a8de:	468b      	mov	fp, r1
 800a8e0:	ddd5      	ble.n	800a88e <_strtod_l+0x3ae>
 800a8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e4:	1b2c      	subs	r4, r5, r4
 800a8e6:	441c      	add	r4, r3
 800a8e8:	2c00      	cmp	r4, #0
 800a8ea:	f340 8096 	ble.w	800aa1a <_strtod_l+0x53a>
 800a8ee:	f014 030f 	ands.w	r3, r4, #15
 800a8f2:	d00a      	beq.n	800a90a <_strtod_l+0x42a>
 800a8f4:	495e      	ldr	r1, [pc, #376]	@ (800aa70 <_strtod_l+0x590>)
 800a8f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8fa:	4652      	mov	r2, sl
 800a8fc:	465b      	mov	r3, fp
 800a8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a902:	f7f5 fe79 	bl	80005f8 <__aeabi_dmul>
 800a906:	4682      	mov	sl, r0
 800a908:	468b      	mov	fp, r1
 800a90a:	f034 040f 	bics.w	r4, r4, #15
 800a90e:	d073      	beq.n	800a9f8 <_strtod_l+0x518>
 800a910:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a914:	dd48      	ble.n	800a9a8 <_strtod_l+0x4c8>
 800a916:	2400      	movs	r4, #0
 800a918:	46a0      	mov	r8, r4
 800a91a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a91c:	46a1      	mov	r9, r4
 800a91e:	9a05      	ldr	r2, [sp, #20]
 800a920:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aa78 <_strtod_l+0x598>
 800a924:	2322      	movs	r3, #34	@ 0x22
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	f04f 0a00 	mov.w	sl, #0
 800a92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f43f ae0f 	beq.w	800a552 <_strtod_l+0x72>
 800a934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a936:	9805      	ldr	r0, [sp, #20]
 800a938:	f7ff f942 	bl	8009bc0 <_Bfree>
 800a93c:	9805      	ldr	r0, [sp, #20]
 800a93e:	4649      	mov	r1, r9
 800a940:	f7ff f93e 	bl	8009bc0 <_Bfree>
 800a944:	9805      	ldr	r0, [sp, #20]
 800a946:	4641      	mov	r1, r8
 800a948:	f7ff f93a 	bl	8009bc0 <_Bfree>
 800a94c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a94e:	9805      	ldr	r0, [sp, #20]
 800a950:	f7ff f936 	bl	8009bc0 <_Bfree>
 800a954:	9805      	ldr	r0, [sp, #20]
 800a956:	4621      	mov	r1, r4
 800a958:	f7ff f932 	bl	8009bc0 <_Bfree>
 800a95c:	e5f9      	b.n	800a552 <_strtod_l+0x72>
 800a95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a960:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a964:	4293      	cmp	r3, r2
 800a966:	dbbc      	blt.n	800a8e2 <_strtod_l+0x402>
 800a968:	4c41      	ldr	r4, [pc, #260]	@ (800aa70 <_strtod_l+0x590>)
 800a96a:	f1c5 050f 	rsb	r5, r5, #15
 800a96e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a972:	4652      	mov	r2, sl
 800a974:	465b      	mov	r3, fp
 800a976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a97a:	f7f5 fe3d 	bl	80005f8 <__aeabi_dmul>
 800a97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a980:	1b5d      	subs	r5, r3, r5
 800a982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a98a:	e78f      	b.n	800a8ac <_strtod_l+0x3cc>
 800a98c:	3316      	adds	r3, #22
 800a98e:	dba8      	blt.n	800a8e2 <_strtod_l+0x402>
 800a990:	4b37      	ldr	r3, [pc, #220]	@ (800aa70 <_strtod_l+0x590>)
 800a992:	eba9 0808 	sub.w	r8, r9, r8
 800a996:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a99a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a99e:	4650      	mov	r0, sl
 800a9a0:	4659      	mov	r1, fp
 800a9a2:	f7f5 ff53 	bl	800084c <__aeabi_ddiv>
 800a9a6:	e783      	b.n	800a8b0 <_strtod_l+0x3d0>
 800a9a8:	4b32      	ldr	r3, [pc, #200]	@ (800aa74 <_strtod_l+0x594>)
 800a9aa:	9308      	str	r3, [sp, #32]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	1124      	asrs	r4, r4, #4
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	4659      	mov	r1, fp
 800a9b4:	461e      	mov	r6, r3
 800a9b6:	2c01      	cmp	r4, #1
 800a9b8:	dc21      	bgt.n	800a9fe <_strtod_l+0x51e>
 800a9ba:	b10b      	cbz	r3, 800a9c0 <_strtod_l+0x4e0>
 800a9bc:	4682      	mov	sl, r0
 800a9be:	468b      	mov	fp, r1
 800a9c0:	492c      	ldr	r1, [pc, #176]	@ (800aa74 <_strtod_l+0x594>)
 800a9c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a9c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a9ca:	4652      	mov	r2, sl
 800a9cc:	465b      	mov	r3, fp
 800a9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9d2:	f7f5 fe11 	bl	80005f8 <__aeabi_dmul>
 800a9d6:	4b28      	ldr	r3, [pc, #160]	@ (800aa78 <_strtod_l+0x598>)
 800a9d8:	460a      	mov	r2, r1
 800a9da:	400b      	ands	r3, r1
 800a9dc:	4927      	ldr	r1, [pc, #156]	@ (800aa7c <_strtod_l+0x59c>)
 800a9de:	428b      	cmp	r3, r1
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	d898      	bhi.n	800a916 <_strtod_l+0x436>
 800a9e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a9e8:	428b      	cmp	r3, r1
 800a9ea:	bf86      	itte	hi
 800a9ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aa80 <_strtod_l+0x5a0>
 800a9f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a9f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9308      	str	r3, [sp, #32]
 800a9fc:	e07a      	b.n	800aaf4 <_strtod_l+0x614>
 800a9fe:	07e2      	lsls	r2, r4, #31
 800aa00:	d505      	bpl.n	800aa0e <_strtod_l+0x52e>
 800aa02:	9b08      	ldr	r3, [sp, #32]
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fdf6 	bl	80005f8 <__aeabi_dmul>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	9a08      	ldr	r2, [sp, #32]
 800aa10:	3208      	adds	r2, #8
 800aa12:	3601      	adds	r6, #1
 800aa14:	1064      	asrs	r4, r4, #1
 800aa16:	9208      	str	r2, [sp, #32]
 800aa18:	e7cd      	b.n	800a9b6 <_strtod_l+0x4d6>
 800aa1a:	d0ed      	beq.n	800a9f8 <_strtod_l+0x518>
 800aa1c:	4264      	negs	r4, r4
 800aa1e:	f014 020f 	ands.w	r2, r4, #15
 800aa22:	d00a      	beq.n	800aa3a <_strtod_l+0x55a>
 800aa24:	4b12      	ldr	r3, [pc, #72]	@ (800aa70 <_strtod_l+0x590>)
 800aa26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa2a:	4650      	mov	r0, sl
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f7f5 ff0b 	bl	800084c <__aeabi_ddiv>
 800aa36:	4682      	mov	sl, r0
 800aa38:	468b      	mov	fp, r1
 800aa3a:	1124      	asrs	r4, r4, #4
 800aa3c:	d0dc      	beq.n	800a9f8 <_strtod_l+0x518>
 800aa3e:	2c1f      	cmp	r4, #31
 800aa40:	dd20      	ble.n	800aa84 <_strtod_l+0x5a4>
 800aa42:	2400      	movs	r4, #0
 800aa44:	46a0      	mov	r8, r4
 800aa46:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa48:	46a1      	mov	r9, r4
 800aa4a:	9a05      	ldr	r2, [sp, #20]
 800aa4c:	2322      	movs	r3, #34	@ 0x22
 800aa4e:	f04f 0a00 	mov.w	sl, #0
 800aa52:	f04f 0b00 	mov.w	fp, #0
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	e768      	b.n	800a92c <_strtod_l+0x44c>
 800aa5a:	bf00      	nop
 800aa5c:	0800cc11 	.word	0x0800cc11
 800aa60:	0800ce24 	.word	0x0800ce24
 800aa64:	0800cc09 	.word	0x0800cc09
 800aa68:	0800cc3e 	.word	0x0800cc3e
 800aa6c:	0800cfe8 	.word	0x0800cfe8
 800aa70:	0800cd58 	.word	0x0800cd58
 800aa74:	0800cd30 	.word	0x0800cd30
 800aa78:	7ff00000 	.word	0x7ff00000
 800aa7c:	7ca00000 	.word	0x7ca00000
 800aa80:	7fefffff 	.word	0x7fefffff
 800aa84:	f014 0310 	ands.w	r3, r4, #16
 800aa88:	bf18      	it	ne
 800aa8a:	236a      	movne	r3, #106	@ 0x6a
 800aa8c:	4ea9      	ldr	r6, [pc, #676]	@ (800ad34 <_strtod_l+0x854>)
 800aa8e:	9308      	str	r3, [sp, #32]
 800aa90:	4650      	mov	r0, sl
 800aa92:	4659      	mov	r1, fp
 800aa94:	2300      	movs	r3, #0
 800aa96:	07e2      	lsls	r2, r4, #31
 800aa98:	d504      	bpl.n	800aaa4 <_strtod_l+0x5c4>
 800aa9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa9e:	f7f5 fdab 	bl	80005f8 <__aeabi_dmul>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	1064      	asrs	r4, r4, #1
 800aaa6:	f106 0608 	add.w	r6, r6, #8
 800aaaa:	d1f4      	bne.n	800aa96 <_strtod_l+0x5b6>
 800aaac:	b10b      	cbz	r3, 800aab2 <_strtod_l+0x5d2>
 800aaae:	4682      	mov	sl, r0
 800aab0:	468b      	mov	fp, r1
 800aab2:	9b08      	ldr	r3, [sp, #32]
 800aab4:	b1b3      	cbz	r3, 800aae4 <_strtod_l+0x604>
 800aab6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aaba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	4659      	mov	r1, fp
 800aac2:	dd0f      	ble.n	800aae4 <_strtod_l+0x604>
 800aac4:	2b1f      	cmp	r3, #31
 800aac6:	dd55      	ble.n	800ab74 <_strtod_l+0x694>
 800aac8:	2b34      	cmp	r3, #52	@ 0x34
 800aaca:	bfde      	ittt	le
 800aacc:	f04f 33ff 	movle.w	r3, #4294967295
 800aad0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aad4:	4093      	lslle	r3, r2
 800aad6:	f04f 0a00 	mov.w	sl, #0
 800aada:	bfcc      	ite	gt
 800aadc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aae0:	ea03 0b01 	andle.w	fp, r3, r1
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	4650      	mov	r0, sl
 800aaea:	4659      	mov	r1, fp
 800aaec:	f7f5 ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d1a6      	bne.n	800aa42 <_strtod_l+0x562>
 800aaf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aafa:	9805      	ldr	r0, [sp, #20]
 800aafc:	462b      	mov	r3, r5
 800aafe:	463a      	mov	r2, r7
 800ab00:	f7ff f8c6 	bl	8009c90 <__s2b>
 800ab04:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f43f af05 	beq.w	800a916 <_strtod_l+0x436>
 800ab0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	eba9 0308 	sub.w	r3, r9, r8
 800ab14:	bfa8      	it	ge
 800ab16:	2300      	movge	r3, #0
 800ab18:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab1a:	2400      	movs	r4, #0
 800ab1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ab20:	9316      	str	r3, [sp, #88]	@ 0x58
 800ab22:	46a0      	mov	r8, r4
 800ab24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab26:	9805      	ldr	r0, [sp, #20]
 800ab28:	6859      	ldr	r1, [r3, #4]
 800ab2a:	f7ff f809 	bl	8009b40 <_Balloc>
 800ab2e:	4681      	mov	r9, r0
 800ab30:	2800      	cmp	r0, #0
 800ab32:	f43f aef4 	beq.w	800a91e <_strtod_l+0x43e>
 800ab36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab38:	691a      	ldr	r2, [r3, #16]
 800ab3a:	3202      	adds	r2, #2
 800ab3c:	f103 010c 	add.w	r1, r3, #12
 800ab40:	0092      	lsls	r2, r2, #2
 800ab42:	300c      	adds	r0, #12
 800ab44:	f001 f900 	bl	800bd48 <memcpy>
 800ab48:	ec4b ab10 	vmov	d0, sl, fp
 800ab4c:	9805      	ldr	r0, [sp, #20]
 800ab4e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab50:	a91b      	add	r1, sp, #108	@ 0x6c
 800ab52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ab56:	f7ff fbd7 	bl	800a308 <__d2b>
 800ab5a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	f43f aede 	beq.w	800a91e <_strtod_l+0x43e>
 800ab62:	9805      	ldr	r0, [sp, #20]
 800ab64:	2101      	movs	r1, #1
 800ab66:	f7ff f929 	bl	8009dbc <__i2b>
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	b948      	cbnz	r0, 800ab82 <_strtod_l+0x6a2>
 800ab6e:	f04f 0800 	mov.w	r8, #0
 800ab72:	e6d4      	b.n	800a91e <_strtod_l+0x43e>
 800ab74:	f04f 32ff 	mov.w	r2, #4294967295
 800ab78:	fa02 f303 	lsl.w	r3, r2, r3
 800ab7c:	ea03 0a0a 	and.w	sl, r3, sl
 800ab80:	e7b0      	b.n	800aae4 <_strtod_l+0x604>
 800ab82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ab84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ab86:	2d00      	cmp	r5, #0
 800ab88:	bfab      	itete	ge
 800ab8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ab8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ab8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ab90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ab92:	bfac      	ite	ge
 800ab94:	18ef      	addge	r7, r5, r3
 800ab96:	1b5e      	sublt	r6, r3, r5
 800ab98:	9b08      	ldr	r3, [sp, #32]
 800ab9a:	1aed      	subs	r5, r5, r3
 800ab9c:	4415      	add	r5, r2
 800ab9e:	4b66      	ldr	r3, [pc, #408]	@ (800ad38 <_strtod_l+0x858>)
 800aba0:	3d01      	subs	r5, #1
 800aba2:	429d      	cmp	r5, r3
 800aba4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aba8:	da50      	bge.n	800ac4c <_strtod_l+0x76c>
 800abaa:	1b5b      	subs	r3, r3, r5
 800abac:	2b1f      	cmp	r3, #31
 800abae:	eba2 0203 	sub.w	r2, r2, r3
 800abb2:	f04f 0101 	mov.w	r1, #1
 800abb6:	dc3d      	bgt.n	800ac34 <_strtod_l+0x754>
 800abb8:	fa01 f303 	lsl.w	r3, r1, r3
 800abbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abbe:	2300      	movs	r3, #0
 800abc0:	9310      	str	r3, [sp, #64]	@ 0x40
 800abc2:	18bd      	adds	r5, r7, r2
 800abc4:	9b08      	ldr	r3, [sp, #32]
 800abc6:	42af      	cmp	r7, r5
 800abc8:	4416      	add	r6, r2
 800abca:	441e      	add	r6, r3
 800abcc:	463b      	mov	r3, r7
 800abce:	bfa8      	it	ge
 800abd0:	462b      	movge	r3, r5
 800abd2:	42b3      	cmp	r3, r6
 800abd4:	bfa8      	it	ge
 800abd6:	4633      	movge	r3, r6
 800abd8:	2b00      	cmp	r3, #0
 800abda:	bfc2      	ittt	gt
 800abdc:	1aed      	subgt	r5, r5, r3
 800abde:	1af6      	subgt	r6, r6, r3
 800abe0:	1aff      	subgt	r7, r7, r3
 800abe2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	dd16      	ble.n	800ac16 <_strtod_l+0x736>
 800abe8:	4641      	mov	r1, r8
 800abea:	9805      	ldr	r0, [sp, #20]
 800abec:	461a      	mov	r2, r3
 800abee:	f7ff f9a5 	bl	8009f3c <__pow5mult>
 800abf2:	4680      	mov	r8, r0
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d0ba      	beq.n	800ab6e <_strtod_l+0x68e>
 800abf8:	4601      	mov	r1, r0
 800abfa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800abfc:	9805      	ldr	r0, [sp, #20]
 800abfe:	f7ff f8f3 	bl	8009de8 <__multiply>
 800ac02:	900e      	str	r0, [sp, #56]	@ 0x38
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f43f ae8a 	beq.w	800a91e <_strtod_l+0x43e>
 800ac0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac0c:	9805      	ldr	r0, [sp, #20]
 800ac0e:	f7fe ffd7 	bl	8009bc0 <_Bfree>
 800ac12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac14:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac16:	2d00      	cmp	r5, #0
 800ac18:	dc1d      	bgt.n	800ac56 <_strtod_l+0x776>
 800ac1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd23      	ble.n	800ac68 <_strtod_l+0x788>
 800ac20:	4649      	mov	r1, r9
 800ac22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ac24:	9805      	ldr	r0, [sp, #20]
 800ac26:	f7ff f989 	bl	8009f3c <__pow5mult>
 800ac2a:	4681      	mov	r9, r0
 800ac2c:	b9e0      	cbnz	r0, 800ac68 <_strtod_l+0x788>
 800ac2e:	f04f 0900 	mov.w	r9, #0
 800ac32:	e674      	b.n	800a91e <_strtod_l+0x43e>
 800ac34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ac38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ac3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ac40:	35e2      	adds	r5, #226	@ 0xe2
 800ac42:	fa01 f305 	lsl.w	r3, r1, r5
 800ac46:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac48:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ac4a:	e7ba      	b.n	800abc2 <_strtod_l+0x6e2>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac50:	2301      	movs	r3, #1
 800ac52:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac54:	e7b5      	b.n	800abc2 <_strtod_l+0x6e2>
 800ac56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac58:	9805      	ldr	r0, [sp, #20]
 800ac5a:	462a      	mov	r2, r5
 800ac5c:	f7ff f9c8 	bl	8009ff0 <__lshift>
 800ac60:	901a      	str	r0, [sp, #104]	@ 0x68
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d1d9      	bne.n	800ac1a <_strtod_l+0x73a>
 800ac66:	e65a      	b.n	800a91e <_strtod_l+0x43e>
 800ac68:	2e00      	cmp	r6, #0
 800ac6a:	dd07      	ble.n	800ac7c <_strtod_l+0x79c>
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	9805      	ldr	r0, [sp, #20]
 800ac70:	4632      	mov	r2, r6
 800ac72:	f7ff f9bd 	bl	8009ff0 <__lshift>
 800ac76:	4681      	mov	r9, r0
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d0d8      	beq.n	800ac2e <_strtod_l+0x74e>
 800ac7c:	2f00      	cmp	r7, #0
 800ac7e:	dd08      	ble.n	800ac92 <_strtod_l+0x7b2>
 800ac80:	4641      	mov	r1, r8
 800ac82:	9805      	ldr	r0, [sp, #20]
 800ac84:	463a      	mov	r2, r7
 800ac86:	f7ff f9b3 	bl	8009ff0 <__lshift>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	f43f ae46 	beq.w	800a91e <_strtod_l+0x43e>
 800ac92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac94:	9805      	ldr	r0, [sp, #20]
 800ac96:	464a      	mov	r2, r9
 800ac98:	f7ff fa32 	bl	800a100 <__mdiff>
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f43f ae3d 	beq.w	800a91e <_strtod_l+0x43e>
 800aca4:	68c3      	ldr	r3, [r0, #12]
 800aca6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aca8:	2300      	movs	r3, #0
 800acaa:	60c3      	str	r3, [r0, #12]
 800acac:	4641      	mov	r1, r8
 800acae:	f7ff fa0b 	bl	800a0c8 <__mcmp>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	da46      	bge.n	800ad44 <_strtod_l+0x864>
 800acb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acb8:	ea53 030a 	orrs.w	r3, r3, sl
 800acbc:	d16c      	bne.n	800ad98 <_strtod_l+0x8b8>
 800acbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d168      	bne.n	800ad98 <_strtod_l+0x8b8>
 800acc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acca:	0d1b      	lsrs	r3, r3, #20
 800accc:	051b      	lsls	r3, r3, #20
 800acce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800acd2:	d961      	bls.n	800ad98 <_strtod_l+0x8b8>
 800acd4:	6963      	ldr	r3, [r4, #20]
 800acd6:	b913      	cbnz	r3, 800acde <_strtod_l+0x7fe>
 800acd8:	6923      	ldr	r3, [r4, #16]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	dd5c      	ble.n	800ad98 <_strtod_l+0x8b8>
 800acde:	4621      	mov	r1, r4
 800ace0:	2201      	movs	r2, #1
 800ace2:	9805      	ldr	r0, [sp, #20]
 800ace4:	f7ff f984 	bl	8009ff0 <__lshift>
 800ace8:	4641      	mov	r1, r8
 800acea:	4604      	mov	r4, r0
 800acec:	f7ff f9ec 	bl	800a0c8 <__mcmp>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	dd51      	ble.n	800ad98 <_strtod_l+0x8b8>
 800acf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acf8:	9a08      	ldr	r2, [sp, #32]
 800acfa:	0d1b      	lsrs	r3, r3, #20
 800acfc:	051b      	lsls	r3, r3, #20
 800acfe:	2a00      	cmp	r2, #0
 800ad00:	d06b      	beq.n	800adda <_strtod_l+0x8fa>
 800ad02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ad06:	d868      	bhi.n	800adda <_strtod_l+0x8fa>
 800ad08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ad0c:	f67f ae9d 	bls.w	800aa4a <_strtod_l+0x56a>
 800ad10:	4b0a      	ldr	r3, [pc, #40]	@ (800ad3c <_strtod_l+0x85c>)
 800ad12:	4650      	mov	r0, sl
 800ad14:	4659      	mov	r1, fp
 800ad16:	2200      	movs	r2, #0
 800ad18:	f7f5 fc6e 	bl	80005f8 <__aeabi_dmul>
 800ad1c:	4b08      	ldr	r3, [pc, #32]	@ (800ad40 <_strtod_l+0x860>)
 800ad1e:	400b      	ands	r3, r1
 800ad20:	4682      	mov	sl, r0
 800ad22:	468b      	mov	fp, r1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f47f ae05 	bne.w	800a934 <_strtod_l+0x454>
 800ad2a:	9a05      	ldr	r2, [sp, #20]
 800ad2c:	2322      	movs	r3, #34	@ 0x22
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	e600      	b.n	800a934 <_strtod_l+0x454>
 800ad32:	bf00      	nop
 800ad34:	0800ce50 	.word	0x0800ce50
 800ad38:	fffffc02 	.word	0xfffffc02
 800ad3c:	39500000 	.word	0x39500000
 800ad40:	7ff00000 	.word	0x7ff00000
 800ad44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ad48:	d165      	bne.n	800ae16 <_strtod_l+0x936>
 800ad4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ad4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad50:	b35a      	cbz	r2, 800adaa <_strtod_l+0x8ca>
 800ad52:	4a9f      	ldr	r2, [pc, #636]	@ (800afd0 <_strtod_l+0xaf0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d12b      	bne.n	800adb0 <_strtod_l+0x8d0>
 800ad58:	9b08      	ldr	r3, [sp, #32]
 800ad5a:	4651      	mov	r1, sl
 800ad5c:	b303      	cbz	r3, 800ada0 <_strtod_l+0x8c0>
 800ad5e:	4b9d      	ldr	r3, [pc, #628]	@ (800afd4 <_strtod_l+0xaf4>)
 800ad60:	465a      	mov	r2, fp
 800ad62:	4013      	ands	r3, r2
 800ad64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ad68:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6c:	d81b      	bhi.n	800ada6 <_strtod_l+0x8c6>
 800ad6e:	0d1b      	lsrs	r3, r3, #20
 800ad70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad74:	fa02 f303 	lsl.w	r3, r2, r3
 800ad78:	4299      	cmp	r1, r3
 800ad7a:	d119      	bne.n	800adb0 <_strtod_l+0x8d0>
 800ad7c:	4b96      	ldr	r3, [pc, #600]	@ (800afd8 <_strtod_l+0xaf8>)
 800ad7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d102      	bne.n	800ad8a <_strtod_l+0x8aa>
 800ad84:	3101      	adds	r1, #1
 800ad86:	f43f adca 	beq.w	800a91e <_strtod_l+0x43e>
 800ad8a:	4b92      	ldr	r3, [pc, #584]	@ (800afd4 <_strtod_l+0xaf4>)
 800ad8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad8e:	401a      	ands	r2, r3
 800ad90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ad94:	f04f 0a00 	mov.w	sl, #0
 800ad98:	9b08      	ldr	r3, [sp, #32]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1b8      	bne.n	800ad10 <_strtod_l+0x830>
 800ad9e:	e5c9      	b.n	800a934 <_strtod_l+0x454>
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295
 800ada4:	e7e8      	b.n	800ad78 <_strtod_l+0x898>
 800ada6:	4613      	mov	r3, r2
 800ada8:	e7e6      	b.n	800ad78 <_strtod_l+0x898>
 800adaa:	ea53 030a 	orrs.w	r3, r3, sl
 800adae:	d0a1      	beq.n	800acf4 <_strtod_l+0x814>
 800adb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adb2:	b1db      	cbz	r3, 800adec <_strtod_l+0x90c>
 800adb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adb6:	4213      	tst	r3, r2
 800adb8:	d0ee      	beq.n	800ad98 <_strtod_l+0x8b8>
 800adba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adbc:	9a08      	ldr	r2, [sp, #32]
 800adbe:	4650      	mov	r0, sl
 800adc0:	4659      	mov	r1, fp
 800adc2:	b1bb      	cbz	r3, 800adf4 <_strtod_l+0x914>
 800adc4:	f7ff fb6e 	bl	800a4a4 <sulp>
 800adc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adcc:	ec53 2b10 	vmov	r2, r3, d0
 800add0:	f7f5 fa5c 	bl	800028c <__adddf3>
 800add4:	4682      	mov	sl, r0
 800add6:	468b      	mov	fp, r1
 800add8:	e7de      	b.n	800ad98 <_strtod_l+0x8b8>
 800adda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800adde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ade2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ade6:	f04f 3aff 	mov.w	sl, #4294967295
 800adea:	e7d5      	b.n	800ad98 <_strtod_l+0x8b8>
 800adec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800adee:	ea13 0f0a 	tst.w	r3, sl
 800adf2:	e7e1      	b.n	800adb8 <_strtod_l+0x8d8>
 800adf4:	f7ff fb56 	bl	800a4a4 <sulp>
 800adf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adfc:	ec53 2b10 	vmov	r2, r3, d0
 800ae00:	f7f5 fa42 	bl	8000288 <__aeabi_dsub>
 800ae04:	2200      	movs	r2, #0
 800ae06:	2300      	movs	r3, #0
 800ae08:	4682      	mov	sl, r0
 800ae0a:	468b      	mov	fp, r1
 800ae0c:	f7f5 fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d0c1      	beq.n	800ad98 <_strtod_l+0x8b8>
 800ae14:	e619      	b.n	800aa4a <_strtod_l+0x56a>
 800ae16:	4641      	mov	r1, r8
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7ff facd 	bl	800a3b8 <__ratio>
 800ae1e:	ec57 6b10 	vmov	r6, r7, d0
 800ae22:	2200      	movs	r2, #0
 800ae24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ae28:	4630      	mov	r0, r6
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	f7f5 fe60 	bl	8000af0 <__aeabi_dcmple>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d06f      	beq.n	800af14 <_strtod_l+0xa34>
 800ae34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d17a      	bne.n	800af30 <_strtod_l+0xa50>
 800ae3a:	f1ba 0f00 	cmp.w	sl, #0
 800ae3e:	d158      	bne.n	800aef2 <_strtod_l+0xa12>
 800ae40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d15a      	bne.n	800af00 <_strtod_l+0xa20>
 800ae4a:	4b64      	ldr	r3, [pc, #400]	@ (800afdc <_strtod_l+0xafc>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	4630      	mov	r0, r6
 800ae50:	4639      	mov	r1, r7
 800ae52:	f7f5 fe43 	bl	8000adc <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d159      	bne.n	800af0e <_strtod_l+0xa2e>
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	4b60      	ldr	r3, [pc, #384]	@ (800afe0 <_strtod_l+0xb00>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	f7f5 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ae6e:	9606      	str	r6, [sp, #24]
 800ae70:	9307      	str	r3, [sp, #28]
 800ae72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae76:	4d57      	ldr	r5, [pc, #348]	@ (800afd4 <_strtod_l+0xaf4>)
 800ae78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae7e:	401d      	ands	r5, r3
 800ae80:	4b58      	ldr	r3, [pc, #352]	@ (800afe4 <_strtod_l+0xb04>)
 800ae82:	429d      	cmp	r5, r3
 800ae84:	f040 80b2 	bne.w	800afec <_strtod_l+0xb0c>
 800ae88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ae8e:	ec4b ab10 	vmov	d0, sl, fp
 800ae92:	f7ff f9c9 	bl	800a228 <__ulp>
 800ae96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae9a:	ec51 0b10 	vmov	r0, r1, d0
 800ae9e:	f7f5 fbab 	bl	80005f8 <__aeabi_dmul>
 800aea2:	4652      	mov	r2, sl
 800aea4:	465b      	mov	r3, fp
 800aea6:	f7f5 f9f1 	bl	800028c <__adddf3>
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4949      	ldr	r1, [pc, #292]	@ (800afd4 <_strtod_l+0xaf4>)
 800aeae:	4a4e      	ldr	r2, [pc, #312]	@ (800afe8 <_strtod_l+0xb08>)
 800aeb0:	4019      	ands	r1, r3
 800aeb2:	4291      	cmp	r1, r2
 800aeb4:	4682      	mov	sl, r0
 800aeb6:	d942      	bls.n	800af3e <_strtod_l+0xa5e>
 800aeb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aeba:	4b47      	ldr	r3, [pc, #284]	@ (800afd8 <_strtod_l+0xaf8>)
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d103      	bne.n	800aec8 <_strtod_l+0x9e8>
 800aec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aec2:	3301      	adds	r3, #1
 800aec4:	f43f ad2b 	beq.w	800a91e <_strtod_l+0x43e>
 800aec8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800afd8 <_strtod_l+0xaf8>
 800aecc:	f04f 3aff 	mov.w	sl, #4294967295
 800aed0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aed2:	9805      	ldr	r0, [sp, #20]
 800aed4:	f7fe fe74 	bl	8009bc0 <_Bfree>
 800aed8:	9805      	ldr	r0, [sp, #20]
 800aeda:	4649      	mov	r1, r9
 800aedc:	f7fe fe70 	bl	8009bc0 <_Bfree>
 800aee0:	9805      	ldr	r0, [sp, #20]
 800aee2:	4641      	mov	r1, r8
 800aee4:	f7fe fe6c 	bl	8009bc0 <_Bfree>
 800aee8:	9805      	ldr	r0, [sp, #20]
 800aeea:	4621      	mov	r1, r4
 800aeec:	f7fe fe68 	bl	8009bc0 <_Bfree>
 800aef0:	e618      	b.n	800ab24 <_strtod_l+0x644>
 800aef2:	f1ba 0f01 	cmp.w	sl, #1
 800aef6:	d103      	bne.n	800af00 <_strtod_l+0xa20>
 800aef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f43f ada5 	beq.w	800aa4a <_strtod_l+0x56a>
 800af00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800afb0 <_strtod_l+0xad0>
 800af04:	4f35      	ldr	r7, [pc, #212]	@ (800afdc <_strtod_l+0xafc>)
 800af06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af0a:	2600      	movs	r6, #0
 800af0c:	e7b1      	b.n	800ae72 <_strtod_l+0x992>
 800af0e:	4f34      	ldr	r7, [pc, #208]	@ (800afe0 <_strtod_l+0xb00>)
 800af10:	2600      	movs	r6, #0
 800af12:	e7aa      	b.n	800ae6a <_strtod_l+0x98a>
 800af14:	4b32      	ldr	r3, [pc, #200]	@ (800afe0 <_strtod_l+0xb00>)
 800af16:	4630      	mov	r0, r6
 800af18:	4639      	mov	r1, r7
 800af1a:	2200      	movs	r2, #0
 800af1c:	f7f5 fb6c 	bl	80005f8 <__aeabi_dmul>
 800af20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af22:	4606      	mov	r6, r0
 800af24:	460f      	mov	r7, r1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d09f      	beq.n	800ae6a <_strtod_l+0x98a>
 800af2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800af2e:	e7a0      	b.n	800ae72 <_strtod_l+0x992>
 800af30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800afb8 <_strtod_l+0xad8>
 800af34:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af38:	ec57 6b17 	vmov	r6, r7, d7
 800af3c:	e799      	b.n	800ae72 <_strtod_l+0x992>
 800af3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800af42:	9b08      	ldr	r3, [sp, #32]
 800af44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1c1      	bne.n	800aed0 <_strtod_l+0x9f0>
 800af4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af50:	0d1b      	lsrs	r3, r3, #20
 800af52:	051b      	lsls	r3, r3, #20
 800af54:	429d      	cmp	r5, r3
 800af56:	d1bb      	bne.n	800aed0 <_strtod_l+0x9f0>
 800af58:	4630      	mov	r0, r6
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 ffba 	bl	8000ed4 <__aeabi_d2lz>
 800af60:	f7f5 fb1c 	bl	800059c <__aeabi_l2d>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	4630      	mov	r0, r6
 800af6a:	4639      	mov	r1, r7
 800af6c:	f7f5 f98c 	bl	8000288 <__aeabi_dsub>
 800af70:	460b      	mov	r3, r1
 800af72:	4602      	mov	r2, r0
 800af74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800af7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af7e:	ea46 060a 	orr.w	r6, r6, sl
 800af82:	431e      	orrs	r6, r3
 800af84:	d06f      	beq.n	800b066 <_strtod_l+0xb86>
 800af86:	a30e      	add	r3, pc, #56	@ (adr r3, 800afc0 <_strtod_l+0xae0>)
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f7f5 fda6 	bl	8000adc <__aeabi_dcmplt>
 800af90:	2800      	cmp	r0, #0
 800af92:	f47f accf 	bne.w	800a934 <_strtod_l+0x454>
 800af96:	a30c      	add	r3, pc, #48	@ (adr r3, 800afc8 <_strtod_l+0xae8>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afa0:	f7f5 fdba 	bl	8000b18 <__aeabi_dcmpgt>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d093      	beq.n	800aed0 <_strtod_l+0x9f0>
 800afa8:	e4c4      	b.n	800a934 <_strtod_l+0x454>
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w
 800afb0:	00000000 	.word	0x00000000
 800afb4:	bff00000 	.word	0xbff00000
 800afb8:	00000000 	.word	0x00000000
 800afbc:	3ff00000 	.word	0x3ff00000
 800afc0:	94a03595 	.word	0x94a03595
 800afc4:	3fdfffff 	.word	0x3fdfffff
 800afc8:	35afe535 	.word	0x35afe535
 800afcc:	3fe00000 	.word	0x3fe00000
 800afd0:	000fffff 	.word	0x000fffff
 800afd4:	7ff00000 	.word	0x7ff00000
 800afd8:	7fefffff 	.word	0x7fefffff
 800afdc:	3ff00000 	.word	0x3ff00000
 800afe0:	3fe00000 	.word	0x3fe00000
 800afe4:	7fe00000 	.word	0x7fe00000
 800afe8:	7c9fffff 	.word	0x7c9fffff
 800afec:	9b08      	ldr	r3, [sp, #32]
 800afee:	b323      	cbz	r3, 800b03a <_strtod_l+0xb5a>
 800aff0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aff4:	d821      	bhi.n	800b03a <_strtod_l+0xb5a>
 800aff6:	a328      	add	r3, pc, #160	@ (adr r3, 800b098 <_strtod_l+0xbb8>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	4630      	mov	r0, r6
 800affe:	4639      	mov	r1, r7
 800b000:	f7f5 fd76 	bl	8000af0 <__aeabi_dcmple>
 800b004:	b1a0      	cbz	r0, 800b030 <_strtod_l+0xb50>
 800b006:	4639      	mov	r1, r7
 800b008:	4630      	mov	r0, r6
 800b00a:	f7f5 fdcd 	bl	8000ba8 <__aeabi_d2uiz>
 800b00e:	2801      	cmp	r0, #1
 800b010:	bf38      	it	cc
 800b012:	2001      	movcc	r0, #1
 800b014:	f7f5 fa76 	bl	8000504 <__aeabi_ui2d>
 800b018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b01a:	4606      	mov	r6, r0
 800b01c:	460f      	mov	r7, r1
 800b01e:	b9fb      	cbnz	r3, 800b060 <_strtod_l+0xb80>
 800b020:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b024:	9014      	str	r0, [sp, #80]	@ 0x50
 800b026:	9315      	str	r3, [sp, #84]	@ 0x54
 800b028:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b02c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b030:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b032:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b036:	1b5b      	subs	r3, r3, r5
 800b038:	9311      	str	r3, [sp, #68]	@ 0x44
 800b03a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b03e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b042:	f7ff f8f1 	bl	800a228 <__ulp>
 800b046:	4650      	mov	r0, sl
 800b048:	ec53 2b10 	vmov	r2, r3, d0
 800b04c:	4659      	mov	r1, fp
 800b04e:	f7f5 fad3 	bl	80005f8 <__aeabi_dmul>
 800b052:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b056:	f7f5 f919 	bl	800028c <__adddf3>
 800b05a:	4682      	mov	sl, r0
 800b05c:	468b      	mov	fp, r1
 800b05e:	e770      	b.n	800af42 <_strtod_l+0xa62>
 800b060:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b064:	e7e0      	b.n	800b028 <_strtod_l+0xb48>
 800b066:	a30e      	add	r3, pc, #56	@ (adr r3, 800b0a0 <_strtod_l+0xbc0>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f7f5 fd36 	bl	8000adc <__aeabi_dcmplt>
 800b070:	e798      	b.n	800afa4 <_strtod_l+0xac4>
 800b072:	2300      	movs	r3, #0
 800b074:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b076:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	f7ff ba6d 	b.w	800a55a <_strtod_l+0x7a>
 800b080:	2a65      	cmp	r2, #101	@ 0x65
 800b082:	f43f ab66 	beq.w	800a752 <_strtod_l+0x272>
 800b086:	2a45      	cmp	r2, #69	@ 0x45
 800b088:	f43f ab63 	beq.w	800a752 <_strtod_l+0x272>
 800b08c:	2301      	movs	r3, #1
 800b08e:	f7ff bb9e 	b.w	800a7ce <_strtod_l+0x2ee>
 800b092:	bf00      	nop
 800b094:	f3af 8000 	nop.w
 800b098:	ffc00000 	.word	0xffc00000
 800b09c:	41dfffff 	.word	0x41dfffff
 800b0a0:	94a03595 	.word	0x94a03595
 800b0a4:	3fcfffff 	.word	0x3fcfffff

0800b0a8 <_strtod_r>:
 800b0a8:	4b01      	ldr	r3, [pc, #4]	@ (800b0b0 <_strtod_r+0x8>)
 800b0aa:	f7ff ba19 	b.w	800a4e0 <_strtod_l>
 800b0ae:	bf00      	nop
 800b0b0:	2000014c 	.word	0x2000014c

0800b0b4 <_strtol_l.constprop.0>:
 800b0b4:	2b24      	cmp	r3, #36	@ 0x24
 800b0b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ba:	4686      	mov	lr, r0
 800b0bc:	4690      	mov	r8, r2
 800b0be:	d801      	bhi.n	800b0c4 <_strtol_l.constprop.0+0x10>
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d106      	bne.n	800b0d2 <_strtol_l.constprop.0+0x1e>
 800b0c4:	f7fd fdbc 	bl	8008c40 <__errno>
 800b0c8:	2316      	movs	r3, #22
 800b0ca:	6003      	str	r3, [r0, #0]
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d2:	4834      	ldr	r0, [pc, #208]	@ (800b1a4 <_strtol_l.constprop.0+0xf0>)
 800b0d4:	460d      	mov	r5, r1
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0dc:	5d06      	ldrb	r6, [r0, r4]
 800b0de:	f016 0608 	ands.w	r6, r6, #8
 800b0e2:	d1f8      	bne.n	800b0d6 <_strtol_l.constprop.0+0x22>
 800b0e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800b0e6:	d12d      	bne.n	800b144 <_strtol_l.constprop.0+0x90>
 800b0e8:	782c      	ldrb	r4, [r5, #0]
 800b0ea:	2601      	movs	r6, #1
 800b0ec:	1c95      	adds	r5, r2, #2
 800b0ee:	f033 0210 	bics.w	r2, r3, #16
 800b0f2:	d109      	bne.n	800b108 <_strtol_l.constprop.0+0x54>
 800b0f4:	2c30      	cmp	r4, #48	@ 0x30
 800b0f6:	d12a      	bne.n	800b14e <_strtol_l.constprop.0+0x9a>
 800b0f8:	782a      	ldrb	r2, [r5, #0]
 800b0fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b0fe:	2a58      	cmp	r2, #88	@ 0x58
 800b100:	d125      	bne.n	800b14e <_strtol_l.constprop.0+0x9a>
 800b102:	786c      	ldrb	r4, [r5, #1]
 800b104:	2310      	movs	r3, #16
 800b106:	3502      	adds	r5, #2
 800b108:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b10c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b110:	2200      	movs	r2, #0
 800b112:	fbbc f9f3 	udiv	r9, ip, r3
 800b116:	4610      	mov	r0, r2
 800b118:	fb03 ca19 	mls	sl, r3, r9, ip
 800b11c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b120:	2f09      	cmp	r7, #9
 800b122:	d81b      	bhi.n	800b15c <_strtol_l.constprop.0+0xa8>
 800b124:	463c      	mov	r4, r7
 800b126:	42a3      	cmp	r3, r4
 800b128:	dd27      	ble.n	800b17a <_strtol_l.constprop.0+0xc6>
 800b12a:	1c57      	adds	r7, r2, #1
 800b12c:	d007      	beq.n	800b13e <_strtol_l.constprop.0+0x8a>
 800b12e:	4581      	cmp	r9, r0
 800b130:	d320      	bcc.n	800b174 <_strtol_l.constprop.0+0xc0>
 800b132:	d101      	bne.n	800b138 <_strtol_l.constprop.0+0x84>
 800b134:	45a2      	cmp	sl, r4
 800b136:	db1d      	blt.n	800b174 <_strtol_l.constprop.0+0xc0>
 800b138:	fb00 4003 	mla	r0, r0, r3, r4
 800b13c:	2201      	movs	r2, #1
 800b13e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b142:	e7eb      	b.n	800b11c <_strtol_l.constprop.0+0x68>
 800b144:	2c2b      	cmp	r4, #43	@ 0x2b
 800b146:	bf04      	itt	eq
 800b148:	782c      	ldrbeq	r4, [r5, #0]
 800b14a:	1c95      	addeq	r5, r2, #2
 800b14c:	e7cf      	b.n	800b0ee <_strtol_l.constprop.0+0x3a>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1da      	bne.n	800b108 <_strtol_l.constprop.0+0x54>
 800b152:	2c30      	cmp	r4, #48	@ 0x30
 800b154:	bf0c      	ite	eq
 800b156:	2308      	moveq	r3, #8
 800b158:	230a      	movne	r3, #10
 800b15a:	e7d5      	b.n	800b108 <_strtol_l.constprop.0+0x54>
 800b15c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b160:	2f19      	cmp	r7, #25
 800b162:	d801      	bhi.n	800b168 <_strtol_l.constprop.0+0xb4>
 800b164:	3c37      	subs	r4, #55	@ 0x37
 800b166:	e7de      	b.n	800b126 <_strtol_l.constprop.0+0x72>
 800b168:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b16c:	2f19      	cmp	r7, #25
 800b16e:	d804      	bhi.n	800b17a <_strtol_l.constprop.0+0xc6>
 800b170:	3c57      	subs	r4, #87	@ 0x57
 800b172:	e7d8      	b.n	800b126 <_strtol_l.constprop.0+0x72>
 800b174:	f04f 32ff 	mov.w	r2, #4294967295
 800b178:	e7e1      	b.n	800b13e <_strtol_l.constprop.0+0x8a>
 800b17a:	1c53      	adds	r3, r2, #1
 800b17c:	d108      	bne.n	800b190 <_strtol_l.constprop.0+0xdc>
 800b17e:	2322      	movs	r3, #34	@ 0x22
 800b180:	f8ce 3000 	str.w	r3, [lr]
 800b184:	4660      	mov	r0, ip
 800b186:	f1b8 0f00 	cmp.w	r8, #0
 800b18a:	d0a0      	beq.n	800b0ce <_strtol_l.constprop.0+0x1a>
 800b18c:	1e69      	subs	r1, r5, #1
 800b18e:	e006      	b.n	800b19e <_strtol_l.constprop.0+0xea>
 800b190:	b106      	cbz	r6, 800b194 <_strtol_l.constprop.0+0xe0>
 800b192:	4240      	negs	r0, r0
 800b194:	f1b8 0f00 	cmp.w	r8, #0
 800b198:	d099      	beq.n	800b0ce <_strtol_l.constprop.0+0x1a>
 800b19a:	2a00      	cmp	r2, #0
 800b19c:	d1f6      	bne.n	800b18c <_strtol_l.constprop.0+0xd8>
 800b19e:	f8c8 1000 	str.w	r1, [r8]
 800b1a2:	e794      	b.n	800b0ce <_strtol_l.constprop.0+0x1a>
 800b1a4:	0800ce79 	.word	0x0800ce79

0800b1a8 <_strtol_r>:
 800b1a8:	f7ff bf84 	b.w	800b0b4 <_strtol_l.constprop.0>

0800b1ac <__ssputs_r>:
 800b1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b0:	688e      	ldr	r6, [r1, #8]
 800b1b2:	461f      	mov	r7, r3
 800b1b4:	42be      	cmp	r6, r7
 800b1b6:	680b      	ldr	r3, [r1, #0]
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	4690      	mov	r8, r2
 800b1be:	d82d      	bhi.n	800b21c <__ssputs_r+0x70>
 800b1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1c8:	d026      	beq.n	800b218 <__ssputs_r+0x6c>
 800b1ca:	6965      	ldr	r5, [r4, #20]
 800b1cc:	6909      	ldr	r1, [r1, #16]
 800b1ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1d2:	eba3 0901 	sub.w	r9, r3, r1
 800b1d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1da:	1c7b      	adds	r3, r7, #1
 800b1dc:	444b      	add	r3, r9
 800b1de:	106d      	asrs	r5, r5, #1
 800b1e0:	429d      	cmp	r5, r3
 800b1e2:	bf38      	it	cc
 800b1e4:	461d      	movcc	r5, r3
 800b1e6:	0553      	lsls	r3, r2, #21
 800b1e8:	d527      	bpl.n	800b23a <__ssputs_r+0x8e>
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	f7fe fc1c 	bl	8009a28 <_malloc_r>
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	b360      	cbz	r0, 800b24e <__ssputs_r+0xa2>
 800b1f4:	6921      	ldr	r1, [r4, #16]
 800b1f6:	464a      	mov	r2, r9
 800b1f8:	f000 fda6 	bl	800bd48 <memcpy>
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b206:	81a3      	strh	r3, [r4, #12]
 800b208:	6126      	str	r6, [r4, #16]
 800b20a:	6165      	str	r5, [r4, #20]
 800b20c:	444e      	add	r6, r9
 800b20e:	eba5 0509 	sub.w	r5, r5, r9
 800b212:	6026      	str	r6, [r4, #0]
 800b214:	60a5      	str	r5, [r4, #8]
 800b216:	463e      	mov	r6, r7
 800b218:	42be      	cmp	r6, r7
 800b21a:	d900      	bls.n	800b21e <__ssputs_r+0x72>
 800b21c:	463e      	mov	r6, r7
 800b21e:	6820      	ldr	r0, [r4, #0]
 800b220:	4632      	mov	r2, r6
 800b222:	4641      	mov	r1, r8
 800b224:	f000 fd53 	bl	800bcce <memmove>
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	1b9b      	subs	r3, r3, r6
 800b22c:	60a3      	str	r3, [r4, #8]
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	4433      	add	r3, r6
 800b232:	6023      	str	r3, [r4, #0]
 800b234:	2000      	movs	r0, #0
 800b236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b23a:	462a      	mov	r2, r5
 800b23c:	f001 f919 	bl	800c472 <_realloc_r>
 800b240:	4606      	mov	r6, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	d1e0      	bne.n	800b208 <__ssputs_r+0x5c>
 800b246:	6921      	ldr	r1, [r4, #16]
 800b248:	4650      	mov	r0, sl
 800b24a:	f7fe fb79 	bl	8009940 <_free_r>
 800b24e:	230c      	movs	r3, #12
 800b250:	f8ca 3000 	str.w	r3, [sl]
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	e7e9      	b.n	800b236 <__ssputs_r+0x8a>
	...

0800b264 <_svfiprintf_r>:
 800b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	4698      	mov	r8, r3
 800b26a:	898b      	ldrh	r3, [r1, #12]
 800b26c:	061b      	lsls	r3, r3, #24
 800b26e:	b09d      	sub	sp, #116	@ 0x74
 800b270:	4607      	mov	r7, r0
 800b272:	460d      	mov	r5, r1
 800b274:	4614      	mov	r4, r2
 800b276:	d510      	bpl.n	800b29a <_svfiprintf_r+0x36>
 800b278:	690b      	ldr	r3, [r1, #16]
 800b27a:	b973      	cbnz	r3, 800b29a <_svfiprintf_r+0x36>
 800b27c:	2140      	movs	r1, #64	@ 0x40
 800b27e:	f7fe fbd3 	bl	8009a28 <_malloc_r>
 800b282:	6028      	str	r0, [r5, #0]
 800b284:	6128      	str	r0, [r5, #16]
 800b286:	b930      	cbnz	r0, 800b296 <_svfiprintf_r+0x32>
 800b288:	230c      	movs	r3, #12
 800b28a:	603b      	str	r3, [r7, #0]
 800b28c:	f04f 30ff 	mov.w	r0, #4294967295
 800b290:	b01d      	add	sp, #116	@ 0x74
 800b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b296:	2340      	movs	r3, #64	@ 0x40
 800b298:	616b      	str	r3, [r5, #20]
 800b29a:	2300      	movs	r3, #0
 800b29c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b29e:	2320      	movs	r3, #32
 800b2a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a8:	2330      	movs	r3, #48	@ 0x30
 800b2aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b448 <_svfiprintf_r+0x1e4>
 800b2ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2b2:	f04f 0901 	mov.w	r9, #1
 800b2b6:	4623      	mov	r3, r4
 800b2b8:	469a      	mov	sl, r3
 800b2ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2be:	b10a      	cbz	r2, 800b2c4 <_svfiprintf_r+0x60>
 800b2c0:	2a25      	cmp	r2, #37	@ 0x25
 800b2c2:	d1f9      	bne.n	800b2b8 <_svfiprintf_r+0x54>
 800b2c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b2c8:	d00b      	beq.n	800b2e2 <_svfiprintf_r+0x7e>
 800b2ca:	465b      	mov	r3, fp
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7ff ff6b 	bl	800b1ac <__ssputs_r>
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	f000 80a7 	beq.w	800b42a <_svfiprintf_r+0x1c6>
 800b2dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2de:	445a      	add	r2, fp
 800b2e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 809f 	beq.w	800b42a <_svfiprintf_r+0x1c6>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f6:	f10a 0a01 	add.w	sl, sl, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	9307      	str	r3, [sp, #28]
 800b2fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b302:	931a      	str	r3, [sp, #104]	@ 0x68
 800b304:	4654      	mov	r4, sl
 800b306:	2205      	movs	r2, #5
 800b308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30c:	484e      	ldr	r0, [pc, #312]	@ (800b448 <_svfiprintf_r+0x1e4>)
 800b30e:	f7f4 ff5f 	bl	80001d0 <memchr>
 800b312:	9a04      	ldr	r2, [sp, #16]
 800b314:	b9d8      	cbnz	r0, 800b34e <_svfiprintf_r+0xea>
 800b316:	06d0      	lsls	r0, r2, #27
 800b318:	bf44      	itt	mi
 800b31a:	2320      	movmi	r3, #32
 800b31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b320:	0711      	lsls	r1, r2, #28
 800b322:	bf44      	itt	mi
 800b324:	232b      	movmi	r3, #43	@ 0x2b
 800b326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b32a:	f89a 3000 	ldrb.w	r3, [sl]
 800b32e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b330:	d015      	beq.n	800b35e <_svfiprintf_r+0xfa>
 800b332:	9a07      	ldr	r2, [sp, #28]
 800b334:	4654      	mov	r4, sl
 800b336:	2000      	movs	r0, #0
 800b338:	f04f 0c0a 	mov.w	ip, #10
 800b33c:	4621      	mov	r1, r4
 800b33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b342:	3b30      	subs	r3, #48	@ 0x30
 800b344:	2b09      	cmp	r3, #9
 800b346:	d94b      	bls.n	800b3e0 <_svfiprintf_r+0x17c>
 800b348:	b1b0      	cbz	r0, 800b378 <_svfiprintf_r+0x114>
 800b34a:	9207      	str	r2, [sp, #28]
 800b34c:	e014      	b.n	800b378 <_svfiprintf_r+0x114>
 800b34e:	eba0 0308 	sub.w	r3, r0, r8
 800b352:	fa09 f303 	lsl.w	r3, r9, r3
 800b356:	4313      	orrs	r3, r2
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	46a2      	mov	sl, r4
 800b35c:	e7d2      	b.n	800b304 <_svfiprintf_r+0xa0>
 800b35e:	9b03      	ldr	r3, [sp, #12]
 800b360:	1d19      	adds	r1, r3, #4
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	9103      	str	r1, [sp, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	bfbb      	ittet	lt
 800b36a:	425b      	neglt	r3, r3
 800b36c:	f042 0202 	orrlt.w	r2, r2, #2
 800b370:	9307      	strge	r3, [sp, #28]
 800b372:	9307      	strlt	r3, [sp, #28]
 800b374:	bfb8      	it	lt
 800b376:	9204      	strlt	r2, [sp, #16]
 800b378:	7823      	ldrb	r3, [r4, #0]
 800b37a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b37c:	d10a      	bne.n	800b394 <_svfiprintf_r+0x130>
 800b37e:	7863      	ldrb	r3, [r4, #1]
 800b380:	2b2a      	cmp	r3, #42	@ 0x2a
 800b382:	d132      	bne.n	800b3ea <_svfiprintf_r+0x186>
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	9203      	str	r2, [sp, #12]
 800b38c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b390:	3402      	adds	r4, #2
 800b392:	9305      	str	r3, [sp, #20]
 800b394:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b458 <_svfiprintf_r+0x1f4>
 800b398:	7821      	ldrb	r1, [r4, #0]
 800b39a:	2203      	movs	r2, #3
 800b39c:	4650      	mov	r0, sl
 800b39e:	f7f4 ff17 	bl	80001d0 <memchr>
 800b3a2:	b138      	cbz	r0, 800b3b4 <_svfiprintf_r+0x150>
 800b3a4:	9b04      	ldr	r3, [sp, #16]
 800b3a6:	eba0 000a 	sub.w	r0, r0, sl
 800b3aa:	2240      	movs	r2, #64	@ 0x40
 800b3ac:	4082      	lsls	r2, r0
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	3401      	adds	r4, #1
 800b3b2:	9304      	str	r3, [sp, #16]
 800b3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b8:	4824      	ldr	r0, [pc, #144]	@ (800b44c <_svfiprintf_r+0x1e8>)
 800b3ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3be:	2206      	movs	r2, #6
 800b3c0:	f7f4 ff06 	bl	80001d0 <memchr>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d036      	beq.n	800b436 <_svfiprintf_r+0x1d2>
 800b3c8:	4b21      	ldr	r3, [pc, #132]	@ (800b450 <_svfiprintf_r+0x1ec>)
 800b3ca:	bb1b      	cbnz	r3, 800b414 <_svfiprintf_r+0x1b0>
 800b3cc:	9b03      	ldr	r3, [sp, #12]
 800b3ce:	3307      	adds	r3, #7
 800b3d0:	f023 0307 	bic.w	r3, r3, #7
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	9303      	str	r3, [sp, #12]
 800b3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3da:	4433      	add	r3, r6
 800b3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3de:	e76a      	b.n	800b2b6 <_svfiprintf_r+0x52>
 800b3e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	2001      	movs	r0, #1
 800b3e8:	e7a8      	b.n	800b33c <_svfiprintf_r+0xd8>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	3401      	adds	r4, #1
 800b3ee:	9305      	str	r3, [sp, #20]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	f04f 0c0a 	mov.w	ip, #10
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3fc:	3a30      	subs	r2, #48	@ 0x30
 800b3fe:	2a09      	cmp	r2, #9
 800b400:	d903      	bls.n	800b40a <_svfiprintf_r+0x1a6>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0c6      	beq.n	800b394 <_svfiprintf_r+0x130>
 800b406:	9105      	str	r1, [sp, #20]
 800b408:	e7c4      	b.n	800b394 <_svfiprintf_r+0x130>
 800b40a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b40e:	4604      	mov	r4, r0
 800b410:	2301      	movs	r3, #1
 800b412:	e7f0      	b.n	800b3f6 <_svfiprintf_r+0x192>
 800b414:	ab03      	add	r3, sp, #12
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	462a      	mov	r2, r5
 800b41a:	4b0e      	ldr	r3, [pc, #56]	@ (800b454 <_svfiprintf_r+0x1f0>)
 800b41c:	a904      	add	r1, sp, #16
 800b41e:	4638      	mov	r0, r7
 800b420:	f7fc fc7c 	bl	8007d1c <_printf_float>
 800b424:	1c42      	adds	r2, r0, #1
 800b426:	4606      	mov	r6, r0
 800b428:	d1d6      	bne.n	800b3d8 <_svfiprintf_r+0x174>
 800b42a:	89ab      	ldrh	r3, [r5, #12]
 800b42c:	065b      	lsls	r3, r3, #25
 800b42e:	f53f af2d 	bmi.w	800b28c <_svfiprintf_r+0x28>
 800b432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b434:	e72c      	b.n	800b290 <_svfiprintf_r+0x2c>
 800b436:	ab03      	add	r3, sp, #12
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	462a      	mov	r2, r5
 800b43c:	4b05      	ldr	r3, [pc, #20]	@ (800b454 <_svfiprintf_r+0x1f0>)
 800b43e:	a904      	add	r1, sp, #16
 800b440:	4638      	mov	r0, r7
 800b442:	f7fc ff03 	bl	800824c <_printf_i>
 800b446:	e7ed      	b.n	800b424 <_svfiprintf_r+0x1c0>
 800b448:	0800cf79 	.word	0x0800cf79
 800b44c:	0800cf83 	.word	0x0800cf83
 800b450:	08007d1d 	.word	0x08007d1d
 800b454:	0800b1ad 	.word	0x0800b1ad
 800b458:	0800cf7f 	.word	0x0800cf7f

0800b45c <_sungetc_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	1c4b      	adds	r3, r1, #1
 800b460:	4614      	mov	r4, r2
 800b462:	d103      	bne.n	800b46c <_sungetc_r+0x10>
 800b464:	f04f 35ff 	mov.w	r5, #4294967295
 800b468:	4628      	mov	r0, r5
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	8993      	ldrh	r3, [r2, #12]
 800b46e:	f023 0320 	bic.w	r3, r3, #32
 800b472:	8193      	strh	r3, [r2, #12]
 800b474:	6853      	ldr	r3, [r2, #4]
 800b476:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b478:	b2cd      	uxtb	r5, r1
 800b47a:	b18a      	cbz	r2, 800b4a0 <_sungetc_r+0x44>
 800b47c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b47e:	429a      	cmp	r2, r3
 800b480:	dd08      	ble.n	800b494 <_sungetc_r+0x38>
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	1e5a      	subs	r2, r3, #1
 800b486:	6022      	str	r2, [r4, #0]
 800b488:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b48c:	6863      	ldr	r3, [r4, #4]
 800b48e:	3301      	adds	r3, #1
 800b490:	6063      	str	r3, [r4, #4]
 800b492:	e7e9      	b.n	800b468 <_sungetc_r+0xc>
 800b494:	4621      	mov	r1, r4
 800b496:	f000 fbe0 	bl	800bc5a <__submore>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d0f1      	beq.n	800b482 <_sungetc_r+0x26>
 800b49e:	e7e1      	b.n	800b464 <_sungetc_r+0x8>
 800b4a0:	6921      	ldr	r1, [r4, #16]
 800b4a2:	6822      	ldr	r2, [r4, #0]
 800b4a4:	b141      	cbz	r1, 800b4b8 <_sungetc_r+0x5c>
 800b4a6:	4291      	cmp	r1, r2
 800b4a8:	d206      	bcs.n	800b4b8 <_sungetc_r+0x5c>
 800b4aa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b4ae:	42a9      	cmp	r1, r5
 800b4b0:	d102      	bne.n	800b4b8 <_sungetc_r+0x5c>
 800b4b2:	3a01      	subs	r2, #1
 800b4b4:	6022      	str	r2, [r4, #0]
 800b4b6:	e7ea      	b.n	800b48e <_sungetc_r+0x32>
 800b4b8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b4bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b4c6:	4623      	mov	r3, r4
 800b4c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e7de      	b.n	800b490 <_sungetc_r+0x34>

0800b4d2 <__ssrefill_r>:
 800b4d2:	b510      	push	{r4, lr}
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b4d8:	b169      	cbz	r1, 800b4f6 <__ssrefill_r+0x24>
 800b4da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4de:	4299      	cmp	r1, r3
 800b4e0:	d001      	beq.n	800b4e6 <__ssrefill_r+0x14>
 800b4e2:	f7fe fa2d 	bl	8009940 <_free_r>
 800b4e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b4e8:	6063      	str	r3, [r4, #4]
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	6360      	str	r0, [r4, #52]	@ 0x34
 800b4ee:	b113      	cbz	r3, 800b4f6 <__ssrefill_r+0x24>
 800b4f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	bd10      	pop	{r4, pc}
 800b4f6:	6923      	ldr	r3, [r4, #16]
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	6063      	str	r3, [r4, #4]
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	f043 0320 	orr.w	r3, r3, #32
 800b504:	81a3      	strh	r3, [r4, #12]
 800b506:	f04f 30ff 	mov.w	r0, #4294967295
 800b50a:	e7f3      	b.n	800b4f4 <__ssrefill_r+0x22>

0800b50c <__ssvfiscanf_r>:
 800b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b510:	460c      	mov	r4, r1
 800b512:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b516:	2100      	movs	r1, #0
 800b518:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b51c:	49a5      	ldr	r1, [pc, #660]	@ (800b7b4 <__ssvfiscanf_r+0x2a8>)
 800b51e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b520:	f10d 0804 	add.w	r8, sp, #4
 800b524:	49a4      	ldr	r1, [pc, #656]	@ (800b7b8 <__ssvfiscanf_r+0x2ac>)
 800b526:	4fa5      	ldr	r7, [pc, #660]	@ (800b7bc <__ssvfiscanf_r+0x2b0>)
 800b528:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b52c:	4606      	mov	r6, r0
 800b52e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	7813      	ldrb	r3, [r2, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	f000 8158 	beq.w	800b7ea <__ssvfiscanf_r+0x2de>
 800b53a:	5cf9      	ldrb	r1, [r7, r3]
 800b53c:	f011 0108 	ands.w	r1, r1, #8
 800b540:	f102 0501 	add.w	r5, r2, #1
 800b544:	d019      	beq.n	800b57a <__ssvfiscanf_r+0x6e>
 800b546:	6863      	ldr	r3, [r4, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	dd0f      	ble.n	800b56c <__ssvfiscanf_r+0x60>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	781a      	ldrb	r2, [r3, #0]
 800b550:	5cba      	ldrb	r2, [r7, r2]
 800b552:	0712      	lsls	r2, r2, #28
 800b554:	d401      	bmi.n	800b55a <__ssvfiscanf_r+0x4e>
 800b556:	462a      	mov	r2, r5
 800b558:	e7eb      	b.n	800b532 <__ssvfiscanf_r+0x26>
 800b55a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b55c:	3201      	adds	r2, #1
 800b55e:	9245      	str	r2, [sp, #276]	@ 0x114
 800b560:	6862      	ldr	r2, [r4, #4]
 800b562:	3301      	adds	r3, #1
 800b564:	3a01      	subs	r2, #1
 800b566:	6062      	str	r2, [r4, #4]
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	e7ec      	b.n	800b546 <__ssvfiscanf_r+0x3a>
 800b56c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b56e:	4621      	mov	r1, r4
 800b570:	4630      	mov	r0, r6
 800b572:	4798      	blx	r3
 800b574:	2800      	cmp	r0, #0
 800b576:	d0e9      	beq.n	800b54c <__ssvfiscanf_r+0x40>
 800b578:	e7ed      	b.n	800b556 <__ssvfiscanf_r+0x4a>
 800b57a:	2b25      	cmp	r3, #37	@ 0x25
 800b57c:	d012      	beq.n	800b5a4 <__ssvfiscanf_r+0x98>
 800b57e:	4699      	mov	r9, r3
 800b580:	6863      	ldr	r3, [r4, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	f340 8093 	ble.w	800b6ae <__ssvfiscanf_r+0x1a2>
 800b588:	6822      	ldr	r2, [r4, #0]
 800b58a:	7813      	ldrb	r3, [r2, #0]
 800b58c:	454b      	cmp	r3, r9
 800b58e:	f040 812c 	bne.w	800b7ea <__ssvfiscanf_r+0x2de>
 800b592:	6863      	ldr	r3, [r4, #4]
 800b594:	3b01      	subs	r3, #1
 800b596:	6063      	str	r3, [r4, #4]
 800b598:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b59a:	3201      	adds	r2, #1
 800b59c:	3301      	adds	r3, #1
 800b59e:	6022      	str	r2, [r4, #0]
 800b5a0:	9345      	str	r3, [sp, #276]	@ 0x114
 800b5a2:	e7d8      	b.n	800b556 <__ssvfiscanf_r+0x4a>
 800b5a4:	9141      	str	r1, [sp, #260]	@ 0x104
 800b5a6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b5a8:	7853      	ldrb	r3, [r2, #1]
 800b5aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5ac:	bf02      	ittt	eq
 800b5ae:	2310      	moveq	r3, #16
 800b5b0:	1c95      	addeq	r5, r2, #2
 800b5b2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b5b4:	220a      	movs	r2, #10
 800b5b6:	46a9      	mov	r9, r5
 800b5b8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b5bc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b5c0:	2b09      	cmp	r3, #9
 800b5c2:	d91e      	bls.n	800b602 <__ssvfiscanf_r+0xf6>
 800b5c4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800b7c0 <__ssvfiscanf_r+0x2b4>
 800b5c8:	2203      	movs	r2, #3
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	f7f4 fe00 	bl	80001d0 <memchr>
 800b5d0:	b138      	cbz	r0, 800b5e2 <__ssvfiscanf_r+0xd6>
 800b5d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b5d4:	eba0 000a 	sub.w	r0, r0, sl
 800b5d8:	2301      	movs	r3, #1
 800b5da:	4083      	lsls	r3, r0
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	9341      	str	r3, [sp, #260]	@ 0x104
 800b5e0:	464d      	mov	r5, r9
 800b5e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5e6:	2b78      	cmp	r3, #120	@ 0x78
 800b5e8:	d806      	bhi.n	800b5f8 <__ssvfiscanf_r+0xec>
 800b5ea:	2b57      	cmp	r3, #87	@ 0x57
 800b5ec:	d810      	bhi.n	800b610 <__ssvfiscanf_r+0x104>
 800b5ee:	2b25      	cmp	r3, #37	@ 0x25
 800b5f0:	d0c5      	beq.n	800b57e <__ssvfiscanf_r+0x72>
 800b5f2:	d857      	bhi.n	800b6a4 <__ssvfiscanf_r+0x198>
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d065      	beq.n	800b6c4 <__ssvfiscanf_r+0x1b8>
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b5fc:	230a      	movs	r3, #10
 800b5fe:	9342      	str	r3, [sp, #264]	@ 0x108
 800b600:	e078      	b.n	800b6f4 <__ssvfiscanf_r+0x1e8>
 800b602:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b604:	fb02 1103 	mla	r1, r2, r3, r1
 800b608:	3930      	subs	r1, #48	@ 0x30
 800b60a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b60c:	464d      	mov	r5, r9
 800b60e:	e7d2      	b.n	800b5b6 <__ssvfiscanf_r+0xaa>
 800b610:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b614:	2a20      	cmp	r2, #32
 800b616:	d8ef      	bhi.n	800b5f8 <__ssvfiscanf_r+0xec>
 800b618:	a101      	add	r1, pc, #4	@ (adr r1, 800b620 <__ssvfiscanf_r+0x114>)
 800b61a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b61e:	bf00      	nop
 800b620:	0800b6d3 	.word	0x0800b6d3
 800b624:	0800b5f9 	.word	0x0800b5f9
 800b628:	0800b5f9 	.word	0x0800b5f9
 800b62c:	0800b72d 	.word	0x0800b72d
 800b630:	0800b5f9 	.word	0x0800b5f9
 800b634:	0800b5f9 	.word	0x0800b5f9
 800b638:	0800b5f9 	.word	0x0800b5f9
 800b63c:	0800b5f9 	.word	0x0800b5f9
 800b640:	0800b5f9 	.word	0x0800b5f9
 800b644:	0800b5f9 	.word	0x0800b5f9
 800b648:	0800b5f9 	.word	0x0800b5f9
 800b64c:	0800b743 	.word	0x0800b743
 800b650:	0800b729 	.word	0x0800b729
 800b654:	0800b6ab 	.word	0x0800b6ab
 800b658:	0800b6ab 	.word	0x0800b6ab
 800b65c:	0800b6ab 	.word	0x0800b6ab
 800b660:	0800b5f9 	.word	0x0800b5f9
 800b664:	0800b6e5 	.word	0x0800b6e5
 800b668:	0800b5f9 	.word	0x0800b5f9
 800b66c:	0800b5f9 	.word	0x0800b5f9
 800b670:	0800b5f9 	.word	0x0800b5f9
 800b674:	0800b5f9 	.word	0x0800b5f9
 800b678:	0800b753 	.word	0x0800b753
 800b67c:	0800b6ed 	.word	0x0800b6ed
 800b680:	0800b6cb 	.word	0x0800b6cb
 800b684:	0800b5f9 	.word	0x0800b5f9
 800b688:	0800b5f9 	.word	0x0800b5f9
 800b68c:	0800b74f 	.word	0x0800b74f
 800b690:	0800b5f9 	.word	0x0800b5f9
 800b694:	0800b729 	.word	0x0800b729
 800b698:	0800b5f9 	.word	0x0800b5f9
 800b69c:	0800b5f9 	.word	0x0800b5f9
 800b6a0:	0800b6d3 	.word	0x0800b6d3
 800b6a4:	3b45      	subs	r3, #69	@ 0x45
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d8a6      	bhi.n	800b5f8 <__ssvfiscanf_r+0xec>
 800b6aa:	2305      	movs	r3, #5
 800b6ac:	e021      	b.n	800b6f2 <__ssvfiscanf_r+0x1e6>
 800b6ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4798      	blx	r3
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	f43f af66 	beq.w	800b588 <__ssvfiscanf_r+0x7c>
 800b6bc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	f040 808b 	bne.w	800b7da <__ssvfiscanf_r+0x2ce>
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	e08b      	b.n	800b7e2 <__ssvfiscanf_r+0x2d6>
 800b6ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b6cc:	f042 0220 	orr.w	r2, r2, #32
 800b6d0:	9241      	str	r2, [sp, #260]	@ 0x104
 800b6d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b6d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6d8:	9241      	str	r2, [sp, #260]	@ 0x104
 800b6da:	2210      	movs	r2, #16
 800b6dc:	2b6e      	cmp	r3, #110	@ 0x6e
 800b6de:	9242      	str	r2, [sp, #264]	@ 0x108
 800b6e0:	d902      	bls.n	800b6e8 <__ssvfiscanf_r+0x1dc>
 800b6e2:	e005      	b.n	800b6f0 <__ssvfiscanf_r+0x1e4>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9342      	str	r3, [sp, #264]	@ 0x108
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e002      	b.n	800b6f2 <__ssvfiscanf_r+0x1e6>
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	9342      	str	r3, [sp, #264]	@ 0x108
 800b6f0:	2304      	movs	r3, #4
 800b6f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b6f4:	6863      	ldr	r3, [r4, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	dd39      	ble.n	800b76e <__ssvfiscanf_r+0x262>
 800b6fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b6fc:	0659      	lsls	r1, r3, #25
 800b6fe:	d404      	bmi.n	800b70a <__ssvfiscanf_r+0x1fe>
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	781a      	ldrb	r2, [r3, #0]
 800b704:	5cba      	ldrb	r2, [r7, r2]
 800b706:	0712      	lsls	r2, r2, #28
 800b708:	d438      	bmi.n	800b77c <__ssvfiscanf_r+0x270>
 800b70a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	dc47      	bgt.n	800b7a0 <__ssvfiscanf_r+0x294>
 800b710:	466b      	mov	r3, sp
 800b712:	4622      	mov	r2, r4
 800b714:	a941      	add	r1, sp, #260	@ 0x104
 800b716:	4630      	mov	r0, r6
 800b718:	f000 f86c 	bl	800b7f4 <_scanf_chars>
 800b71c:	2801      	cmp	r0, #1
 800b71e:	d064      	beq.n	800b7ea <__ssvfiscanf_r+0x2de>
 800b720:	2802      	cmp	r0, #2
 800b722:	f47f af18 	bne.w	800b556 <__ssvfiscanf_r+0x4a>
 800b726:	e7c9      	b.n	800b6bc <__ssvfiscanf_r+0x1b0>
 800b728:	220a      	movs	r2, #10
 800b72a:	e7d7      	b.n	800b6dc <__ssvfiscanf_r+0x1d0>
 800b72c:	4629      	mov	r1, r5
 800b72e:	4640      	mov	r0, r8
 800b730:	f000 fa5a 	bl	800bbe8 <__sccl>
 800b734:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73a:	9341      	str	r3, [sp, #260]	@ 0x104
 800b73c:	4605      	mov	r5, r0
 800b73e:	2301      	movs	r3, #1
 800b740:	e7d7      	b.n	800b6f2 <__ssvfiscanf_r+0x1e6>
 800b742:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b748:	9341      	str	r3, [sp, #260]	@ 0x104
 800b74a:	2300      	movs	r3, #0
 800b74c:	e7d1      	b.n	800b6f2 <__ssvfiscanf_r+0x1e6>
 800b74e:	2302      	movs	r3, #2
 800b750:	e7cf      	b.n	800b6f2 <__ssvfiscanf_r+0x1e6>
 800b752:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b754:	06c3      	lsls	r3, r0, #27
 800b756:	f53f aefe 	bmi.w	800b556 <__ssvfiscanf_r+0x4a>
 800b75a:	9b00      	ldr	r3, [sp, #0]
 800b75c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b75e:	1d19      	adds	r1, r3, #4
 800b760:	9100      	str	r1, [sp, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	07c0      	lsls	r0, r0, #31
 800b766:	bf4c      	ite	mi
 800b768:	801a      	strhmi	r2, [r3, #0]
 800b76a:	601a      	strpl	r2, [r3, #0]
 800b76c:	e6f3      	b.n	800b556 <__ssvfiscanf_r+0x4a>
 800b76e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b770:	4621      	mov	r1, r4
 800b772:	4630      	mov	r0, r6
 800b774:	4798      	blx	r3
 800b776:	2800      	cmp	r0, #0
 800b778:	d0bf      	beq.n	800b6fa <__ssvfiscanf_r+0x1ee>
 800b77a:	e79f      	b.n	800b6bc <__ssvfiscanf_r+0x1b0>
 800b77c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b77e:	3201      	adds	r2, #1
 800b780:	9245      	str	r2, [sp, #276]	@ 0x114
 800b782:	6862      	ldr	r2, [r4, #4]
 800b784:	3a01      	subs	r2, #1
 800b786:	2a00      	cmp	r2, #0
 800b788:	6062      	str	r2, [r4, #4]
 800b78a:	dd02      	ble.n	800b792 <__ssvfiscanf_r+0x286>
 800b78c:	3301      	adds	r3, #1
 800b78e:	6023      	str	r3, [r4, #0]
 800b790:	e7b6      	b.n	800b700 <__ssvfiscanf_r+0x1f4>
 800b792:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b794:	4621      	mov	r1, r4
 800b796:	4630      	mov	r0, r6
 800b798:	4798      	blx	r3
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d0b0      	beq.n	800b700 <__ssvfiscanf_r+0x1f4>
 800b79e:	e78d      	b.n	800b6bc <__ssvfiscanf_r+0x1b0>
 800b7a0:	2b04      	cmp	r3, #4
 800b7a2:	dc0f      	bgt.n	800b7c4 <__ssvfiscanf_r+0x2b8>
 800b7a4:	466b      	mov	r3, sp
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	a941      	add	r1, sp, #260	@ 0x104
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f000 f87c 	bl	800b8a8 <_scanf_i>
 800b7b0:	e7b4      	b.n	800b71c <__ssvfiscanf_r+0x210>
 800b7b2:	bf00      	nop
 800b7b4:	0800b45d 	.word	0x0800b45d
 800b7b8:	0800b4d3 	.word	0x0800b4d3
 800b7bc:	0800ce79 	.word	0x0800ce79
 800b7c0:	0800cf7f 	.word	0x0800cf7f
 800b7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800b7f0 <__ssvfiscanf_r+0x2e4>)
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f43f aec5 	beq.w	800b556 <__ssvfiscanf_r+0x4a>
 800b7cc:	466b      	mov	r3, sp
 800b7ce:	4622      	mov	r2, r4
 800b7d0:	a941      	add	r1, sp, #260	@ 0x104
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f7fc fe5a 	bl	800848c <_scanf_float>
 800b7d8:	e7a0      	b.n	800b71c <__ssvfiscanf_r+0x210>
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	065b      	lsls	r3, r3, #25
 800b7de:	f53f af71 	bmi.w	800b6c4 <__ssvfiscanf_r+0x1b8>
 800b7e2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ea:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b7ec:	e7f9      	b.n	800b7e2 <__ssvfiscanf_r+0x2d6>
 800b7ee:	bf00      	nop
 800b7f0:	0800848d 	.word	0x0800848d

0800b7f4 <_scanf_chars>:
 800b7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7f8:	4615      	mov	r5, r2
 800b7fa:	688a      	ldr	r2, [r1, #8]
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	b932      	cbnz	r2, 800b810 <_scanf_chars+0x1c>
 800b802:	698a      	ldr	r2, [r1, #24]
 800b804:	2a00      	cmp	r2, #0
 800b806:	bf14      	ite	ne
 800b808:	f04f 32ff 	movne.w	r2, #4294967295
 800b80c:	2201      	moveq	r2, #1
 800b80e:	608a      	str	r2, [r1, #8]
 800b810:	6822      	ldr	r2, [r4, #0]
 800b812:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b8a4 <_scanf_chars+0xb0>
 800b816:	06d1      	lsls	r1, r2, #27
 800b818:	bf5f      	itttt	pl
 800b81a:	681a      	ldrpl	r2, [r3, #0]
 800b81c:	1d11      	addpl	r1, r2, #4
 800b81e:	6019      	strpl	r1, [r3, #0]
 800b820:	6816      	ldrpl	r6, [r2, #0]
 800b822:	2700      	movs	r7, #0
 800b824:	69a0      	ldr	r0, [r4, #24]
 800b826:	b188      	cbz	r0, 800b84c <_scanf_chars+0x58>
 800b828:	2801      	cmp	r0, #1
 800b82a:	d107      	bne.n	800b83c <_scanf_chars+0x48>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	781a      	ldrb	r2, [r3, #0]
 800b830:	6963      	ldr	r3, [r4, #20]
 800b832:	5c9b      	ldrb	r3, [r3, r2]
 800b834:	b953      	cbnz	r3, 800b84c <_scanf_chars+0x58>
 800b836:	2f00      	cmp	r7, #0
 800b838:	d031      	beq.n	800b89e <_scanf_chars+0xaa>
 800b83a:	e022      	b.n	800b882 <_scanf_chars+0x8e>
 800b83c:	2802      	cmp	r0, #2
 800b83e:	d120      	bne.n	800b882 <_scanf_chars+0x8e>
 800b840:	682b      	ldr	r3, [r5, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b848:	071b      	lsls	r3, r3, #28
 800b84a:	d41a      	bmi.n	800b882 <_scanf_chars+0x8e>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	06da      	lsls	r2, r3, #27
 800b850:	bf5e      	ittt	pl
 800b852:	682b      	ldrpl	r3, [r5, #0]
 800b854:	781b      	ldrbpl	r3, [r3, #0]
 800b856:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b85a:	682a      	ldr	r2, [r5, #0]
 800b85c:	686b      	ldr	r3, [r5, #4]
 800b85e:	3201      	adds	r2, #1
 800b860:	602a      	str	r2, [r5, #0]
 800b862:	68a2      	ldr	r2, [r4, #8]
 800b864:	3b01      	subs	r3, #1
 800b866:	3a01      	subs	r2, #1
 800b868:	606b      	str	r3, [r5, #4]
 800b86a:	3701      	adds	r7, #1
 800b86c:	60a2      	str	r2, [r4, #8]
 800b86e:	b142      	cbz	r2, 800b882 <_scanf_chars+0x8e>
 800b870:	2b00      	cmp	r3, #0
 800b872:	dcd7      	bgt.n	800b824 <_scanf_chars+0x30>
 800b874:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b878:	4629      	mov	r1, r5
 800b87a:	4640      	mov	r0, r8
 800b87c:	4798      	blx	r3
 800b87e:	2800      	cmp	r0, #0
 800b880:	d0d0      	beq.n	800b824 <_scanf_chars+0x30>
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	f013 0310 	ands.w	r3, r3, #16
 800b888:	d105      	bne.n	800b896 <_scanf_chars+0xa2>
 800b88a:	68e2      	ldr	r2, [r4, #12]
 800b88c:	3201      	adds	r2, #1
 800b88e:	60e2      	str	r2, [r4, #12]
 800b890:	69a2      	ldr	r2, [r4, #24]
 800b892:	b102      	cbz	r2, 800b896 <_scanf_chars+0xa2>
 800b894:	7033      	strb	r3, [r6, #0]
 800b896:	6923      	ldr	r3, [r4, #16]
 800b898:	443b      	add	r3, r7
 800b89a:	6123      	str	r3, [r4, #16]
 800b89c:	2000      	movs	r0, #0
 800b89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a2:	bf00      	nop
 800b8a4:	0800ce79 	.word	0x0800ce79

0800b8a8 <_scanf_i>:
 800b8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ac:	4698      	mov	r8, r3
 800b8ae:	4b74      	ldr	r3, [pc, #464]	@ (800ba80 <_scanf_i+0x1d8>)
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	4682      	mov	sl, r0
 800b8b4:	4616      	mov	r6, r2
 800b8b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	ab03      	add	r3, sp, #12
 800b8be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8c2:	4b70      	ldr	r3, [pc, #448]	@ (800ba84 <_scanf_i+0x1dc>)
 800b8c4:	69a1      	ldr	r1, [r4, #24]
 800b8c6:	4a70      	ldr	r2, [pc, #448]	@ (800ba88 <_scanf_i+0x1e0>)
 800b8c8:	2903      	cmp	r1, #3
 800b8ca:	bf08      	it	eq
 800b8cc:	461a      	moveq	r2, r3
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	9201      	str	r2, [sp, #4]
 800b8d2:	1e5a      	subs	r2, r3, #1
 800b8d4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b8d8:	bf88      	it	hi
 800b8da:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b8de:	4627      	mov	r7, r4
 800b8e0:	bf82      	ittt	hi
 800b8e2:	eb03 0905 	addhi.w	r9, r3, r5
 800b8e6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b8ea:	60a3      	strhi	r3, [r4, #8]
 800b8ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b8f0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b8f4:	bf98      	it	ls
 800b8f6:	f04f 0900 	movls.w	r9, #0
 800b8fa:	6023      	str	r3, [r4, #0]
 800b8fc:	463d      	mov	r5, r7
 800b8fe:	f04f 0b00 	mov.w	fp, #0
 800b902:	6831      	ldr	r1, [r6, #0]
 800b904:	ab03      	add	r3, sp, #12
 800b906:	7809      	ldrb	r1, [r1, #0]
 800b908:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b90c:	2202      	movs	r2, #2
 800b90e:	f7f4 fc5f 	bl	80001d0 <memchr>
 800b912:	b328      	cbz	r0, 800b960 <_scanf_i+0xb8>
 800b914:	f1bb 0f01 	cmp.w	fp, #1
 800b918:	d159      	bne.n	800b9ce <_scanf_i+0x126>
 800b91a:	6862      	ldr	r2, [r4, #4]
 800b91c:	b92a      	cbnz	r2, 800b92a <_scanf_i+0x82>
 800b91e:	6822      	ldr	r2, [r4, #0]
 800b920:	2108      	movs	r1, #8
 800b922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b926:	6061      	str	r1, [r4, #4]
 800b928:	6022      	str	r2, [r4, #0]
 800b92a:	6822      	ldr	r2, [r4, #0]
 800b92c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b930:	6022      	str	r2, [r4, #0]
 800b932:	68a2      	ldr	r2, [r4, #8]
 800b934:	1e51      	subs	r1, r2, #1
 800b936:	60a1      	str	r1, [r4, #8]
 800b938:	b192      	cbz	r2, 800b960 <_scanf_i+0xb8>
 800b93a:	6832      	ldr	r2, [r6, #0]
 800b93c:	1c51      	adds	r1, r2, #1
 800b93e:	6031      	str	r1, [r6, #0]
 800b940:	7812      	ldrb	r2, [r2, #0]
 800b942:	f805 2b01 	strb.w	r2, [r5], #1
 800b946:	6872      	ldr	r2, [r6, #4]
 800b948:	3a01      	subs	r2, #1
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	6072      	str	r2, [r6, #4]
 800b94e:	dc07      	bgt.n	800b960 <_scanf_i+0xb8>
 800b950:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b954:	4631      	mov	r1, r6
 800b956:	4650      	mov	r0, sl
 800b958:	4790      	blx	r2
 800b95a:	2800      	cmp	r0, #0
 800b95c:	f040 8085 	bne.w	800ba6a <_scanf_i+0x1c2>
 800b960:	f10b 0b01 	add.w	fp, fp, #1
 800b964:	f1bb 0f03 	cmp.w	fp, #3
 800b968:	d1cb      	bne.n	800b902 <_scanf_i+0x5a>
 800b96a:	6863      	ldr	r3, [r4, #4]
 800b96c:	b90b      	cbnz	r3, 800b972 <_scanf_i+0xca>
 800b96e:	230a      	movs	r3, #10
 800b970:	6063      	str	r3, [r4, #4]
 800b972:	6863      	ldr	r3, [r4, #4]
 800b974:	4945      	ldr	r1, [pc, #276]	@ (800ba8c <_scanf_i+0x1e4>)
 800b976:	6960      	ldr	r0, [r4, #20]
 800b978:	1ac9      	subs	r1, r1, r3
 800b97a:	f000 f935 	bl	800bbe8 <__sccl>
 800b97e:	f04f 0b00 	mov.w	fp, #0
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	6822      	ldr	r2, [r4, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d03d      	beq.n	800ba06 <_scanf_i+0x15e>
 800b98a:	6831      	ldr	r1, [r6, #0]
 800b98c:	6960      	ldr	r0, [r4, #20]
 800b98e:	f891 c000 	ldrb.w	ip, [r1]
 800b992:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b996:	2800      	cmp	r0, #0
 800b998:	d035      	beq.n	800ba06 <_scanf_i+0x15e>
 800b99a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b99e:	d124      	bne.n	800b9ea <_scanf_i+0x142>
 800b9a0:	0510      	lsls	r0, r2, #20
 800b9a2:	d522      	bpl.n	800b9ea <_scanf_i+0x142>
 800b9a4:	f10b 0b01 	add.w	fp, fp, #1
 800b9a8:	f1b9 0f00 	cmp.w	r9, #0
 800b9ac:	d003      	beq.n	800b9b6 <_scanf_i+0x10e>
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b9b4:	60a3      	str	r3, [r4, #8]
 800b9b6:	6873      	ldr	r3, [r6, #4]
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	6073      	str	r3, [r6, #4]
 800b9be:	dd1b      	ble.n	800b9f8 <_scanf_i+0x150>
 800b9c0:	6833      	ldr	r3, [r6, #0]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	6033      	str	r3, [r6, #0]
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	60a3      	str	r3, [r4, #8]
 800b9cc:	e7d9      	b.n	800b982 <_scanf_i+0xda>
 800b9ce:	f1bb 0f02 	cmp.w	fp, #2
 800b9d2:	d1ae      	bne.n	800b932 <_scanf_i+0x8a>
 800b9d4:	6822      	ldr	r2, [r4, #0]
 800b9d6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b9da:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b9de:	d1bf      	bne.n	800b960 <_scanf_i+0xb8>
 800b9e0:	2110      	movs	r1, #16
 800b9e2:	6061      	str	r1, [r4, #4]
 800b9e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b9e8:	e7a2      	b.n	800b930 <_scanf_i+0x88>
 800b9ea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b9ee:	6022      	str	r2, [r4, #0]
 800b9f0:	780b      	ldrb	r3, [r1, #0]
 800b9f2:	f805 3b01 	strb.w	r3, [r5], #1
 800b9f6:	e7de      	b.n	800b9b6 <_scanf_i+0x10e>
 800b9f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4650      	mov	r0, sl
 800ba00:	4798      	blx	r3
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d0df      	beq.n	800b9c6 <_scanf_i+0x11e>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	05d9      	lsls	r1, r3, #23
 800ba0a:	d50d      	bpl.n	800ba28 <_scanf_i+0x180>
 800ba0c:	42bd      	cmp	r5, r7
 800ba0e:	d909      	bls.n	800ba24 <_scanf_i+0x17c>
 800ba10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ba14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba18:	4632      	mov	r2, r6
 800ba1a:	4650      	mov	r0, sl
 800ba1c:	4798      	blx	r3
 800ba1e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ba22:	464d      	mov	r5, r9
 800ba24:	42bd      	cmp	r5, r7
 800ba26:	d028      	beq.n	800ba7a <_scanf_i+0x1d2>
 800ba28:	6822      	ldr	r2, [r4, #0]
 800ba2a:	f012 0210 	ands.w	r2, r2, #16
 800ba2e:	d113      	bne.n	800ba58 <_scanf_i+0x1b0>
 800ba30:	702a      	strb	r2, [r5, #0]
 800ba32:	6863      	ldr	r3, [r4, #4]
 800ba34:	9e01      	ldr	r6, [sp, #4]
 800ba36:	4639      	mov	r1, r7
 800ba38:	4650      	mov	r0, sl
 800ba3a:	47b0      	blx	r6
 800ba3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba40:	6821      	ldr	r1, [r4, #0]
 800ba42:	1d1a      	adds	r2, r3, #4
 800ba44:	f8c8 2000 	str.w	r2, [r8]
 800ba48:	f011 0f20 	tst.w	r1, #32
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	d00f      	beq.n	800ba70 <_scanf_i+0x1c8>
 800ba50:	6018      	str	r0, [r3, #0]
 800ba52:	68e3      	ldr	r3, [r4, #12]
 800ba54:	3301      	adds	r3, #1
 800ba56:	60e3      	str	r3, [r4, #12]
 800ba58:	6923      	ldr	r3, [r4, #16]
 800ba5a:	1bed      	subs	r5, r5, r7
 800ba5c:	445d      	add	r5, fp
 800ba5e:	442b      	add	r3, r5
 800ba60:	6123      	str	r3, [r4, #16]
 800ba62:	2000      	movs	r0, #0
 800ba64:	b007      	add	sp, #28
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6a:	f04f 0b00 	mov.w	fp, #0
 800ba6e:	e7ca      	b.n	800ba06 <_scanf_i+0x15e>
 800ba70:	07ca      	lsls	r2, r1, #31
 800ba72:	bf4c      	ite	mi
 800ba74:	8018      	strhmi	r0, [r3, #0]
 800ba76:	6018      	strpl	r0, [r3, #0]
 800ba78:	e7eb      	b.n	800ba52 <_scanf_i+0x1aa>
 800ba7a:	2001      	movs	r0, #1
 800ba7c:	e7f2      	b.n	800ba64 <_scanf_i+0x1bc>
 800ba7e:	bf00      	nop
 800ba80:	0800cbd8 	.word	0x0800cbd8
 800ba84:	0800b1a9 	.word	0x0800b1a9
 800ba88:	0800c5ad 	.word	0x0800c5ad
 800ba8c:	0800cf9a 	.word	0x0800cf9a

0800ba90 <__sflush_r>:
 800ba90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba98:	0716      	lsls	r6, r2, #28
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	d454      	bmi.n	800bb4a <__sflush_r+0xba>
 800baa0:	684b      	ldr	r3, [r1, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	dc02      	bgt.n	800baac <__sflush_r+0x1c>
 800baa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	dd48      	ble.n	800bb3e <__sflush_r+0xae>
 800baac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800baae:	2e00      	cmp	r6, #0
 800bab0:	d045      	beq.n	800bb3e <__sflush_r+0xae>
 800bab2:	2300      	movs	r3, #0
 800bab4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bab8:	682f      	ldr	r7, [r5, #0]
 800baba:	6a21      	ldr	r1, [r4, #32]
 800babc:	602b      	str	r3, [r5, #0]
 800babe:	d030      	beq.n	800bb22 <__sflush_r+0x92>
 800bac0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	0759      	lsls	r1, r3, #29
 800bac6:	d505      	bpl.n	800bad4 <__sflush_r+0x44>
 800bac8:	6863      	ldr	r3, [r4, #4]
 800baca:	1ad2      	subs	r2, r2, r3
 800bacc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bace:	b10b      	cbz	r3, 800bad4 <__sflush_r+0x44>
 800bad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bad2:	1ad2      	subs	r2, r2, r3
 800bad4:	2300      	movs	r3, #0
 800bad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bad8:	6a21      	ldr	r1, [r4, #32]
 800bada:	4628      	mov	r0, r5
 800badc:	47b0      	blx	r6
 800bade:	1c43      	adds	r3, r0, #1
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	d106      	bne.n	800baf2 <__sflush_r+0x62>
 800bae4:	6829      	ldr	r1, [r5, #0]
 800bae6:	291d      	cmp	r1, #29
 800bae8:	d82b      	bhi.n	800bb42 <__sflush_r+0xb2>
 800baea:	4a2a      	ldr	r2, [pc, #168]	@ (800bb94 <__sflush_r+0x104>)
 800baec:	410a      	asrs	r2, r1
 800baee:	07d6      	lsls	r6, r2, #31
 800baf0:	d427      	bmi.n	800bb42 <__sflush_r+0xb2>
 800baf2:	2200      	movs	r2, #0
 800baf4:	6062      	str	r2, [r4, #4]
 800baf6:	04d9      	lsls	r1, r3, #19
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	6022      	str	r2, [r4, #0]
 800bafc:	d504      	bpl.n	800bb08 <__sflush_r+0x78>
 800bafe:	1c42      	adds	r2, r0, #1
 800bb00:	d101      	bne.n	800bb06 <__sflush_r+0x76>
 800bb02:	682b      	ldr	r3, [r5, #0]
 800bb04:	b903      	cbnz	r3, 800bb08 <__sflush_r+0x78>
 800bb06:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb0a:	602f      	str	r7, [r5, #0]
 800bb0c:	b1b9      	cbz	r1, 800bb3e <__sflush_r+0xae>
 800bb0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb12:	4299      	cmp	r1, r3
 800bb14:	d002      	beq.n	800bb1c <__sflush_r+0x8c>
 800bb16:	4628      	mov	r0, r5
 800bb18:	f7fd ff12 	bl	8009940 <_free_r>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb20:	e00d      	b.n	800bb3e <__sflush_r+0xae>
 800bb22:	2301      	movs	r3, #1
 800bb24:	4628      	mov	r0, r5
 800bb26:	47b0      	blx	r6
 800bb28:	4602      	mov	r2, r0
 800bb2a:	1c50      	adds	r0, r2, #1
 800bb2c:	d1c9      	bne.n	800bac2 <__sflush_r+0x32>
 800bb2e:	682b      	ldr	r3, [r5, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0c6      	beq.n	800bac2 <__sflush_r+0x32>
 800bb34:	2b1d      	cmp	r3, #29
 800bb36:	d001      	beq.n	800bb3c <__sflush_r+0xac>
 800bb38:	2b16      	cmp	r3, #22
 800bb3a:	d11e      	bne.n	800bb7a <__sflush_r+0xea>
 800bb3c:	602f      	str	r7, [r5, #0]
 800bb3e:	2000      	movs	r0, #0
 800bb40:	e022      	b.n	800bb88 <__sflush_r+0xf8>
 800bb42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb46:	b21b      	sxth	r3, r3
 800bb48:	e01b      	b.n	800bb82 <__sflush_r+0xf2>
 800bb4a:	690f      	ldr	r7, [r1, #16]
 800bb4c:	2f00      	cmp	r7, #0
 800bb4e:	d0f6      	beq.n	800bb3e <__sflush_r+0xae>
 800bb50:	0793      	lsls	r3, r2, #30
 800bb52:	680e      	ldr	r6, [r1, #0]
 800bb54:	bf08      	it	eq
 800bb56:	694b      	ldreq	r3, [r1, #20]
 800bb58:	600f      	str	r7, [r1, #0]
 800bb5a:	bf18      	it	ne
 800bb5c:	2300      	movne	r3, #0
 800bb5e:	eba6 0807 	sub.w	r8, r6, r7
 800bb62:	608b      	str	r3, [r1, #8]
 800bb64:	f1b8 0f00 	cmp.w	r8, #0
 800bb68:	dde9      	ble.n	800bb3e <__sflush_r+0xae>
 800bb6a:	6a21      	ldr	r1, [r4, #32]
 800bb6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb6e:	4643      	mov	r3, r8
 800bb70:	463a      	mov	r2, r7
 800bb72:	4628      	mov	r0, r5
 800bb74:	47b0      	blx	r6
 800bb76:	2800      	cmp	r0, #0
 800bb78:	dc08      	bgt.n	800bb8c <__sflush_r+0xfc>
 800bb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb82:	81a3      	strh	r3, [r4, #12]
 800bb84:	f04f 30ff 	mov.w	r0, #4294967295
 800bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb8c:	4407      	add	r7, r0
 800bb8e:	eba8 0800 	sub.w	r8, r8, r0
 800bb92:	e7e7      	b.n	800bb64 <__sflush_r+0xd4>
 800bb94:	dfbffffe 	.word	0xdfbffffe

0800bb98 <_fflush_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	690b      	ldr	r3, [r1, #16]
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	b913      	cbnz	r3, 800bba8 <_fflush_r+0x10>
 800bba2:	2500      	movs	r5, #0
 800bba4:	4628      	mov	r0, r5
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	b118      	cbz	r0, 800bbb2 <_fflush_r+0x1a>
 800bbaa:	6a03      	ldr	r3, [r0, #32]
 800bbac:	b90b      	cbnz	r3, 800bbb2 <_fflush_r+0x1a>
 800bbae:	f7fc ff0d 	bl	80089cc <__sinit>
 800bbb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d0f3      	beq.n	800bba2 <_fflush_r+0xa>
 800bbba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbbc:	07d0      	lsls	r0, r2, #31
 800bbbe:	d404      	bmi.n	800bbca <_fflush_r+0x32>
 800bbc0:	0599      	lsls	r1, r3, #22
 800bbc2:	d402      	bmi.n	800bbca <_fflush_r+0x32>
 800bbc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbc6:	f7fd f866 	bl	8008c96 <__retarget_lock_acquire_recursive>
 800bbca:	4628      	mov	r0, r5
 800bbcc:	4621      	mov	r1, r4
 800bbce:	f7ff ff5f 	bl	800ba90 <__sflush_r>
 800bbd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbd4:	07da      	lsls	r2, r3, #31
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	d4e4      	bmi.n	800bba4 <_fflush_r+0xc>
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	059b      	lsls	r3, r3, #22
 800bbde:	d4e1      	bmi.n	800bba4 <_fflush_r+0xc>
 800bbe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbe2:	f7fd f859 	bl	8008c98 <__retarget_lock_release_recursive>
 800bbe6:	e7dd      	b.n	800bba4 <_fflush_r+0xc>

0800bbe8 <__sccl>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	780b      	ldrb	r3, [r1, #0]
 800bbec:	4604      	mov	r4, r0
 800bbee:	2b5e      	cmp	r3, #94	@ 0x5e
 800bbf0:	bf0b      	itete	eq
 800bbf2:	784b      	ldrbeq	r3, [r1, #1]
 800bbf4:	1c4a      	addne	r2, r1, #1
 800bbf6:	1c8a      	addeq	r2, r1, #2
 800bbf8:	2100      	movne	r1, #0
 800bbfa:	bf08      	it	eq
 800bbfc:	2101      	moveq	r1, #1
 800bbfe:	3801      	subs	r0, #1
 800bc00:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800bc04:	f800 1f01 	strb.w	r1, [r0, #1]!
 800bc08:	42a8      	cmp	r0, r5
 800bc0a:	d1fb      	bne.n	800bc04 <__sccl+0x1c>
 800bc0c:	b90b      	cbnz	r3, 800bc12 <__sccl+0x2a>
 800bc0e:	1e50      	subs	r0, r2, #1
 800bc10:	bd70      	pop	{r4, r5, r6, pc}
 800bc12:	f081 0101 	eor.w	r1, r1, #1
 800bc16:	54e1      	strb	r1, [r4, r3]
 800bc18:	4610      	mov	r0, r2
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bc20:	2d2d      	cmp	r5, #45	@ 0x2d
 800bc22:	d005      	beq.n	800bc30 <__sccl+0x48>
 800bc24:	2d5d      	cmp	r5, #93	@ 0x5d
 800bc26:	d016      	beq.n	800bc56 <__sccl+0x6e>
 800bc28:	2d00      	cmp	r5, #0
 800bc2a:	d0f1      	beq.n	800bc10 <__sccl+0x28>
 800bc2c:	462b      	mov	r3, r5
 800bc2e:	e7f2      	b.n	800bc16 <__sccl+0x2e>
 800bc30:	7846      	ldrb	r6, [r0, #1]
 800bc32:	2e5d      	cmp	r6, #93	@ 0x5d
 800bc34:	d0fa      	beq.n	800bc2c <__sccl+0x44>
 800bc36:	42b3      	cmp	r3, r6
 800bc38:	dcf8      	bgt.n	800bc2c <__sccl+0x44>
 800bc3a:	3002      	adds	r0, #2
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	3201      	adds	r2, #1
 800bc40:	4296      	cmp	r6, r2
 800bc42:	54a1      	strb	r1, [r4, r2]
 800bc44:	dcfb      	bgt.n	800bc3e <__sccl+0x56>
 800bc46:	1af2      	subs	r2, r6, r3
 800bc48:	3a01      	subs	r2, #1
 800bc4a:	1c5d      	adds	r5, r3, #1
 800bc4c:	42b3      	cmp	r3, r6
 800bc4e:	bfa8      	it	ge
 800bc50:	2200      	movge	r2, #0
 800bc52:	18ab      	adds	r3, r5, r2
 800bc54:	e7e1      	b.n	800bc1a <__sccl+0x32>
 800bc56:	4610      	mov	r0, r2
 800bc58:	e7da      	b.n	800bc10 <__sccl+0x28>

0800bc5a <__submore>:
 800bc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5e:	460c      	mov	r4, r1
 800bc60:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bc62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc66:	4299      	cmp	r1, r3
 800bc68:	d11d      	bne.n	800bca6 <__submore+0x4c>
 800bc6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bc6e:	f7fd fedb 	bl	8009a28 <_malloc_r>
 800bc72:	b918      	cbnz	r0, 800bc7c <__submore+0x22>
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc80:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bc82:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bc86:	6360      	str	r0, [r4, #52]	@ 0x34
 800bc88:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800bc8c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bc90:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800bc94:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bc98:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800bc9c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bca0:	6020      	str	r0, [r4, #0]
 800bca2:	2000      	movs	r0, #0
 800bca4:	e7e8      	b.n	800bc78 <__submore+0x1e>
 800bca6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bca8:	0077      	lsls	r7, r6, #1
 800bcaa:	463a      	mov	r2, r7
 800bcac:	f000 fbe1 	bl	800c472 <_realloc_r>
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d0de      	beq.n	800bc74 <__submore+0x1a>
 800bcb6:	eb00 0806 	add.w	r8, r0, r6
 800bcba:	4601      	mov	r1, r0
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	4640      	mov	r0, r8
 800bcc0:	f000 f842 	bl	800bd48 <memcpy>
 800bcc4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bcc8:	f8c4 8000 	str.w	r8, [r4]
 800bccc:	e7e9      	b.n	800bca2 <__submore+0x48>

0800bcce <memmove>:
 800bcce:	4288      	cmp	r0, r1
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	eb01 0402 	add.w	r4, r1, r2
 800bcd6:	d902      	bls.n	800bcde <memmove+0x10>
 800bcd8:	4284      	cmp	r4, r0
 800bcda:	4623      	mov	r3, r4
 800bcdc:	d807      	bhi.n	800bcee <memmove+0x20>
 800bcde:	1e43      	subs	r3, r0, #1
 800bce0:	42a1      	cmp	r1, r4
 800bce2:	d008      	beq.n	800bcf6 <memmove+0x28>
 800bce4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bce8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcec:	e7f8      	b.n	800bce0 <memmove+0x12>
 800bcee:	4402      	add	r2, r0
 800bcf0:	4601      	mov	r1, r0
 800bcf2:	428a      	cmp	r2, r1
 800bcf4:	d100      	bne.n	800bcf8 <memmove+0x2a>
 800bcf6:	bd10      	pop	{r4, pc}
 800bcf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcfc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd00:	e7f7      	b.n	800bcf2 <memmove+0x24>

0800bd02 <strncmp>:
 800bd02:	b510      	push	{r4, lr}
 800bd04:	b16a      	cbz	r2, 800bd22 <strncmp+0x20>
 800bd06:	3901      	subs	r1, #1
 800bd08:	1884      	adds	r4, r0, r2
 800bd0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d103      	bne.n	800bd1e <strncmp+0x1c>
 800bd16:	42a0      	cmp	r0, r4
 800bd18:	d001      	beq.n	800bd1e <strncmp+0x1c>
 800bd1a:	2a00      	cmp	r2, #0
 800bd1c:	d1f5      	bne.n	800bd0a <strncmp+0x8>
 800bd1e:	1ad0      	subs	r0, r2, r3
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	4610      	mov	r0, r2
 800bd24:	e7fc      	b.n	800bd20 <strncmp+0x1e>
	...

0800bd28 <_sbrk_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4d06      	ldr	r5, [pc, #24]	@ (800bd44 <_sbrk_r+0x1c>)
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4604      	mov	r4, r0
 800bd30:	4608      	mov	r0, r1
 800bd32:	602b      	str	r3, [r5, #0]
 800bd34:	f7f7 f9d6 	bl	80030e4 <_sbrk>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	d102      	bne.n	800bd42 <_sbrk_r+0x1a>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	b103      	cbz	r3, 800bd42 <_sbrk_r+0x1a>
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	bd38      	pop	{r3, r4, r5, pc}
 800bd44:	20000a4c 	.word	0x20000a4c

0800bd48 <memcpy>:
 800bd48:	440a      	add	r2, r1
 800bd4a:	4291      	cmp	r1, r2
 800bd4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd50:	d100      	bne.n	800bd54 <memcpy+0xc>
 800bd52:	4770      	bx	lr
 800bd54:	b510      	push	{r4, lr}
 800bd56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd5e:	4291      	cmp	r1, r2
 800bd60:	d1f9      	bne.n	800bd56 <memcpy+0xe>
 800bd62:	bd10      	pop	{r4, pc}
 800bd64:	0000      	movs	r0, r0
	...

0800bd68 <nan>:
 800bd68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bd70 <nan+0x8>
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	00000000 	.word	0x00000000
 800bd74:	7ff80000 	.word	0x7ff80000

0800bd78 <__assert_func>:
 800bd78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd7a:	4614      	mov	r4, r2
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	4b09      	ldr	r3, [pc, #36]	@ (800bda4 <__assert_func+0x2c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4605      	mov	r5, r0
 800bd84:	68d8      	ldr	r0, [r3, #12]
 800bd86:	b954      	cbnz	r4, 800bd9e <__assert_func+0x26>
 800bd88:	4b07      	ldr	r3, [pc, #28]	@ (800bda8 <__assert_func+0x30>)
 800bd8a:	461c      	mov	r4, r3
 800bd8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd90:	9100      	str	r1, [sp, #0]
 800bd92:	462b      	mov	r3, r5
 800bd94:	4905      	ldr	r1, [pc, #20]	@ (800bdac <__assert_func+0x34>)
 800bd96:	f000 fc19 	bl	800c5cc <fiprintf>
 800bd9a:	f000 fc29 	bl	800c5f0 <abort>
 800bd9e:	4b04      	ldr	r3, [pc, #16]	@ (800bdb0 <__assert_func+0x38>)
 800bda0:	e7f4      	b.n	800bd8c <__assert_func+0x14>
 800bda2:	bf00      	nop
 800bda4:	200000fc 	.word	0x200000fc
 800bda8:	0800cfe8 	.word	0x0800cfe8
 800bdac:	0800cfba 	.word	0x0800cfba
 800bdb0:	0800cfad 	.word	0x0800cfad

0800bdb4 <_calloc_r>:
 800bdb4:	b570      	push	{r4, r5, r6, lr}
 800bdb6:	fba1 5402 	umull	r5, r4, r1, r2
 800bdba:	b93c      	cbnz	r4, 800bdcc <_calloc_r+0x18>
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	f7fd fe33 	bl	8009a28 <_malloc_r>
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	b928      	cbnz	r0, 800bdd2 <_calloc_r+0x1e>
 800bdc6:	2600      	movs	r6, #0
 800bdc8:	4630      	mov	r0, r6
 800bdca:	bd70      	pop	{r4, r5, r6, pc}
 800bdcc:	220c      	movs	r2, #12
 800bdce:	6002      	str	r2, [r0, #0]
 800bdd0:	e7f9      	b.n	800bdc6 <_calloc_r+0x12>
 800bdd2:	462a      	mov	r2, r5
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	f7fc febe 	bl	8008b56 <memset>
 800bdda:	e7f5      	b.n	800bdc8 <_calloc_r+0x14>

0800bddc <rshift>:
 800bddc:	6903      	ldr	r3, [r0, #16]
 800bdde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bde2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bde6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bdea:	f100 0414 	add.w	r4, r0, #20
 800bdee:	dd45      	ble.n	800be7c <rshift+0xa0>
 800bdf0:	f011 011f 	ands.w	r1, r1, #31
 800bdf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bdf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bdfc:	d10c      	bne.n	800be18 <rshift+0x3c>
 800bdfe:	f100 0710 	add.w	r7, r0, #16
 800be02:	4629      	mov	r1, r5
 800be04:	42b1      	cmp	r1, r6
 800be06:	d334      	bcc.n	800be72 <rshift+0x96>
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	1eea      	subs	r2, r5, #3
 800be0e:	4296      	cmp	r6, r2
 800be10:	bf38      	it	cc
 800be12:	2300      	movcc	r3, #0
 800be14:	4423      	add	r3, r4
 800be16:	e015      	b.n	800be44 <rshift+0x68>
 800be18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800be1c:	f1c1 0820 	rsb	r8, r1, #32
 800be20:	40cf      	lsrs	r7, r1
 800be22:	f105 0e04 	add.w	lr, r5, #4
 800be26:	46a1      	mov	r9, r4
 800be28:	4576      	cmp	r6, lr
 800be2a:	46f4      	mov	ip, lr
 800be2c:	d815      	bhi.n	800be5a <rshift+0x7e>
 800be2e:	1a9a      	subs	r2, r3, r2
 800be30:	0092      	lsls	r2, r2, #2
 800be32:	3a04      	subs	r2, #4
 800be34:	3501      	adds	r5, #1
 800be36:	42ae      	cmp	r6, r5
 800be38:	bf38      	it	cc
 800be3a:	2200      	movcc	r2, #0
 800be3c:	18a3      	adds	r3, r4, r2
 800be3e:	50a7      	str	r7, [r4, r2]
 800be40:	b107      	cbz	r7, 800be44 <rshift+0x68>
 800be42:	3304      	adds	r3, #4
 800be44:	1b1a      	subs	r2, r3, r4
 800be46:	42a3      	cmp	r3, r4
 800be48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be4c:	bf08      	it	eq
 800be4e:	2300      	moveq	r3, #0
 800be50:	6102      	str	r2, [r0, #16]
 800be52:	bf08      	it	eq
 800be54:	6143      	streq	r3, [r0, #20]
 800be56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be5a:	f8dc c000 	ldr.w	ip, [ip]
 800be5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800be62:	ea4c 0707 	orr.w	r7, ip, r7
 800be66:	f849 7b04 	str.w	r7, [r9], #4
 800be6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be6e:	40cf      	lsrs	r7, r1
 800be70:	e7da      	b.n	800be28 <rshift+0x4c>
 800be72:	f851 cb04 	ldr.w	ip, [r1], #4
 800be76:	f847 cf04 	str.w	ip, [r7, #4]!
 800be7a:	e7c3      	b.n	800be04 <rshift+0x28>
 800be7c:	4623      	mov	r3, r4
 800be7e:	e7e1      	b.n	800be44 <rshift+0x68>

0800be80 <__hexdig_fun>:
 800be80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800be84:	2b09      	cmp	r3, #9
 800be86:	d802      	bhi.n	800be8e <__hexdig_fun+0xe>
 800be88:	3820      	subs	r0, #32
 800be8a:	b2c0      	uxtb	r0, r0
 800be8c:	4770      	bx	lr
 800be8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800be92:	2b05      	cmp	r3, #5
 800be94:	d801      	bhi.n	800be9a <__hexdig_fun+0x1a>
 800be96:	3847      	subs	r0, #71	@ 0x47
 800be98:	e7f7      	b.n	800be8a <__hexdig_fun+0xa>
 800be9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800be9e:	2b05      	cmp	r3, #5
 800bea0:	d801      	bhi.n	800bea6 <__hexdig_fun+0x26>
 800bea2:	3827      	subs	r0, #39	@ 0x27
 800bea4:	e7f1      	b.n	800be8a <__hexdig_fun+0xa>
 800bea6:	2000      	movs	r0, #0
 800bea8:	4770      	bx	lr
	...

0800beac <__gethex>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	b085      	sub	sp, #20
 800beb2:	468a      	mov	sl, r1
 800beb4:	9302      	str	r3, [sp, #8]
 800beb6:	680b      	ldr	r3, [r1, #0]
 800beb8:	9001      	str	r0, [sp, #4]
 800beba:	4690      	mov	r8, r2
 800bebc:	1c9c      	adds	r4, r3, #2
 800bebe:	46a1      	mov	r9, r4
 800bec0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bec4:	2830      	cmp	r0, #48	@ 0x30
 800bec6:	d0fa      	beq.n	800bebe <__gethex+0x12>
 800bec8:	eba9 0303 	sub.w	r3, r9, r3
 800becc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bed0:	f7ff ffd6 	bl	800be80 <__hexdig_fun>
 800bed4:	4605      	mov	r5, r0
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d168      	bne.n	800bfac <__gethex+0x100>
 800beda:	49a0      	ldr	r1, [pc, #640]	@ (800c15c <__gethex+0x2b0>)
 800bedc:	2201      	movs	r2, #1
 800bede:	4648      	mov	r0, r9
 800bee0:	f7ff ff0f 	bl	800bd02 <strncmp>
 800bee4:	4607      	mov	r7, r0
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d167      	bne.n	800bfba <__gethex+0x10e>
 800beea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800beee:	4626      	mov	r6, r4
 800bef0:	f7ff ffc6 	bl	800be80 <__hexdig_fun>
 800bef4:	2800      	cmp	r0, #0
 800bef6:	d062      	beq.n	800bfbe <__gethex+0x112>
 800bef8:	4623      	mov	r3, r4
 800befa:	7818      	ldrb	r0, [r3, #0]
 800befc:	2830      	cmp	r0, #48	@ 0x30
 800befe:	4699      	mov	r9, r3
 800bf00:	f103 0301 	add.w	r3, r3, #1
 800bf04:	d0f9      	beq.n	800befa <__gethex+0x4e>
 800bf06:	f7ff ffbb 	bl	800be80 <__hexdig_fun>
 800bf0a:	fab0 f580 	clz	r5, r0
 800bf0e:	096d      	lsrs	r5, r5, #5
 800bf10:	f04f 0b01 	mov.w	fp, #1
 800bf14:	464a      	mov	r2, r9
 800bf16:	4616      	mov	r6, r2
 800bf18:	3201      	adds	r2, #1
 800bf1a:	7830      	ldrb	r0, [r6, #0]
 800bf1c:	f7ff ffb0 	bl	800be80 <__hexdig_fun>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d1f8      	bne.n	800bf16 <__gethex+0x6a>
 800bf24:	498d      	ldr	r1, [pc, #564]	@ (800c15c <__gethex+0x2b0>)
 800bf26:	2201      	movs	r2, #1
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f7ff feea 	bl	800bd02 <strncmp>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d13f      	bne.n	800bfb2 <__gethex+0x106>
 800bf32:	b944      	cbnz	r4, 800bf46 <__gethex+0x9a>
 800bf34:	1c74      	adds	r4, r6, #1
 800bf36:	4622      	mov	r2, r4
 800bf38:	4616      	mov	r6, r2
 800bf3a:	3201      	adds	r2, #1
 800bf3c:	7830      	ldrb	r0, [r6, #0]
 800bf3e:	f7ff ff9f 	bl	800be80 <__hexdig_fun>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	d1f8      	bne.n	800bf38 <__gethex+0x8c>
 800bf46:	1ba4      	subs	r4, r4, r6
 800bf48:	00a7      	lsls	r7, r4, #2
 800bf4a:	7833      	ldrb	r3, [r6, #0]
 800bf4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bf50:	2b50      	cmp	r3, #80	@ 0x50
 800bf52:	d13e      	bne.n	800bfd2 <__gethex+0x126>
 800bf54:	7873      	ldrb	r3, [r6, #1]
 800bf56:	2b2b      	cmp	r3, #43	@ 0x2b
 800bf58:	d033      	beq.n	800bfc2 <__gethex+0x116>
 800bf5a:	2b2d      	cmp	r3, #45	@ 0x2d
 800bf5c:	d034      	beq.n	800bfc8 <__gethex+0x11c>
 800bf5e:	1c71      	adds	r1, r6, #1
 800bf60:	2400      	movs	r4, #0
 800bf62:	7808      	ldrb	r0, [r1, #0]
 800bf64:	f7ff ff8c 	bl	800be80 <__hexdig_fun>
 800bf68:	1e43      	subs	r3, r0, #1
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	2b18      	cmp	r3, #24
 800bf6e:	d830      	bhi.n	800bfd2 <__gethex+0x126>
 800bf70:	f1a0 0210 	sub.w	r2, r0, #16
 800bf74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf78:	f7ff ff82 	bl	800be80 <__hexdig_fun>
 800bf7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bf80:	fa5f fc8c 	uxtb.w	ip, ip
 800bf84:	f1bc 0f18 	cmp.w	ip, #24
 800bf88:	f04f 030a 	mov.w	r3, #10
 800bf8c:	d91e      	bls.n	800bfcc <__gethex+0x120>
 800bf8e:	b104      	cbz	r4, 800bf92 <__gethex+0xe6>
 800bf90:	4252      	negs	r2, r2
 800bf92:	4417      	add	r7, r2
 800bf94:	f8ca 1000 	str.w	r1, [sl]
 800bf98:	b1ed      	cbz	r5, 800bfd6 <__gethex+0x12a>
 800bf9a:	f1bb 0f00 	cmp.w	fp, #0
 800bf9e:	bf0c      	ite	eq
 800bfa0:	2506      	moveq	r5, #6
 800bfa2:	2500      	movne	r5, #0
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	b005      	add	sp, #20
 800bfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfac:	2500      	movs	r5, #0
 800bfae:	462c      	mov	r4, r5
 800bfb0:	e7b0      	b.n	800bf14 <__gethex+0x68>
 800bfb2:	2c00      	cmp	r4, #0
 800bfb4:	d1c7      	bne.n	800bf46 <__gethex+0x9a>
 800bfb6:	4627      	mov	r7, r4
 800bfb8:	e7c7      	b.n	800bf4a <__gethex+0x9e>
 800bfba:	464e      	mov	r6, r9
 800bfbc:	462f      	mov	r7, r5
 800bfbe:	2501      	movs	r5, #1
 800bfc0:	e7c3      	b.n	800bf4a <__gethex+0x9e>
 800bfc2:	2400      	movs	r4, #0
 800bfc4:	1cb1      	adds	r1, r6, #2
 800bfc6:	e7cc      	b.n	800bf62 <__gethex+0xb6>
 800bfc8:	2401      	movs	r4, #1
 800bfca:	e7fb      	b.n	800bfc4 <__gethex+0x118>
 800bfcc:	fb03 0002 	mla	r0, r3, r2, r0
 800bfd0:	e7ce      	b.n	800bf70 <__gethex+0xc4>
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	e7de      	b.n	800bf94 <__gethex+0xe8>
 800bfd6:	eba6 0309 	sub.w	r3, r6, r9
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	4629      	mov	r1, r5
 800bfde:	2b07      	cmp	r3, #7
 800bfe0:	dc0a      	bgt.n	800bff8 <__gethex+0x14c>
 800bfe2:	9801      	ldr	r0, [sp, #4]
 800bfe4:	f7fd fdac 	bl	8009b40 <_Balloc>
 800bfe8:	4604      	mov	r4, r0
 800bfea:	b940      	cbnz	r0, 800bffe <__gethex+0x152>
 800bfec:	4b5c      	ldr	r3, [pc, #368]	@ (800c160 <__gethex+0x2b4>)
 800bfee:	4602      	mov	r2, r0
 800bff0:	21e4      	movs	r1, #228	@ 0xe4
 800bff2:	485c      	ldr	r0, [pc, #368]	@ (800c164 <__gethex+0x2b8>)
 800bff4:	f7ff fec0 	bl	800bd78 <__assert_func>
 800bff8:	3101      	adds	r1, #1
 800bffa:	105b      	asrs	r3, r3, #1
 800bffc:	e7ef      	b.n	800bfde <__gethex+0x132>
 800bffe:	f100 0a14 	add.w	sl, r0, #20
 800c002:	2300      	movs	r3, #0
 800c004:	4655      	mov	r5, sl
 800c006:	469b      	mov	fp, r3
 800c008:	45b1      	cmp	r9, r6
 800c00a:	d337      	bcc.n	800c07c <__gethex+0x1d0>
 800c00c:	f845 bb04 	str.w	fp, [r5], #4
 800c010:	eba5 050a 	sub.w	r5, r5, sl
 800c014:	10ad      	asrs	r5, r5, #2
 800c016:	6125      	str	r5, [r4, #16]
 800c018:	4658      	mov	r0, fp
 800c01a:	f7fd fe83 	bl	8009d24 <__hi0bits>
 800c01e:	016d      	lsls	r5, r5, #5
 800c020:	f8d8 6000 	ldr.w	r6, [r8]
 800c024:	1a2d      	subs	r5, r5, r0
 800c026:	42b5      	cmp	r5, r6
 800c028:	dd54      	ble.n	800c0d4 <__gethex+0x228>
 800c02a:	1bad      	subs	r5, r5, r6
 800c02c:	4629      	mov	r1, r5
 800c02e:	4620      	mov	r0, r4
 800c030:	f7fe fa17 	bl	800a462 <__any_on>
 800c034:	4681      	mov	r9, r0
 800c036:	b178      	cbz	r0, 800c058 <__gethex+0x1ac>
 800c038:	1e6b      	subs	r3, r5, #1
 800c03a:	1159      	asrs	r1, r3, #5
 800c03c:	f003 021f 	and.w	r2, r3, #31
 800c040:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c044:	f04f 0901 	mov.w	r9, #1
 800c048:	fa09 f202 	lsl.w	r2, r9, r2
 800c04c:	420a      	tst	r2, r1
 800c04e:	d003      	beq.n	800c058 <__gethex+0x1ac>
 800c050:	454b      	cmp	r3, r9
 800c052:	dc36      	bgt.n	800c0c2 <__gethex+0x216>
 800c054:	f04f 0902 	mov.w	r9, #2
 800c058:	4629      	mov	r1, r5
 800c05a:	4620      	mov	r0, r4
 800c05c:	f7ff febe 	bl	800bddc <rshift>
 800c060:	442f      	add	r7, r5
 800c062:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c066:	42bb      	cmp	r3, r7
 800c068:	da42      	bge.n	800c0f0 <__gethex+0x244>
 800c06a:	9801      	ldr	r0, [sp, #4]
 800c06c:	4621      	mov	r1, r4
 800c06e:	f7fd fda7 	bl	8009bc0 <_Bfree>
 800c072:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c074:	2300      	movs	r3, #0
 800c076:	6013      	str	r3, [r2, #0]
 800c078:	25a3      	movs	r5, #163	@ 0xa3
 800c07a:	e793      	b.n	800bfa4 <__gethex+0xf8>
 800c07c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c080:	2a2e      	cmp	r2, #46	@ 0x2e
 800c082:	d012      	beq.n	800c0aa <__gethex+0x1fe>
 800c084:	2b20      	cmp	r3, #32
 800c086:	d104      	bne.n	800c092 <__gethex+0x1e6>
 800c088:	f845 bb04 	str.w	fp, [r5], #4
 800c08c:	f04f 0b00 	mov.w	fp, #0
 800c090:	465b      	mov	r3, fp
 800c092:	7830      	ldrb	r0, [r6, #0]
 800c094:	9303      	str	r3, [sp, #12]
 800c096:	f7ff fef3 	bl	800be80 <__hexdig_fun>
 800c09a:	9b03      	ldr	r3, [sp, #12]
 800c09c:	f000 000f 	and.w	r0, r0, #15
 800c0a0:	4098      	lsls	r0, r3
 800c0a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	e7ae      	b.n	800c008 <__gethex+0x15c>
 800c0aa:	45b1      	cmp	r9, r6
 800c0ac:	d8ea      	bhi.n	800c084 <__gethex+0x1d8>
 800c0ae:	492b      	ldr	r1, [pc, #172]	@ (800c15c <__gethex+0x2b0>)
 800c0b0:	9303      	str	r3, [sp, #12]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	f7ff fe24 	bl	800bd02 <strncmp>
 800c0ba:	9b03      	ldr	r3, [sp, #12]
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1e1      	bne.n	800c084 <__gethex+0x1d8>
 800c0c0:	e7a2      	b.n	800c008 <__gethex+0x15c>
 800c0c2:	1ea9      	subs	r1, r5, #2
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f7fe f9cc 	bl	800a462 <__any_on>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	d0c2      	beq.n	800c054 <__gethex+0x1a8>
 800c0ce:	f04f 0903 	mov.w	r9, #3
 800c0d2:	e7c1      	b.n	800c058 <__gethex+0x1ac>
 800c0d4:	da09      	bge.n	800c0ea <__gethex+0x23e>
 800c0d6:	1b75      	subs	r5, r6, r5
 800c0d8:	4621      	mov	r1, r4
 800c0da:	9801      	ldr	r0, [sp, #4]
 800c0dc:	462a      	mov	r2, r5
 800c0de:	f7fd ff87 	bl	8009ff0 <__lshift>
 800c0e2:	1b7f      	subs	r7, r7, r5
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	f100 0a14 	add.w	sl, r0, #20
 800c0ea:	f04f 0900 	mov.w	r9, #0
 800c0ee:	e7b8      	b.n	800c062 <__gethex+0x1b6>
 800c0f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c0f4:	42bd      	cmp	r5, r7
 800c0f6:	dd6f      	ble.n	800c1d8 <__gethex+0x32c>
 800c0f8:	1bed      	subs	r5, r5, r7
 800c0fa:	42ae      	cmp	r6, r5
 800c0fc:	dc34      	bgt.n	800c168 <__gethex+0x2bc>
 800c0fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c102:	2b02      	cmp	r3, #2
 800c104:	d022      	beq.n	800c14c <__gethex+0x2a0>
 800c106:	2b03      	cmp	r3, #3
 800c108:	d024      	beq.n	800c154 <__gethex+0x2a8>
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d115      	bne.n	800c13a <__gethex+0x28e>
 800c10e:	42ae      	cmp	r6, r5
 800c110:	d113      	bne.n	800c13a <__gethex+0x28e>
 800c112:	2e01      	cmp	r6, #1
 800c114:	d10b      	bne.n	800c12e <__gethex+0x282>
 800c116:	9a02      	ldr	r2, [sp, #8]
 800c118:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	2301      	movs	r3, #1
 800c120:	6123      	str	r3, [r4, #16]
 800c122:	f8ca 3000 	str.w	r3, [sl]
 800c126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c128:	2562      	movs	r5, #98	@ 0x62
 800c12a:	601c      	str	r4, [r3, #0]
 800c12c:	e73a      	b.n	800bfa4 <__gethex+0xf8>
 800c12e:	1e71      	subs	r1, r6, #1
 800c130:	4620      	mov	r0, r4
 800c132:	f7fe f996 	bl	800a462 <__any_on>
 800c136:	2800      	cmp	r0, #0
 800c138:	d1ed      	bne.n	800c116 <__gethex+0x26a>
 800c13a:	9801      	ldr	r0, [sp, #4]
 800c13c:	4621      	mov	r1, r4
 800c13e:	f7fd fd3f 	bl	8009bc0 <_Bfree>
 800c142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c144:	2300      	movs	r3, #0
 800c146:	6013      	str	r3, [r2, #0]
 800c148:	2550      	movs	r5, #80	@ 0x50
 800c14a:	e72b      	b.n	800bfa4 <__gethex+0xf8>
 800c14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1f3      	bne.n	800c13a <__gethex+0x28e>
 800c152:	e7e0      	b.n	800c116 <__gethex+0x26a>
 800c154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1dd      	bne.n	800c116 <__gethex+0x26a>
 800c15a:	e7ee      	b.n	800c13a <__gethex+0x28e>
 800c15c:	0800ce20 	.word	0x0800ce20
 800c160:	0800ccb7 	.word	0x0800ccb7
 800c164:	0800cfe9 	.word	0x0800cfe9
 800c168:	1e6f      	subs	r7, r5, #1
 800c16a:	f1b9 0f00 	cmp.w	r9, #0
 800c16e:	d130      	bne.n	800c1d2 <__gethex+0x326>
 800c170:	b127      	cbz	r7, 800c17c <__gethex+0x2d0>
 800c172:	4639      	mov	r1, r7
 800c174:	4620      	mov	r0, r4
 800c176:	f7fe f974 	bl	800a462 <__any_on>
 800c17a:	4681      	mov	r9, r0
 800c17c:	117a      	asrs	r2, r7, #5
 800c17e:	2301      	movs	r3, #1
 800c180:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c184:	f007 071f 	and.w	r7, r7, #31
 800c188:	40bb      	lsls	r3, r7
 800c18a:	4213      	tst	r3, r2
 800c18c:	4629      	mov	r1, r5
 800c18e:	4620      	mov	r0, r4
 800c190:	bf18      	it	ne
 800c192:	f049 0902 	orrne.w	r9, r9, #2
 800c196:	f7ff fe21 	bl	800bddc <rshift>
 800c19a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c19e:	1b76      	subs	r6, r6, r5
 800c1a0:	2502      	movs	r5, #2
 800c1a2:	f1b9 0f00 	cmp.w	r9, #0
 800c1a6:	d047      	beq.n	800c238 <__gethex+0x38c>
 800c1a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d015      	beq.n	800c1dc <__gethex+0x330>
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	d017      	beq.n	800c1e4 <__gethex+0x338>
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d109      	bne.n	800c1cc <__gethex+0x320>
 800c1b8:	f019 0f02 	tst.w	r9, #2
 800c1bc:	d006      	beq.n	800c1cc <__gethex+0x320>
 800c1be:	f8da 3000 	ldr.w	r3, [sl]
 800c1c2:	ea49 0903 	orr.w	r9, r9, r3
 800c1c6:	f019 0f01 	tst.w	r9, #1
 800c1ca:	d10e      	bne.n	800c1ea <__gethex+0x33e>
 800c1cc:	f045 0510 	orr.w	r5, r5, #16
 800c1d0:	e032      	b.n	800c238 <__gethex+0x38c>
 800c1d2:	f04f 0901 	mov.w	r9, #1
 800c1d6:	e7d1      	b.n	800c17c <__gethex+0x2d0>
 800c1d8:	2501      	movs	r5, #1
 800c1da:	e7e2      	b.n	800c1a2 <__gethex+0x2f6>
 800c1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1de:	f1c3 0301 	rsb	r3, r3, #1
 800c1e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d0f0      	beq.n	800c1cc <__gethex+0x320>
 800c1ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c1ee:	f104 0314 	add.w	r3, r4, #20
 800c1f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c1f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c1fa:	f04f 0c00 	mov.w	ip, #0
 800c1fe:	4618      	mov	r0, r3
 800c200:	f853 2b04 	ldr.w	r2, [r3], #4
 800c204:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c208:	d01b      	beq.n	800c242 <__gethex+0x396>
 800c20a:	3201      	adds	r2, #1
 800c20c:	6002      	str	r2, [r0, #0]
 800c20e:	2d02      	cmp	r5, #2
 800c210:	f104 0314 	add.w	r3, r4, #20
 800c214:	d13c      	bne.n	800c290 <__gethex+0x3e4>
 800c216:	f8d8 2000 	ldr.w	r2, [r8]
 800c21a:	3a01      	subs	r2, #1
 800c21c:	42b2      	cmp	r2, r6
 800c21e:	d109      	bne.n	800c234 <__gethex+0x388>
 800c220:	1171      	asrs	r1, r6, #5
 800c222:	2201      	movs	r2, #1
 800c224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c228:	f006 061f 	and.w	r6, r6, #31
 800c22c:	fa02 f606 	lsl.w	r6, r2, r6
 800c230:	421e      	tst	r6, r3
 800c232:	d13a      	bne.n	800c2aa <__gethex+0x3fe>
 800c234:	f045 0520 	orr.w	r5, r5, #32
 800c238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c23a:	601c      	str	r4, [r3, #0]
 800c23c:	9b02      	ldr	r3, [sp, #8]
 800c23e:	601f      	str	r7, [r3, #0]
 800c240:	e6b0      	b.n	800bfa4 <__gethex+0xf8>
 800c242:	4299      	cmp	r1, r3
 800c244:	f843 cc04 	str.w	ip, [r3, #-4]
 800c248:	d8d9      	bhi.n	800c1fe <__gethex+0x352>
 800c24a:	68a3      	ldr	r3, [r4, #8]
 800c24c:	459b      	cmp	fp, r3
 800c24e:	db17      	blt.n	800c280 <__gethex+0x3d4>
 800c250:	6861      	ldr	r1, [r4, #4]
 800c252:	9801      	ldr	r0, [sp, #4]
 800c254:	3101      	adds	r1, #1
 800c256:	f7fd fc73 	bl	8009b40 <_Balloc>
 800c25a:	4681      	mov	r9, r0
 800c25c:	b918      	cbnz	r0, 800c266 <__gethex+0x3ba>
 800c25e:	4b1a      	ldr	r3, [pc, #104]	@ (800c2c8 <__gethex+0x41c>)
 800c260:	4602      	mov	r2, r0
 800c262:	2184      	movs	r1, #132	@ 0x84
 800c264:	e6c5      	b.n	800bff2 <__gethex+0x146>
 800c266:	6922      	ldr	r2, [r4, #16]
 800c268:	3202      	adds	r2, #2
 800c26a:	f104 010c 	add.w	r1, r4, #12
 800c26e:	0092      	lsls	r2, r2, #2
 800c270:	300c      	adds	r0, #12
 800c272:	f7ff fd69 	bl	800bd48 <memcpy>
 800c276:	4621      	mov	r1, r4
 800c278:	9801      	ldr	r0, [sp, #4]
 800c27a:	f7fd fca1 	bl	8009bc0 <_Bfree>
 800c27e:	464c      	mov	r4, r9
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	1c5a      	adds	r2, r3, #1
 800c284:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c288:	6122      	str	r2, [r4, #16]
 800c28a:	2201      	movs	r2, #1
 800c28c:	615a      	str	r2, [r3, #20]
 800c28e:	e7be      	b.n	800c20e <__gethex+0x362>
 800c290:	6922      	ldr	r2, [r4, #16]
 800c292:	455a      	cmp	r2, fp
 800c294:	dd0b      	ble.n	800c2ae <__gethex+0x402>
 800c296:	2101      	movs	r1, #1
 800c298:	4620      	mov	r0, r4
 800c29a:	f7ff fd9f 	bl	800bddc <rshift>
 800c29e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2a2:	3701      	adds	r7, #1
 800c2a4:	42bb      	cmp	r3, r7
 800c2a6:	f6ff aee0 	blt.w	800c06a <__gethex+0x1be>
 800c2aa:	2501      	movs	r5, #1
 800c2ac:	e7c2      	b.n	800c234 <__gethex+0x388>
 800c2ae:	f016 061f 	ands.w	r6, r6, #31
 800c2b2:	d0fa      	beq.n	800c2aa <__gethex+0x3fe>
 800c2b4:	4453      	add	r3, sl
 800c2b6:	f1c6 0620 	rsb	r6, r6, #32
 800c2ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c2be:	f7fd fd31 	bl	8009d24 <__hi0bits>
 800c2c2:	42b0      	cmp	r0, r6
 800c2c4:	dbe7      	blt.n	800c296 <__gethex+0x3ea>
 800c2c6:	e7f0      	b.n	800c2aa <__gethex+0x3fe>
 800c2c8:	0800ccb7 	.word	0x0800ccb7

0800c2cc <L_shift>:
 800c2cc:	f1c2 0208 	rsb	r2, r2, #8
 800c2d0:	0092      	lsls	r2, r2, #2
 800c2d2:	b570      	push	{r4, r5, r6, lr}
 800c2d4:	f1c2 0620 	rsb	r6, r2, #32
 800c2d8:	6843      	ldr	r3, [r0, #4]
 800c2da:	6804      	ldr	r4, [r0, #0]
 800c2dc:	fa03 f506 	lsl.w	r5, r3, r6
 800c2e0:	432c      	orrs	r4, r5
 800c2e2:	40d3      	lsrs	r3, r2
 800c2e4:	6004      	str	r4, [r0, #0]
 800c2e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c2ea:	4288      	cmp	r0, r1
 800c2ec:	d3f4      	bcc.n	800c2d8 <L_shift+0xc>
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}

0800c2f0 <__match>:
 800c2f0:	b530      	push	{r4, r5, lr}
 800c2f2:	6803      	ldr	r3, [r0, #0]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2fa:	b914      	cbnz	r4, 800c302 <__match+0x12>
 800c2fc:	6003      	str	r3, [r0, #0]
 800c2fe:	2001      	movs	r0, #1
 800c300:	bd30      	pop	{r4, r5, pc}
 800c302:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c306:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c30a:	2d19      	cmp	r5, #25
 800c30c:	bf98      	it	ls
 800c30e:	3220      	addls	r2, #32
 800c310:	42a2      	cmp	r2, r4
 800c312:	d0f0      	beq.n	800c2f6 <__match+0x6>
 800c314:	2000      	movs	r0, #0
 800c316:	e7f3      	b.n	800c300 <__match+0x10>

0800c318 <__hexnan>:
 800c318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31c:	680b      	ldr	r3, [r1, #0]
 800c31e:	6801      	ldr	r1, [r0, #0]
 800c320:	115e      	asrs	r6, r3, #5
 800c322:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c326:	f013 031f 	ands.w	r3, r3, #31
 800c32a:	b087      	sub	sp, #28
 800c32c:	bf18      	it	ne
 800c32e:	3604      	addne	r6, #4
 800c330:	2500      	movs	r5, #0
 800c332:	1f37      	subs	r7, r6, #4
 800c334:	4682      	mov	sl, r0
 800c336:	4690      	mov	r8, r2
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c33e:	46b9      	mov	r9, r7
 800c340:	463c      	mov	r4, r7
 800c342:	9502      	str	r5, [sp, #8]
 800c344:	46ab      	mov	fp, r5
 800c346:	784a      	ldrb	r2, [r1, #1]
 800c348:	1c4b      	adds	r3, r1, #1
 800c34a:	9303      	str	r3, [sp, #12]
 800c34c:	b342      	cbz	r2, 800c3a0 <__hexnan+0x88>
 800c34e:	4610      	mov	r0, r2
 800c350:	9105      	str	r1, [sp, #20]
 800c352:	9204      	str	r2, [sp, #16]
 800c354:	f7ff fd94 	bl	800be80 <__hexdig_fun>
 800c358:	2800      	cmp	r0, #0
 800c35a:	d151      	bne.n	800c400 <__hexnan+0xe8>
 800c35c:	9a04      	ldr	r2, [sp, #16]
 800c35e:	9905      	ldr	r1, [sp, #20]
 800c360:	2a20      	cmp	r2, #32
 800c362:	d818      	bhi.n	800c396 <__hexnan+0x7e>
 800c364:	9b02      	ldr	r3, [sp, #8]
 800c366:	459b      	cmp	fp, r3
 800c368:	dd13      	ble.n	800c392 <__hexnan+0x7a>
 800c36a:	454c      	cmp	r4, r9
 800c36c:	d206      	bcs.n	800c37c <__hexnan+0x64>
 800c36e:	2d07      	cmp	r5, #7
 800c370:	dc04      	bgt.n	800c37c <__hexnan+0x64>
 800c372:	462a      	mov	r2, r5
 800c374:	4649      	mov	r1, r9
 800c376:	4620      	mov	r0, r4
 800c378:	f7ff ffa8 	bl	800c2cc <L_shift>
 800c37c:	4544      	cmp	r4, r8
 800c37e:	d952      	bls.n	800c426 <__hexnan+0x10e>
 800c380:	2300      	movs	r3, #0
 800c382:	f1a4 0904 	sub.w	r9, r4, #4
 800c386:	f844 3c04 	str.w	r3, [r4, #-4]
 800c38a:	f8cd b008 	str.w	fp, [sp, #8]
 800c38e:	464c      	mov	r4, r9
 800c390:	461d      	mov	r5, r3
 800c392:	9903      	ldr	r1, [sp, #12]
 800c394:	e7d7      	b.n	800c346 <__hexnan+0x2e>
 800c396:	2a29      	cmp	r2, #41	@ 0x29
 800c398:	d157      	bne.n	800c44a <__hexnan+0x132>
 800c39a:	3102      	adds	r1, #2
 800c39c:	f8ca 1000 	str.w	r1, [sl]
 800c3a0:	f1bb 0f00 	cmp.w	fp, #0
 800c3a4:	d051      	beq.n	800c44a <__hexnan+0x132>
 800c3a6:	454c      	cmp	r4, r9
 800c3a8:	d206      	bcs.n	800c3b8 <__hexnan+0xa0>
 800c3aa:	2d07      	cmp	r5, #7
 800c3ac:	dc04      	bgt.n	800c3b8 <__hexnan+0xa0>
 800c3ae:	462a      	mov	r2, r5
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f7ff ff8a 	bl	800c2cc <L_shift>
 800c3b8:	4544      	cmp	r4, r8
 800c3ba:	d936      	bls.n	800c42a <__hexnan+0x112>
 800c3bc:	f1a8 0204 	sub.w	r2, r8, #4
 800c3c0:	4623      	mov	r3, r4
 800c3c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c3c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c3ca:	429f      	cmp	r7, r3
 800c3cc:	d2f9      	bcs.n	800c3c2 <__hexnan+0xaa>
 800c3ce:	1b3b      	subs	r3, r7, r4
 800c3d0:	f023 0303 	bic.w	r3, r3, #3
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	3401      	adds	r4, #1
 800c3d8:	3e03      	subs	r6, #3
 800c3da:	42b4      	cmp	r4, r6
 800c3dc:	bf88      	it	hi
 800c3de:	2304      	movhi	r3, #4
 800c3e0:	4443      	add	r3, r8
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f843 2b04 	str.w	r2, [r3], #4
 800c3e8:	429f      	cmp	r7, r3
 800c3ea:	d2fb      	bcs.n	800c3e4 <__hexnan+0xcc>
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	b91b      	cbnz	r3, 800c3f8 <__hexnan+0xe0>
 800c3f0:	4547      	cmp	r7, r8
 800c3f2:	d128      	bne.n	800c446 <__hexnan+0x12e>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	603b      	str	r3, [r7, #0]
 800c3f8:	2005      	movs	r0, #5
 800c3fa:	b007      	add	sp, #28
 800c3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c400:	3501      	adds	r5, #1
 800c402:	2d08      	cmp	r5, #8
 800c404:	f10b 0b01 	add.w	fp, fp, #1
 800c408:	dd06      	ble.n	800c418 <__hexnan+0x100>
 800c40a:	4544      	cmp	r4, r8
 800c40c:	d9c1      	bls.n	800c392 <__hexnan+0x7a>
 800c40e:	2300      	movs	r3, #0
 800c410:	f844 3c04 	str.w	r3, [r4, #-4]
 800c414:	2501      	movs	r5, #1
 800c416:	3c04      	subs	r4, #4
 800c418:	6822      	ldr	r2, [r4, #0]
 800c41a:	f000 000f 	and.w	r0, r0, #15
 800c41e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c422:	6020      	str	r0, [r4, #0]
 800c424:	e7b5      	b.n	800c392 <__hexnan+0x7a>
 800c426:	2508      	movs	r5, #8
 800c428:	e7b3      	b.n	800c392 <__hexnan+0x7a>
 800c42a:	9b01      	ldr	r3, [sp, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d0dd      	beq.n	800c3ec <__hexnan+0xd4>
 800c430:	f1c3 0320 	rsb	r3, r3, #32
 800c434:	f04f 32ff 	mov.w	r2, #4294967295
 800c438:	40da      	lsrs	r2, r3
 800c43a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c43e:	4013      	ands	r3, r2
 800c440:	f846 3c04 	str.w	r3, [r6, #-4]
 800c444:	e7d2      	b.n	800c3ec <__hexnan+0xd4>
 800c446:	3f04      	subs	r7, #4
 800c448:	e7d0      	b.n	800c3ec <__hexnan+0xd4>
 800c44a:	2004      	movs	r0, #4
 800c44c:	e7d5      	b.n	800c3fa <__hexnan+0xe2>

0800c44e <__ascii_mbtowc>:
 800c44e:	b082      	sub	sp, #8
 800c450:	b901      	cbnz	r1, 800c454 <__ascii_mbtowc+0x6>
 800c452:	a901      	add	r1, sp, #4
 800c454:	b142      	cbz	r2, 800c468 <__ascii_mbtowc+0x1a>
 800c456:	b14b      	cbz	r3, 800c46c <__ascii_mbtowc+0x1e>
 800c458:	7813      	ldrb	r3, [r2, #0]
 800c45a:	600b      	str	r3, [r1, #0]
 800c45c:	7812      	ldrb	r2, [r2, #0]
 800c45e:	1e10      	subs	r0, r2, #0
 800c460:	bf18      	it	ne
 800c462:	2001      	movne	r0, #1
 800c464:	b002      	add	sp, #8
 800c466:	4770      	bx	lr
 800c468:	4610      	mov	r0, r2
 800c46a:	e7fb      	b.n	800c464 <__ascii_mbtowc+0x16>
 800c46c:	f06f 0001 	mvn.w	r0, #1
 800c470:	e7f8      	b.n	800c464 <__ascii_mbtowc+0x16>

0800c472 <_realloc_r>:
 800c472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c476:	4680      	mov	r8, r0
 800c478:	4615      	mov	r5, r2
 800c47a:	460c      	mov	r4, r1
 800c47c:	b921      	cbnz	r1, 800c488 <_realloc_r+0x16>
 800c47e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c482:	4611      	mov	r1, r2
 800c484:	f7fd bad0 	b.w	8009a28 <_malloc_r>
 800c488:	b92a      	cbnz	r2, 800c496 <_realloc_r+0x24>
 800c48a:	f7fd fa59 	bl	8009940 <_free_r>
 800c48e:	2400      	movs	r4, #0
 800c490:	4620      	mov	r0, r4
 800c492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c496:	f000 f8b2 	bl	800c5fe <_malloc_usable_size_r>
 800c49a:	4285      	cmp	r5, r0
 800c49c:	4606      	mov	r6, r0
 800c49e:	d802      	bhi.n	800c4a6 <_realloc_r+0x34>
 800c4a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c4a4:	d8f4      	bhi.n	800c490 <_realloc_r+0x1e>
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	f7fd fabd 	bl	8009a28 <_malloc_r>
 800c4ae:	4607      	mov	r7, r0
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d0ec      	beq.n	800c48e <_realloc_r+0x1c>
 800c4b4:	42b5      	cmp	r5, r6
 800c4b6:	462a      	mov	r2, r5
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	bf28      	it	cs
 800c4bc:	4632      	movcs	r2, r6
 800c4be:	f7ff fc43 	bl	800bd48 <memcpy>
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4640      	mov	r0, r8
 800c4c6:	f7fd fa3b 	bl	8009940 <_free_r>
 800c4ca:	463c      	mov	r4, r7
 800c4cc:	e7e0      	b.n	800c490 <_realloc_r+0x1e>
	...

0800c4d0 <_strtoul_l.constprop.0>:
 800c4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4d4:	4e34      	ldr	r6, [pc, #208]	@ (800c5a8 <_strtoul_l.constprop.0+0xd8>)
 800c4d6:	4686      	mov	lr, r0
 800c4d8:	460d      	mov	r5, r1
 800c4da:	4628      	mov	r0, r5
 800c4dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4e0:	5d37      	ldrb	r7, [r6, r4]
 800c4e2:	f017 0708 	ands.w	r7, r7, #8
 800c4e6:	d1f8      	bne.n	800c4da <_strtoul_l.constprop.0+0xa>
 800c4e8:	2c2d      	cmp	r4, #45	@ 0x2d
 800c4ea:	d12f      	bne.n	800c54c <_strtoul_l.constprop.0+0x7c>
 800c4ec:	782c      	ldrb	r4, [r5, #0]
 800c4ee:	2701      	movs	r7, #1
 800c4f0:	1c85      	adds	r5, r0, #2
 800c4f2:	f033 0010 	bics.w	r0, r3, #16
 800c4f6:	d109      	bne.n	800c50c <_strtoul_l.constprop.0+0x3c>
 800c4f8:	2c30      	cmp	r4, #48	@ 0x30
 800c4fa:	d12c      	bne.n	800c556 <_strtoul_l.constprop.0+0x86>
 800c4fc:	7828      	ldrb	r0, [r5, #0]
 800c4fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c502:	2858      	cmp	r0, #88	@ 0x58
 800c504:	d127      	bne.n	800c556 <_strtoul_l.constprop.0+0x86>
 800c506:	786c      	ldrb	r4, [r5, #1]
 800c508:	2310      	movs	r3, #16
 800c50a:	3502      	adds	r5, #2
 800c50c:	f04f 38ff 	mov.w	r8, #4294967295
 800c510:	2600      	movs	r6, #0
 800c512:	fbb8 f8f3 	udiv	r8, r8, r3
 800c516:	fb03 f908 	mul.w	r9, r3, r8
 800c51a:	ea6f 0909 	mvn.w	r9, r9
 800c51e:	4630      	mov	r0, r6
 800c520:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c524:	f1bc 0f09 	cmp.w	ip, #9
 800c528:	d81c      	bhi.n	800c564 <_strtoul_l.constprop.0+0x94>
 800c52a:	4664      	mov	r4, ip
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	dd2a      	ble.n	800c586 <_strtoul_l.constprop.0+0xb6>
 800c530:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c534:	d007      	beq.n	800c546 <_strtoul_l.constprop.0+0x76>
 800c536:	4580      	cmp	r8, r0
 800c538:	d322      	bcc.n	800c580 <_strtoul_l.constprop.0+0xb0>
 800c53a:	d101      	bne.n	800c540 <_strtoul_l.constprop.0+0x70>
 800c53c:	45a1      	cmp	r9, r4
 800c53e:	db1f      	blt.n	800c580 <_strtoul_l.constprop.0+0xb0>
 800c540:	fb00 4003 	mla	r0, r0, r3, r4
 800c544:	2601      	movs	r6, #1
 800c546:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c54a:	e7e9      	b.n	800c520 <_strtoul_l.constprop.0+0x50>
 800c54c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c54e:	bf04      	itt	eq
 800c550:	782c      	ldrbeq	r4, [r5, #0]
 800c552:	1c85      	addeq	r5, r0, #2
 800c554:	e7cd      	b.n	800c4f2 <_strtoul_l.constprop.0+0x22>
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1d8      	bne.n	800c50c <_strtoul_l.constprop.0+0x3c>
 800c55a:	2c30      	cmp	r4, #48	@ 0x30
 800c55c:	bf0c      	ite	eq
 800c55e:	2308      	moveq	r3, #8
 800c560:	230a      	movne	r3, #10
 800c562:	e7d3      	b.n	800c50c <_strtoul_l.constprop.0+0x3c>
 800c564:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c568:	f1bc 0f19 	cmp.w	ip, #25
 800c56c:	d801      	bhi.n	800c572 <_strtoul_l.constprop.0+0xa2>
 800c56e:	3c37      	subs	r4, #55	@ 0x37
 800c570:	e7dc      	b.n	800c52c <_strtoul_l.constprop.0+0x5c>
 800c572:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c576:	f1bc 0f19 	cmp.w	ip, #25
 800c57a:	d804      	bhi.n	800c586 <_strtoul_l.constprop.0+0xb6>
 800c57c:	3c57      	subs	r4, #87	@ 0x57
 800c57e:	e7d5      	b.n	800c52c <_strtoul_l.constprop.0+0x5c>
 800c580:	f04f 36ff 	mov.w	r6, #4294967295
 800c584:	e7df      	b.n	800c546 <_strtoul_l.constprop.0+0x76>
 800c586:	1c73      	adds	r3, r6, #1
 800c588:	d106      	bne.n	800c598 <_strtoul_l.constprop.0+0xc8>
 800c58a:	2322      	movs	r3, #34	@ 0x22
 800c58c:	f8ce 3000 	str.w	r3, [lr]
 800c590:	4630      	mov	r0, r6
 800c592:	b932      	cbnz	r2, 800c5a2 <_strtoul_l.constprop.0+0xd2>
 800c594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c598:	b107      	cbz	r7, 800c59c <_strtoul_l.constprop.0+0xcc>
 800c59a:	4240      	negs	r0, r0
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	d0f9      	beq.n	800c594 <_strtoul_l.constprop.0+0xc4>
 800c5a0:	b106      	cbz	r6, 800c5a4 <_strtoul_l.constprop.0+0xd4>
 800c5a2:	1e69      	subs	r1, r5, #1
 800c5a4:	6011      	str	r1, [r2, #0]
 800c5a6:	e7f5      	b.n	800c594 <_strtoul_l.constprop.0+0xc4>
 800c5a8:	0800ce79 	.word	0x0800ce79

0800c5ac <_strtoul_r>:
 800c5ac:	f7ff bf90 	b.w	800c4d0 <_strtoul_l.constprop.0>

0800c5b0 <__ascii_wctomb>:
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	4608      	mov	r0, r1
 800c5b4:	b141      	cbz	r1, 800c5c8 <__ascii_wctomb+0x18>
 800c5b6:	2aff      	cmp	r2, #255	@ 0xff
 800c5b8:	d904      	bls.n	800c5c4 <__ascii_wctomb+0x14>
 800c5ba:	228a      	movs	r2, #138	@ 0x8a
 800c5bc:	601a      	str	r2, [r3, #0]
 800c5be:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c2:	4770      	bx	lr
 800c5c4:	700a      	strb	r2, [r1, #0]
 800c5c6:	2001      	movs	r0, #1
 800c5c8:	4770      	bx	lr
	...

0800c5cc <fiprintf>:
 800c5cc:	b40e      	push	{r1, r2, r3}
 800c5ce:	b503      	push	{r0, r1, lr}
 800c5d0:	4601      	mov	r1, r0
 800c5d2:	ab03      	add	r3, sp, #12
 800c5d4:	4805      	ldr	r0, [pc, #20]	@ (800c5ec <fiprintf+0x20>)
 800c5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5da:	6800      	ldr	r0, [r0, #0]
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	f000 f83f 	bl	800c660 <_vfiprintf_r>
 800c5e2:	b002      	add	sp, #8
 800c5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5e8:	b003      	add	sp, #12
 800c5ea:	4770      	bx	lr
 800c5ec:	200000fc 	.word	0x200000fc

0800c5f0 <abort>:
 800c5f0:	b508      	push	{r3, lr}
 800c5f2:	2006      	movs	r0, #6
 800c5f4:	f000 fa08 	bl	800ca08 <raise>
 800c5f8:	2001      	movs	r0, #1
 800c5fa:	f7f6 fcfb 	bl	8002ff4 <_exit>

0800c5fe <_malloc_usable_size_r>:
 800c5fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c602:	1f18      	subs	r0, r3, #4
 800c604:	2b00      	cmp	r3, #0
 800c606:	bfbc      	itt	lt
 800c608:	580b      	ldrlt	r3, [r1, r0]
 800c60a:	18c0      	addlt	r0, r0, r3
 800c60c:	4770      	bx	lr

0800c60e <__sfputc_r>:
 800c60e:	6893      	ldr	r3, [r2, #8]
 800c610:	3b01      	subs	r3, #1
 800c612:	2b00      	cmp	r3, #0
 800c614:	b410      	push	{r4}
 800c616:	6093      	str	r3, [r2, #8]
 800c618:	da08      	bge.n	800c62c <__sfputc_r+0x1e>
 800c61a:	6994      	ldr	r4, [r2, #24]
 800c61c:	42a3      	cmp	r3, r4
 800c61e:	db01      	blt.n	800c624 <__sfputc_r+0x16>
 800c620:	290a      	cmp	r1, #10
 800c622:	d103      	bne.n	800c62c <__sfputc_r+0x1e>
 800c624:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c628:	f000 b932 	b.w	800c890 <__swbuf_r>
 800c62c:	6813      	ldr	r3, [r2, #0]
 800c62e:	1c58      	adds	r0, r3, #1
 800c630:	6010      	str	r0, [r2, #0]
 800c632:	7019      	strb	r1, [r3, #0]
 800c634:	4608      	mov	r0, r1
 800c636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <__sfputs_r>:
 800c63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63e:	4606      	mov	r6, r0
 800c640:	460f      	mov	r7, r1
 800c642:	4614      	mov	r4, r2
 800c644:	18d5      	adds	r5, r2, r3
 800c646:	42ac      	cmp	r4, r5
 800c648:	d101      	bne.n	800c64e <__sfputs_r+0x12>
 800c64a:	2000      	movs	r0, #0
 800c64c:	e007      	b.n	800c65e <__sfputs_r+0x22>
 800c64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c652:	463a      	mov	r2, r7
 800c654:	4630      	mov	r0, r6
 800c656:	f7ff ffda 	bl	800c60e <__sfputc_r>
 800c65a:	1c43      	adds	r3, r0, #1
 800c65c:	d1f3      	bne.n	800c646 <__sfputs_r+0xa>
 800c65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c660 <_vfiprintf_r>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	460d      	mov	r5, r1
 800c666:	b09d      	sub	sp, #116	@ 0x74
 800c668:	4614      	mov	r4, r2
 800c66a:	4698      	mov	r8, r3
 800c66c:	4606      	mov	r6, r0
 800c66e:	b118      	cbz	r0, 800c678 <_vfiprintf_r+0x18>
 800c670:	6a03      	ldr	r3, [r0, #32]
 800c672:	b90b      	cbnz	r3, 800c678 <_vfiprintf_r+0x18>
 800c674:	f7fc f9aa 	bl	80089cc <__sinit>
 800c678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c67a:	07d9      	lsls	r1, r3, #31
 800c67c:	d405      	bmi.n	800c68a <_vfiprintf_r+0x2a>
 800c67e:	89ab      	ldrh	r3, [r5, #12]
 800c680:	059a      	lsls	r2, r3, #22
 800c682:	d402      	bmi.n	800c68a <_vfiprintf_r+0x2a>
 800c684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c686:	f7fc fb06 	bl	8008c96 <__retarget_lock_acquire_recursive>
 800c68a:	89ab      	ldrh	r3, [r5, #12]
 800c68c:	071b      	lsls	r3, r3, #28
 800c68e:	d501      	bpl.n	800c694 <_vfiprintf_r+0x34>
 800c690:	692b      	ldr	r3, [r5, #16]
 800c692:	b99b      	cbnz	r3, 800c6bc <_vfiprintf_r+0x5c>
 800c694:	4629      	mov	r1, r5
 800c696:	4630      	mov	r0, r6
 800c698:	f000 f938 	bl	800c90c <__swsetup_r>
 800c69c:	b170      	cbz	r0, 800c6bc <_vfiprintf_r+0x5c>
 800c69e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6a0:	07dc      	lsls	r4, r3, #31
 800c6a2:	d504      	bpl.n	800c6ae <_vfiprintf_r+0x4e>
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	b01d      	add	sp, #116	@ 0x74
 800c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ae:	89ab      	ldrh	r3, [r5, #12]
 800c6b0:	0598      	lsls	r0, r3, #22
 800c6b2:	d4f7      	bmi.n	800c6a4 <_vfiprintf_r+0x44>
 800c6b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6b6:	f7fc faef 	bl	8008c98 <__retarget_lock_release_recursive>
 800c6ba:	e7f3      	b.n	800c6a4 <_vfiprintf_r+0x44>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6c0:	2320      	movs	r3, #32
 800c6c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ca:	2330      	movs	r3, #48	@ 0x30
 800c6cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c87c <_vfiprintf_r+0x21c>
 800c6d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6d4:	f04f 0901 	mov.w	r9, #1
 800c6d8:	4623      	mov	r3, r4
 800c6da:	469a      	mov	sl, r3
 800c6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6e0:	b10a      	cbz	r2, 800c6e6 <_vfiprintf_r+0x86>
 800c6e2:	2a25      	cmp	r2, #37	@ 0x25
 800c6e4:	d1f9      	bne.n	800c6da <_vfiprintf_r+0x7a>
 800c6e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c6ea:	d00b      	beq.n	800c704 <_vfiprintf_r+0xa4>
 800c6ec:	465b      	mov	r3, fp
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f7ff ffa2 	bl	800c63c <__sfputs_r>
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	f000 80a7 	beq.w	800c84c <_vfiprintf_r+0x1ec>
 800c6fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c700:	445a      	add	r2, fp
 800c702:	9209      	str	r2, [sp, #36]	@ 0x24
 800c704:	f89a 3000 	ldrb.w	r3, [sl]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 809f 	beq.w	800c84c <_vfiprintf_r+0x1ec>
 800c70e:	2300      	movs	r3, #0
 800c710:	f04f 32ff 	mov.w	r2, #4294967295
 800c714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c718:	f10a 0a01 	add.w	sl, sl, #1
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	9307      	str	r3, [sp, #28]
 800c720:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c724:	931a      	str	r3, [sp, #104]	@ 0x68
 800c726:	4654      	mov	r4, sl
 800c728:	2205      	movs	r2, #5
 800c72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72e:	4853      	ldr	r0, [pc, #332]	@ (800c87c <_vfiprintf_r+0x21c>)
 800c730:	f7f3 fd4e 	bl	80001d0 <memchr>
 800c734:	9a04      	ldr	r2, [sp, #16]
 800c736:	b9d8      	cbnz	r0, 800c770 <_vfiprintf_r+0x110>
 800c738:	06d1      	lsls	r1, r2, #27
 800c73a:	bf44      	itt	mi
 800c73c:	2320      	movmi	r3, #32
 800c73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c742:	0713      	lsls	r3, r2, #28
 800c744:	bf44      	itt	mi
 800c746:	232b      	movmi	r3, #43	@ 0x2b
 800c748:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c74c:	f89a 3000 	ldrb.w	r3, [sl]
 800c750:	2b2a      	cmp	r3, #42	@ 0x2a
 800c752:	d015      	beq.n	800c780 <_vfiprintf_r+0x120>
 800c754:	9a07      	ldr	r2, [sp, #28]
 800c756:	4654      	mov	r4, sl
 800c758:	2000      	movs	r0, #0
 800c75a:	f04f 0c0a 	mov.w	ip, #10
 800c75e:	4621      	mov	r1, r4
 800c760:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c764:	3b30      	subs	r3, #48	@ 0x30
 800c766:	2b09      	cmp	r3, #9
 800c768:	d94b      	bls.n	800c802 <_vfiprintf_r+0x1a2>
 800c76a:	b1b0      	cbz	r0, 800c79a <_vfiprintf_r+0x13a>
 800c76c:	9207      	str	r2, [sp, #28]
 800c76e:	e014      	b.n	800c79a <_vfiprintf_r+0x13a>
 800c770:	eba0 0308 	sub.w	r3, r0, r8
 800c774:	fa09 f303 	lsl.w	r3, r9, r3
 800c778:	4313      	orrs	r3, r2
 800c77a:	9304      	str	r3, [sp, #16]
 800c77c:	46a2      	mov	sl, r4
 800c77e:	e7d2      	b.n	800c726 <_vfiprintf_r+0xc6>
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	1d19      	adds	r1, r3, #4
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	9103      	str	r1, [sp, #12]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	bfbb      	ittet	lt
 800c78c:	425b      	neglt	r3, r3
 800c78e:	f042 0202 	orrlt.w	r2, r2, #2
 800c792:	9307      	strge	r3, [sp, #28]
 800c794:	9307      	strlt	r3, [sp, #28]
 800c796:	bfb8      	it	lt
 800c798:	9204      	strlt	r2, [sp, #16]
 800c79a:	7823      	ldrb	r3, [r4, #0]
 800c79c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c79e:	d10a      	bne.n	800c7b6 <_vfiprintf_r+0x156>
 800c7a0:	7863      	ldrb	r3, [r4, #1]
 800c7a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7a4:	d132      	bne.n	800c80c <_vfiprintf_r+0x1ac>
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	1d1a      	adds	r2, r3, #4
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	9203      	str	r2, [sp, #12]
 800c7ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7b2:	3402      	adds	r4, #2
 800c7b4:	9305      	str	r3, [sp, #20]
 800c7b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c88c <_vfiprintf_r+0x22c>
 800c7ba:	7821      	ldrb	r1, [r4, #0]
 800c7bc:	2203      	movs	r2, #3
 800c7be:	4650      	mov	r0, sl
 800c7c0:	f7f3 fd06 	bl	80001d0 <memchr>
 800c7c4:	b138      	cbz	r0, 800c7d6 <_vfiprintf_r+0x176>
 800c7c6:	9b04      	ldr	r3, [sp, #16]
 800c7c8:	eba0 000a 	sub.w	r0, r0, sl
 800c7cc:	2240      	movs	r2, #64	@ 0x40
 800c7ce:	4082      	lsls	r2, r0
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	3401      	adds	r4, #1
 800c7d4:	9304      	str	r3, [sp, #16]
 800c7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7da:	4829      	ldr	r0, [pc, #164]	@ (800c880 <_vfiprintf_r+0x220>)
 800c7dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7e0:	2206      	movs	r2, #6
 800c7e2:	f7f3 fcf5 	bl	80001d0 <memchr>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d03f      	beq.n	800c86a <_vfiprintf_r+0x20a>
 800c7ea:	4b26      	ldr	r3, [pc, #152]	@ (800c884 <_vfiprintf_r+0x224>)
 800c7ec:	bb1b      	cbnz	r3, 800c836 <_vfiprintf_r+0x1d6>
 800c7ee:	9b03      	ldr	r3, [sp, #12]
 800c7f0:	3307      	adds	r3, #7
 800c7f2:	f023 0307 	bic.w	r3, r3, #7
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	9303      	str	r3, [sp, #12]
 800c7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7fc:	443b      	add	r3, r7
 800c7fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c800:	e76a      	b.n	800c6d8 <_vfiprintf_r+0x78>
 800c802:	fb0c 3202 	mla	r2, ip, r2, r3
 800c806:	460c      	mov	r4, r1
 800c808:	2001      	movs	r0, #1
 800c80a:	e7a8      	b.n	800c75e <_vfiprintf_r+0xfe>
 800c80c:	2300      	movs	r3, #0
 800c80e:	3401      	adds	r4, #1
 800c810:	9305      	str	r3, [sp, #20]
 800c812:	4619      	mov	r1, r3
 800c814:	f04f 0c0a 	mov.w	ip, #10
 800c818:	4620      	mov	r0, r4
 800c81a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c81e:	3a30      	subs	r2, #48	@ 0x30
 800c820:	2a09      	cmp	r2, #9
 800c822:	d903      	bls.n	800c82c <_vfiprintf_r+0x1cc>
 800c824:	2b00      	cmp	r3, #0
 800c826:	d0c6      	beq.n	800c7b6 <_vfiprintf_r+0x156>
 800c828:	9105      	str	r1, [sp, #20]
 800c82a:	e7c4      	b.n	800c7b6 <_vfiprintf_r+0x156>
 800c82c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c830:	4604      	mov	r4, r0
 800c832:	2301      	movs	r3, #1
 800c834:	e7f0      	b.n	800c818 <_vfiprintf_r+0x1b8>
 800c836:	ab03      	add	r3, sp, #12
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	462a      	mov	r2, r5
 800c83c:	4b12      	ldr	r3, [pc, #72]	@ (800c888 <_vfiprintf_r+0x228>)
 800c83e:	a904      	add	r1, sp, #16
 800c840:	4630      	mov	r0, r6
 800c842:	f7fb fa6b 	bl	8007d1c <_printf_float>
 800c846:	4607      	mov	r7, r0
 800c848:	1c78      	adds	r0, r7, #1
 800c84a:	d1d6      	bne.n	800c7fa <_vfiprintf_r+0x19a>
 800c84c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c84e:	07d9      	lsls	r1, r3, #31
 800c850:	d405      	bmi.n	800c85e <_vfiprintf_r+0x1fe>
 800c852:	89ab      	ldrh	r3, [r5, #12]
 800c854:	059a      	lsls	r2, r3, #22
 800c856:	d402      	bmi.n	800c85e <_vfiprintf_r+0x1fe>
 800c858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c85a:	f7fc fa1d 	bl	8008c98 <__retarget_lock_release_recursive>
 800c85e:	89ab      	ldrh	r3, [r5, #12]
 800c860:	065b      	lsls	r3, r3, #25
 800c862:	f53f af1f 	bmi.w	800c6a4 <_vfiprintf_r+0x44>
 800c866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c868:	e71e      	b.n	800c6a8 <_vfiprintf_r+0x48>
 800c86a:	ab03      	add	r3, sp, #12
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	462a      	mov	r2, r5
 800c870:	4b05      	ldr	r3, [pc, #20]	@ (800c888 <_vfiprintf_r+0x228>)
 800c872:	a904      	add	r1, sp, #16
 800c874:	4630      	mov	r0, r6
 800c876:	f7fb fce9 	bl	800824c <_printf_i>
 800c87a:	e7e4      	b.n	800c846 <_vfiprintf_r+0x1e6>
 800c87c:	0800cf79 	.word	0x0800cf79
 800c880:	0800cf83 	.word	0x0800cf83
 800c884:	08007d1d 	.word	0x08007d1d
 800c888:	0800c63d 	.word	0x0800c63d
 800c88c:	0800cf7f 	.word	0x0800cf7f

0800c890 <__swbuf_r>:
 800c890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c892:	460e      	mov	r6, r1
 800c894:	4614      	mov	r4, r2
 800c896:	4605      	mov	r5, r0
 800c898:	b118      	cbz	r0, 800c8a2 <__swbuf_r+0x12>
 800c89a:	6a03      	ldr	r3, [r0, #32]
 800c89c:	b90b      	cbnz	r3, 800c8a2 <__swbuf_r+0x12>
 800c89e:	f7fc f895 	bl	80089cc <__sinit>
 800c8a2:	69a3      	ldr	r3, [r4, #24]
 800c8a4:	60a3      	str	r3, [r4, #8]
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	071a      	lsls	r2, r3, #28
 800c8aa:	d501      	bpl.n	800c8b0 <__swbuf_r+0x20>
 800c8ac:	6923      	ldr	r3, [r4, #16]
 800c8ae:	b943      	cbnz	r3, 800c8c2 <__swbuf_r+0x32>
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f000 f82a 	bl	800c90c <__swsetup_r>
 800c8b8:	b118      	cbz	r0, 800c8c2 <__swbuf_r+0x32>
 800c8ba:	f04f 37ff 	mov.w	r7, #4294967295
 800c8be:	4638      	mov	r0, r7
 800c8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	6922      	ldr	r2, [r4, #16]
 800c8c6:	1a98      	subs	r0, r3, r2
 800c8c8:	6963      	ldr	r3, [r4, #20]
 800c8ca:	b2f6      	uxtb	r6, r6
 800c8cc:	4283      	cmp	r3, r0
 800c8ce:	4637      	mov	r7, r6
 800c8d0:	dc05      	bgt.n	800c8de <__swbuf_r+0x4e>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f7ff f95f 	bl	800bb98 <_fflush_r>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d1ed      	bne.n	800c8ba <__swbuf_r+0x2a>
 800c8de:	68a3      	ldr	r3, [r4, #8]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	60a3      	str	r3, [r4, #8]
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	1c5a      	adds	r2, r3, #1
 800c8e8:	6022      	str	r2, [r4, #0]
 800c8ea:	701e      	strb	r6, [r3, #0]
 800c8ec:	6962      	ldr	r2, [r4, #20]
 800c8ee:	1c43      	adds	r3, r0, #1
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d004      	beq.n	800c8fe <__swbuf_r+0x6e>
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	07db      	lsls	r3, r3, #31
 800c8f8:	d5e1      	bpl.n	800c8be <__swbuf_r+0x2e>
 800c8fa:	2e0a      	cmp	r6, #10
 800c8fc:	d1df      	bne.n	800c8be <__swbuf_r+0x2e>
 800c8fe:	4621      	mov	r1, r4
 800c900:	4628      	mov	r0, r5
 800c902:	f7ff f949 	bl	800bb98 <_fflush_r>
 800c906:	2800      	cmp	r0, #0
 800c908:	d0d9      	beq.n	800c8be <__swbuf_r+0x2e>
 800c90a:	e7d6      	b.n	800c8ba <__swbuf_r+0x2a>

0800c90c <__swsetup_r>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4b29      	ldr	r3, [pc, #164]	@ (800c9b4 <__swsetup_r+0xa8>)
 800c910:	4605      	mov	r5, r0
 800c912:	6818      	ldr	r0, [r3, #0]
 800c914:	460c      	mov	r4, r1
 800c916:	b118      	cbz	r0, 800c920 <__swsetup_r+0x14>
 800c918:	6a03      	ldr	r3, [r0, #32]
 800c91a:	b90b      	cbnz	r3, 800c920 <__swsetup_r+0x14>
 800c91c:	f7fc f856 	bl	80089cc <__sinit>
 800c920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c924:	0719      	lsls	r1, r3, #28
 800c926:	d422      	bmi.n	800c96e <__swsetup_r+0x62>
 800c928:	06da      	lsls	r2, r3, #27
 800c92a:	d407      	bmi.n	800c93c <__swsetup_r+0x30>
 800c92c:	2209      	movs	r2, #9
 800c92e:	602a      	str	r2, [r5, #0]
 800c930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c934:	81a3      	strh	r3, [r4, #12]
 800c936:	f04f 30ff 	mov.w	r0, #4294967295
 800c93a:	e033      	b.n	800c9a4 <__swsetup_r+0x98>
 800c93c:	0758      	lsls	r0, r3, #29
 800c93e:	d512      	bpl.n	800c966 <__swsetup_r+0x5a>
 800c940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c942:	b141      	cbz	r1, 800c956 <__swsetup_r+0x4a>
 800c944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c948:	4299      	cmp	r1, r3
 800c94a:	d002      	beq.n	800c952 <__swsetup_r+0x46>
 800c94c:	4628      	mov	r0, r5
 800c94e:	f7fc fff7 	bl	8009940 <_free_r>
 800c952:	2300      	movs	r3, #0
 800c954:	6363      	str	r3, [r4, #52]	@ 0x34
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c95c:	81a3      	strh	r3, [r4, #12]
 800c95e:	2300      	movs	r3, #0
 800c960:	6063      	str	r3, [r4, #4]
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	f043 0308 	orr.w	r3, r3, #8
 800c96c:	81a3      	strh	r3, [r4, #12]
 800c96e:	6923      	ldr	r3, [r4, #16]
 800c970:	b94b      	cbnz	r3, 800c986 <__swsetup_r+0x7a>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c97c:	d003      	beq.n	800c986 <__swsetup_r+0x7a>
 800c97e:	4621      	mov	r1, r4
 800c980:	4628      	mov	r0, r5
 800c982:	f000 f883 	bl	800ca8c <__smakebuf_r>
 800c986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c98a:	f013 0201 	ands.w	r2, r3, #1
 800c98e:	d00a      	beq.n	800c9a6 <__swsetup_r+0x9a>
 800c990:	2200      	movs	r2, #0
 800c992:	60a2      	str	r2, [r4, #8]
 800c994:	6962      	ldr	r2, [r4, #20]
 800c996:	4252      	negs	r2, r2
 800c998:	61a2      	str	r2, [r4, #24]
 800c99a:	6922      	ldr	r2, [r4, #16]
 800c99c:	b942      	cbnz	r2, 800c9b0 <__swsetup_r+0xa4>
 800c99e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c9a2:	d1c5      	bne.n	800c930 <__swsetup_r+0x24>
 800c9a4:	bd38      	pop	{r3, r4, r5, pc}
 800c9a6:	0799      	lsls	r1, r3, #30
 800c9a8:	bf58      	it	pl
 800c9aa:	6962      	ldrpl	r2, [r4, #20]
 800c9ac:	60a2      	str	r2, [r4, #8]
 800c9ae:	e7f4      	b.n	800c99a <__swsetup_r+0x8e>
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	e7f7      	b.n	800c9a4 <__swsetup_r+0x98>
 800c9b4:	200000fc 	.word	0x200000fc

0800c9b8 <_raise_r>:
 800c9b8:	291f      	cmp	r1, #31
 800c9ba:	b538      	push	{r3, r4, r5, lr}
 800c9bc:	4605      	mov	r5, r0
 800c9be:	460c      	mov	r4, r1
 800c9c0:	d904      	bls.n	800c9cc <_raise_r+0x14>
 800c9c2:	2316      	movs	r3, #22
 800c9c4:	6003      	str	r3, [r0, #0]
 800c9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c9ce:	b112      	cbz	r2, 800c9d6 <_raise_r+0x1e>
 800c9d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9d4:	b94b      	cbnz	r3, 800c9ea <_raise_r+0x32>
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f000 f830 	bl	800ca3c <_getpid_r>
 800c9dc:	4622      	mov	r2, r4
 800c9de:	4601      	mov	r1, r0
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9e6:	f000 b817 	b.w	800ca18 <_kill_r>
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d00a      	beq.n	800ca04 <_raise_r+0x4c>
 800c9ee:	1c59      	adds	r1, r3, #1
 800c9f0:	d103      	bne.n	800c9fa <_raise_r+0x42>
 800c9f2:	2316      	movs	r3, #22
 800c9f4:	6003      	str	r3, [r0, #0]
 800c9f6:	2001      	movs	r0, #1
 800c9f8:	e7e7      	b.n	800c9ca <_raise_r+0x12>
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca00:	4620      	mov	r0, r4
 800ca02:	4798      	blx	r3
 800ca04:	2000      	movs	r0, #0
 800ca06:	e7e0      	b.n	800c9ca <_raise_r+0x12>

0800ca08 <raise>:
 800ca08:	4b02      	ldr	r3, [pc, #8]	@ (800ca14 <raise+0xc>)
 800ca0a:	4601      	mov	r1, r0
 800ca0c:	6818      	ldr	r0, [r3, #0]
 800ca0e:	f7ff bfd3 	b.w	800c9b8 <_raise_r>
 800ca12:	bf00      	nop
 800ca14:	200000fc 	.word	0x200000fc

0800ca18 <_kill_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d07      	ldr	r5, [pc, #28]	@ (800ca38 <_kill_r+0x20>)
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	4604      	mov	r4, r0
 800ca20:	4608      	mov	r0, r1
 800ca22:	4611      	mov	r1, r2
 800ca24:	602b      	str	r3, [r5, #0]
 800ca26:	f7f6 fad5 	bl	8002fd4 <_kill>
 800ca2a:	1c43      	adds	r3, r0, #1
 800ca2c:	d102      	bne.n	800ca34 <_kill_r+0x1c>
 800ca2e:	682b      	ldr	r3, [r5, #0]
 800ca30:	b103      	cbz	r3, 800ca34 <_kill_r+0x1c>
 800ca32:	6023      	str	r3, [r4, #0]
 800ca34:	bd38      	pop	{r3, r4, r5, pc}
 800ca36:	bf00      	nop
 800ca38:	20000a4c 	.word	0x20000a4c

0800ca3c <_getpid_r>:
 800ca3c:	f7f6 bac2 	b.w	8002fc4 <_getpid>

0800ca40 <__swhatbuf_r>:
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	460c      	mov	r4, r1
 800ca44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca48:	2900      	cmp	r1, #0
 800ca4a:	b096      	sub	sp, #88	@ 0x58
 800ca4c:	4615      	mov	r5, r2
 800ca4e:	461e      	mov	r6, r3
 800ca50:	da0d      	bge.n	800ca6e <__swhatbuf_r+0x2e>
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca58:	f04f 0100 	mov.w	r1, #0
 800ca5c:	bf14      	ite	ne
 800ca5e:	2340      	movne	r3, #64	@ 0x40
 800ca60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca64:	2000      	movs	r0, #0
 800ca66:	6031      	str	r1, [r6, #0]
 800ca68:	602b      	str	r3, [r5, #0]
 800ca6a:	b016      	add	sp, #88	@ 0x58
 800ca6c:	bd70      	pop	{r4, r5, r6, pc}
 800ca6e:	466a      	mov	r2, sp
 800ca70:	f000 f848 	bl	800cb04 <_fstat_r>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	dbec      	blt.n	800ca52 <__swhatbuf_r+0x12>
 800ca78:	9901      	ldr	r1, [sp, #4]
 800ca7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca82:	4259      	negs	r1, r3
 800ca84:	4159      	adcs	r1, r3
 800ca86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca8a:	e7eb      	b.n	800ca64 <__swhatbuf_r+0x24>

0800ca8c <__smakebuf_r>:
 800ca8c:	898b      	ldrh	r3, [r1, #12]
 800ca8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca90:	079d      	lsls	r5, r3, #30
 800ca92:	4606      	mov	r6, r0
 800ca94:	460c      	mov	r4, r1
 800ca96:	d507      	bpl.n	800caa8 <__smakebuf_r+0x1c>
 800ca98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca9c:	6023      	str	r3, [r4, #0]
 800ca9e:	6123      	str	r3, [r4, #16]
 800caa0:	2301      	movs	r3, #1
 800caa2:	6163      	str	r3, [r4, #20]
 800caa4:	b003      	add	sp, #12
 800caa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caa8:	ab01      	add	r3, sp, #4
 800caaa:	466a      	mov	r2, sp
 800caac:	f7ff ffc8 	bl	800ca40 <__swhatbuf_r>
 800cab0:	9f00      	ldr	r7, [sp, #0]
 800cab2:	4605      	mov	r5, r0
 800cab4:	4639      	mov	r1, r7
 800cab6:	4630      	mov	r0, r6
 800cab8:	f7fc ffb6 	bl	8009a28 <_malloc_r>
 800cabc:	b948      	cbnz	r0, 800cad2 <__smakebuf_r+0x46>
 800cabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac2:	059a      	lsls	r2, r3, #22
 800cac4:	d4ee      	bmi.n	800caa4 <__smakebuf_r+0x18>
 800cac6:	f023 0303 	bic.w	r3, r3, #3
 800caca:	f043 0302 	orr.w	r3, r3, #2
 800cace:	81a3      	strh	r3, [r4, #12]
 800cad0:	e7e2      	b.n	800ca98 <__smakebuf_r+0xc>
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	6020      	str	r0, [r4, #0]
 800cad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cada:	81a3      	strh	r3, [r4, #12]
 800cadc:	9b01      	ldr	r3, [sp, #4]
 800cade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cae2:	b15b      	cbz	r3, 800cafc <__smakebuf_r+0x70>
 800cae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cae8:	4630      	mov	r0, r6
 800caea:	f000 f81d 	bl	800cb28 <_isatty_r>
 800caee:	b128      	cbz	r0, 800cafc <__smakebuf_r+0x70>
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	f023 0303 	bic.w	r3, r3, #3
 800caf6:	f043 0301 	orr.w	r3, r3, #1
 800cafa:	81a3      	strh	r3, [r4, #12]
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	431d      	orrs	r5, r3
 800cb00:	81a5      	strh	r5, [r4, #12]
 800cb02:	e7cf      	b.n	800caa4 <__smakebuf_r+0x18>

0800cb04 <_fstat_r>:
 800cb04:	b538      	push	{r3, r4, r5, lr}
 800cb06:	4d07      	ldr	r5, [pc, #28]	@ (800cb24 <_fstat_r+0x20>)
 800cb08:	2300      	movs	r3, #0
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	4608      	mov	r0, r1
 800cb0e:	4611      	mov	r1, r2
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	f7f6 fabf 	bl	8003094 <_fstat>
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	d102      	bne.n	800cb20 <_fstat_r+0x1c>
 800cb1a:	682b      	ldr	r3, [r5, #0]
 800cb1c:	b103      	cbz	r3, 800cb20 <_fstat_r+0x1c>
 800cb1e:	6023      	str	r3, [r4, #0]
 800cb20:	bd38      	pop	{r3, r4, r5, pc}
 800cb22:	bf00      	nop
 800cb24:	20000a4c 	.word	0x20000a4c

0800cb28 <_isatty_r>:
 800cb28:	b538      	push	{r3, r4, r5, lr}
 800cb2a:	4d06      	ldr	r5, [pc, #24]	@ (800cb44 <_isatty_r+0x1c>)
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	4604      	mov	r4, r0
 800cb30:	4608      	mov	r0, r1
 800cb32:	602b      	str	r3, [r5, #0]
 800cb34:	f7f6 fabe 	bl	80030b4 <_isatty>
 800cb38:	1c43      	adds	r3, r0, #1
 800cb3a:	d102      	bne.n	800cb42 <_isatty_r+0x1a>
 800cb3c:	682b      	ldr	r3, [r5, #0]
 800cb3e:	b103      	cbz	r3, 800cb42 <_isatty_r+0x1a>
 800cb40:	6023      	str	r3, [r4, #0]
 800cb42:	bd38      	pop	{r3, r4, r5, pc}
 800cb44:	20000a4c 	.word	0x20000a4c

0800cb48 <_init>:
 800cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4a:	bf00      	nop
 800cb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb4e:	bc08      	pop	{r3}
 800cb50:	469e      	mov	lr, r3
 800cb52:	4770      	bx	lr

0800cb54 <_fini>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	bf00      	nop
 800cb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5a:	bc08      	pop	{r3}
 800cb5c:	469e      	mov	lr, r3
 800cb5e:	4770      	bx	lr
