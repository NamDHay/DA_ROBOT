
Robot_4D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800cb98  0800cb98  0000db98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d084  0800d084  0000f2b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d084  0800d084  0000e084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d08c  0800d08c  0000f2b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d08c  0800d08c  0000e08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d090  0800d090  0000e090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0800d094  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2b8  2**0
                  CONTENTS
 10 .bss          000007a4  200002b8  200002b8  0000f2b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a5c  20000a5c  0000f2b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001004e  00000000  00000000  0000f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b1  00000000  00000000  0001f336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  000217e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b64  00000000  00000000  00022688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224a7  00000000  00000000  000231ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011228  00000000  00000000  00045693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0be  00000000  00000000  000568bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124979  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005510  00000000  00000000  001249bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009a  00000000  00000000  00129ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b8 	.word	0x200002b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb80 	.word	0x0800cb80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	0800cb80 	.word	0x0800cb80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_uldivmod>:
 8000ea4:	b953      	cbnz	r3, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea6:	b94a      	cbnz	r2, 8000ebc <__aeabi_uldivmod+0x18>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bf08      	it	eq
 8000eac:	2800      	cmpeq	r0, #0
 8000eae:	bf1c      	itt	ne
 8000eb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb8:	f000 b9a0 	b.w	80011fc <__aeabi_idiv0>
 8000ebc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ec0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec4:	f000 f83c 	bl	8000f40 <__udivmoddi4>
 8000ec8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_d2lz>:
 8000ed4:	b538      	push	{r3, r4, r5, lr}
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	460d      	mov	r5, r1
 8000ede:	f7ff fdfd 	bl	8000adc <__aeabi_dcmplt>
 8000ee2:	b928      	cbnz	r0, 8000ef0 <__aeabi_d2lz+0x1c>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eec:	f000 b80a 	b.w	8000f04 <__aeabi_d2ulz>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ef6:	f000 f805 	bl	8000f04 <__aeabi_d2ulz>
 8000efa:	4240      	negs	r0, r0
 8000efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb73 	bl	80005f8 <__aeabi_dmul>
 8000f12:	f7ff fe49 	bl	8000ba8 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff faf4 	bl	8000504 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb6a 	bl	80005f8 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f9ac 	bl	8000288 <__aeabi_dsub>
 8000f30:	f7ff fe3a 	bl	8000ba8 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	460c      	mov	r4, r1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d14e      	bne.n	8000fea <__udivmoddi4+0xaa>
 8000f4c:	4694      	mov	ip, r2
 8000f4e:	458c      	cmp	ip, r1
 8000f50:	4686      	mov	lr, r0
 8000f52:	fab2 f282 	clz	r2, r2
 8000f56:	d962      	bls.n	800101e <__udivmoddi4+0xde>
 8000f58:	b14a      	cbz	r2, 8000f6e <__udivmoddi4+0x2e>
 8000f5a:	f1c2 0320 	rsb	r3, r2, #32
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	fa20 f303 	lsr.w	r3, r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	4319      	orrs	r1, r3
 8000f6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f72:	fa1f f68c 	uxth.w	r6, ip
 8000f76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb04 f106 	mul.w	r1, r4, r6
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d90a      	bls.n	8000fa4 <__udivmoddi4+0x64>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f96:	f080 8112 	bcs.w	80011be <__udivmoddi4+0x27e>
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	f240 810f 	bls.w	80011be <__udivmoddi4+0x27e>
 8000fa0:	3c02      	subs	r4, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a59      	subs	r1, r3, r1
 8000fa6:	fa1f f38e 	uxth.w	r3, lr
 8000faa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fae:	fb07 1110 	mls	r1, r7, r0, r1
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f606 	mul.w	r6, r0, r6
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	d90a      	bls.n	8000fd4 <__udivmoddi4+0x94>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc6:	f080 80fc 	bcs.w	80011c2 <__udivmoddi4+0x282>
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	f240 80f9 	bls.w	80011c2 <__udivmoddi4+0x282>
 8000fd0:	4463      	add	r3, ip
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000fda:	2100      	movs	r1, #0
 8000fdc:	b11d      	cbz	r5, 8000fe6 <__udivmoddi4+0xa6>
 8000fde:	40d3      	lsrs	r3, r2
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d905      	bls.n	8000ffa <__udivmoddi4+0xba>
 8000fee:	b10d      	cbz	r5, 8000ff4 <__udivmoddi4+0xb4>
 8000ff0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e7f5      	b.n	8000fe6 <__udivmoddi4+0xa6>
 8000ffa:	fab3 f183 	clz	r1, r3
 8000ffe:	2900      	cmp	r1, #0
 8001000:	d146      	bne.n	8001090 <__udivmoddi4+0x150>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d302      	bcc.n	800100c <__udivmoddi4+0xcc>
 8001006:	4290      	cmp	r0, r2
 8001008:	f0c0 80f0 	bcc.w	80011ec <__udivmoddi4+0x2ac>
 800100c:	1a86      	subs	r6, r0, r2
 800100e:	eb64 0303 	sbc.w	r3, r4, r3
 8001012:	2001      	movs	r0, #1
 8001014:	2d00      	cmp	r5, #0
 8001016:	d0e6      	beq.n	8000fe6 <__udivmoddi4+0xa6>
 8001018:	e9c5 6300 	strd	r6, r3, [r5]
 800101c:	e7e3      	b.n	8000fe6 <__udivmoddi4+0xa6>
 800101e:	2a00      	cmp	r2, #0
 8001020:	f040 8090 	bne.w	8001144 <__udivmoddi4+0x204>
 8001024:	eba1 040c 	sub.w	r4, r1, ip
 8001028:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800102c:	fa1f f78c 	uxth.w	r7, ip
 8001030:	2101      	movs	r1, #1
 8001032:	fbb4 f6f8 	udiv	r6, r4, r8
 8001036:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800103a:	fb08 4416 	mls	r4, r8, r6, r4
 800103e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001042:	fb07 f006 	mul.w	r0, r7, r6
 8001046:	4298      	cmp	r0, r3
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x11c>
 800104a:	eb1c 0303 	adds.w	r3, ip, r3
 800104e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001052:	d202      	bcs.n	800105a <__udivmoddi4+0x11a>
 8001054:	4298      	cmp	r0, r3
 8001056:	f200 80cd 	bhi.w	80011f4 <__udivmoddi4+0x2b4>
 800105a:	4626      	mov	r6, r4
 800105c:	1a1c      	subs	r4, r3, r0
 800105e:	fa1f f38e 	uxth.w	r3, lr
 8001062:	fbb4 f0f8 	udiv	r0, r4, r8
 8001066:	fb08 4410 	mls	r4, r8, r0, r4
 800106a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800106e:	fb00 f707 	mul.w	r7, r0, r7
 8001072:	429f      	cmp	r7, r3
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x148>
 8001076:	eb1c 0303 	adds.w	r3, ip, r3
 800107a:	f100 34ff 	add.w	r4, r0, #4294967295
 800107e:	d202      	bcs.n	8001086 <__udivmoddi4+0x146>
 8001080:	429f      	cmp	r7, r3
 8001082:	f200 80b0 	bhi.w	80011e6 <__udivmoddi4+0x2a6>
 8001086:	4620      	mov	r0, r4
 8001088:	1bdb      	subs	r3, r3, r7
 800108a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800108e:	e7a5      	b.n	8000fdc <__udivmoddi4+0x9c>
 8001090:	f1c1 0620 	rsb	r6, r1, #32
 8001094:	408b      	lsls	r3, r1
 8001096:	fa22 f706 	lsr.w	r7, r2, r6
 800109a:	431f      	orrs	r7, r3
 800109c:	fa20 fc06 	lsr.w	ip, r0, r6
 80010a0:	fa04 f301 	lsl.w	r3, r4, r1
 80010a4:	ea43 030c 	orr.w	r3, r3, ip
 80010a8:	40f4      	lsrs	r4, r6
 80010aa:	fa00 f801 	lsl.w	r8, r0, r1
 80010ae:	0c38      	lsrs	r0, r7, #16
 80010b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010b4:	fbb4 fef0 	udiv	lr, r4, r0
 80010b8:	fa1f fc87 	uxth.w	ip, r7
 80010bc:	fb00 441e 	mls	r4, r0, lr, r4
 80010c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010c4:	fb0e f90c 	mul.w	r9, lr, ip
 80010c8:	45a1      	cmp	r9, r4
 80010ca:	fa02 f201 	lsl.w	r2, r2, r1
 80010ce:	d90a      	bls.n	80010e6 <__udivmoddi4+0x1a6>
 80010d0:	193c      	adds	r4, r7, r4
 80010d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80010d6:	f080 8084 	bcs.w	80011e2 <__udivmoddi4+0x2a2>
 80010da:	45a1      	cmp	r9, r4
 80010dc:	f240 8081 	bls.w	80011e2 <__udivmoddi4+0x2a2>
 80010e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80010e4:	443c      	add	r4, r7
 80010e6:	eba4 0409 	sub.w	r4, r4, r9
 80010ea:	fa1f f983 	uxth.w	r9, r3
 80010ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80010f2:	fb00 4413 	mls	r4, r0, r3, r4
 80010f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80010fe:	45a4      	cmp	ip, r4
 8001100:	d907      	bls.n	8001112 <__udivmoddi4+0x1d2>
 8001102:	193c      	adds	r4, r7, r4
 8001104:	f103 30ff 	add.w	r0, r3, #4294967295
 8001108:	d267      	bcs.n	80011da <__udivmoddi4+0x29a>
 800110a:	45a4      	cmp	ip, r4
 800110c:	d965      	bls.n	80011da <__udivmoddi4+0x29a>
 800110e:	3b02      	subs	r3, #2
 8001110:	443c      	add	r4, r7
 8001112:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001116:	fba0 9302 	umull	r9, r3, r0, r2
 800111a:	eba4 040c 	sub.w	r4, r4, ip
 800111e:	429c      	cmp	r4, r3
 8001120:	46ce      	mov	lr, r9
 8001122:	469c      	mov	ip, r3
 8001124:	d351      	bcc.n	80011ca <__udivmoddi4+0x28a>
 8001126:	d04e      	beq.n	80011c6 <__udivmoddi4+0x286>
 8001128:	b155      	cbz	r5, 8001140 <__udivmoddi4+0x200>
 800112a:	ebb8 030e 	subs.w	r3, r8, lr
 800112e:	eb64 040c 	sbc.w	r4, r4, ip
 8001132:	fa04 f606 	lsl.w	r6, r4, r6
 8001136:	40cb      	lsrs	r3, r1
 8001138:	431e      	orrs	r6, r3
 800113a:	40cc      	lsrs	r4, r1
 800113c:	e9c5 6400 	strd	r6, r4, [r5]
 8001140:	2100      	movs	r1, #0
 8001142:	e750      	b.n	8000fe6 <__udivmoddi4+0xa6>
 8001144:	f1c2 0320 	rsb	r3, r2, #32
 8001148:	fa20 f103 	lsr.w	r1, r0, r3
 800114c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001150:	fa24 f303 	lsr.w	r3, r4, r3
 8001154:	4094      	lsls	r4, r2
 8001156:	430c      	orrs	r4, r1
 8001158:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800115c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001160:	fa1f f78c 	uxth.w	r7, ip
 8001164:	fbb3 f0f8 	udiv	r0, r3, r8
 8001168:	fb08 3110 	mls	r1, r8, r0, r3
 800116c:	0c23      	lsrs	r3, r4, #16
 800116e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001172:	fb00 f107 	mul.w	r1, r0, r7
 8001176:	4299      	cmp	r1, r3
 8001178:	d908      	bls.n	800118c <__udivmoddi4+0x24c>
 800117a:	eb1c 0303 	adds.w	r3, ip, r3
 800117e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001182:	d22c      	bcs.n	80011de <__udivmoddi4+0x29e>
 8001184:	4299      	cmp	r1, r3
 8001186:	d92a      	bls.n	80011de <__udivmoddi4+0x29e>
 8001188:	3802      	subs	r0, #2
 800118a:	4463      	add	r3, ip
 800118c:	1a5b      	subs	r3, r3, r1
 800118e:	b2a4      	uxth	r4, r4
 8001190:	fbb3 f1f8 	udiv	r1, r3, r8
 8001194:	fb08 3311 	mls	r3, r8, r1, r3
 8001198:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800119c:	fb01 f307 	mul.w	r3, r1, r7
 80011a0:	42a3      	cmp	r3, r4
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0x276>
 80011a4:	eb1c 0404 	adds.w	r4, ip, r4
 80011a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011ac:	d213      	bcs.n	80011d6 <__udivmoddi4+0x296>
 80011ae:	42a3      	cmp	r3, r4
 80011b0:	d911      	bls.n	80011d6 <__udivmoddi4+0x296>
 80011b2:	3902      	subs	r1, #2
 80011b4:	4464      	add	r4, ip
 80011b6:	1ae4      	subs	r4, r4, r3
 80011b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011bc:	e739      	b.n	8001032 <__udivmoddi4+0xf2>
 80011be:	4604      	mov	r4, r0
 80011c0:	e6f0      	b.n	8000fa4 <__udivmoddi4+0x64>
 80011c2:	4608      	mov	r0, r1
 80011c4:	e706      	b.n	8000fd4 <__udivmoddi4+0x94>
 80011c6:	45c8      	cmp	r8, r9
 80011c8:	d2ae      	bcs.n	8001128 <__udivmoddi4+0x1e8>
 80011ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80011ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80011d2:	3801      	subs	r0, #1
 80011d4:	e7a8      	b.n	8001128 <__udivmoddi4+0x1e8>
 80011d6:	4631      	mov	r1, r6
 80011d8:	e7ed      	b.n	80011b6 <__udivmoddi4+0x276>
 80011da:	4603      	mov	r3, r0
 80011dc:	e799      	b.n	8001112 <__udivmoddi4+0x1d2>
 80011de:	4630      	mov	r0, r6
 80011e0:	e7d4      	b.n	800118c <__udivmoddi4+0x24c>
 80011e2:	46d6      	mov	lr, sl
 80011e4:	e77f      	b.n	80010e6 <__udivmoddi4+0x1a6>
 80011e6:	4463      	add	r3, ip
 80011e8:	3802      	subs	r0, #2
 80011ea:	e74d      	b.n	8001088 <__udivmoddi4+0x148>
 80011ec:	4606      	mov	r6, r0
 80011ee:	4623      	mov	r3, r4
 80011f0:	4608      	mov	r0, r1
 80011f2:	e70f      	b.n	8001014 <__udivmoddi4+0xd4>
 80011f4:	3e02      	subs	r6, #2
 80011f6:	4463      	add	r3, ip
 80011f8:	e730      	b.n	800105c <__udivmoddi4+0x11c>
 80011fa:	bf00      	nop

080011fc <__aeabi_idiv0>:
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <UART_Handle>:
float setpoint1, setpoint2, setpoint3, setpoint4;
float preSetpoint1, preSetpoint2, preSetpoint3, preSetpoint4;
float p0_1 = 0, p0_2 = 0, p0_3 = 0, p0_4 = 0;
uint8_t MagState = 0;

void UART_Handle(char *data) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
 8001206:	6078      	str	r0, [r7, #4]
	if (flag_uart_rx == 1 && strstr(data, "\n")) {
 8001208:	4b3b      	ldr	r3, [pc, #236]	@ (80012f8 <UART_Handle+0xf8>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d16f      	bne.n	80012f0 <UART_Handle+0xf0>
 8001210:	210a      	movs	r1, #10
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f007 fcc1 	bl	8008b9a <strchr>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d068      	beq.n	80012f0 <UART_Handle+0xf0>
		if (strstr(data, "t1")) {
 800121e:	4937      	ldr	r1, [pc, #220]	@ (80012fc <UART_Handle+0xfc>)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f007 fcc7 	bl	8008bb4 <strstr>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d009      	beq.n	8001240 <UART_Handle+0x40>
			sscanf(data, "t1:%f,t2:%f,t3:%f,t4:%f\n", &setpoint1, &setpoint2,
 800122c:	4b34      	ldr	r3, [pc, #208]	@ (8001300 <UART_Handle+0x100>)
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <UART_Handle+0x104>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	4b34      	ldr	r3, [pc, #208]	@ (8001308 <UART_Handle+0x108>)
 8001236:	4a35      	ldr	r2, [pc, #212]	@ (800130c <UART_Handle+0x10c>)
 8001238:	4935      	ldr	r1, [pc, #212]	@ (8001310 <UART_Handle+0x110>)
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f007 fc36 	bl	8008aac <siscanf>
					&setpoint3, &setpoint4);
		}
		if (strstr(data, "qd")) {
 8001240:	4934      	ldr	r1, [pc, #208]	@ (8001314 <UART_Handle+0x114>)
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f007 fcb6 	bl	8008bb4 <strstr>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d019      	beq.n	8001282 <UART_Handle+0x82>
			sscanf(data, "qd[%f,%f,%f,%f,%f,%hhd", &setpoint1, &setpoint2,
 800124e:	4b32      	ldr	r3, [pc, #200]	@ (8001318 <UART_Handle+0x118>)
 8001250:	9303      	str	r3, [sp, #12]
 8001252:	4b32      	ldr	r3, [pc, #200]	@ (800131c <UART_Handle+0x11c>)
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <UART_Handle+0x100>)
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <UART_Handle+0x104>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4b2a      	ldr	r3, [pc, #168]	@ (8001308 <UART_Handle+0x108>)
 8001260:	4a2a      	ldr	r2, [pc, #168]	@ (800130c <UART_Handle+0x10c>)
 8001262:	492f      	ldr	r1, [pc, #188]	@ (8001320 <UART_Handle+0x120>)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f007 fc21 	bl	8008aac <siscanf>
					&setpoint3, &setpoint4, &Tf, &MagState);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, !MagState);
 800126a:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <UART_Handle+0x118>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	2140      	movs	r1, #64	@ 0x40
 800127c:	4829      	ldr	r0, [pc, #164]	@ (8001324 <UART_Handle+0x124>)
 800127e:	f002 ff11 	bl	80040a4 <HAL_GPIO_WritePin>
		}
		if (strstr(data, "home")) {
 8001282:	4929      	ldr	r1, [pc, #164]	@ (8001328 <UART_Handle+0x128>)
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f007 fc95 	bl	8008bb4 <strstr>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <UART_Handle+0x96>
			IsHome = true;
 8001290:	4b26      	ldr	r3, [pc, #152]	@ (800132c <UART_Handle+0x12c>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
		}
		if (strstr(data, "Reset")) {
 8001296:	4926      	ldr	r1, [pc, #152]	@ (8001330 <UART_Handle+0x130>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f007 fc8b 	bl	8008bb4 <strstr>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <UART_Handle+0xa8>
			HAL_NVIC_SystemReset();
 80012a4:	f002 f937 	bl	8003516 <HAL_NVIC_SystemReset>
		}
		if (strstr(data, "hut")) {
 80012a8:	4922      	ldr	r1, [pc, #136]	@ (8001334 <UART_Handle+0x134>)
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f007 fc82 	bl	8008bb4 <strstr>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <UART_Handle+0xc0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2140      	movs	r1, #64	@ 0x40
 80012ba:	481a      	ldr	r0, [pc, #104]	@ (8001324 <UART_Handle+0x124>)
 80012bc:	f002 fef2 	bl	80040a4 <HAL_GPIO_WritePin>
		}
		if (strstr(data, "nha")) {
 80012c0:	491d      	ldr	r1, [pc, #116]	@ (8001338 <UART_Handle+0x138>)
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f007 fc76 	bl	8008bb4 <strstr>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <UART_Handle+0xd8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2140      	movs	r1, #64	@ 0x40
 80012d2:	4814      	ldr	r0, [pc, #80]	@ (8001324 <UART_Handle+0x124>)
 80012d4:	f002 fee6 	bl	80040a4 <HAL_GPIO_WritePin>
		}
		flag_uart_rx = 0;
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <UART_Handle+0xf8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
		memset(data, 0, strlen(data));
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7fe ffc6 	bl	8000270 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f007 fc4d 	bl	8008b8a <memset>
	}
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200005d8 	.word	0x200005d8
 80012fc:	0800cb98 	.word	0x0800cb98
 8001300:	200008e0 	.word	0x200008e0
 8001304:	200008dc 	.word	0x200008dc
 8001308:	200008d8 	.word	0x200008d8
 800130c:	200008d4 	.word	0x200008d4
 8001310:	0800cb9c 	.word	0x0800cb9c
 8001314:	0800cbb8 	.word	0x0800cbb8
 8001318:	20000904 	.word	0x20000904
 800131c:	200000e0 	.word	0x200000e0
 8001320:	0800cbbc 	.word	0x0800cbbc
 8001324:	40020400 	.word	0x40020400
 8001328:	0800cbd4 	.word	0x0800cbd4
 800132c:	200005e1 	.word	0x200005e1
 8001330:	0800cbdc 	.word	0x0800cbdc
 8001334:	0800cbe4 	.word	0x0800cbe4
 8001338:	0800cbe8 	.word	0x0800cbe8

0800133c <UartIdle_Init>:

void UartIdle_Init() {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) uartLogBuffer, MAX_MESG);
 8001340:	2264      	movs	r2, #100	@ 0x64
 8001342:	4907      	ldr	r1, [pc, #28]	@ (8001360 <UartIdle_Init+0x24>)
 8001344:	4807      	ldr	r0, [pc, #28]	@ (8001364 <UartIdle_Init+0x28>)
 8001346:	f004 fe8a 	bl	800605e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <UartIdle_Init+0x2c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <UartIdle_Init+0x2c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0208 	bic.w	r2, r2, #8
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000574 	.word	0x20000574
 8001364:	200004cc 	.word	0x200004cc
 8001368:	20000514 	.word	0x20000514

0800136c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_UARTEx_RxEventCallback+0x34>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10a      	bne.n	8001398 <HAL_UARTEx_RxEventCallback+0x2c>
		uartLogRxSize = Size;
 8001382:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <HAL_UARTEx_RxEventCallback+0x38>)
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	8013      	strh	r3, [r2, #0]
		flag_uart_rx = 1;
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <HAL_UARTEx_RxEventCallback+0x3c>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*) uartLogBuffer, MAX_MESG);
 800138e:	2264      	movs	r2, #100	@ 0x64
 8001390:	4906      	ldr	r1, [pc, #24]	@ (80013ac <HAL_UARTEx_RxEventCallback+0x40>)
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f004 fe63 	bl	800605e <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40004800 	.word	0x40004800
 80013a4:	200005da 	.word	0x200005da
 80013a8:	200005d8 	.word	0x200005d8
 80013ac:	20000574 	.word	0x20000574

080013b0 <p>:

float p(float p0, float pf, float tf, float v0, float vf, float T) {
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80013ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80013be:	ed87 1a03 	vstr	s2, [r7, #12]
 80013c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80013c6:	ed87 2a01 	vstr	s4, [r7, #4]
 80013ca:	edc7 2a00 	vstr	s5, [r7]
	return p0 + v0 * T
 80013ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d2:	edd7 7a00 	vldr	s15, [r7]
 80013d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013da:	edd7 7a05 	vldr	s15, [r7, #20]
 80013de:	ee37 7a27 	vadd.f32	s14, s14, s15
			  + (3 * (pf - p0) / (tf * tf) - 2 * v0 / tf - vf / tf) * (T * T)
 80013e2:	edd7 6a04 	vldr	s13, [r7, #16]
 80013e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013ee:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80013f2:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80013f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013fe:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001402:	edd7 7a02 	vldr	s15, [r7, #8]
 8001406:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800140a:	ed97 6a03 	vldr	s12, [r7, #12]
 800140e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001412:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001416:	edd7 5a01 	vldr	s11, [r7, #4]
 800141a:	ed97 6a03 	vldr	s12, [r7, #12]
 800141e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001422:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001426:	edd7 7a00 	vldr	s15, [r7]
 800142a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee37 7a27 	vadd.f32	s14, s14, s15
			  + (-2 * (pf - p0) / (tf * tf * tf) + (vf + v0) / (tf * tf)) * (T * T * T);
 8001436:	edd7 6a04 	vldr	s13, [r7, #16]
 800143a:	edd7 7a05 	vldr	s15, [r7, #20]
 800143e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001442:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8001446:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800144a:	edd7 7a03 	vldr	s15, [r7, #12]
 800144e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001452:	edd7 7a03 	vldr	s15, [r7, #12]
 8001456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800145e:	ed97 6a01 	vldr	s12, [r7, #4]
 8001462:	edd7 7a02 	vldr	s15, [r7, #8]
 8001466:	ee76 5a27 	vadd.f32	s11, s12, s15
 800146a:	edd7 7a03 	vldr	s15, [r7, #12]
 800146e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001472:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001476:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800147a:	edd7 7a00 	vldr	s15, [r7]
 800147e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001482:	edd7 7a00 	vldr	s15, [r7]
 8001486:	ee66 7a27 	vmul.f32	s15, s12, s15
 800148a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001492:	eeb0 0a67 	vmov.f32	s0, s15
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4ac2      	ldr	r2, [pc, #776]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	f040 817c 	bne.w	80017aa <HAL_TIM_PeriodElapsedCallback+0x30a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80014b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014b6:	48c0      	ldr	r0, [pc, #768]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80014b8:	f002 fe0d 	bl	80040d6 <HAL_GPIO_TogglePin>
//		MOTOR_runAngle(&motor3);
//		MOTOR_runAngle(&motor4);

//		Uncomment this for real run
		static uint8_t mode = 0;
		switch (mode) {
 80014bc:	4bbf      	ldr	r3, [pc, #764]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	f200 8171 	bhi.w	80017a8 <HAL_TIM_PeriodElapsedCallback+0x308>
 80014c6:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080014e1 	.word	0x080014e1
 80014d0:	0800155b 	.word	0x0800155b
 80014d4:	080015d5 	.word	0x080015d5
 80014d8:	0800164f 	.word	0x0800164f
 80014dc:	080016c9 	.word	0x080016c9
		case 0:
			if (T1 <= Tf) {
 80014e0:	4bb7      	ldr	r3, [pc, #732]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80014e2:	ed93 7a00 	vldr	s14, [r3]
 80014e6:	4bb7      	ldr	r3, [pc, #732]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	d82a      	bhi.n	800154c <HAL_TIM_PeriodElapsedCallback+0xac>
				T1 += 5;
 80014f6:	4bb2      	ldr	r3, [pc, #712]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001500:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001504:	4bae      	ldr	r3, [pc, #696]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
				MOTOR_setAngle(&motor1, p(p0_1, setpoint1, Tf, 0, 0, T1));
 800150a:	4baf      	ldr	r3, [pc, #700]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	4bae      	ldr	r3, [pc, #696]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001512:	ed93 7a00 	vldr	s14, [r3]
 8001516:	4bab      	ldr	r3, [pc, #684]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001518:	edd3 6a00 	vldr	s13, [r3]
 800151c:	4ba8      	ldr	r3, [pc, #672]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800151e:	ed93 6a00 	vldr	s12, [r3]
 8001522:	eef0 2a46 	vmov.f32	s5, s12
 8001526:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 80017d0 <HAL_TIM_PeriodElapsedCallback+0x330>
 800152a:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 80017d0 <HAL_TIM_PeriodElapsedCallback+0x330>
 800152e:	eeb0 1a66 	vmov.f32	s2, s13
 8001532:	eef0 0a47 	vmov.f32	s1, s14
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	f7ff ff39 	bl	80013b0 <p>
 800153e:	eef0 7a40 	vmov.f32	s15, s0
 8001542:	eeb0 0a67 	vmov.f32	s0, s15
 8001546:	48a3      	ldr	r0, [pc, #652]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001548:	f006 f8b2 	bl	80076b0 <MOTOR_setAngle>
			}
			MOTOR_runAngle(&motor1);
 800154c:	48a1      	ldr	r0, [pc, #644]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800154e:	f006 f8c5 	bl	80076dc <MOTOR_runAngle>
			mode = 1;
 8001552:	4b9a      	ldr	r3, [pc, #616]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
			break;
 8001558:	e127      	b.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x30a>
		case 1:
			if (T2 <= Tf) {
 800155a:	4b9f      	ldr	r3, [pc, #636]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800155c:	ed93 7a00 	vldr	s14, [r3]
 8001560:	4b98      	ldr	r3, [pc, #608]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	d82a      	bhi.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0x126>
				T2 += 5;
 8001570:	4b99      	ldr	r3, [pc, #612]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800157a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800157e:	4b96      	ldr	r3, [pc, #600]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001580:	edc3 7a00 	vstr	s15, [r3]
				MOTOR_setAngle(&motor2, p(p0_2, setpoint2, Tf, 0, 0, T2));
 8001584:	4b95      	ldr	r3, [pc, #596]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	4b95      	ldr	r3, [pc, #596]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	4b8c      	ldr	r3, [pc, #560]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001592:	edd3 6a00 	vldr	s13, [r3]
 8001596:	4b90      	ldr	r3, [pc, #576]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001598:	ed93 6a00 	vldr	s12, [r3]
 800159c:	eef0 2a46 	vmov.f32	s5, s12
 80015a0:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 80017d0 <HAL_TIM_PeriodElapsedCallback+0x330>
 80015a4:	eddf 1a8a 	vldr	s3, [pc, #552]	@ 80017d0 <HAL_TIM_PeriodElapsedCallback+0x330>
 80015a8:	eeb0 1a66 	vmov.f32	s2, s13
 80015ac:	eef0 0a47 	vmov.f32	s1, s14
 80015b0:	eeb0 0a67 	vmov.f32	s0, s15
 80015b4:	f7ff fefc 	bl	80013b0 <p>
 80015b8:	eef0 7a40 	vmov.f32	s15, s0
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	4888      	ldr	r0, [pc, #544]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80015c2:	f006 f875 	bl	80076b0 <MOTOR_setAngle>
			}
			MOTOR_runAngle(&motor2);
 80015c6:	4887      	ldr	r0, [pc, #540]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80015c8:	f006 f888 	bl	80076dc <MOTOR_runAngle>
			mode = 2;
 80015cc:	4b7b      	ldr	r3, [pc, #492]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]
			break;
 80015d2:	e0ea      	b.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x30a>
		case 2:
			if (T3 <= Tf) {
 80015d4:	4b84      	ldr	r3, [pc, #528]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	4b7a      	ldr	r3, [pc, #488]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e8:	d82a      	bhi.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x1a0>
				T3 += 5;
 80015ea:	4b7f      	ldr	r3, [pc, #508]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80015f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015f8:	4b7b      	ldr	r3, [pc, #492]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80015fa:	edc3 7a00 	vstr	s15, [r3]
				MOTOR_setAngle(&motor3, p(p0_3, setpoint3, Tf, 0, 0, T3));
 80015fe:	4b7b      	ldr	r3, [pc, #492]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	4b7a      	ldr	r3, [pc, #488]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	4b6e      	ldr	r3, [pc, #440]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800160c:	edd3 6a00 	vldr	s13, [r3]
 8001610:	4b75      	ldr	r3, [pc, #468]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001612:	ed93 6a00 	vldr	s12, [r3]
 8001616:	eef0 2a46 	vmov.f32	s5, s12
 800161a:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 80017d0 <HAL_TIM_PeriodElapsedCallback+0x330>
 800161e:	eddf 1a6c 	vldr	s3, [pc, #432]	@ 80017d0 <HAL_TIM_PeriodElapsedCallback+0x330>
 8001622:	eeb0 1a66 	vmov.f32	s2, s13
 8001626:	eef0 0a47 	vmov.f32	s1, s14
 800162a:	eeb0 0a67 	vmov.f32	s0, s15
 800162e:	f7ff febf 	bl	80013b0 <p>
 8001632:	eef0 7a40 	vmov.f32	s15, s0
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	486e      	ldr	r0, [pc, #440]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800163c:	f006 f838 	bl	80076b0 <MOTOR_setAngle>
			}
			MOTOR_runAngle(&motor3);
 8001640:	486c      	ldr	r0, [pc, #432]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001642:	f006 f84b 	bl	80076dc <MOTOR_runAngle>
			mode = 3;
 8001646:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001648:	2203      	movs	r2, #3
 800164a:	701a      	strb	r2, [r3, #0]
			break;
 800164c:	e0ad      	b.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x30a>
		case 3:
			if (T4 <= Tf) {
 800164e:	4b6a      	ldr	r3, [pc, #424]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	4b5b      	ldr	r3, [pc, #364]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	d82a      	bhi.n	80016ba <HAL_TIM_PeriodElapsedCallback+0x21a>
				T4 += 5;
 8001664:	4b64      	ldr	r3, [pc, #400]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800166e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001672:	4b61      	ldr	r3, [pc, #388]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
				MOTOR_setAngle(&motor4, p(p0_4, setpoint4, Tf, 0, 0, T4));
 8001678:	4b60      	ldr	r3, [pc, #384]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	4b60      	ldr	r3, [pc, #384]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001680:	ed93 7a00 	vldr	s14, [r3]
 8001684:	4b4f      	ldr	r3, [pc, #316]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001686:	edd3 6a00 	vldr	s13, [r3]
 800168a:	4b5b      	ldr	r3, [pc, #364]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800168c:	ed93 6a00 	vldr	s12, [r3]
 8001690:	eef0 2a46 	vmov.f32	s5, s12
 8001694:	ed9f 2a4e 	vldr	s4, [pc, #312]	@ 80017d0 <HAL_TIM_PeriodElapsedCallback+0x330>
 8001698:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 80017d0 <HAL_TIM_PeriodElapsedCallback+0x330>
 800169c:	eeb0 1a66 	vmov.f32	s2, s13
 80016a0:	eef0 0a47 	vmov.f32	s1, s14
 80016a4:	eeb0 0a67 	vmov.f32	s0, s15
 80016a8:	f7ff fe82 	bl	80013b0 <p>
 80016ac:	eef0 7a40 	vmov.f32	s15, s0
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	4853      	ldr	r0, [pc, #332]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80016b6:	f005 fffb 	bl	80076b0 <MOTOR_setAngle>
			}
			MOTOR_runAngle(&motor4);
 80016ba:	4852      	ldr	r0, [pc, #328]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80016bc:	f006 f80e 	bl	80076dc <MOTOR_runAngle>
			mode = 4;
 80016c0:	4b3e      	ldr	r3, [pc, #248]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80016c2:	2204      	movs	r2, #4
 80016c4:	701a      	strb	r2, [r3, #0]
			break;
 80016c6:	e070      	b.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x30a>
		case 4:
			if (setpoint1 != preSetpoint1) {
 80016c8:	4b40      	ldr	r3, [pc, #256]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016ca:	ed93 7a00 	vldr	s14, [r3]
 80016ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	d00f      	beq.n	80016fe <HAL_TIM_PeriodElapsedCallback+0x25e>
				T1 = 0;
 80016de:	4b38      	ldr	r3, [pc, #224]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
				p0_1 = MOTOR_getPos(&motor1);
 80016e6:	483b      	ldr	r0, [pc, #236]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016e8:	f006 f8f6 	bl	80078d8 <MOTOR_getPos>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	4b35      	ldr	r3, [pc, #212]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016f2:	edc3 7a00 	vstr	s15, [r3]
				preSetpoint1 = setpoint1;
 80016f6:	4b35      	ldr	r3, [pc, #212]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a43      	ldr	r2, [pc, #268]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80016fc:	6013      	str	r3, [r2, #0]
			}
			if (setpoint2 != preSetpoint2) {
 80016fe:	4b38      	ldr	r3, [pc, #224]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	4b41      	ldr	r3, [pc, #260]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	eeb4 7a67 	vcmp.f32	s14, s15
 800170e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001712:	d00f      	beq.n	8001734 <HAL_TIM_PeriodElapsedCallback+0x294>
				T2 = 0;
 8001714:	4b30      	ldr	r3, [pc, #192]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
				p0_2 = MOTOR_getPos(&motor2);
 800171c:	4831      	ldr	r0, [pc, #196]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800171e:	f006 f8db 	bl	80078d8 <MOTOR_getPos>
 8001722:	eef0 7a40 	vmov.f32	s15, s0
 8001726:	4b2d      	ldr	r3, [pc, #180]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001728:	edc3 7a00 	vstr	s15, [r3]
				preSetpoint2 = setpoint2;
 800172c:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a36      	ldr	r2, [pc, #216]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001732:	6013      	str	r3, [r2, #0]
			}
			if (setpoint3 != preSetpoint3) {
 8001734:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b35      	ldr	r3, [pc, #212]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eeb4 7a67 	vcmp.f32	s14, s15
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d00f      	beq.n	800176a <HAL_TIM_PeriodElapsedCallback+0x2ca>
				T3 = 0;
 800174a:	4b27      	ldr	r3, [pc, #156]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
				p0_3 = MOTOR_getPos(&motor3);
 8001752:	4828      	ldr	r0, [pc, #160]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001754:	f006 f8c0 	bl	80078d8 <MOTOR_getPos>
 8001758:	eef0 7a40 	vmov.f32	s15, s0
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800175e:	edc3 7a00 	vstr	s15, [r3]
				preSetpoint3 = setpoint3;
 8001762:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2a      	ldr	r2, [pc, #168]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001768:	6013      	str	r3, [r2, #0]
			}
			if (setpoint4 != preSetpoint4) {
 800176a:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800176c:	ed93 7a00 	vldr	s14, [r3]
 8001770:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb4 7a67 	vcmp.f32	s14, s15
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	d00f      	beq.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x300>
				T4 = 0;
 8001780:	4b1d      	ldr	r3, [pc, #116]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
				p0_4 = MOTOR_getPos(&motor4);
 8001788:	481e      	ldr	r0, [pc, #120]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800178a:	f006 f8a5 	bl	80078d8 <MOTOR_getPos>
 800178e:	eef0 7a40 	vmov.f32	s15, s0
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001794:	edc3 7a00 	vstr	s15, [r3]
				preSetpoint4 = setpoint4;
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1d      	ldr	r2, [pc, #116]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800179e:	6013      	str	r3, [r2, #0]
			}
			mode = 0;
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
			break;
 80017a6:	e000      	b.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x30a>
		default:
			break;
 80017a8:	bf00      	nop
		}
	}
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000484 	.word	0x20000484
 80017b8:	40020800 	.word	0x40020800
 80017bc:	20000905 	.word	0x20000905
 80017c0:	200008c4 	.word	0x200008c4
 80017c4:	200000e0 	.word	0x200000e0
 80017c8:	200008f4 	.word	0x200008f4
 80017cc:	200008d4 	.word	0x200008d4
 80017d0:	00000000 	.word	0x00000000
 80017d4:	200005e4 	.word	0x200005e4
 80017d8:	200008c8 	.word	0x200008c8
 80017dc:	200008f8 	.word	0x200008f8
 80017e0:	200008d8 	.word	0x200008d8
 80017e4:	2000069c 	.word	0x2000069c
 80017e8:	200008cc 	.word	0x200008cc
 80017ec:	200008fc 	.word	0x200008fc
 80017f0:	200008dc 	.word	0x200008dc
 80017f4:	20000754 	.word	0x20000754
 80017f8:	200008d0 	.word	0x200008d0
 80017fc:	20000900 	.word	0x20000900
 8001800:	200008e0 	.word	0x200008e0
 8001804:	2000080c 	.word	0x2000080c
 8001808:	200008e4 	.word	0x200008e4
 800180c:	200008e8 	.word	0x200008e8
 8001810:	200008ec 	.word	0x200008ec
 8001814:	200008f0 	.word	0x200008f0

08001818 <SetHome>:

void SetHome(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	if(IsHome) {
 800181c:	4bb4      	ldr	r3, [pc, #720]	@ (8001af0 <SetHome+0x2d8>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d02f      	beq.n	8001884 <SetHome+0x6c>
		MOTOR_reset(&motor1);
 8001824:	48b3      	ldr	r0, [pc, #716]	@ (8001af4 <SetHome+0x2dc>)
 8001826:	f006 f81e 	bl	8007866 <MOTOR_reset>
		MOTOR_reset(&motor2);
 800182a:	48b3      	ldr	r0, [pc, #716]	@ (8001af8 <SetHome+0x2e0>)
 800182c:	f006 f81b 	bl	8007866 <MOTOR_reset>
		MOTOR_reset(&motor3);
 8001830:	48b2      	ldr	r0, [pc, #712]	@ (8001afc <SetHome+0x2e4>)
 8001832:	f006 f818 	bl	8007866 <MOTOR_reset>
		MOTOR_reset(&motor4);
 8001836:	48b2      	ldr	r0, [pc, #712]	@ (8001b00 <SetHome+0x2e8>)
 8001838:	f006 f815 	bl	8007866 <MOTOR_reset>
		setHomeOk = 0;
 800183c:	4bb1      	ldr	r3, [pc, #708]	@ (8001b04 <SetHome+0x2ec>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
		setHome234Flag = 1;
 8001842:	4bb1      	ldr	r3, [pc, #708]	@ (8001b08 <SetHome+0x2f0>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
		setHome1234Flag = 1;
 8001848:	4bb0      	ldr	r3, [pc, #704]	@ (8001b0c <SetHome+0x2f4>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
		setHomeJ1 = setHomeJ2 = setHomeJ3 = setHomeJ4 = 0;
 800184e:	4bb0      	ldr	r3, [pc, #704]	@ (8001b10 <SetHome+0x2f8>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	4bae      	ldr	r3, [pc, #696]	@ (8001b10 <SetHome+0x2f8>)
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	4bae      	ldr	r3, [pc, #696]	@ (8001b14 <SetHome+0x2fc>)
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	4bad      	ldr	r3, [pc, #692]	@ (8001b14 <SetHome+0x2fc>)
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	4bad      	ldr	r3, [pc, #692]	@ (8001b18 <SetHome+0x300>)
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	4bac      	ldr	r3, [pc, #688]	@ (8001b18 <SetHome+0x300>)
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	4bac      	ldr	r3, [pc, #688]	@ (8001b1c <SetHome+0x304>)
 800186a:	701a      	strb	r2, [r3, #0]
		if (setHomeOk == 0)
 800186c:	4ba5      	ldr	r3, [pc, #660]	@ (8001b04 <SetHome+0x2ec>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d104      	bne.n	800187e <SetHome+0x66>
			MOTOR_setAngle(&motor3, 300);
 8001874:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8001b20 <SetHome+0x308>
 8001878:	48a0      	ldr	r0, [pc, #640]	@ (8001afc <SetHome+0x2e4>)
 800187a:	f005 ff19 	bl	80076b0 <MOTOR_setAngle>
		IsHome = false;
 800187e:	4b9c      	ldr	r3, [pc, #624]	@ (8001af0 <SetHome+0x2d8>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
	}
	if (setHome1234Flag == 1 && setHomeOk == 0) {
 8001884:	4ba1      	ldr	r3, [pc, #644]	@ (8001b0c <SetHome+0x2f4>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	f040 8217 	bne.w	8001cbc <SetHome+0x4a4>
 800188e:	4b9d      	ldr	r3, [pc, #628]	@ (8001b04 <SetHome+0x2ec>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 8212 	bne.w	8001cbc <SetHome+0x4a4>
		if (setHomeJ1 == 1 && setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1) {
 8001898:	4ba0      	ldr	r3, [pc, #640]	@ (8001b1c <SetHome+0x304>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d16b      	bne.n	8001978 <SetHome+0x160>
 80018a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001b18 <SetHome+0x300>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d167      	bne.n	8001978 <SetHome+0x160>
 80018a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001b14 <SetHome+0x2fc>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d163      	bne.n	8001978 <SetHome+0x160>
 80018b0:	4b97      	ldr	r3, [pc, #604]	@ (8001b10 <SetHome+0x2f8>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d15f      	bne.n	8001978 <SetHome+0x160>
			MOTOR_setAngle(&motor4, 133);
			if (fabs(MOTOR_getPos(&motor2) - 50)  < 1
			 && fabs(MOTOR_getPos(&motor3) + 84)  < 1
			 && fabs(MOTOR_getPos(&motor4) - 133) < 1) {
#else
			MOTOR_setAngle(&motor1, 0);
 80018b8:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8001b24 <SetHome+0x30c>
 80018bc:	488d      	ldr	r0, [pc, #564]	@ (8001af4 <SetHome+0x2dc>)
 80018be:	f005 fef7 	bl	80076b0 <MOTOR_setAngle>
			MOTOR_setAngle(&motor2, 40);
 80018c2:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 8001b28 <SetHome+0x310>
 80018c6:	488c      	ldr	r0, [pc, #560]	@ (8001af8 <SetHome+0x2e0>)
 80018c8:	f005 fef2 	bl	80076b0 <MOTOR_setAngle>
			MOTOR_setAngle(&motor3, -82);
 80018cc:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8001b2c <SetHome+0x314>
 80018d0:	488a      	ldr	r0, [pc, #552]	@ (8001afc <SetHome+0x2e4>)
 80018d2:	f005 feed 	bl	80076b0 <MOTOR_setAngle>
			MOTOR_setAngle(&motor4, -125);
 80018d6:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8001b30 <SetHome+0x318>
 80018da:	4889      	ldr	r0, [pc, #548]	@ (8001b00 <SetHome+0x2e8>)
 80018dc:	f005 fee8 	bl	80076b0 <MOTOR_setAngle>
			if (fabs(MOTOR_getPos(&motor2) - 40)  < 1
 80018e0:	4885      	ldr	r0, [pc, #532]	@ (8001af8 <SetHome+0x2e0>)
 80018e2:	f005 fff9 	bl	80078d8 <MOTOR_getPos>
 80018e6:	eef0 7a40 	vmov.f32	s15, s0
 80018ea:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8001b28 <SetHome+0x310>
 80018ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018f2:	eef0 7ae7 	vabs.f32	s15, s15
 80018f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	f140 8183 	bpl.w	8001c0c <SetHome+0x3f4>
			 && fabs(MOTOR_getPos(&motor3) + 82)  < 1
 8001906:	487d      	ldr	r0, [pc, #500]	@ (8001afc <SetHome+0x2e4>)
 8001908:	f005 ffe6 	bl	80078d8 <MOTOR_getPos>
 800190c:	eef0 7a40 	vmov.f32	s15, s0
 8001910:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001b34 <SetHome+0x31c>
 8001914:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001918:	eef0 7ae7 	vabs.f32	s15, s15
 800191c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	d400      	bmi.n	800192c <SetHome+0x114>
			if (fabs(MOTOR_getPos(&motor2) - 40)  < 1
 800192a:	e16f      	b.n	8001c0c <SetHome+0x3f4>
			 && fabs(MOTOR_getPos(&motor4) + 125) < 1) {
 800192c:	4874      	ldr	r0, [pc, #464]	@ (8001b00 <SetHome+0x2e8>)
 800192e:	f005 ffd3 	bl	80078d8 <MOTOR_getPos>
 8001932:	eef0 7a40 	vmov.f32	s15, s0
 8001936:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8001b38 <SetHome+0x320>
 800193a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800193e:	eef0 7ae7 	vabs.f32	s15, s15
 8001942:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d400      	bmi.n	8001952 <SetHome+0x13a>
			if (fabs(MOTOR_getPos(&motor2) - 40)  < 1
 8001950:	e15c      	b.n	8001c0c <SetHome+0x3f4>
#endif
				setHome234Flag = 0;
 8001952:	4b6d      	ldr	r3, [pc, #436]	@ (8001b08 <SetHome+0x2f0>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
				setHome1234Flag = 0;
 8001958:	4b6c      	ldr	r3, [pc, #432]	@ (8001b0c <SetHome+0x2f4>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
				setHomeOk = 1;
 800195e:	4b69      	ldr	r3, [pc, #420]	@ (8001b04 <SetHome+0x2ec>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
				MOTOR_reset(&motor2);
 8001964:	4864      	ldr	r0, [pc, #400]	@ (8001af8 <SetHome+0x2e0>)
 8001966:	f005 ff7e 	bl	8007866 <MOTOR_reset>
				MOTOR_reset(&motor3);
 800196a:	4864      	ldr	r0, [pc, #400]	@ (8001afc <SetHome+0x2e4>)
 800196c:	f005 ff7b 	bl	8007866 <MOTOR_reset>
				MOTOR_reset(&motor4);
 8001970:	4863      	ldr	r0, [pc, #396]	@ (8001b00 <SetHome+0x2e8>)
 8001972:	f005 ff78 	bl	8007866 <MOTOR_reset>
			if (fabs(MOTOR_getPos(&motor2) - 40)  < 1
 8001976:	e149      	b.n	8001c0c <SetHome+0x3f4>
			}
		} else if (setHomeJ2 == 1 && setHomeJ3 == 1 && setHomeJ4 == 1) {
 8001978:	4b67      	ldr	r3, [pc, #412]	@ (8001b18 <SetHome+0x300>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	f040 8145 	bne.w	8001c0c <SetHome+0x3f4>
 8001982:	4b64      	ldr	r3, [pc, #400]	@ (8001b14 <SetHome+0x2fc>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	f040 8140 	bne.w	8001c0c <SetHome+0x3f4>
 800198c:	4b60      	ldr	r3, [pc, #384]	@ (8001b10 <SetHome+0x2f8>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	f040 813b 	bne.w	8001c0c <SetHome+0x3f4>
			if (fabs(motor1.setPoint) <= 2) {
 8001996:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <SetHome+0x2dc>)
 8001998:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 800199c:	eef0 7ae7 	vabs.f32	s15, s15
 80019a0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80019a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ac:	d805      	bhi.n	80019ba <SetHome+0x1a2>
				MOTOR_setAngle(&motor1, -20.0f);
 80019ae:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 80019b2:	4850      	ldr	r0, [pc, #320]	@ (8001af4 <SetHome+0x2dc>)
 80019b4:	f005 fe7c 	bl	80076b0 <MOTOR_setAngle>
 80019b8:	e128      	b.n	8001c0c <SetHome+0x3f4>
			} else if (fabs(MOTOR_getPos(&motor1) + 20.0f) < 2
 80019ba:	484e      	ldr	r0, [pc, #312]	@ (8001af4 <SetHome+0x2dc>)
 80019bc:	f005 ff8c 	bl	80078d8 <MOTOR_getPos>
 80019c0:	eef0 7a40 	vmov.f32	s15, s0
 80019c4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80019c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019cc:	eef0 7ae7 	vabs.f32	s15, s15
 80019d0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80019d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	d514      	bpl.n	8001a08 <SetHome+0x1f0>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == -20) {
 80019de:	4b45      	ldr	r3, [pc, #276]	@ (8001af4 <SetHome+0x2dc>)
 80019e0:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 80019e4:	4b43      	ldr	r3, [pc, #268]	@ (8001af4 <SetHome+0x2dc>)
 80019e6:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 80019ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f2:	ee17 3a90 	vmov	r3, s15
 80019f6:	f113 0f14 	cmn.w	r3, #20
 80019fa:	d105      	bne.n	8001a08 <SetHome+0x1f0>
				MOTOR_setAngle(&motor1, 20.0f);
 80019fc:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001a00:	483c      	ldr	r0, [pc, #240]	@ (8001af4 <SetHome+0x2dc>)
 8001a02:	f005 fe55 	bl	80076b0 <MOTOR_setAngle>
 8001a06:	e101      	b.n	8001c0c <SetHome+0x3f4>
			} else if (fabs(MOTOR_getPos(&motor1) - 20.0f) < 2
 8001a08:	483a      	ldr	r0, [pc, #232]	@ (8001af4 <SetHome+0x2dc>)
 8001a0a:	f005 ff65 	bl	80078d8 <MOTOR_getPos>
 8001a0e:	eef0 7a40 	vmov.f32	s15, s0
 8001a12:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a1a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a1e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d513      	bpl.n	8001a54 <SetHome+0x23c>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == 20) {
 8001a2c:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <SetHome+0x2dc>)
 8001a2e:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001a32:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <SetHome+0x2dc>)
 8001a34:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a40:	ee17 3a90 	vmov	r3, s15
 8001a44:	2b14      	cmp	r3, #20
 8001a46:	d105      	bne.n	8001a54 <SetHome+0x23c>
				MOTOR_setAngle(&motor1, -40.0f);
 8001a48:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8001b3c <SetHome+0x324>
 8001a4c:	4829      	ldr	r0, [pc, #164]	@ (8001af4 <SetHome+0x2dc>)
 8001a4e:	f005 fe2f 	bl	80076b0 <MOTOR_setAngle>
 8001a52:	e0db      	b.n	8001c0c <SetHome+0x3f4>
			} else if (fabs(MOTOR_getPos(&motor1) + 40.0f) < 2
 8001a54:	4827      	ldr	r0, [pc, #156]	@ (8001af4 <SetHome+0x2dc>)
 8001a56:	f005 ff3f 	bl	80078d8 <MOTOR_getPos>
 8001a5a:	eef0 7a40 	vmov.f32	s15, s0
 8001a5e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001b28 <SetHome+0x310>
 8001a62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a66:	eef0 7ae7 	vabs.f32	s15, s15
 8001a6a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a76:	d514      	bpl.n	8001aa2 <SetHome+0x28a>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == -40) {
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <SetHome+0x2dc>)
 8001a7a:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <SetHome+0x2dc>)
 8001a80:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8c:	ee17 3a90 	vmov	r3, s15
 8001a90:	f113 0f28 	cmn.w	r3, #40	@ 0x28
 8001a94:	d105      	bne.n	8001aa2 <SetHome+0x28a>
				MOTOR_setAngle(&motor1, 40.0f);
 8001a96:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001b28 <SetHome+0x310>
 8001a9a:	4816      	ldr	r0, [pc, #88]	@ (8001af4 <SetHome+0x2dc>)
 8001a9c:	f005 fe08 	bl	80076b0 <MOTOR_setAngle>
 8001aa0:	e0b4      	b.n	8001c0c <SetHome+0x3f4>
			} else if (fabs(MOTOR_getPos(&motor1) - 40.0f) < 2
 8001aa2:	4814      	ldr	r0, [pc, #80]	@ (8001af4 <SetHome+0x2dc>)
 8001aa4:	f005 ff18 	bl	80078d8 <MOTOR_getPos>
 8001aa8:	eef0 7a40 	vmov.f32	s15, s0
 8001aac:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001b28 <SetHome+0x310>
 8001ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ab4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ab8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	d53e      	bpl.n	8001b44 <SetHome+0x32c>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == 40) {
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <SetHome+0x2dc>)
 8001ac8:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <SetHome+0x2dc>)
 8001ace:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ada:	ee17 3a90 	vmov	r3, s15
 8001ade:	2b28      	cmp	r3, #40	@ 0x28
 8001ae0:	d130      	bne.n	8001b44 <SetHome+0x32c>
				MOTOR_setAngle(&motor1, -60.0f);
 8001ae2:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001b40 <SetHome+0x328>
 8001ae6:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <SetHome+0x2dc>)
 8001ae8:	f005 fde2 	bl	80076b0 <MOTOR_setAngle>
 8001aec:	e08e      	b.n	8001c0c <SetHome+0x3f4>
 8001aee:	bf00      	nop
 8001af0:	200005e1 	.word	0x200005e1
 8001af4:	200005e4 	.word	0x200005e4
 8001af8:	2000069c 	.word	0x2000069c
 8001afc:	20000754 	.word	0x20000754
 8001b00:	2000080c 	.word	0x2000080c
 8001b04:	200005dc 	.word	0x200005dc
 8001b08:	200005e2 	.word	0x200005e2
 8001b0c:	200005e3 	.word	0x200005e3
 8001b10:	200005e0 	.word	0x200005e0
 8001b14:	200005df 	.word	0x200005df
 8001b18:	200005de 	.word	0x200005de
 8001b1c:	200005dd 	.word	0x200005dd
 8001b20:	43960000 	.word	0x43960000
 8001b24:	00000000 	.word	0x00000000
 8001b28:	42200000 	.word	0x42200000
 8001b2c:	c2a40000 	.word	0xc2a40000
 8001b30:	c2fa0000 	.word	0xc2fa0000
 8001b34:	42a40000 	.word	0x42a40000
 8001b38:	42fa0000 	.word	0x42fa0000
 8001b3c:	c2200000 	.word	0xc2200000
 8001b40:	c2700000 	.word	0xc2700000
			} else if (fabs(MOTOR_getPos(&motor1) + 60.0f) < 2
 8001b44:	486d      	ldr	r0, [pc, #436]	@ (8001cfc <SetHome+0x4e4>)
 8001b46:	f005 fec7 	bl	80078d8 <MOTOR_getPos>
 8001b4a:	eef0 7a40 	vmov.f32	s15, s0
 8001b4e:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001d00 <SetHome+0x4e8>
 8001b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b56:	eef0 7ae7 	vabs.f32	s15, s15
 8001b5a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	d514      	bpl.n	8001b92 <SetHome+0x37a>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == -60) {
 8001b68:	4b64      	ldr	r3, [pc, #400]	@ (8001cfc <SetHome+0x4e4>)
 8001b6a:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001b6e:	4b63      	ldr	r3, [pc, #396]	@ (8001cfc <SetHome+0x4e4>)
 8001b70:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7c:	ee17 3a90 	vmov	r3, s15
 8001b80:	f113 0f3c 	cmn.w	r3, #60	@ 0x3c
 8001b84:	d105      	bne.n	8001b92 <SetHome+0x37a>
				MOTOR_setAngle(&motor1, 60.0f);
 8001b86:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8001d00 <SetHome+0x4e8>
 8001b8a:	485c      	ldr	r0, [pc, #368]	@ (8001cfc <SetHome+0x4e4>)
 8001b8c:	f005 fd90 	bl	80076b0 <MOTOR_setAngle>
 8001b90:	e03c      	b.n	8001c0c <SetHome+0x3f4>
			} else if (fabs(MOTOR_getPos(&motor1) - 60.0f) < 2
 8001b92:	485a      	ldr	r0, [pc, #360]	@ (8001cfc <SetHome+0x4e4>)
 8001b94:	f005 fea0 	bl	80078d8 <MOTOR_getPos>
 8001b98:	eef0 7a40 	vmov.f32	s15, s0
 8001b9c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001d00 <SetHome+0x4e8>
 8001ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ba4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ba8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d513      	bpl.n	8001bde <SetHome+0x3c6>
				  && (int) (motor1.setPoint / motor1.ratioJoint) == 60) {
 8001bb6:	4b51      	ldr	r3, [pc, #324]	@ (8001cfc <SetHome+0x4e4>)
 8001bb8:	edd3 6a26 	vldr	s13, [r3, #152]	@ 0x98
 8001bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8001cfc <SetHome+0x4e4>)
 8001bbe:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 8001bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bca:	ee17 3a90 	vmov	r3, s15
 8001bce:	2b3c      	cmp	r3, #60	@ 0x3c
 8001bd0:	d105      	bne.n	8001bde <SetHome+0x3c6>
				MOTOR_setAngle(&motor1, -80.0f);
 8001bd2:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8001d04 <SetHome+0x4ec>
 8001bd6:	4849      	ldr	r0, [pc, #292]	@ (8001cfc <SetHome+0x4e4>)
 8001bd8:	f005 fd6a 	bl	80076b0 <MOTOR_setAngle>
 8001bdc:	e016      	b.n	8001c0c <SetHome+0x3f4>
			} else if (fabs(MOTOR_getPos(&motor1) + 80.0f) < 2) {
 8001bde:	4847      	ldr	r0, [pc, #284]	@ (8001cfc <SetHome+0x4e4>)
 8001be0:	f005 fe7a 	bl	80078d8 <MOTOR_getPos>
 8001be4:	eef0 7a40 	vmov.f32	s15, s0
 8001be8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d08 <SetHome+0x4f0>
 8001bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf0:	eef0 7ae7 	vabs.f32	s15, s15
 8001bf4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	d504      	bpl.n	8001c0c <SetHome+0x3f4>
				MOTOR_setAngle(&motor1, 80.0f);
 8001c02:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8001d08 <SetHome+0x4f0>
 8001c06:	483d      	ldr	r0, [pc, #244]	@ (8001cfc <SetHome+0x4e4>)
 8001c08:	f005 fd52 	bl	80076b0 <MOTOR_setAngle>
			}
		}
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6) == 0 && setHomeJ1 == 0) {
 8001c0c:	2140      	movs	r1, #64	@ 0x40
 8001c0e:	483f      	ldr	r0, [pc, #252]	@ (8001d0c <SetHome+0x4f4>)
 8001c10:	f002 fa30 	bl	8004074 <HAL_GPIO_ReadPin>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <SetHome+0x416>
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d10 <SetHome+0x4f8>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <SetHome+0x416>
			setHomeJ1 = 1;
 8001c22:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <SetHome+0x4f8>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 8001c28:	4834      	ldr	r0, [pc, #208]	@ (8001cfc <SetHome+0x4e4>)
 8001c2a:	f005 fe1c 	bl	8007866 <MOTOR_reset>
		}
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0 && setHomeJ2 == 0) {
 8001c2e:	2104      	movs	r1, #4
 8001c30:	4836      	ldr	r0, [pc, #216]	@ (8001d0c <SetHome+0x4f4>)
 8001c32:	f002 fa1f 	bl	8004074 <HAL_GPIO_ReadPin>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <SetHome+0x438>
 8001c3c:	4b35      	ldr	r3, [pc, #212]	@ (8001d14 <SetHome+0x4fc>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <SetHome+0x438>
			setHomeJ2 = 1;
 8001c44:	4b33      	ldr	r3, [pc, #204]	@ (8001d14 <SetHome+0x4fc>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 8001c4a:	4833      	ldr	r0, [pc, #204]	@ (8001d18 <SetHome+0x500>)
 8001c4c:	f005 fe0b 	bl	8007866 <MOTOR_reset>
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 0 && setHomeJ3 == 0) {
 8001c50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c54:	4831      	ldr	r0, [pc, #196]	@ (8001d1c <SetHome+0x504>)
 8001c56:	f002 fa0d 	bl	8004074 <HAL_GPIO_ReadPin>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d11b      	bne.n	8001c98 <SetHome+0x480>
 8001c60:	4b2f      	ldr	r3, [pc, #188]	@ (8001d20 <SetHome+0x508>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d117      	bne.n	8001c98 <SetHome+0x480>
			setHomeJ3 = 1;
 8001c68:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <SetHome+0x508>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 8001c6e:	482d      	ldr	r0, [pc, #180]	@ (8001d24 <SetHome+0x50c>)
 8001c70:	f005 fdf9 	bl	8007866 <MOTOR_reset>
			if (setHomeJ2 == 0) {
 8001c74:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <SetHome+0x4fc>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <SetHome+0x46e>
				MOTOR_setAngle(&motor2, -300);
 8001c7c:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001d28 <SetHome+0x510>
 8001c80:	4825      	ldr	r0, [pc, #148]	@ (8001d18 <SetHome+0x500>)
 8001c82:	f005 fd15 	bl	80076b0 <MOTOR_setAngle>
			}
			if (setHomeJ4 == 0) {
 8001c86:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <SetHome+0x514>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d104      	bne.n	8001c98 <SetHome+0x480>
#ifdef NamDHay
				MOTOR_setAngle(&motor4, -300);
#else
				MOTOR_setAngle(&motor4, 300);
 8001c8e:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001d30 <SetHome+0x518>
 8001c92:	4828      	ldr	r0, [pc, #160]	@ (8001d34 <SetHome+0x51c>)
 8001c94:	f005 fd0c 	bl	80076b0 <MOTOR_setAngle>
#endif
			}
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0 && setHomeJ4 == 0) {
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	4820      	ldr	r0, [pc, #128]	@ (8001d1c <SetHome+0x504>)
 8001c9c:	f002 f9ea 	bl	8004074 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d126      	bne.n	8001cf4 <SetHome+0x4dc>
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <SetHome+0x514>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d122      	bne.n	8001cf4 <SetHome+0x4dc>
			setHomeJ4 = 1;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <SetHome+0x514>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 8001cb4:	481f      	ldr	r0, [pc, #124]	@ (8001d34 <SetHome+0x51c>)
 8001cb6:	f005 fdd6 	bl	8007866 <MOTOR_reset>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0 && setHomeJ4 == 0) {
 8001cba:	e01b      	b.n	8001cf4 <SetHome+0x4dc>
		}
	} else if (setHome1234Flag == 1 && setHomeOk == 1) {
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <SetHome+0x520>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d118      	bne.n	8001cf6 <SetHome+0x4de>
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <SetHome+0x524>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d114      	bne.n	8001cf6 <SetHome+0x4de>
		setpoint1 = 0;
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <SetHome+0x528>)
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
		setpoint2 = 0;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <SetHome+0x52c>)
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
		setpoint3 = 0;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <SetHome+0x530>)
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
		setpoint4 = 0;
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <SetHome+0x534>)
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
		setHome1234Flag = 0;
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <SetHome+0x520>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
	}
}
 8001cf2:	e000      	b.n	8001cf6 <SetHome+0x4de>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 0 && setHomeJ4 == 0) {
 8001cf4:	bf00      	nop
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200005e4 	.word	0x200005e4
 8001d00:	42700000 	.word	0x42700000
 8001d04:	c2a00000 	.word	0xc2a00000
 8001d08:	42a00000 	.word	0x42a00000
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	200005dd 	.word	0x200005dd
 8001d14:	200005de 	.word	0x200005de
 8001d18:	2000069c 	.word	0x2000069c
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	200005df 	.word	0x200005df
 8001d24:	20000754 	.word	0x20000754
 8001d28:	c3960000 	.word	0xc3960000
 8001d2c:	200005e0 	.word	0x200005e0
 8001d30:	43960000 	.word	0x43960000
 8001d34:	2000080c 	.word	0x2000080c
 8001d38:	200005e3 	.word	0x200005e3
 8001d3c:	200005dc 	.word	0x200005dc
 8001d40:	200008d4 	.word	0x200008d4
 8001d44:	200008d8 	.word	0x200008d8
 8001d48:	200008dc 	.word	0x200008dc
 8001d4c:	200008e0 	.word	0x200008e0

08001d50 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
	if (setHome1234Flag == 1 && setHomeOk == 0) {
 8001d5a:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d14a      	bne.n	8001df8 <HAL_GPIO_EXTI_Callback+0xa8>
 8001d62:	4b28      	ldr	r3, [pc, #160]	@ (8001e04 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d146      	bne.n	8001df8 <HAL_GPIO_EXTI_Callback+0xa8>
		if (GPIO_Pin == GPIO_PIN_2 && setHomeJ2 == 0) {
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d109      	bne.n	8001d84 <HAL_GPIO_EXTI_Callback+0x34>
 8001d70:	4b25      	ldr	r3, [pc, #148]	@ (8001e08 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_GPIO_EXTI_Callback+0x34>
			setHomeJ2 = 1;
 8001d78:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor2);
 8001d7e:	4823      	ldr	r0, [pc, #140]	@ (8001e0c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001d80:	f005 fd71 	bl	8007866 <MOTOR_reset>
		}
		if (GPIO_Pin == GPIO_PIN_11 && setHomeJ3 == 0) {
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_GPIO_EXTI_Callback+0x74>
 8001d8c:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d117      	bne.n	8001dc4 <HAL_GPIO_EXTI_Callback+0x74>
			setHomeJ3 = 1;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor3);
 8001d9a:	481e      	ldr	r0, [pc, #120]	@ (8001e14 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001d9c:	f005 fd63 	bl	8007866 <MOTOR_reset>
			if (setHomeJ2 == 0) {
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d104      	bne.n	8001db2 <HAL_GPIO_EXTI_Callback+0x62>
				MOTOR_setAngle(&motor2, -300);
 8001da8:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001e18 <HAL_GPIO_EXTI_Callback+0xc8>
 8001dac:	4817      	ldr	r0, [pc, #92]	@ (8001e0c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001dae:	f005 fc7f 	bl	80076b0 <MOTOR_setAngle>
			}
			if (setHomeJ4 == 0) {
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d104      	bne.n	8001dc4 <HAL_GPIO_EXTI_Callback+0x74>
#ifdef NamDHay
				MOTOR_setAngle(&motor4, -300);
#else
				MOTOR_setAngle(&motor4, 300);
 8001dba:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001e20 <HAL_GPIO_EXTI_Callback+0xd0>
 8001dbe:	4819      	ldr	r0, [pc, #100]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001dc0:	f005 fc76 	bl	80076b0 <MOTOR_setAngle>
#endif
			}
		}
		if (GPIO_Pin == GPIO_PIN_7 && setHomeJ4 == 0) {
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	2b80      	cmp	r3, #128	@ 0x80
 8001dc8:	d109      	bne.n	8001dde <HAL_GPIO_EXTI_Callback+0x8e>
 8001dca:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_GPIO_EXTI_Callback+0x8e>
			setHomeJ4 = 1;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_GPIO_EXTI_Callback+0xcc>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor4);
 8001dd8:	4812      	ldr	r0, [pc, #72]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001dda:	f005 fd44 	bl	8007866 <MOTOR_reset>
		}
		if (GPIO_Pin == GPIO_PIN_6 && setHomeJ1 == 0) {
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b40      	cmp	r3, #64	@ 0x40
 8001de2:	d109      	bne.n	8001df8 <HAL_GPIO_EXTI_Callback+0xa8>
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_GPIO_EXTI_Callback+0xa8>
			setHomeJ1 = 1;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
			MOTOR_reset(&motor1);
 8001df2:	480e      	ldr	r0, [pc, #56]	@ (8001e2c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001df4:	f005 fd37 	bl	8007866 <MOTOR_reset>
		}
	}
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200005e3 	.word	0x200005e3
 8001e04:	200005dc 	.word	0x200005dc
 8001e08:	200005de 	.word	0x200005de
 8001e0c:	2000069c 	.word	0x2000069c
 8001e10:	200005df 	.word	0x200005df
 8001e14:	20000754 	.word	0x20000754
 8001e18:	c3960000 	.word	0xc3960000
 8001e1c:	200005e0 	.word	0x200005e0
 8001e20:	43960000 	.word	0x43960000
 8001e24:	2000080c 	.word	0x2000080c
 8001e28:	200005dd 	.word	0x200005dd
 8001e2c:	200005e4 	.word	0x200005e4

08001e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e34:	b090      	sub	sp, #64	@ 0x40
 8001e36:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e38:	f001 f9e0 	bl	80031fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e3c:	f000 f95e 	bl	80020fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e40:	f000 fd16 	bl	8002870 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e44:	f000 fcf4 	bl	8002830 <MX_DMA_Init>
  MX_TIM1_Init();
 8001e48:	f000 f9c2 	bl	80021d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e4c:	f000 fa18 	bl	8002280 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e50:	f000 fa6a 	bl	8002328 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e54:	f000 fabc 	bl	80023d0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e58:	f000 fb52 	bl	8002500 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001e5c:	f000 fba4 	bl	80025a8 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001e60:	f000 fc4e 	bl	8002700 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001e64:	f000 fcba 	bl	80027dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MOTOR_setPIDPosition(&motor1, 5, 0, 0, 5);
 8001e68:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001e6c:	ed9f 1a87 	vldr	s2, [pc, #540]	@ 800208c <main+0x25c>
 8001e70:	eddf 0a86 	vldr	s1, [pc, #536]	@ 800208c <main+0x25c>
 8001e74:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001e78:	4885      	ldr	r0, [pc, #532]	@ (8002090 <main+0x260>)
 8001e7a:	f005 fbbd 	bl	80075f8 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor1, 30, 150, 0, 5);
 8001e7e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001e82:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 800208c <main+0x25c>
 8001e86:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8002094 <main+0x264>
 8001e8a:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001e8e:	4880      	ldr	r0, [pc, #512]	@ (8002090 <main+0x260>)
 8001e90:	f005 fb96 	bl	80075c0 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor1, -333, 333);
 8001e94:	eddf 0a80 	vldr	s1, [pc, #512]	@ 8002098 <main+0x268>
 8001e98:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 800209c <main+0x26c>
 8001e9c:	487c      	ldr	r0, [pc, #496]	@ (8002090 <main+0x260>)
 8001e9e:	f005 fbc9 	bl	8007634 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor1, -300, 300);
 8001ea2:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 80020a0 <main+0x270>
 8001ea6:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 80020a4 <main+0x274>
 8001eaa:	4879      	ldr	r0, [pc, #484]	@ (8002090 <main+0x260>)
 8001eac:	f005 fbe4 	bl	8007678 <MOTOR_setWindupRange>
  MOTOR_init(&motor1, &driver1, 1, GPIO_PIN_6, 500);
 8001eb0:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 80020a8 <main+0x278>
 8001eb4:	2240      	movs	r2, #64	@ 0x40
 8001eb6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001eba:	497c      	ldr	r1, [pc, #496]	@ (80020ac <main+0x27c>)
 8001ebc:	4874      	ldr	r0, [pc, #464]	@ (8002090 <main+0x260>)
 8001ebe:	f005 fc6d 	bl	800779c <MOTOR_init>

  MOTOR_setPIDPosition(&motor2, 5, 0, 0, 5);
 8001ec2:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001ec6:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 800208c <main+0x25c>
 8001eca:	eddf 0a70 	vldr	s1, [pc, #448]	@ 800208c <main+0x25c>
 8001ece:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001ed2:	4877      	ldr	r0, [pc, #476]	@ (80020b0 <main+0x280>)
 8001ed4:	f005 fb90 	bl	80075f8 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor2, 30, 150, 0, 5);
 8001ed8:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001edc:	ed9f 1a6b 	vldr	s2, [pc, #428]	@ 800208c <main+0x25c>
 8001ee0:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8002094 <main+0x264>
 8001ee4:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001ee8:	4871      	ldr	r0, [pc, #452]	@ (80020b0 <main+0x280>)
 8001eea:	f005 fb69 	bl	80075c0 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor2, -444, 444);
 8001eee:	eddf 0a71 	vldr	s1, [pc, #452]	@ 80020b4 <main+0x284>
 8001ef2:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 80020b8 <main+0x288>
 8001ef6:	486e      	ldr	r0, [pc, #440]	@ (80020b0 <main+0x280>)
 8001ef8:	f005 fb9c 	bl	8007634 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor2, -400, 400);
 8001efc:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 80020bc <main+0x28c>
 8001f00:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 80020c0 <main+0x290>
 8001f04:	486a      	ldr	r0, [pc, #424]	@ (80020b0 <main+0x280>)
 8001f06:	f005 fbb7 	bl	8007678 <MOTOR_setWindupRange>
  MOTOR_init(&motor2, &driver2, 2, GPIO_PIN_2, 500);
 8001f0a:	eddf 0a67 	vldr	s1, [pc, #412]	@ 80020a8 <main+0x278>
 8001f0e:	2204      	movs	r2, #4
 8001f10:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001f14:	496b      	ldr	r1, [pc, #428]	@ (80020c4 <main+0x294>)
 8001f16:	4866      	ldr	r0, [pc, #408]	@ (80020b0 <main+0x280>)
 8001f18:	f005 fc40 	bl	800779c <MOTOR_init>

  MOTOR_setPIDPosition(&motor3, 5, 0, 0, 5);
 8001f1c:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001f20:	ed9f 1a5a 	vldr	s2, [pc, #360]	@ 800208c <main+0x25c>
 8001f24:	eddf 0a59 	vldr	s1, [pc, #356]	@ 800208c <main+0x25c>
 8001f28:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001f2c:	4866      	ldr	r0, [pc, #408]	@ (80020c8 <main+0x298>)
 8001f2e:	f005 fb63 	bl	80075f8 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor3, 30, 150, 0, 5);
 8001f32:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001f36:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 800208c <main+0x25c>
 8001f3a:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8002094 <main+0x264>
 8001f3e:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001f42:	4861      	ldr	r0, [pc, #388]	@ (80020c8 <main+0x298>)
 8001f44:	f005 fb3c 	bl	80075c0 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor3, -666, 666);
 8001f48:	eddf 0a60 	vldr	s1, [pc, #384]	@ 80020cc <main+0x29c>
 8001f4c:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 80020d0 <main+0x2a0>
 8001f50:	485d      	ldr	r0, [pc, #372]	@ (80020c8 <main+0x298>)
 8001f52:	f005 fb6f 	bl	8007634 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor3, -600, 600);
 8001f56:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 80020d4 <main+0x2a4>
 8001f5a:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 80020d8 <main+0x2a8>
 8001f5e:	485a      	ldr	r0, [pc, #360]	@ (80020c8 <main+0x298>)
 8001f60:	f005 fb8a 	bl	8007678 <MOTOR_setWindupRange>
  MOTOR_init(&motor3, &driver3, 2, GPIO_PIN_11, 500);
 8001f64:	eddf 0a50 	vldr	s1, [pc, #320]	@ 80020a8 <main+0x278>
 8001f68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f6c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001f70:	495a      	ldr	r1, [pc, #360]	@ (80020dc <main+0x2ac>)
 8001f72:	4855      	ldr	r0, [pc, #340]	@ (80020c8 <main+0x298>)
 8001f74:	f005 fc12 	bl	800779c <MOTOR_init>

  MOTOR_setPIDPosition(&motor4, 5, 0, 0, 5);
 8001f78:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001f7c:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 800208c <main+0x25c>
 8001f80:	eddf 0a42 	vldr	s1, [pc, #264]	@ 800208c <main+0x25c>
 8001f84:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001f88:	4855      	ldr	r0, [pc, #340]	@ (80020e0 <main+0x2b0>)
 8001f8a:	f005 fb35 	bl	80075f8 <MOTOR_setPIDPosition>
  MOTOR_setPIDVelocity(&motor4, 3, 50, 0, 5);
 8001f8e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8001f92:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 800208c <main+0x25c>
 8001f96:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80020e4 <main+0x2b4>
 8001f9a:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001f9e:	4850      	ldr	r0, [pc, #320]	@ (80020e0 <main+0x2b0>)
 8001fa0:	f005 fb0e 	bl	80075c0 <MOTOR_setPIDVelocity>
  MOTOR_setOutputRange(&motor4, -666, 666);
 8001fa4:	eddf 0a49 	vldr	s1, [pc, #292]	@ 80020cc <main+0x29c>
 8001fa8:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 80020d0 <main+0x2a0>
 8001fac:	484c      	ldr	r0, [pc, #304]	@ (80020e0 <main+0x2b0>)
 8001fae:	f005 fb41 	bl	8007634 <MOTOR_setOutputRange>
  MOTOR_setWindupRange(&motor4, -600, 600);
 8001fb2:	eddf 0a48 	vldr	s1, [pc, #288]	@ 80020d4 <main+0x2a4>
 8001fb6:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80020d8 <main+0x2a8>
 8001fba:	4849      	ldr	r0, [pc, #292]	@ (80020e0 <main+0x2b0>)
 8001fbc:	f005 fb5c 	bl	8007678 <MOTOR_setWindupRange>
  MOTOR_init(&motor4, &driver4, 1, GPIO_PIN_7, 500);
 8001fc0:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80020a8 <main+0x278>
 8001fc4:	2280      	movs	r2, #128	@ 0x80
 8001fc6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001fca:	4947      	ldr	r1, [pc, #284]	@ (80020e8 <main+0x2b8>)
 8001fcc:	4844      	ldr	r0, [pc, #272]	@ (80020e0 <main+0x2b0>)
 8001fce:	f005 fbe5 	bl	800779c <MOTOR_init>

  HAL_TIM_Base_Start_IT(&htim9);
 8001fd2:	4846      	ldr	r0, [pc, #280]	@ (80020ec <main+0x2bc>)
 8001fd4:	f002 fe02 	bl	8004bdc <HAL_TIM_Base_Start_IT>
  htim9.Instance->ARR = 999;
 8001fd8:	4b44      	ldr	r3, [pc, #272]	@ (80020ec <main+0x2bc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
  UartIdle_Init();
 8001fe2:	f7ff f9ab 	bl	800133c <UartIdle_Init>

  uint32_t pre_time = HAL_GetTick();
 8001fe6:	f001 f96f 	bl	80032c8 <HAL_GetTick>
 8001fea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 	while (1) {
//		Uncomment this for real run
		UART_Handle(uartLogBuffer);
 8001fec:	4840      	ldr	r0, [pc, #256]	@ (80020f0 <main+0x2c0>)
 8001fee:	f7ff f907 	bl	8001200 <UART_Handle>
		SetHome();
 8001ff2:	f7ff fc11 	bl	8001818 <SetHome>
		if (HAL_GetTick() - pre_time >= 200) {
 8001ff6:	f001 f967 	bl	80032c8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2bc7      	cmp	r3, #199	@ 0xc7
 8002002:	d9f3      	bls.n	8001fec <main+0x1bc>
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
					(float) MOTOR_getPos(&motor1),
 8002004:	4822      	ldr	r0, [pc, #136]	@ (8002090 <main+0x260>)
 8002006:	f005 fc67 	bl	80078d8 <MOTOR_getPos>
 800200a:	ee10 3a10 	vmov	r3, s0
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa9a 	bl	8000548 <__aeabi_f2d>
 8002014:	4682      	mov	sl, r0
 8002016:	468b      	mov	fp, r1
					(float) MOTOR_getPos(&motor2),
 8002018:	4825      	ldr	r0, [pc, #148]	@ (80020b0 <main+0x280>)
 800201a:	f005 fc5d 	bl	80078d8 <MOTOR_getPos>
 800201e:	ee10 3a10 	vmov	r3, s0
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa90 	bl	8000548 <__aeabi_f2d>
 8002028:	4604      	mov	r4, r0
 800202a:	460d      	mov	r5, r1
					(float) MOTOR_getPos(&motor3),
 800202c:	4826      	ldr	r0, [pc, #152]	@ (80020c8 <main+0x298>)
 800202e:	f005 fc53 	bl	80078d8 <MOTOR_getPos>
 8002032:	ee10 3a10 	vmov	r3, s0
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fa86 	bl	8000548 <__aeabi_f2d>
 800203c:	4680      	mov	r8, r0
 800203e:	4689      	mov	r9, r1
					(float) MOTOR_getPos(&motor4));
 8002040:	4827      	ldr	r0, [pc, #156]	@ (80020e0 <main+0x2b0>)
 8002042:	f005 fc49 	bl	80078d8 <MOTOR_getPos>
 8002046:	ee10 3a10 	vmov	r3, s0
			sprintf(data_angle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n",
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fa7c 	bl	8000548 <__aeabi_f2d>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	1d38      	adds	r0, r7, #4
 8002056:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800205a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800205e:	e9cd 4500 	strd	r4, r5, [sp]
 8002062:	4652      	mov	r2, sl
 8002064:	465b      	mov	r3, fp
 8002066:	4923      	ldr	r1, [pc, #140]	@ (80020f4 <main+0x2c4>)
 8002068:	f006 fd00 	bl	8008a6c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) data_angle,
					strlen(data_angle), HAL_MAX_DELAY);
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe f8fe 	bl	8000270 <strlen>
 8002074:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) data_angle,
 8002076:	b29a      	uxth	r2, r3
 8002078:	1d39      	adds	r1, r7, #4
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	481e      	ldr	r0, [pc, #120]	@ (80020f8 <main+0x2c8>)
 8002080:	f003 ff62 	bl	8005f48 <HAL_UART_Transmit>

			pre_time = HAL_GetTick();
 8002084:	f001 f920 	bl	80032c8 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	@ 0x24
		UART_Handle(uartLogBuffer);
 800208a:	e7af      	b.n	8001fec <main+0x1bc>
 800208c:	00000000 	.word	0x00000000
 8002090:	200005e4 	.word	0x200005e4
 8002094:	43160000 	.word	0x43160000
 8002098:	43a68000 	.word	0x43a68000
 800209c:	c3a68000 	.word	0xc3a68000
 80020a0:	43960000 	.word	0x43960000
 80020a4:	c3960000 	.word	0xc3960000
 80020a8:	43fa0000 	.word	0x43fa0000
 80020ac:	20000000 	.word	0x20000000
 80020b0:	2000069c 	.word	0x2000069c
 80020b4:	43de0000 	.word	0x43de0000
 80020b8:	c3de0000 	.word	0xc3de0000
 80020bc:	43c80000 	.word	0x43c80000
 80020c0:	c3c80000 	.word	0xc3c80000
 80020c4:	20000038 	.word	0x20000038
 80020c8:	20000754 	.word	0x20000754
 80020cc:	44268000 	.word	0x44268000
 80020d0:	c4268000 	.word	0xc4268000
 80020d4:	44160000 	.word	0x44160000
 80020d8:	c4160000 	.word	0xc4160000
 80020dc:	20000070 	.word	0x20000070
 80020e0:	2000080c 	.word	0x2000080c
 80020e4:	42480000 	.word	0x42480000
 80020e8:	200000a8 	.word	0x200000a8
 80020ec:	20000484 	.word	0x20000484
 80020f0:	20000574 	.word	0x20000574
 80020f4:	0800cbec 	.word	0x0800cbec
 80020f8:	200004cc 	.word	0x200004cc

080020fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b094      	sub	sp, #80	@ 0x50
 8002100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002102:	f107 0320 	add.w	r3, r7, #32
 8002106:	2230      	movs	r2, #48	@ 0x30
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f006 fd3d 	bl	8008b8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	4b28      	ldr	r3, [pc, #160]	@ (80021c8 <SystemClock_Config+0xcc>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	4a27      	ldr	r2, [pc, #156]	@ (80021c8 <SystemClock_Config+0xcc>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <SystemClock_Config+0xcc>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800213c:	2300      	movs	r3, #0
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	4b22      	ldr	r3, [pc, #136]	@ (80021cc <SystemClock_Config+0xd0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a21      	ldr	r2, [pc, #132]	@ (80021cc <SystemClock_Config+0xd0>)
 8002146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <SystemClock_Config+0xd0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002158:	2302      	movs	r3, #2
 800215a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800215c:	2301      	movs	r3, #1
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002160:	2310      	movs	r3, #16
 8002162:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002164:	2302      	movs	r3, #2
 8002166:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002168:	2300      	movs	r3, #0
 800216a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800216c:	2308      	movs	r3, #8
 800216e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002170:	23a8      	movs	r3, #168	@ 0xa8
 8002172:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002174:	2302      	movs	r3, #2
 8002176:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002178:	2304      	movs	r3, #4
 800217a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217c:	f107 0320 	add.w	r3, r7, #32
 8002180:	4618      	mov	r0, r3
 8002182:	f001 ffdb 	bl	800413c <HAL_RCC_OscConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800218c:	f000 fc28 	bl	80029e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002190:	230f      	movs	r3, #15
 8002192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002194:	2302      	movs	r3, #2
 8002196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800219c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2105      	movs	r1, #5
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 fa3c 	bl	800462c <HAL_RCC_ClockConfig>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021ba:	f000 fc11 	bl	80029e0 <Error_Handler>
  }
}
 80021be:	bf00      	nop
 80021c0:	3750      	adds	r7, #80	@ 0x50
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000

080021d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	@ 0x30
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	2224      	movs	r2, #36	@ 0x24
 80021dc:	2100      	movs	r1, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	f006 fcd3 	bl	8008b8a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021ec:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <MX_TIM1_Init+0xa8>)
 80021ee:	4a23      	ldr	r2, [pc, #140]	@ (800227c <MX_TIM1_Init+0xac>)
 80021f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021f2:	4b21      	ldr	r3, [pc, #132]	@ (8002278 <MX_TIM1_Init+0xa8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <MX_TIM1_Init+0xa8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <MX_TIM1_Init+0xa8>)
 8002200:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002204:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002206:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <MX_TIM1_Init+0xa8>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800220c:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <MX_TIM1_Init+0xa8>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <MX_TIM1_Init+0xa8>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002218:	2303      	movs	r3, #3
 800221a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002220:	2301      	movs	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002230:	2301      	movs	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	4619      	mov	r1, r3
 8002242:	480d      	ldr	r0, [pc, #52]	@ (8002278 <MX_TIM1_Init+0xa8>)
 8002244:	f002 fe5c 	bl	8004f00 <HAL_TIM_Encoder_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800224e:	f000 fbc7 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4806      	ldr	r0, [pc, #24]	@ (8002278 <MX_TIM1_Init+0xa8>)
 8002260:	f003 fd40 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800226a:	f000 fbb9 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	3730      	adds	r7, #48	@ 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200002d4 	.word	0x200002d4
 800227c:	40010000 	.word	0x40010000

08002280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	@ 0x30
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	2224      	movs	r2, #36	@ 0x24
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f006 fc7b 	bl	8008b8a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800229c:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <MX_TIM2_Init+0xa4>)
 800229e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <MX_TIM2_Init+0xa4>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <MX_TIM2_Init+0xa4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <MX_TIM2_Init+0xa4>)
 80022b2:	f04f 32ff 	mov.w	r2, #4294967295
 80022b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <MX_TIM2_Init+0xa4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022be:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <MX_TIM2_Init+0xa4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022c4:	2303      	movs	r3, #3
 80022c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022cc:	2301      	movs	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022dc:	2301      	movs	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	4619      	mov	r1, r3
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <MX_TIM2_Init+0xa4>)
 80022f0:	f002 fe06 	bl	8004f00 <HAL_TIM_Encoder_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022fa:	f000 fb71 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	4619      	mov	r1, r3
 800230a:	4806      	ldr	r0, [pc, #24]	@ (8002324 <MX_TIM2_Init+0xa4>)
 800230c:	f003 fcea 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002316:	f000 fb63 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800231a:	bf00      	nop
 800231c:	3730      	adds	r7, #48	@ 0x30
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	2000031c 	.word	0x2000031c

08002328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08c      	sub	sp, #48	@ 0x30
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	2224      	movs	r2, #36	@ 0x24
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f006 fc27 	bl	8008b8a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002344:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <MX_TIM3_Init+0xa0>)
 8002346:	4a21      	ldr	r2, [pc, #132]	@ (80023cc <MX_TIM3_Init+0xa4>)
 8002348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800234a:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <MX_TIM3_Init+0xa0>)
 800234c:	2200      	movs	r2, #0
 800234e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <MX_TIM3_Init+0xa0>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002356:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <MX_TIM3_Init+0xa0>)
 8002358:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800235c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235e:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <MX_TIM3_Init+0xa0>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002364:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <MX_TIM3_Init+0xa0>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800236a:	2303      	movs	r3, #3
 800236c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002372:	2301      	movs	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002382:	2301      	movs	r3, #1
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002386:	2300      	movs	r3, #0
 8002388:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	4619      	mov	r1, r3
 8002394:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <MX_TIM3_Init+0xa0>)
 8002396:	f002 fdb3 	bl	8004f00 <HAL_TIM_Encoder_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80023a0:	f000 fb1e 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <MX_TIM3_Init+0xa0>)
 80023b2:	f003 fc97 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80023bc:	f000 fb10 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	3730      	adds	r7, #48	@ 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000364 	.word	0x20000364
 80023cc:	40000400 	.word	0x40000400

080023d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08e      	sub	sp, #56	@ 0x38
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e4:	f107 0320 	add.w	r3, r7, #32
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	615a      	str	r2, [r3, #20]
 80023fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002400:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <MX_TIM4_Init+0x128>)
 8002402:	4a3e      	ldr	r2, [pc, #248]	@ (80024fc <MX_TIM4_Init+0x12c>)
 8002404:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8002406:	4b3c      	ldr	r3, [pc, #240]	@ (80024f8 <MX_TIM4_Init+0x128>)
 8002408:	2253      	movs	r2, #83	@ 0x53
 800240a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240c:	4b3a      	ldr	r3, [pc, #232]	@ (80024f8 <MX_TIM4_Init+0x128>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002412:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <MX_TIM4_Init+0x128>)
 8002414:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002418:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241a:	4b37      	ldr	r3, [pc, #220]	@ (80024f8 <MX_TIM4_Init+0x128>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002420:	4b35      	ldr	r3, [pc, #212]	@ (80024f8 <MX_TIM4_Init+0x128>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002426:	4834      	ldr	r0, [pc, #208]	@ (80024f8 <MX_TIM4_Init+0x128>)
 8002428:	f002 fb20 	bl	8004a6c <HAL_TIM_Base_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002432:	f000 fad5 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002436:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800243a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800243c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002440:	4619      	mov	r1, r3
 8002442:	482d      	ldr	r0, [pc, #180]	@ (80024f8 <MX_TIM4_Init+0x128>)
 8002444:	f003 f842 	bl	80054cc <HAL_TIM_ConfigClockSource>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800244e:	f000 fac7 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002452:	4829      	ldr	r0, [pc, #164]	@ (80024f8 <MX_TIM4_Init+0x128>)
 8002454:	f002 fc32 	bl	8004cbc <HAL_TIM_PWM_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800245e:	f000 fabf 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800246a:	f107 0320 	add.w	r3, r7, #32
 800246e:	4619      	mov	r1, r3
 8002470:	4821      	ldr	r0, [pc, #132]	@ (80024f8 <MX_TIM4_Init+0x128>)
 8002472:	f003 fc37 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800247c:	f000 fab0 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002480:	2360      	movs	r3, #96	@ 0x60
 8002482:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	2200      	movs	r2, #0
 8002494:	4619      	mov	r1, r3
 8002496:	4818      	ldr	r0, [pc, #96]	@ (80024f8 <MX_TIM4_Init+0x128>)
 8002498:	f002 ff56 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80024a2:	f000 fa9d 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	2204      	movs	r2, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4812      	ldr	r0, [pc, #72]	@ (80024f8 <MX_TIM4_Init+0x128>)
 80024ae:	f002 ff4b 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80024b8:	f000 fa92 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2208      	movs	r2, #8
 80024c0:	4619      	mov	r1, r3
 80024c2:	480d      	ldr	r0, [pc, #52]	@ (80024f8 <MX_TIM4_Init+0x128>)
 80024c4:	f002 ff40 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80024ce:	f000 fa87 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	220c      	movs	r2, #12
 80024d6:	4619      	mov	r1, r3
 80024d8:	4807      	ldr	r0, [pc, #28]	@ (80024f8 <MX_TIM4_Init+0x128>)
 80024da:	f002 ff35 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80024e4:	f000 fa7c 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024e8:	4803      	ldr	r0, [pc, #12]	@ (80024f8 <MX_TIM4_Init+0x128>)
 80024ea:	f000 fc07 	bl	8002cfc <HAL_TIM_MspPostInit>

}
 80024ee:	bf00      	nop
 80024f0:	3738      	adds	r7, #56	@ 0x38
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200003ac 	.word	0x200003ac
 80024fc:	40000800 	.word	0x40000800

08002500 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	@ 0x30
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	2224      	movs	r2, #36	@ 0x24
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f006 fb3b 	bl	8008b8a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800251c:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <MX_TIM5_Init+0xa0>)
 800251e:	4a21      	ldr	r2, [pc, #132]	@ (80025a4 <MX_TIM5_Init+0xa4>)
 8002520:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002522:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <MX_TIM5_Init+0xa0>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <MX_TIM5_Init+0xa0>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800252e:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <MX_TIM5_Init+0xa0>)
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <MX_TIM5_Init+0xa0>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253c:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <MX_TIM5_Init+0xa0>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002542:	2303      	movs	r3, #3
 8002544:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800254a:	2301      	movs	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800255a:	2301      	movs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	4619      	mov	r1, r3
 800256c:	480c      	ldr	r0, [pc, #48]	@ (80025a0 <MX_TIM5_Init+0xa0>)
 800256e:	f002 fcc7 	bl	8004f00 <HAL_TIM_Encoder_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002578:	f000 fa32 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	@ (80025a0 <MX_TIM5_Init+0xa0>)
 800258a:	f003 fbab 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002594:	f000 fa24 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	3730      	adds	r7, #48	@ 0x30
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200003f4 	.word	0x200003f4
 80025a4:	40000c00 	.word	0x40000c00

080025a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b096      	sub	sp, #88	@ 0x58
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	611a      	str	r2, [r3, #16]
 80025d6:	615a      	str	r2, [r3, #20]
 80025d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2220      	movs	r2, #32
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f006 fad2 	bl	8008b8a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025e6:	4b44      	ldr	r3, [pc, #272]	@ (80026f8 <MX_TIM8_Init+0x150>)
 80025e8:	4a44      	ldr	r2, [pc, #272]	@ (80026fc <MX_TIM8_Init+0x154>)
 80025ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80025ec:	4b42      	ldr	r3, [pc, #264]	@ (80026f8 <MX_TIM8_Init+0x150>)
 80025ee:	22a7      	movs	r2, #167	@ 0xa7
 80025f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f2:	4b41      	ldr	r3, [pc, #260]	@ (80026f8 <MX_TIM8_Init+0x150>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80025f8:	4b3f      	ldr	r3, [pc, #252]	@ (80026f8 <MX_TIM8_Init+0x150>)
 80025fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002600:	4b3d      	ldr	r3, [pc, #244]	@ (80026f8 <MX_TIM8_Init+0x150>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002606:	4b3c      	ldr	r3, [pc, #240]	@ (80026f8 <MX_TIM8_Init+0x150>)
 8002608:	2200      	movs	r2, #0
 800260a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260c:	4b3a      	ldr	r3, [pc, #232]	@ (80026f8 <MX_TIM8_Init+0x150>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002612:	4839      	ldr	r0, [pc, #228]	@ (80026f8 <MX_TIM8_Init+0x150>)
 8002614:	f002 fa2a 	bl	8004a6c <HAL_TIM_Base_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800261e:	f000 f9df 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002626:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002628:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800262c:	4619      	mov	r1, r3
 800262e:	4832      	ldr	r0, [pc, #200]	@ (80026f8 <MX_TIM8_Init+0x150>)
 8002630:	f002 ff4c 	bl	80054cc <HAL_TIM_ConfigClockSource>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800263a:	f000 f9d1 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800263e:	482e      	ldr	r0, [pc, #184]	@ (80026f8 <MX_TIM8_Init+0x150>)
 8002640:	f002 fb3c 	bl	8004cbc <HAL_TIM_PWM_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800264a:	f000 f9c9 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002656:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800265a:	4619      	mov	r1, r3
 800265c:	4826      	ldr	r0, [pc, #152]	@ (80026f8 <MX_TIM8_Init+0x150>)
 800265e:	f003 fb41 	bl	8005ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002668:	f000 f9ba 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800266c:	2360      	movs	r3, #96	@ 0x60
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002678:	2300      	movs	r3, #0
 800267a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002680:	2300      	movs	r3, #0
 8002682:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800268c:	2208      	movs	r2, #8
 800268e:	4619      	mov	r1, r3
 8002690:	4819      	ldr	r0, [pc, #100]	@ (80026f8 <MX_TIM8_Init+0x150>)
 8002692:	f002 fe59 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800269c:	f000 f9a0 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a4:	220c      	movs	r2, #12
 80026a6:	4619      	mov	r1, r3
 80026a8:	4813      	ldr	r0, [pc, #76]	@ (80026f8 <MX_TIM8_Init+0x150>)
 80026aa:	f002 fe4d 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80026b4:	f000 f994 	bl	80029e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4807      	ldr	r0, [pc, #28]	@ (80026f8 <MX_TIM8_Init+0x150>)
 80026dc:	f003 fb7e 	bl	8005ddc <HAL_TIMEx_ConfigBreakDeadTime>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80026e6:	f000 f97b 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80026ea:	4803      	ldr	r0, [pc, #12]	@ (80026f8 <MX_TIM8_Init+0x150>)
 80026ec:	f000 fb06 	bl	8002cfc <HAL_TIM_MspPostInit>

}
 80026f0:	bf00      	nop
 80026f2:	3758      	adds	r7, #88	@ 0x58
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2000043c 	.word	0x2000043c
 80026fc:	40010400 	.word	0x40010400

08002700 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	@ 0x30
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0320 	add.w	r3, r7, #32
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	611a      	str	r2, [r3, #16]
 8002722:	615a      	str	r2, [r3, #20]
 8002724:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002726:	4b2b      	ldr	r3, [pc, #172]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 8002728:	4a2b      	ldr	r2, [pc, #172]	@ (80027d8 <MX_TIM9_Init+0xd8>)
 800272a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 800272c:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 800272e:	22a7      	movs	r2, #167	@ 0xa7
 8002730:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002732:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002738:	4b26      	ldr	r3, [pc, #152]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 800273a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800273e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002740:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002746:	4b23      	ldr	r3, [pc, #140]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800274c:	4821      	ldr	r0, [pc, #132]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 800274e:	f002 f98d 	bl	8004a6c <HAL_TIM_Base_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8002758:	f000 f942 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002760:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002762:	f107 0320 	add.w	r3, r7, #32
 8002766:	4619      	mov	r1, r3
 8002768:	481a      	ldr	r0, [pc, #104]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 800276a:	f002 feaf 	bl	80054cc <HAL_TIM_ConfigClockSource>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002774:	f000 f934 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002778:	4816      	ldr	r0, [pc, #88]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 800277a:	f002 fa9f 	bl	8004cbc <HAL_TIM_PWM_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8002784:	f000 f92c 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002788:	2360      	movs	r3, #96	@ 0x60
 800278a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	4619      	mov	r1, r3
 800279e:	480d      	ldr	r0, [pc, #52]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 80027a0:	f002 fdd2 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80027aa:	f000 f919 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	2204      	movs	r2, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	4807      	ldr	r0, [pc, #28]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 80027b6:	f002 fdc7 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 80027c0:	f000 f90e 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80027c4:	4803      	ldr	r0, [pc, #12]	@ (80027d4 <MX_TIM9_Init+0xd4>)
 80027c6:	f000 fa99 	bl	8002cfc <HAL_TIM_MspPostInit>

}
 80027ca:	bf00      	nop
 80027cc:	3730      	adds	r7, #48	@ 0x30
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000484 	.word	0x20000484
 80027d8:	40014000 	.word	0x40014000

080027dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027e0:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <MX_USART3_UART_Init+0x4c>)
 80027e2:	4a12      	ldr	r2, [pc, #72]	@ (800282c <MX_USART3_UART_Init+0x50>)
 80027e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027e6:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <MX_USART3_UART_Init+0x4c>)
 80027e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <MX_USART3_UART_Init+0x4c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <MX_USART3_UART_Init+0x4c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <MX_USART3_UART_Init+0x4c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002800:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <MX_USART3_UART_Init+0x4c>)
 8002802:	220c      	movs	r2, #12
 8002804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <MX_USART3_UART_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <MX_USART3_UART_Init+0x4c>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	@ (8002828 <MX_USART3_UART_Init+0x4c>)
 8002814:	f003 fb48 	bl	8005ea8 <HAL_UART_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800281e:	f000 f8df 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200004cc 	.word	0x200004cc
 800282c:	40004800 	.word	0x40004800

08002830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <MX_DMA_Init+0x3c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a0b      	ldr	r2, [pc, #44]	@ (800286c <MX_DMA_Init+0x3c>)
 8002840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b09      	ldr	r3, [pc, #36]	@ (800286c <MX_DMA_Init+0x3c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2103      	movs	r1, #3
 8002856:	200c      	movs	r0, #12
 8002858:	f000 fe33 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800285c:	200c      	movs	r0, #12
 800285e:	f000 fe4c 	bl	80034fa <HAL_NVIC_EnableIRQ>

}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800

08002870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	@ 0x28
 8002874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	4b51      	ldr	r3, [pc, #324]	@ (80029d0 <MX_GPIO_Init+0x160>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	4a50      	ldr	r2, [pc, #320]	@ (80029d0 <MX_GPIO_Init+0x160>)
 8002890:	f043 0310 	orr.w	r3, r3, #16
 8002894:	6313      	str	r3, [r2, #48]	@ 0x30
 8002896:	4b4e      	ldr	r3, [pc, #312]	@ (80029d0 <MX_GPIO_Init+0x160>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b4a      	ldr	r3, [pc, #296]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a49      	ldr	r2, [pc, #292]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	4b47      	ldr	r3, [pc, #284]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b43      	ldr	r3, [pc, #268]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a42      	ldr	r2, [pc, #264]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b40      	ldr	r3, [pc, #256]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	4b3c      	ldr	r3, [pc, #240]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	4a3b      	ldr	r2, [pc, #236]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ea:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	4b35      	ldr	r3, [pc, #212]	@ (80029d0 <MX_GPIO_Init+0x160>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a34      	ldr	r2, [pc, #208]	@ (80029d0 <MX_GPIO_Init+0x160>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b32      	ldr	r3, [pc, #200]	@ (80029d0 <MX_GPIO_Init+0x160>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002912:	2200      	movs	r2, #0
 8002914:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002918:	482e      	ldr	r0, [pc, #184]	@ (80029d4 <MX_GPIO_Init+0x164>)
 800291a:	f001 fbc3 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800291e:	2200      	movs	r2, #0
 8002920:	2140      	movs	r1, #64	@ 0x40
 8002922:	482d      	ldr	r0, [pc, #180]	@ (80029d8 <MX_GPIO_Init+0x168>)
 8002924:	f001 fbbe 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002928:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800292c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	2301      	movs	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	4824      	ldr	r0, [pc, #144]	@ (80029d4 <MX_GPIO_Init+0x164>)
 8002942:	f001 f9fb 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11;
 8002946:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 800294a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800294c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002952:	2301      	movs	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	481d      	ldr	r0, [pc, #116]	@ (80029d4 <MX_GPIO_Init+0x164>)
 800295e:	f001 f9ed 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002962:	2344      	movs	r3, #68	@ 0x44
 8002964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002966:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800296a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296c:	2301      	movs	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	4819      	ldr	r0, [pc, #100]	@ (80029dc <MX_GPIO_Init+0x16c>)
 8002978:	f001 f9e0 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800297c:	2340      	movs	r3, #64	@ 0x40
 800297e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002980:	2301      	movs	r3, #1
 8002982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	4811      	ldr	r0, [pc, #68]	@ (80029d8 <MX_GPIO_Init+0x168>)
 8002994:	f001 f9d2 	bl	8003d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8002998:	2200      	movs	r2, #0
 800299a:	2101      	movs	r1, #1
 800299c:	2008      	movs	r0, #8
 800299e:	f000 fd90 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029a2:	2008      	movs	r0, #8
 80029a4:	f000 fda9 	bl	80034fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2101      	movs	r1, #1
 80029ac:	2017      	movs	r0, #23
 80029ae:	f000 fd88 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029b2:	2017      	movs	r0, #23
 80029b4:	f000 fda1 	bl	80034fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2101      	movs	r1, #1
 80029bc:	2028      	movs	r0, #40	@ 0x28
 80029be:	f000 fd80 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029c2:	2028      	movs	r0, #40	@ 0x28
 80029c4:	f000 fd99 	bl	80034fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029c8:	bf00      	nop
 80029ca:	3728      	adds	r7, #40	@ 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020800 	.word	0x40020800
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40020c00 	.word	0x40020c00

080029e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e4:	b672      	cpsid	i
}
 80029e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <Error_Handler+0x8>

080029ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <HAL_MspInit+0x4c>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002a38 <HAL_MspInit+0x4c>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a02:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <HAL_MspInit+0x4c>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_MspInit+0x4c>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	4a08      	ldr	r2, [pc, #32]	@ (8002a38 <HAL_MspInit+0x4c>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_MspInit+0x4c>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b090      	sub	sp, #64	@ 0x40
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a78      	ldr	r2, [pc, #480]	@ (8002c3c <HAL_TIM_Encoder_MspInit+0x200>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d135      	bne.n	8002aca <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a62:	4b77      	ldr	r3, [pc, #476]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	4a76      	ldr	r2, [pc, #472]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a6e:	4b74      	ldr	r3, [pc, #464]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7e:	4b70      	ldr	r3, [pc, #448]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a6f      	ldr	r2, [pc, #444]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 8002a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4864      	ldr	r0, [pc, #400]	@ (8002c44 <HAL_TIM_Encoder_MspInit+0x208>)
 8002ab4:	f001 f942 	bl	8003d3c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2102      	movs	r1, #2
 8002abc:	2018      	movs	r0, #24
 8002abe:	f000 fd00 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ac2:	2018      	movs	r0, #24
 8002ac4:	f000 fd19 	bl	80034fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ac8:	e0b3      	b.n	8002c32 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad2:	d14b      	bne.n	8002b6c <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	4b59      	ldr	r3, [pc, #356]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	4a58      	ldr	r2, [pc, #352]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae4:	4b56      	ldr	r3, [pc, #344]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	4b52      	ldr	r3, [pc, #328]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	4a51      	ldr	r2, [pc, #324]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b00:	4b4f      	ldr	r3, [pc, #316]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	4b4b      	ldr	r3, [pc, #300]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	4a4a      	ldr	r2, [pc, #296]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1c:	4b48      	ldr	r3, [pc, #288]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 8002b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b42:	4619      	mov	r1, r3
 8002b44:	483f      	ldr	r0, [pc, #252]	@ (8002c44 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b46:	f001 f8f9 	bl	8003d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b62:	4619      	mov	r1, r3
 8002b64:	4838      	ldr	r0, [pc, #224]	@ (8002c48 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002b66:	f001 f8e9 	bl	8003d3c <HAL_GPIO_Init>
}
 8002b6a:	e062      	b.n	8002c32 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a36      	ldr	r2, [pc, #216]	@ (8002c4c <HAL_TIM_Encoder_MspInit+0x210>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d12c      	bne.n	8002bd0 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	4a30      	ldr	r2, [pc, #192]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b86:	4b2e      	ldr	r3, [pc, #184]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	4b2a      	ldr	r3, [pc, #168]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	4a29      	ldr	r2, [pc, #164]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba2:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 8002bae:	2330      	movs	r3, #48	@ 0x30
 8002bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	481f      	ldr	r0, [pc, #124]	@ (8002c48 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002bca:	f001 f8b7 	bl	8003d3c <HAL_GPIO_Init>
}
 8002bce:	e030      	b.n	8002c32 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c50 <HAL_TIM_Encoder_MspInit+0x214>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d12b      	bne.n	8002c32 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	4a17      	ldr	r2, [pc, #92]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	4a10      	ldr	r2, [pc, #64]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c06:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 8002c12:	2303      	movs	r3, #3
 8002c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c22:	2302      	movs	r3, #2
 8002c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4805      	ldr	r0, [pc, #20]	@ (8002c44 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c2e:	f001 f885 	bl	8003d3c <HAL_GPIO_Init>
}
 8002c32:	bf00      	nop
 8002c34:	3740      	adds	r7, #64	@ 0x40
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000c00 	.word	0x40000c00

08002c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a22      	ldr	r2, [pc, #136]	@ (8002cec <HAL_TIM_Base_MspInit+0x98>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10e      	bne.n	8002c84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	4b21      	ldr	r3, [pc, #132]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	4a20      	ldr	r2, [pc, #128]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c76:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002c82:	e02e      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM8)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf4 <HAL_TIM_Base_MspInit+0xa0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	4a16      	ldr	r2, [pc, #88]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c9e:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]
}
 8002caa:	e01a      	b.n	8002ce2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM9)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a11      	ldr	r2, [pc, #68]	@ (8002cf8 <HAL_TIM_Base_MspInit+0xa4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d115      	bne.n	8002ce2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	2018      	movs	r0, #24
 8002cd8:	f000 fbf3 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002cdc:	2018      	movs	r0, #24
 8002cde:	f000 fc0c 	bl	80034fa <HAL_NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40000800 	.word	0x40000800
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40010400 	.word	0x40010400
 8002cf8:	40014000 	.word	0x40014000

08002cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	@ 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a37      	ldr	r2, [pc, #220]	@ (8002df8 <HAL_TIM_MspPostInit+0xfc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d11f      	bne.n	8002d5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <HAL_TIM_MspPostInit+0x100>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	4a35      	ldr	r2, [pc, #212]	@ (8002dfc <HAL_TIM_MspPostInit+0x100>)
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2e:	4b33      	ldr	r3, [pc, #204]	@ (8002dfc <HAL_TIM_MspPostInit+0x100>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 8002d3a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4619      	mov	r1, r3
 8002d56:	482a      	ldr	r0, [pc, #168]	@ (8002e00 <HAL_TIM_MspPostInit+0x104>)
 8002d58:	f000 fff0 	bl	8003d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002d5c:	e047      	b.n	8002dee <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a28      	ldr	r2, [pc, #160]	@ (8002e04 <HAL_TIM_MspPostInit+0x108>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d11f      	bne.n	8002da8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_TIM_MspPostInit+0x100>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	4a22      	ldr	r2, [pc, #136]	@ (8002dfc <HAL_TIM_MspPostInit+0x100>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d78:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <HAL_TIM_MspPostInit+0x100>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 8002d84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d96:	2303      	movs	r3, #3
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4819      	ldr	r0, [pc, #100]	@ (8002e08 <HAL_TIM_MspPostInit+0x10c>)
 8002da2:	f000 ffcb 	bl	8003d3c <HAL_GPIO_Init>
}
 8002da6:	e022      	b.n	8002dee <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a17      	ldr	r2, [pc, #92]	@ (8002e0c <HAL_TIM_MspPostInit+0x110>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d11d      	bne.n	8002dee <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_TIM_MspPostInit+0x100>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	4a10      	ldr	r2, [pc, #64]	@ (8002dfc <HAL_TIM_MspPostInit+0x100>)
 8002dbc:	f043 0310 	orr.w	r3, r3, #16
 8002dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_TIM_MspPostInit+0x100>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 8002dce:	2360      	movs	r3, #96	@ 0x60
 8002dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002dde:	2303      	movs	r3, #3
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	4809      	ldr	r0, [pc, #36]	@ (8002e10 <HAL_TIM_MspPostInit+0x114>)
 8002dea:	f000 ffa7 	bl	8003d3c <HAL_GPIO_Init>
}
 8002dee:	bf00      	nop
 8002df0:	3728      	adds	r7, #40	@ 0x28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40010400 	.word	0x40010400
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	@ 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a35      	ldr	r2, [pc, #212]	@ (8002f08 <HAL_UART_MspInit+0xf4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d163      	bne.n	8002efe <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	4b34      	ldr	r3, [pc, #208]	@ (8002f0c <HAL_UART_MspInit+0xf8>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	4a33      	ldr	r2, [pc, #204]	@ (8002f0c <HAL_UART_MspInit+0xf8>)
 8002e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e46:	4b31      	ldr	r3, [pc, #196]	@ (8002f0c <HAL_UART_MspInit+0xf8>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b2d      	ldr	r3, [pc, #180]	@ (8002f0c <HAL_UART_MspInit+0xf8>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f0c <HAL_UART_MspInit+0xf8>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e62:	4b2a      	ldr	r3, [pc, #168]	@ (8002f0c <HAL_UART_MspInit+0xf8>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e80:	2307      	movs	r3, #7
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4821      	ldr	r0, [pc, #132]	@ (8002f10 <HAL_UART_MspInit+0xfc>)
 8002e8c:	f000 ff56 	bl	8003d3c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e90:	4b20      	ldr	r3, [pc, #128]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002e92:	4a21      	ldr	r2, [pc, #132]	@ (8002f18 <HAL_UART_MspInit+0x104>)
 8002e94:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e96:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002e98:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e9c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002eac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eb0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eb2:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eb8:	4b16      	ldr	r3, [pc, #88]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ec4:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002ec6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002eca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ed2:	4810      	ldr	r0, [pc, #64]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002ed4:	f000 fb30 	bl	8003538 <HAL_DMA_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002ede:	f7ff fd7f 	bl	80029e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002ee6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <HAL_UART_MspInit+0x100>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2027      	movs	r0, #39	@ 0x27
 8002ef4:	f000 fae5 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ef8:	2027      	movs	r0, #39	@ 0x27
 8002efa:	f000 fafe 	bl	80034fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	@ 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40004800 	.word	0x40004800
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020400 	.word	0x40020400
 8002f14:	20000514 	.word	0x20000514
 8002f18:	40026028 	.word	0x40026028

08002f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <NMI_Handler+0x4>

08002f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <HardFault_Handler+0x4>

08002f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <MemManage_Handler+0x4>

08002f34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <BusFault_Handler+0x4>

08002f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <UsageFault_Handler+0x4>

08002f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f72:	f000 f995 	bl	80032a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002f7e:	2004      	movs	r0, #4
 8002f80:	f001 f8c4 	bl	800410c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002f8c:	4802      	ldr	r0, [pc, #8]	@ (8002f98 <DMA1_Stream1_IRQHandler+0x10>)
 8002f8e:	f000 fc6b 	bl	8003868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000514 	.word	0x20000514

08002f9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002fa0:	2040      	movs	r0, #64	@ 0x40
 8002fa2:	f001 f8b3 	bl	800410c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002fa6:	2080      	movs	r0, #128	@ 0x80
 8002fa8:	f001 f8b0 	bl	800410c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fb4:	4803      	ldr	r0, [pc, #12]	@ (8002fc4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002fb6:	f002 f8d7 	bl	8005168 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002fba:	4803      	ldr	r0, [pc, #12]	@ (8002fc8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002fbc:	f002 f8d4 	bl	8005168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200002d4 	.word	0x200002d4
 8002fc8:	20000484 	.word	0x20000484

08002fcc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fd0:	4802      	ldr	r0, [pc, #8]	@ (8002fdc <USART3_IRQHandler+0x10>)
 8002fd2:	f003 f8a1 	bl	8006118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200004cc 	.word	0x200004cc

08002fe0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002fe4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002fe8:	f001 f890 	bl	800410c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002fec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002ff0:	f001 f88c 	bl	800410c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return 1;
 8002ffc:	2301      	movs	r3, #1
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <_kill>:

int _kill(int pid, int sig)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003012:	f005 fe2f 	bl	8008c74 <__errno>
 8003016:	4603      	mov	r3, r0
 8003018:	2216      	movs	r2, #22
 800301a:	601a      	str	r2, [r3, #0]
  return -1;
 800301c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <_exit>:

void _exit (int status)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ffe7 	bl	8003008 <_kill>
  while (1) {}    /* Make sure we hang here */
 800303a:	bf00      	nop
 800303c:	e7fd      	b.n	800303a <_exit+0x12>

0800303e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e00a      	b.n	8003066 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003050:	f3af 8000 	nop.w
 8003054:	4601      	mov	r1, r0
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	60ba      	str	r2, [r7, #8]
 800305c:	b2ca      	uxtb	r2, r1
 800305e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3301      	adds	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	dbf0      	blt.n	8003050 <_read+0x12>
  }

  return len;
 800306e:	687b      	ldr	r3, [r7, #4]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	e009      	b.n	800309e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	60ba      	str	r2, [r7, #8]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	3301      	adds	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	dbf1      	blt.n	800308a <_write+0x12>
  }
  return len;
 80030a6:	687b      	ldr	r3, [r7, #4]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <_close>:

int _close(int file)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030d8:	605a      	str	r2, [r3, #4]
  return 0;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <_isatty>:

int _isatty(int file)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030f0:	2301      	movs	r3, #1
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003120:	4a14      	ldr	r2, [pc, #80]	@ (8003174 <_sbrk+0x5c>)
 8003122:	4b15      	ldr	r3, [pc, #84]	@ (8003178 <_sbrk+0x60>)
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800312c:	4b13      	ldr	r3, [pc, #76]	@ (800317c <_sbrk+0x64>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003134:	4b11      	ldr	r3, [pc, #68]	@ (800317c <_sbrk+0x64>)
 8003136:	4a12      	ldr	r2, [pc, #72]	@ (8003180 <_sbrk+0x68>)
 8003138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <_sbrk+0x64>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d207      	bcs.n	8003158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003148:	f005 fd94 	bl	8008c74 <__errno>
 800314c:	4603      	mov	r3, r0
 800314e:	220c      	movs	r2, #12
 8003150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
 8003156:	e009      	b.n	800316c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003158:	4b08      	ldr	r3, [pc, #32]	@ (800317c <_sbrk+0x64>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315e:	4b07      	ldr	r3, [pc, #28]	@ (800317c <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	4a05      	ldr	r2, [pc, #20]	@ (800317c <_sbrk+0x64>)
 8003168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800316a:	68fb      	ldr	r3, [r7, #12]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20020000 	.word	0x20020000
 8003178:	00000400 	.word	0x00000400
 800317c:	20000908 	.word	0x20000908
 8003180:	20000a60 	.word	0x20000a60

08003184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <SystemInit+0x20>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318e:	4a05      	ldr	r2, [pc, #20]	@ (80031a4 <SystemInit+0x20>)
 8003190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 80031a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031ac:	480d      	ldr	r0, [pc, #52]	@ (80031e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ae:	490e      	ldr	r1, [pc, #56]	@ (80031e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031b0:	4a0e      	ldr	r2, [pc, #56]	@ (80031ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b4:	e002      	b.n	80031bc <LoopCopyDataInit>

080031b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ba:	3304      	adds	r3, #4

080031bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c0:	d3f9      	bcc.n	80031b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c2:	4a0b      	ldr	r2, [pc, #44]	@ (80031f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c4:	4c0b      	ldr	r4, [pc, #44]	@ (80031f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c8:	e001      	b.n	80031ce <LoopFillZerobss>

080031ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031cc:	3204      	adds	r2, #4

080031ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d0:	d3fb      	bcc.n	80031ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031d2:	f7ff ffd7 	bl	8003184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d6:	f005 fd53 	bl	8008c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031da:	f7fe fe29 	bl	8001e30 <main>
  bx  lr    
 80031de:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 80031e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e8:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 80031ec:	0800d094 	.word	0x0800d094
  ldr r2, =_sbss
 80031f0:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 80031f4:	20000a5c 	.word	0x20000a5c

080031f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f8:	e7fe      	b.n	80031f8 <ADC_IRQHandler>
	...

080031fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003200:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <HAL_Init+0x40>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0d      	ldr	r2, [pc, #52]	@ (800323c <HAL_Init+0x40>)
 8003206:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800320a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_Init+0x40>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <HAL_Init+0x40>)
 8003212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003218:	4b08      	ldr	r3, [pc, #32]	@ (800323c <HAL_Init+0x40>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a07      	ldr	r2, [pc, #28]	@ (800323c <HAL_Init+0x40>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003224:	2003      	movs	r0, #3
 8003226:	f000 f941 	bl	80034ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800322a:	200f      	movs	r0, #15
 800322c:	f000 f808 	bl	8003240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003230:	f7ff fbdc 	bl	80029ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00

08003240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003248:	4b12      	ldr	r3, [pc, #72]	@ (8003294 <HAL_InitTick+0x54>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <HAL_InitTick+0x58>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003256:	fbb3 f3f1 	udiv	r3, r3, r1
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f95d 	bl	800351e <HAL_SYSTICK_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e00e      	b.n	800328c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b0f      	cmp	r3, #15
 8003272:	d80a      	bhi.n	800328a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003274:	2200      	movs	r2, #0
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f000 f921 	bl	80034c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003280:	4a06      	ldr	r2, [pc, #24]	@ (800329c <HAL_InitTick+0x5c>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e000      	b.n	800328c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200000e4 	.word	0x200000e4
 8003298:	200000ec 	.word	0x200000ec
 800329c:	200000e8 	.word	0x200000e8

080032a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_IncTick+0x20>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <HAL_IncTick+0x24>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <HAL_IncTick+0x24>)
 80032b2:	6013      	str	r3, [r2, #0]
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	200000ec 	.word	0x200000ec
 80032c4:	2000090c 	.word	0x2000090c

080032c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return uwTick;
 80032cc:	4b03      	ldr	r3, [pc, #12]	@ (80032dc <HAL_GetTick+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	2000090c 	.word	0x2000090c

080032e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <__NVIC_SetPriorityGrouping+0x44>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032fc:	4013      	ands	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800330c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003312:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <__NVIC_SetPriorityGrouping+0x44>)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	60d3      	str	r3, [r2, #12]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800332c:	4b04      	ldr	r3, [pc, #16]	@ (8003340 <__NVIC_GetPriorityGrouping+0x18>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	0a1b      	lsrs	r3, r3, #8
 8003332:	f003 0307 	and.w	r3, r3, #7
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	2b00      	cmp	r3, #0
 8003354:	db0b      	blt.n	800336e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	f003 021f 	and.w	r2, r3, #31
 800335c:	4907      	ldr	r1, [pc, #28]	@ (800337c <__NVIC_EnableIRQ+0x38>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2001      	movs	r0, #1
 8003366:	fa00 f202 	lsl.w	r2, r0, r2
 800336a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000e100 	.word	0xe000e100

08003380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003390:	2b00      	cmp	r3, #0
 8003392:	db0a      	blt.n	80033aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	490c      	ldr	r1, [pc, #48]	@ (80033cc <__NVIC_SetPriority+0x4c>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	440b      	add	r3, r1
 80033a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a8:	e00a      	b.n	80033c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4908      	ldr	r1, [pc, #32]	@ (80033d0 <__NVIC_SetPriority+0x50>)
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	3b04      	subs	r3, #4
 80033b8:	0112      	lsls	r2, r2, #4
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	440b      	add	r3, r1
 80033be:	761a      	strb	r2, [r3, #24]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000e100 	.word	0xe000e100
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	@ 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f1c3 0307 	rsb	r3, r3, #7
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	bf28      	it	cs
 80033f2:	2304      	movcs	r3, #4
 80033f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d902      	bls.n	8003404 <NVIC_EncodePriority+0x30>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3b03      	subs	r3, #3
 8003402:	e000      	b.n	8003406 <NVIC_EncodePriority+0x32>
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	f04f 32ff 	mov.w	r2, #4294967295
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43da      	mvns	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	401a      	ands	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800341c:	f04f 31ff 	mov.w	r1, #4294967295
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43d9      	mvns	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	4313      	orrs	r3, r2
         );
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	@ 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003440:	f3bf 8f4f 	dsb	sy
}
 8003444:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <__NVIC_SystemReset+0x24>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800344e:	4904      	ldr	r1, [pc, #16]	@ (8003460 <__NVIC_SystemReset+0x24>)
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <__NVIC_SystemReset+0x28>)
 8003452:	4313      	orrs	r3, r2
 8003454:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003456:	f3bf 8f4f 	dsb	sy
}
 800345a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <__NVIC_SystemReset+0x20>
 8003460:	e000ed00 	.word	0xe000ed00
 8003464:	05fa0004 	.word	0x05fa0004

08003468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003478:	d301      	bcc.n	800347e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347e:	4a0a      	ldr	r2, [pc, #40]	@ (80034a8 <SysTick_Config+0x40>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003486:	210f      	movs	r1, #15
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	f7ff ff78 	bl	8003380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <SysTick_Config+0x40>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003496:	4b04      	ldr	r3, [pc, #16]	@ (80034a8 <SysTick_Config+0x40>)
 8003498:	2207      	movs	r2, #7
 800349a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000e010 	.word	0xe000e010

080034ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff13 	bl	80032e0 <__NVIC_SetPriorityGrouping>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d4:	f7ff ff28 	bl	8003328 <__NVIC_GetPriorityGrouping>
 80034d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	6978      	ldr	r0, [r7, #20]
 80034e0:	f7ff ff78 	bl	80033d4 <NVIC_EncodePriority>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff47 	bl	8003380 <__NVIC_SetPriority>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff1b 	bl	8003344 <__NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800351a:	f7ff ff8f 	bl	800343c <__NVIC_SystemReset>

0800351e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff9e 	bl	8003468 <SysTick_Config>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7ff fec0 	bl	80032c8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e099      	b.n	8003688 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003574:	e00f      	b.n	8003596 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003576:	f7ff fea7 	bl	80032c8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b05      	cmp	r3, #5
 8003582:	d908      	bls.n	8003596 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e078      	b.n	8003688 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e8      	bne.n	8003576 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4b38      	ldr	r3, [pc, #224]	@ (8003690 <HAL_DMA_Init+0x158>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d107      	bne.n	8003600 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	4313      	orrs	r3, r2
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	2b04      	cmp	r3, #4
 8003628:	d117      	bne.n	800365a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fb01 	bl	8003c44 <DMA_CheckFifoParam>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2240      	movs	r2, #64	@ 0x40
 800364c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003656:	2301      	movs	r3, #1
 8003658:	e016      	b.n	8003688 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fab8 	bl	8003bd8 <DMA_CalcBaseAndBitshift>
 8003668:	4603      	mov	r3, r0
 800366a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	223f      	movs	r2, #63	@ 0x3f
 8003672:	409a      	lsls	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	f010803f 	.word	0xf010803f

08003694 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_DMA_Start_IT+0x26>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e040      	b.n	800373c <HAL_DMA_Start_IT+0xa8>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d12f      	bne.n	800372e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa4a 	bl	8003b7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	223f      	movs	r2, #63	@ 0x3f
 80036ee:	409a      	lsls	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0216 	orr.w	r2, r2, #22
 8003702:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0208 	orr.w	r2, r2, #8
 800371a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e005      	b.n	800373a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003736:	2302      	movs	r3, #2
 8003738:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800373a:	7dfb      	ldrb	r3, [r7, #23]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003750:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003752:	f7ff fdb9 	bl	80032c8 <HAL_GetTick>
 8003756:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d008      	beq.n	8003776 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2280      	movs	r2, #128	@ 0x80
 8003768:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e052      	b.n	800381c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0216 	bic.w	r2, r2, #22
 8003784:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003794:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <HAL_DMA_Abort+0x62>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0208 	bic.w	r2, r2, #8
 80037b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c6:	e013      	b.n	80037f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037c8:	f7ff fd7e 	bl	80032c8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d90c      	bls.n	80037f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2203      	movs	r2, #3
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e015      	b.n	800381c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e4      	bne.n	80037c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003802:	223f      	movs	r2, #63	@ 0x3f
 8003804:	409a      	lsls	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d004      	beq.n	8003842 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2280      	movs	r2, #128	@ 0x80
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e00c      	b.n	800385c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2205      	movs	r2, #5
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003874:	4b8e      	ldr	r3, [pc, #568]	@ (8003ab0 <HAL_DMA_IRQHandler+0x248>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a8e      	ldr	r2, [pc, #568]	@ (8003ab4 <HAL_DMA_IRQHandler+0x24c>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0a9b      	lsrs	r3, r3, #10
 8003880:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003886:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003892:	2208      	movs	r2, #8
 8003894:	409a      	lsls	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01a      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0204 	bic.w	r2, r2, #4
 80038ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c0:	2208      	movs	r2, #8
 80038c2:	409a      	lsls	r2, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f6:	2201      	movs	r2, #1
 80038f8:	409a      	lsls	r2, r3
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f043 0202 	orr.w	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390e:	2204      	movs	r2, #4
 8003910:	409a      	lsls	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	2204      	movs	r2, #4
 800392e:	409a      	lsls	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003938:	f043 0204 	orr.w	r2, r3, #4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003944:	2210      	movs	r2, #16
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d043      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d03c      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003962:	2210      	movs	r2, #16
 8003964:	409a      	lsls	r2, r3
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d018      	beq.n	80039aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d108      	bne.n	8003998 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d024      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
 8003996:	e01f      	b.n	80039d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
 80039a8:	e016      	b.n	80039d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d107      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0208 	bic.w	r2, r2, #8
 80039c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	2220      	movs	r2, #32
 80039de:	409a      	lsls	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 808f 	beq.w	8003b08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8087 	beq.w	8003b08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	2220      	movs	r2, #32
 8003a00:	409a      	lsls	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	d136      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0216 	bic.w	r2, r2, #22
 8003a20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <HAL_DMA_IRQHandler+0x1da>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0208 	bic.w	r2, r2, #8
 8003a50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a56:	223f      	movs	r2, #63	@ 0x3f
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d07e      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
        }
        return;
 8003a7e:	e079      	b.n	8003b74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01d      	beq.n	8003aca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d031      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
 8003aac:	e02c      	b.n	8003b08 <HAL_DMA_IRQHandler+0x2a0>
 8003aae:	bf00      	nop
 8003ab0:	200000e4 	.word	0x200000e4
 8003ab4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d023      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e01e      	b.n	8003b08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0210 	bic.w	r2, r2, #16
 8003ae6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d032      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d022      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2205      	movs	r2, #5
 8003b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	3301      	adds	r3, #1
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d307      	bcc.n	8003b50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f2      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x2cc>
 8003b4e:	e000      	b.n	8003b52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4798      	blx	r3
 8003b72:	e000      	b.n	8003b76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b74:	bf00      	nop
    }
  }
}
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b40      	cmp	r3, #64	@ 0x40
 8003ba8:	d108      	bne.n	8003bbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bba:	e007      	b.n	8003bcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	3b10      	subs	r3, #16
 8003be8:	4a14      	ldr	r2, [pc, #80]	@ (8003c3c <DMA_CalcBaseAndBitshift+0x64>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bf2:	4a13      	ldr	r2, [pc, #76]	@ (8003c40 <DMA_CalcBaseAndBitshift+0x68>)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d909      	bls.n	8003c1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	1d1a      	adds	r2, r3, #4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c18:	e007      	b.n	8003c2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	aaaaaaab 	.word	0xaaaaaaab
 8003c40:	0800cc34 	.word	0x0800cc34

08003c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d11f      	bne.n	8003c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d856      	bhi.n	8003d12 <DMA_CheckFifoParam+0xce>
 8003c64:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <DMA_CheckFifoParam+0x28>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c8f 	.word	0x08003c8f
 8003c74:	08003c7d 	.word	0x08003c7d
 8003c78:	08003d13 	.word	0x08003d13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d046      	beq.n	8003d16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8c:	e043      	b.n	8003d16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c96:	d140      	bne.n	8003d1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c9c:	e03d      	b.n	8003d1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca6:	d121      	bne.n	8003cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d837      	bhi.n	8003d1e <DMA_CheckFifoParam+0xda>
 8003cae:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <DMA_CheckFifoParam+0x70>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003ccb 	.word	0x08003ccb
 8003cbc:	08003cc5 	.word	0x08003cc5
 8003cc0:	08003cdd 	.word	0x08003cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc8:	e030      	b.n	8003d2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d025      	beq.n	8003d22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cda:	e022      	b.n	8003d22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ce4:	d11f      	bne.n	8003d26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cea:	e01c      	b.n	8003d26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d903      	bls.n	8003cfa <DMA_CheckFifoParam+0xb6>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d003      	beq.n	8003d00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cf8:	e018      	b.n	8003d2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfe:	e015      	b.n	8003d2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d10:	e00b      	b.n	8003d2a <DMA_CheckFifoParam+0xe6>
      break;
 8003d12:	bf00      	nop
 8003d14:	e00a      	b.n	8003d2c <DMA_CheckFifoParam+0xe8>
      break;
 8003d16:	bf00      	nop
 8003d18:	e008      	b.n	8003d2c <DMA_CheckFifoParam+0xe8>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e006      	b.n	8003d2c <DMA_CheckFifoParam+0xe8>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e004      	b.n	8003d2c <DMA_CheckFifoParam+0xe8>
      break;
 8003d22:	bf00      	nop
 8003d24:	e002      	b.n	8003d2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <DMA_CheckFifoParam+0xe8>
      break;
 8003d2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop

08003d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	@ 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
 8003d56:	e16b      	b.n	8004030 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d58:	2201      	movs	r2, #1
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	f040 815a 	bne.w	800402a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d005      	beq.n	8003d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d130      	bne.n	8003df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	2203      	movs	r2, #3
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 0201 	and.w	r2, r3, #1
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d017      	beq.n	8003e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2203      	movs	r2, #3
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d123      	bne.n	8003e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	08da      	lsrs	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3208      	adds	r2, #8
 8003e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	08da      	lsrs	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3208      	adds	r2, #8
 8003e7a:	69b9      	ldr	r1, [r7, #24]
 8003e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0203 	and.w	r2, r3, #3
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80b4 	beq.w	800402a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	4b60      	ldr	r3, [pc, #384]	@ (8004048 <HAL_GPIO_Init+0x30c>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	4a5f      	ldr	r2, [pc, #380]	@ (8004048 <HAL_GPIO_Init+0x30c>)
 8003ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8004048 <HAL_GPIO_Init+0x30c>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ede:	4a5b      	ldr	r2, [pc, #364]	@ (800404c <HAL_GPIO_Init+0x310>)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a52      	ldr	r2, [pc, #328]	@ (8004050 <HAL_GPIO_Init+0x314>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d02b      	beq.n	8003f62 <HAL_GPIO_Init+0x226>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a51      	ldr	r2, [pc, #324]	@ (8004054 <HAL_GPIO_Init+0x318>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d025      	beq.n	8003f5e <HAL_GPIO_Init+0x222>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a50      	ldr	r2, [pc, #320]	@ (8004058 <HAL_GPIO_Init+0x31c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01f      	beq.n	8003f5a <HAL_GPIO_Init+0x21e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800405c <HAL_GPIO_Init+0x320>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d019      	beq.n	8003f56 <HAL_GPIO_Init+0x21a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a4e      	ldr	r2, [pc, #312]	@ (8004060 <HAL_GPIO_Init+0x324>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_GPIO_Init+0x216>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a4d      	ldr	r2, [pc, #308]	@ (8004064 <HAL_GPIO_Init+0x328>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00d      	beq.n	8003f4e <HAL_GPIO_Init+0x212>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a4c      	ldr	r2, [pc, #304]	@ (8004068 <HAL_GPIO_Init+0x32c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <HAL_GPIO_Init+0x20e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800406c <HAL_GPIO_Init+0x330>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d101      	bne.n	8003f46 <HAL_GPIO_Init+0x20a>
 8003f42:	2307      	movs	r3, #7
 8003f44:	e00e      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f46:	2308      	movs	r3, #8
 8003f48:	e00c      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f4a:	2306      	movs	r3, #6
 8003f4c:	e00a      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f4e:	2305      	movs	r3, #5
 8003f50:	e008      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f52:	2304      	movs	r3, #4
 8003f54:	e006      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f56:	2303      	movs	r3, #3
 8003f58:	e004      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e002      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_GPIO_Init+0x228>
 8003f62:	2300      	movs	r3, #0
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f002 0203 	and.w	r2, r2, #3
 8003f6a:	0092      	lsls	r2, r2, #2
 8003f6c:	4093      	lsls	r3, r2
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f74:	4935      	ldr	r1, [pc, #212]	@ (800404c <HAL_GPIO_Init+0x310>)
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f82:	4b3b      	ldr	r3, [pc, #236]	@ (8004070 <HAL_GPIO_Init+0x334>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fa6:	4a32      	ldr	r2, [pc, #200]	@ (8004070 <HAL_GPIO_Init+0x334>)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fac:	4b30      	ldr	r3, [pc, #192]	@ (8004070 <HAL_GPIO_Init+0x334>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fd0:	4a27      	ldr	r2, [pc, #156]	@ (8004070 <HAL_GPIO_Init+0x334>)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fd6:	4b26      	ldr	r3, [pc, #152]	@ (8004070 <HAL_GPIO_Init+0x334>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8004070 <HAL_GPIO_Init+0x334>)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004000:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <HAL_GPIO_Init+0x334>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004024:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <HAL_GPIO_Init+0x334>)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	3301      	adds	r3, #1
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b0f      	cmp	r3, #15
 8004034:	f67f ae90 	bls.w	8003d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3724      	adds	r7, #36	@ 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	40013800 	.word	0x40013800
 8004050:	40020000 	.word	0x40020000
 8004054:	40020400 	.word	0x40020400
 8004058:	40020800 	.word	0x40020800
 800405c:	40020c00 	.word	0x40020c00
 8004060:	40021000 	.word	0x40021000
 8004064:	40021400 	.word	0x40021400
 8004068:	40021800 	.word	0x40021800
 800406c:	40021c00 	.word	0x40021c00
 8004070:	40013c00 	.word	0x40013c00

08004074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	887b      	ldrh	r3, [r7, #2]
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	e001      	b.n	8004096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004096:	7bfb      	ldrb	r3, [r7, #15]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]
 80040b0:	4613      	mov	r3, r2
 80040b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b4:	787b      	ldrb	r3, [r7, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040c0:	e003      	b.n	80040ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040c2:	887b      	ldrh	r3, [r7, #2]
 80040c4:	041a      	lsls	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	619a      	str	r2, [r3, #24]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040e8:	887a      	ldrh	r2, [r7, #2]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4013      	ands	r3, r2
 80040ee:	041a      	lsls	r2, r3, #16
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43d9      	mvns	r1, r3
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	400b      	ands	r3, r1
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	619a      	str	r2, [r3, #24]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004116:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004122:	4a05      	ldr	r2, [pc, #20]	@ (8004138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd fe10 	bl	8001d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40013c00 	.word	0x40013c00

0800413c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e267      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d075      	beq.n	8004246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800415a:	4b88      	ldr	r3, [pc, #544]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d00c      	beq.n	8004180 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004166:	4b85      	ldr	r3, [pc, #532]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800416e:	2b08      	cmp	r3, #8
 8004170:	d112      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4b82      	ldr	r3, [pc, #520]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800417e:	d10b      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	4b7e      	ldr	r3, [pc, #504]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d05b      	beq.n	8004244 <HAL_RCC_OscConfig+0x108>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d157      	bne.n	8004244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e242      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x74>
 80041a2:	4b76      	ldr	r3, [pc, #472]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a75      	ldr	r2, [pc, #468]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e01d      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x98>
 80041ba:	4b70      	ldr	r3, [pc, #448]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a6f      	ldr	r2, [pc, #444]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b6d      	ldr	r3, [pc, #436]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6c      	ldr	r2, [pc, #432]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041d4:	4b69      	ldr	r3, [pc, #420]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a68      	ldr	r2, [pc, #416]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b66      	ldr	r3, [pc, #408]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a65      	ldr	r2, [pc, #404]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7ff f868 	bl	80032c8 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041fc:	f7ff f864 	bl	80032c8 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	@ 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e207      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b5b      	ldr	r3, [pc, #364]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0xc0>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7ff f854 	bl	80032c8 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7ff f850 	bl	80032c8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1f3      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	4b51      	ldr	r3, [pc, #324]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0xe8>
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d063      	beq.n	800431a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004252:	4b4a      	ldr	r3, [pc, #296]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425e:	4b47      	ldr	r3, [pc, #284]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004266:	2b08      	cmp	r3, #8
 8004268:	d11c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b44      	ldr	r3, [pc, #272]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d116      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004276:	4b41      	ldr	r3, [pc, #260]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e1c7      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4937      	ldr	r1, [pc, #220]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	e03a      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ac:	4b34      	ldr	r3, [pc, #208]	@ (8004380 <HAL_RCC_OscConfig+0x244>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7ff f809 	bl	80032c8 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ba:	f7ff f805 	bl	80032c8 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e1a8      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b28      	ldr	r3, [pc, #160]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4925      	ldr	r1, [pc, #148]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
 80042ec:	e015      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b24      	ldr	r3, [pc, #144]	@ (8004380 <HAL_RCC_OscConfig+0x244>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fe ffe8 	bl	80032c8 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fe ffe4 	bl	80032c8 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e187      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430e:	4b1b      	ldr	r3, [pc, #108]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d036      	beq.n	8004394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432e:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <HAL_RCC_OscConfig+0x248>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fe ffc8 	bl	80032c8 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433c:	f7fe ffc4 	bl	80032c8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e167      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x200>
 800435a:	e01b      	b.n	8004394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435c:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <HAL_RCC_OscConfig+0x248>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004362:	f7fe ffb1 	bl	80032c8 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	e00e      	b.n	8004388 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800436a:	f7fe ffad 	bl	80032c8 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d907      	bls.n	8004388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e150      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
 800437c:	40023800 	.word	0x40023800
 8004380:	42470000 	.word	0x42470000
 8004384:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	4b88      	ldr	r3, [pc, #544]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800438a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ea      	bne.n	800436a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8097 	beq.w	80044d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a6:	4b81      	ldr	r3, [pc, #516]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b7d      	ldr	r3, [pc, #500]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	4a7c      	ldr	r2, [pc, #496]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c2:	4b7a      	ldr	r3, [pc, #488]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b77      	ldr	r3, [pc, #476]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d118      	bne.n	8004410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043de:	4b74      	ldr	r3, [pc, #464]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a73      	ldr	r2, [pc, #460]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fe ff6d 	bl	80032c8 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f2:	f7fe ff69 	bl	80032c8 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e10c      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	4b6a      	ldr	r3, [pc, #424]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <HAL_RCC_OscConfig+0x2ea>
 8004418:	4b64      	ldr	r3, [pc, #400]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441c:	4a63      	ldr	r2, [pc, #396]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	@ 0x70
 8004424:	e01c      	b.n	8004460 <HAL_RCC_OscConfig+0x324>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b05      	cmp	r3, #5
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x30c>
 800442e:	4b5f      	ldr	r3, [pc, #380]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004432:	4a5e      	ldr	r2, [pc, #376]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	6713      	str	r3, [r2, #112]	@ 0x70
 800443a:	4b5c      	ldr	r3, [pc, #368]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	4a5b      	ldr	r2, [pc, #364]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6713      	str	r3, [r2, #112]	@ 0x70
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0x324>
 8004448:	4b58      	ldr	r3, [pc, #352]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	4a57      	ldr	r2, [pc, #348]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	@ 0x70
 8004454:	4b55      	ldr	r3, [pc, #340]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004458:	4a54      	ldr	r2, [pc, #336]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800445a:	f023 0304 	bic.w	r3, r3, #4
 800445e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d015      	beq.n	8004494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fe ff2e 	bl	80032c8 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fe ff2a 	bl	80032c8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e0cb      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b49      	ldr	r3, [pc, #292]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RCC_OscConfig+0x334>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004494:	f7fe ff18 	bl	80032c8 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fe ff14 	bl	80032c8 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0b5      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b2:	4b3e      	ldr	r3, [pc, #248]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ee      	bne.n	800449c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d105      	bne.n	80044d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c4:	4b39      	ldr	r3, [pc, #228]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	4a38      	ldr	r2, [pc, #224]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a1 	beq.w	800461c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044da:	4b34      	ldr	r3, [pc, #208]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d05c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d141      	bne.n	8004572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b31      	ldr	r3, [pc, #196]	@ (80045b4 <HAL_RCC_OscConfig+0x478>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fe fee8 	bl	80032c8 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fe fee4 	bl	80032c8 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e087      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	4b27      	ldr	r3, [pc, #156]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	3b01      	subs	r3, #1
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	491b      	ldr	r1, [pc, #108]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004544:	4b1b      	ldr	r3, [pc, #108]	@ (80045b4 <HAL_RCC_OscConfig+0x478>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454a:	f7fe febd 	bl	80032c8 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004552:	f7fe feb9 	bl	80032c8 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e05c      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004564:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x416>
 8004570:	e054      	b.n	800461c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b10      	ldr	r3, [pc, #64]	@ (80045b4 <HAL_RCC_OscConfig+0x478>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe fea6 	bl	80032c8 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004580:	f7fe fea2 	bl	80032c8 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e045      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x444>
 800459e:	e03d      	b.n	800461c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e038      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40007000 	.word	0x40007000
 80045b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004628 <HAL_RCC_OscConfig+0x4ec>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d028      	beq.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d121      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d11a      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045e8:	4013      	ands	r3, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d111      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d107      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800

0800462c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0cc      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004640:	4b68      	ldr	r3, [pc, #416]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d90c      	bls.n	8004668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b65      	ldr	r3, [pc, #404]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b63      	ldr	r3, [pc, #396]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0b8      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004680:	4b59      	ldr	r3, [pc, #356]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a58      	ldr	r2, [pc, #352]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800468a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004698:	4b53      	ldr	r3, [pc, #332]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4a52      	ldr	r2, [pc, #328]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a4:	4b50      	ldr	r3, [pc, #320]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	494d      	ldr	r1, [pc, #308]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d044      	beq.n	800474c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b47      	ldr	r3, [pc, #284]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d119      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e07f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ea:	4b3f      	ldr	r3, [pc, #252]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e06f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fa:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e067      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470a:	4b37      	ldr	r3, [pc, #220]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4934      	ldr	r1, [pc, #208]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800471c:	f7fe fdd4 	bl	80032c8 <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004722:	e00a      	b.n	800473a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004724:	f7fe fdd0 	bl	80032c8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e04f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	4b2b      	ldr	r3, [pc, #172]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 020c 	and.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	429a      	cmp	r2, r3
 800474a:	d1eb      	bne.n	8004724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800474c:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d20c      	bcs.n	8004774 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b22      	ldr	r3, [pc, #136]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e032      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004780:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4916      	ldr	r1, [pc, #88]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479e:	4b12      	ldr	r3, [pc, #72]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	490e      	ldr	r1, [pc, #56]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047b2:	f000 f821 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 80047b6:	4602      	mov	r2, r0
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	490a      	ldr	r1, [pc, #40]	@ (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	5ccb      	ldrb	r3, [r1, r3]
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	4a09      	ldr	r2, [pc, #36]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047ce:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fd34 	bl	8003240 <HAL_InitTick>

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40023c00 	.word	0x40023c00
 80047e8:	40023800 	.word	0x40023800
 80047ec:	0800cc1c 	.word	0x0800cc1c
 80047f0:	200000e4 	.word	0x200000e4
 80047f4:	200000e8 	.word	0x200000e8

080047f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047fc:	b094      	sub	sp, #80	@ 0x50
 80047fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004810:	4b79      	ldr	r3, [pc, #484]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b08      	cmp	r3, #8
 800481a:	d00d      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x40>
 800481c:	2b08      	cmp	r3, #8
 800481e:	f200 80e1 	bhi.w	80049e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0x34>
 8004826:	2b04      	cmp	r3, #4
 8004828:	d003      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x3a>
 800482a:	e0db      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800482c:	4b73      	ldr	r3, [pc, #460]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x204>)
 800482e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004830:	e0db      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004832:	4b73      	ldr	r3, [pc, #460]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0x208>)
 8004834:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004836:	e0d8      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004838:	4b6f      	ldr	r3, [pc, #444]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004840:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004842:	4b6d      	ldr	r3, [pc, #436]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d063      	beq.n	8004916 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484e:	4b6a      	ldr	r3, [pc, #424]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	2200      	movs	r2, #0
 8004856:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004858:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800485a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004860:	633b      	str	r3, [r7, #48]	@ 0x30
 8004862:	2300      	movs	r3, #0
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
 8004866:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800486a:	4622      	mov	r2, r4
 800486c:	462b      	mov	r3, r5
 800486e:	f04f 0000 	mov.w	r0, #0
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	0159      	lsls	r1, r3, #5
 8004878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800487c:	0150      	lsls	r0, r2, #5
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4621      	mov	r1, r4
 8004884:	1a51      	subs	r1, r2, r1
 8004886:	6139      	str	r1, [r7, #16]
 8004888:	4629      	mov	r1, r5
 800488a:	eb63 0301 	sbc.w	r3, r3, r1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800489c:	4659      	mov	r1, fp
 800489e:	018b      	lsls	r3, r1, #6
 80048a0:	4651      	mov	r1, sl
 80048a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048a6:	4651      	mov	r1, sl
 80048a8:	018a      	lsls	r2, r1, #6
 80048aa:	4651      	mov	r1, sl
 80048ac:	ebb2 0801 	subs.w	r8, r2, r1
 80048b0:	4659      	mov	r1, fp
 80048b2:	eb63 0901 	sbc.w	r9, r3, r1
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ca:	4690      	mov	r8, r2
 80048cc:	4699      	mov	r9, r3
 80048ce:	4623      	mov	r3, r4
 80048d0:	eb18 0303 	adds.w	r3, r8, r3
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	462b      	mov	r3, r5
 80048d8:	eb49 0303 	adc.w	r3, r9, r3
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ea:	4629      	mov	r1, r5
 80048ec:	024b      	lsls	r3, r1, #9
 80048ee:	4621      	mov	r1, r4
 80048f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048f4:	4621      	mov	r1, r4
 80048f6:	024a      	lsls	r2, r1, #9
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048fe:	2200      	movs	r2, #0
 8004900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004908:	f7fc facc 	bl	8000ea4 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4613      	mov	r3, r2
 8004912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004914:	e058      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004916:	4b38      	ldr	r3, [pc, #224]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	099b      	lsrs	r3, r3, #6
 800491c:	2200      	movs	r2, #0
 800491e:	4618      	mov	r0, r3
 8004920:	4611      	mov	r1, r2
 8004922:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	2300      	movs	r3, #0
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
 800492c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004930:	4642      	mov	r2, r8
 8004932:	464b      	mov	r3, r9
 8004934:	f04f 0000 	mov.w	r0, #0
 8004938:	f04f 0100 	mov.w	r1, #0
 800493c:	0159      	lsls	r1, r3, #5
 800493e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004942:	0150      	lsls	r0, r2, #5
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4641      	mov	r1, r8
 800494a:	ebb2 0a01 	subs.w	sl, r2, r1
 800494e:	4649      	mov	r1, r9
 8004950:	eb63 0b01 	sbc.w	fp, r3, r1
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004960:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004964:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004968:	ebb2 040a 	subs.w	r4, r2, sl
 800496c:	eb63 050b 	sbc.w	r5, r3, fp
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	00eb      	lsls	r3, r5, #3
 800497a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800497e:	00e2      	lsls	r2, r4, #3
 8004980:	4614      	mov	r4, r2
 8004982:	461d      	mov	r5, r3
 8004984:	4643      	mov	r3, r8
 8004986:	18e3      	adds	r3, r4, r3
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	464b      	mov	r3, r9
 800498c:	eb45 0303 	adc.w	r3, r5, r3
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800499e:	4629      	mov	r1, r5
 80049a0:	028b      	lsls	r3, r1, #10
 80049a2:	4621      	mov	r1, r4
 80049a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a8:	4621      	mov	r1, r4
 80049aa:	028a      	lsls	r2, r1, #10
 80049ac:	4610      	mov	r0, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b2:	2200      	movs	r2, #0
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	61fa      	str	r2, [r7, #28]
 80049b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049bc:	f7fc fa72 	bl	8000ea4 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049c8:	4b0b      	ldr	r3, [pc, #44]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80049d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <HAL_RCC_GetSysClockFreq+0x204>)
 80049e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3750      	adds	r7, #80	@ 0x50
 80049f0:	46bd      	mov	sp, r7
 80049f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	007a1200 	.word	0x007a1200

08004a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a08:	4b03      	ldr	r3, [pc, #12]	@ (8004a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	200000e4 	.word	0x200000e4

08004a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a20:	f7ff fff0 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b05      	ldr	r3, [pc, #20]	@ (8004a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	0a9b      	lsrs	r3, r3, #10
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4903      	ldr	r1, [pc, #12]	@ (8004a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	0800cc2c 	.word	0x0800cc2c

08004a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a48:	f7ff ffdc 	bl	8004a04 <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0b5b      	lsrs	r3, r3, #13
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4903      	ldr	r1, [pc, #12]	@ (8004a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40023800 	.word	0x40023800
 8004a68:	0800cc2c 	.word	0x0800cc2c

08004a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e041      	b.n	8004b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fe f8de 	bl	8002c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 fdfe 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e046      	b.n	8004bb2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a23      	ldr	r2, [pc, #140]	@ (8004bc0 <HAL_TIM_Base_Start+0xb4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3e:	d01d      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc4 <HAL_TIM_Base_Start+0xb8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc8 <HAL_TIM_Base_Start+0xbc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1c      	ldr	r2, [pc, #112]	@ (8004bcc <HAL_TIM_Base_Start+0xc0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd0 <HAL_TIM_Base_Start+0xc4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a19      	ldr	r2, [pc, #100]	@ (8004bd4 <HAL_TIM_Base_Start+0xc8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a18      	ldr	r2, [pc, #96]	@ (8004bd8 <HAL_TIM_Base_Start+0xcc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d111      	bne.n	8004ba0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d010      	beq.n	8004bb0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9e:	e007      	b.n	8004bb0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	40010400 	.word	0x40010400
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40001800 	.word	0x40001800

08004bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d001      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e04e      	b.n	8004c92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a23      	ldr	r2, [pc, #140]	@ (8004ca0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d022      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1e:	d01d      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d018      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1c      	ldr	r2, [pc, #112]	@ (8004cac <HAL_TIM_Base_Start_IT+0xd0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a19      	ldr	r2, [pc, #100]	@ (8004cb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a18      	ldr	r2, [pc, #96]	@ (8004cb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d111      	bne.n	8004c80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d010      	beq.n	8004c90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	e007      	b.n	8004c90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40000800 	.word	0x40000800
 8004cac:	40000c00 	.word	0x40000c00
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40001800 	.word	0x40001800

08004cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e041      	b.n	8004d52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f839 	bl	8004d5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f000 fcd6 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIM_PWM_Start+0x24>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e022      	b.n	8004dda <HAL_TIM_PWM_Start+0x6a>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d109      	bne.n	8004dae <HAL_TIM_PWM_Start+0x3e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e015      	b.n	8004dda <HAL_TIM_PWM_Start+0x6a>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIM_PWM_Start+0x58>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e008      	b.n	8004dda <HAL_TIM_PWM_Start+0x6a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07c      	b.n	8004edc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Start+0x82>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	e013      	b.n	8004e1a <HAL_TIM_PWM_Start+0xaa>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Start+0x92>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e00:	e00b      	b.n	8004e1a <HAL_TIM_PWM_Start+0xaa>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0xa2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e10:	e003      	b.n	8004e1a <HAL_TIM_PWM_Start+0xaa>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 ff38 	bl	8005c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee4 <HAL_TIM_PWM_Start+0x174>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIM_PWM_Start+0xcc>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee8 <HAL_TIM_PWM_Start+0x178>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_PWM_Start+0xd0>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_TIM_PWM_Start+0xd2>
 8004e40:	2300      	movs	r3, #0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d007      	beq.n	8004e56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a22      	ldr	r2, [pc, #136]	@ (8004ee4 <HAL_TIM_PWM_Start+0x174>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d022      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x136>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e68:	d01d      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x136>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004eec <HAL_TIM_PWM_Start+0x17c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d018      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x136>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef0 <HAL_TIM_PWM_Start+0x180>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x136>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef4 <HAL_TIM_PWM_Start+0x184>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00e      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x136>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a16      	ldr	r2, [pc, #88]	@ (8004ee8 <HAL_TIM_PWM_Start+0x178>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x136>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a18      	ldr	r2, [pc, #96]	@ (8004ef8 <HAL_TIM_PWM_Start+0x188>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x136>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a16      	ldr	r2, [pc, #88]	@ (8004efc <HAL_TIM_PWM_Start+0x18c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d111      	bne.n	8004eca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b06      	cmp	r3, #6
 8004eb6:	d010      	beq.n	8004eda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec8:	e007      	b.n	8004eda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f042 0201 	orr.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	40000c00 	.word	0x40000c00
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40001800 	.word	0x40001800

08004f00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e097      	b.n	8005044 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7fd fd87 	bl	8002a3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f44:	f023 0307 	bic.w	r3, r3, #7
 8004f48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f000 fba9 	bl	80056ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	4313      	orrs	r3, r2
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004fa0:	f023 030c 	bic.w	r3, r3, #12
 8004fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	011a      	lsls	r2, r3, #4
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	031b      	lsls	r3, r3, #12
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800505c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005064:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800506c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005074:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d110      	bne.n	800509e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d102      	bne.n	8005088 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005082:	7b7b      	ldrb	r3, [r7, #13]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e069      	b.n	8005160 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800509c:	e031      	b.n	8005102 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d110      	bne.n	80050c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a4:	7bbb      	ldrb	r3, [r7, #14]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d102      	bne.n	80050b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050aa:	7b3b      	ldrb	r3, [r7, #12]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d001      	beq.n	80050b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e055      	b.n	8005160 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050c4:	e01d      	b.n	8005102 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d108      	bne.n	80050de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050cc:	7bbb      	ldrb	r3, [r7, #14]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d105      	bne.n	80050de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d2:	7b7b      	ldrb	r3, [r7, #13]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d102      	bne.n	80050de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050d8:	7b3b      	ldrb	r3, [r7, #12]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d001      	beq.n	80050e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e03e      	b.n	8005160 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_TIM_Encoder_Start+0xc4>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b04      	cmp	r3, #4
 800510c:	d008      	beq.n	8005120 <HAL_TIM_Encoder_Start+0xd4>
 800510e:	e00f      	b.n	8005130 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2201      	movs	r2, #1
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fdbd 	bl	8005c98 <TIM_CCxChannelCmd>
      break;
 800511e:	e016      	b.n	800514e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2201      	movs	r2, #1
 8005126:	2104      	movs	r1, #4
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fdb5 	bl	8005c98 <TIM_CCxChannelCmd>
      break;
 800512e:	e00e      	b.n	800514e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2201      	movs	r2, #1
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fdad 	bl	8005c98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2201      	movs	r2, #1
 8005144:	2104      	movs	r1, #4
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fda6 	bl	8005c98 <TIM_CCxChannelCmd>
      break;
 800514c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0202 	mvn.w	r2, #2
 800519c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa5b 	bl	800566e <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa4d 	bl	800565a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa5e 	bl	8005682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d020      	beq.n	8005218 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0204 	mvn.w	r2, #4
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa35 	bl	800566e <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa27 	bl	800565a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fa38 	bl	8005682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d020      	beq.n	8005264 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0208 	mvn.w	r2, #8
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2204      	movs	r2, #4
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa0f 	bl	800566e <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa01 	bl	800565a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fa12 	bl	8005682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b00      	cmp	r3, #0
 800526c:	d020      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01b      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0210 	mvn.w	r2, #16
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2208      	movs	r2, #8
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f9e9 	bl	800566e <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f9db 	bl	800565a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f9ec 	bl	8005682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0201 	mvn.w	r2, #1
 80052cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fc f8e6 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fdce 	bl	8005e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f9bd 	bl	8005696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00c      	beq.n	8005340 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0220 	mvn.w	r2, #32
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fda0 	bl	8005e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005362:	2302      	movs	r3, #2
 8005364:	e0ae      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b0c      	cmp	r3, #12
 8005372:	f200 809f 	bhi.w	80054b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005376:	a201      	add	r2, pc, #4	@ (adr r2, 800537c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	080053b1 	.word	0x080053b1
 8005380:	080054b5 	.word	0x080054b5
 8005384:	080054b5 	.word	0x080054b5
 8005388:	080054b5 	.word	0x080054b5
 800538c:	080053f1 	.word	0x080053f1
 8005390:	080054b5 	.word	0x080054b5
 8005394:	080054b5 	.word	0x080054b5
 8005398:	080054b5 	.word	0x080054b5
 800539c:	08005433 	.word	0x08005433
 80053a0:	080054b5 	.word	0x080054b5
 80053a4:	080054b5 	.word	0x080054b5
 80053a8:	080054b5 	.word	0x080054b5
 80053ac:	08005473 	.word	0x08005473
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fa24 	bl	8005804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0208 	orr.w	r2, r2, #8
 80053ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0204 	bic.w	r2, r2, #4
 80053da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6999      	ldr	r1, [r3, #24]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	619a      	str	r2, [r3, #24]
      break;
 80053ee:	e064      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fa74 	bl	80058e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800540a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800541a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6999      	ldr	r1, [r3, #24]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	021a      	lsls	r2, r3, #8
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	619a      	str	r2, [r3, #24]
      break;
 8005430:	e043      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fac9 	bl	80059d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0208 	orr.w	r2, r2, #8
 800544c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0204 	bic.w	r2, r2, #4
 800545c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69d9      	ldr	r1, [r3, #28]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	61da      	str	r2, [r3, #28]
      break;
 8005470:	e023      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fb1d 	bl	8005ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800548c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69d9      	ldr	r1, [r3, #28]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	021a      	lsls	r2, r3, #8
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	61da      	str	r2, [r3, #28]
      break;
 80054b2:	e002      	b.n	80054ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	75fb      	strb	r3, [r7, #23]
      break;
 80054b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_TIM_ConfigClockSource+0x1c>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e0b4      	b.n	8005652 <HAL_TIM_ConfigClockSource+0x186>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800550e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005520:	d03e      	beq.n	80055a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005526:	f200 8087 	bhi.w	8005638 <HAL_TIM_ConfigClockSource+0x16c>
 800552a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552e:	f000 8086 	beq.w	800563e <HAL_TIM_ConfigClockSource+0x172>
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005536:	d87f      	bhi.n	8005638 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b70      	cmp	r3, #112	@ 0x70
 800553a:	d01a      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0xa6>
 800553c:	2b70      	cmp	r3, #112	@ 0x70
 800553e:	d87b      	bhi.n	8005638 <HAL_TIM_ConfigClockSource+0x16c>
 8005540:	2b60      	cmp	r3, #96	@ 0x60
 8005542:	d050      	beq.n	80055e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005544:	2b60      	cmp	r3, #96	@ 0x60
 8005546:	d877      	bhi.n	8005638 <HAL_TIM_ConfigClockSource+0x16c>
 8005548:	2b50      	cmp	r3, #80	@ 0x50
 800554a:	d03c      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0xfa>
 800554c:	2b50      	cmp	r3, #80	@ 0x50
 800554e:	d873      	bhi.n	8005638 <HAL_TIM_ConfigClockSource+0x16c>
 8005550:	2b40      	cmp	r3, #64	@ 0x40
 8005552:	d058      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0x13a>
 8005554:	2b40      	cmp	r3, #64	@ 0x40
 8005556:	d86f      	bhi.n	8005638 <HAL_TIM_ConfigClockSource+0x16c>
 8005558:	2b30      	cmp	r3, #48	@ 0x30
 800555a:	d064      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x15a>
 800555c:	2b30      	cmp	r3, #48	@ 0x30
 800555e:	d86b      	bhi.n	8005638 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b20      	cmp	r3, #32
 8005562:	d060      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x15a>
 8005564:	2b20      	cmp	r3, #32
 8005566:	d867      	bhi.n	8005638 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d05c      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x15a>
 800556c:	2b10      	cmp	r3, #16
 800556e:	d05a      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0x15a>
 8005570:	e062      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005582:	f000 fb69 	bl	8005c58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	609a      	str	r2, [r3, #8]
      break;
 800559e:	e04f      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055b0:	f000 fb52 	bl	8005c58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055c2:	609a      	str	r2, [r3, #8]
      break;
 80055c4:	e03c      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d2:	461a      	mov	r2, r3
 80055d4:	f000 fac6 	bl	8005b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2150      	movs	r1, #80	@ 0x50
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fb1f 	bl	8005c22 <TIM_ITRx_SetConfig>
      break;
 80055e4:	e02c      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055f2:	461a      	mov	r2, r3
 80055f4:	f000 fae5 	bl	8005bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2160      	movs	r1, #96	@ 0x60
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fb0f 	bl	8005c22 <TIM_ITRx_SetConfig>
      break;
 8005604:	e01c      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005612:	461a      	mov	r2, r3
 8005614:	f000 faa6 	bl	8005b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2140      	movs	r1, #64	@ 0x40
 800561e:	4618      	mov	r0, r3
 8005620:	f000 faff 	bl	8005c22 <TIM_ITRx_SetConfig>
      break;
 8005624:	e00c      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4619      	mov	r1, r3
 8005630:	4610      	mov	r0, r2
 8005632:	f000 faf6 	bl	8005c22 <TIM_ITRx_SetConfig>
      break;
 8005636:	e003      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	73fb      	strb	r3, [r7, #15]
      break;
 800563c:	e000      	b.n	8005640 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800563e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a46      	ldr	r2, [pc, #280]	@ (80057d8 <TIM_Base_SetConfig+0x12c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d013      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d00f      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a43      	ldr	r2, [pc, #268]	@ (80057dc <TIM_Base_SetConfig+0x130>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00b      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a42      	ldr	r2, [pc, #264]	@ (80057e0 <TIM_Base_SetConfig+0x134>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a41      	ldr	r2, [pc, #260]	@ (80057e4 <TIM_Base_SetConfig+0x138>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a40      	ldr	r2, [pc, #256]	@ (80057e8 <TIM_Base_SetConfig+0x13c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d108      	bne.n	80056fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a35      	ldr	r2, [pc, #212]	@ (80057d8 <TIM_Base_SetConfig+0x12c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d02b      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800570c:	d027      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a32      	ldr	r2, [pc, #200]	@ (80057dc <TIM_Base_SetConfig+0x130>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d023      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a31      	ldr	r2, [pc, #196]	@ (80057e0 <TIM_Base_SetConfig+0x134>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01f      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a30      	ldr	r2, [pc, #192]	@ (80057e4 <TIM_Base_SetConfig+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01b      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2f      	ldr	r2, [pc, #188]	@ (80057e8 <TIM_Base_SetConfig+0x13c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d017      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2e      	ldr	r2, [pc, #184]	@ (80057ec <TIM_Base_SetConfig+0x140>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2d      	ldr	r2, [pc, #180]	@ (80057f0 <TIM_Base_SetConfig+0x144>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2c      	ldr	r2, [pc, #176]	@ (80057f4 <TIM_Base_SetConfig+0x148>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2b      	ldr	r2, [pc, #172]	@ (80057f8 <TIM_Base_SetConfig+0x14c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2a      	ldr	r2, [pc, #168]	@ (80057fc <TIM_Base_SetConfig+0x150>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a29      	ldr	r2, [pc, #164]	@ (8005800 <TIM_Base_SetConfig+0x154>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d108      	bne.n	8005770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a10      	ldr	r2, [pc, #64]	@ (80057d8 <TIM_Base_SetConfig+0x12c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_Base_SetConfig+0xf8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a12      	ldr	r2, [pc, #72]	@ (80057e8 <TIM_Base_SetConfig+0x13c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d103      	bne.n	80057ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d105      	bne.n	80057ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]
  }
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40010400 	.word	0x40010400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800
 80057f8:	40001800 	.word	0x40001800
 80057fc:	40001c00 	.word	0x40001c00
 8005800:	40002000 	.word	0x40002000

08005804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f023 0201 	bic.w	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 0302 	bic.w	r3, r3, #2
 800584c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a20      	ldr	r2, [pc, #128]	@ (80058dc <TIM_OC1_SetConfig+0xd8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_OC1_SetConfig+0x64>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a1f      	ldr	r2, [pc, #124]	@ (80058e0 <TIM_OC1_SetConfig+0xdc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d10c      	bne.n	8005882 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0308 	bic.w	r3, r3, #8
 800586e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 0304 	bic.w	r3, r3, #4
 8005880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a15      	ldr	r2, [pc, #84]	@ (80058dc <TIM_OC1_SetConfig+0xd8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d003      	beq.n	8005892 <TIM_OC1_SetConfig+0x8e>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a14      	ldr	r2, [pc, #80]	@ (80058e0 <TIM_OC1_SetConfig+0xdc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d111      	bne.n	80058b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	621a      	str	r2, [r3, #32]
}
 80058d0:	bf00      	nop
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40010400 	.word	0x40010400

080058e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	f023 0210 	bic.w	r2, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800591a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0320 	bic.w	r3, r3, #32
 800592e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a22      	ldr	r2, [pc, #136]	@ (80059c8 <TIM_OC2_SetConfig+0xe4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC2_SetConfig+0x68>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a21      	ldr	r2, [pc, #132]	@ (80059cc <TIM_OC2_SetConfig+0xe8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d10d      	bne.n	8005968 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a17      	ldr	r2, [pc, #92]	@ (80059c8 <TIM_OC2_SetConfig+0xe4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC2_SetConfig+0x94>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <TIM_OC2_SetConfig+0xe8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d113      	bne.n	80059a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800597e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40010400 	.word	0x40010400

080059d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a21      	ldr	r2, [pc, #132]	@ (8005ab0 <TIM_OC3_SetConfig+0xe0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_OC3_SetConfig+0x66>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a20      	ldr	r2, [pc, #128]	@ (8005ab4 <TIM_OC3_SetConfig+0xe4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d10d      	bne.n	8005a52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a16      	ldr	r2, [pc, #88]	@ (8005ab0 <TIM_OC3_SetConfig+0xe0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_OC3_SetConfig+0x92>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a15      	ldr	r2, [pc, #84]	@ (8005ab4 <TIM_OC3_SetConfig+0xe4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d113      	bne.n	8005a8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	621a      	str	r2, [r3, #32]
}
 8005aa4:	bf00      	nop
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	40010400 	.word	0x40010400

08005ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	031b      	lsls	r3, r3, #12
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a12      	ldr	r2, [pc, #72]	@ (8005b5c <TIM_OC4_SetConfig+0xa4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_OC4_SetConfig+0x68>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a11      	ldr	r2, [pc, #68]	@ (8005b60 <TIM_OC4_SetConfig+0xa8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d109      	bne.n	8005b34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	019b      	lsls	r3, r3, #6
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40010400 	.word	0x40010400

08005b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f023 0201 	bic.w	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f023 030a 	bic.w	r3, r3, #10
 8005ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f023 0210 	bic.w	r2, r3, #16
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	031b      	lsls	r3, r3, #12
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f043 0307 	orr.w	r3, r3, #7
 8005c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	609a      	str	r2, [r3, #8]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	021a      	lsls	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	609a      	str	r2, [r3, #8]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2201      	movs	r2, #1
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e05a      	b.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a21      	ldr	r2, [pc, #132]	@ (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d48:	d01d      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1a      	ldr	r2, [pc, #104]	@ (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a18      	ldr	r2, [pc, #96]	@ (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a17      	ldr	r2, [pc, #92]	@ (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a15      	ldr	r2, [pc, #84]	@ (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d10c      	bne.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40010400 	.word	0x40010400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40001800 	.word	0x40001800

08005ddc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e03d      	b.n	8005e74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e042      	b.n	8005f40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fc ffa0 	bl	8002e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	@ 0x24
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 ff85 	bl	8006dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695a      	ldr	r2, [r3, #20]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	@ 0x28
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d175      	bne.n	8006054 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_UART_Transmit+0x2c>
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e06e      	b.n	8006056 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2221      	movs	r2, #33	@ 0x21
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f86:	f7fd f99f 	bl	80032c8 <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa0:	d108      	bne.n	8005fb4 <HAL_UART_Transmit+0x6c>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e003      	b.n	8005fbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fbc:	e02e      	b.n	800601c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2180      	movs	r1, #128	@ 0x80
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fc5d 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e03a      	b.n	8006056 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e007      	b.n	800600e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1cb      	bne.n	8005fbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	2140      	movs	r1, #64	@ 0x40
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fc29 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e006      	b.n	8006056 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3720      	adds	r7, #32
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b08c      	sub	sp, #48	@ 0x30
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	4613      	mov	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b20      	cmp	r3, #32
 8006076:	d14a      	bne.n	800610e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800607e:	88fb      	ldrh	r3, [r7, #6]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e043      	b.n	8006110 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	461a      	mov	r2, r3
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fc4e 	bl	800693c <UART_Start_Receive_DMA>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80060a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d12c      	bne.n	8006108 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d125      	bne.n	8006102 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	617b      	str	r3, [r7, #20]
   return(result);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f043 0310 	orr.w	r3, r3, #16
 80060e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80060ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e5      	bne.n	80060cc <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006100:	e002      	b.n	8006108 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006108:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800610c:	e000      	b.n	8006110 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800610e:	2302      	movs	r3, #2
  }
}
 8006110:	4618      	mov	r0, r3
 8006112:	3730      	adds	r7, #48	@ 0x30
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b0ba      	sub	sp, #232	@ 0xe8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800613e:	2300      	movs	r3, #0
 8006140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10f      	bne.n	800617e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_UART_IRQHandler+0x66>
 800616a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fd81 	bl	8006c7e <UART_Receive_IT>
      return;
 800617c:	e25b      	b.n	8006636 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800617e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80de 	beq.w	8006344 <HAL_UART_IRQHandler+0x22c>
 8006188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006198:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80d1 	beq.w	8006344 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <HAL_UART_IRQHandler+0xae>
 80061ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061be:	f043 0201 	orr.w	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <HAL_UART_IRQHandler+0xd2>
 80061d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e2:	f043 0202 	orr.w	r2, r3, #2
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <HAL_UART_IRQHandler+0xf6>
 80061f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006206:	f043 0204 	orr.w	r2, r3, #4
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800620e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d011      	beq.n	800623e <HAL_UART_IRQHandler+0x126>
 800621a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006236:	f043 0208 	orr.w	r2, r3, #8
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 81f2 	beq.w	800662c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_UART_IRQHandler+0x14e>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fd0c 	bl	8006c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006270:	2b40      	cmp	r3, #64	@ 0x40
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <HAL_UART_IRQHandler+0x17a>
 800628a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d04f      	beq.n	8006332 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fc14 	bl	8006ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a2:	2b40      	cmp	r3, #64	@ 0x40
 80062a4:	d141      	bne.n	800632a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3314      	adds	r3, #20
 80062ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3314      	adds	r3, #20
 80062ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80062d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1d9      	bne.n	80062a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d013      	beq.n	8006322 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062fe:	4a7e      	ldr	r2, [pc, #504]	@ (80064f8 <HAL_UART_IRQHandler+0x3e0>)
 8006300:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006306:	4618      	mov	r0, r3
 8006308:	f7fd fa8c 	bl	8003824 <HAL_DMA_Abort_IT>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d016      	beq.n	8006340 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800631c:	4610      	mov	r0, r2
 800631e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	e00e      	b.n	8006340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f9a8 	bl	8006678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	e00a      	b.n	8006340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f9a4 	bl	8006678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	e006      	b.n	8006340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f9a0 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800633e:	e175      	b.n	800662c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	bf00      	nop
    return;
 8006342:	e173      	b.n	800662c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006348:	2b01      	cmp	r3, #1
 800634a:	f040 814f 	bne.w	80065ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8148 	beq.w	80065ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8141 	beq.w	80065ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60bb      	str	r3, [r7, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638a:	2b40      	cmp	r3, #64	@ 0x40
 800638c:	f040 80b6 	bne.w	80064fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800639c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8145 	beq.w	8006630 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063ae:	429a      	cmp	r2, r3
 80063b0:	f080 813e 	bcs.w	8006630 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c6:	f000 8088 	beq.w	80064da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	330c      	adds	r3, #12
 80063d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80063f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006402:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800640e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1d9      	bne.n	80063ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3314      	adds	r3, #20
 800641c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006426:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006428:	f023 0301 	bic.w	r3, r3, #1
 800642c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3314      	adds	r3, #20
 8006436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800643a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800643e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006442:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800644c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e1      	bne.n	8006416 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3314      	adds	r3, #20
 8006458:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3314      	adds	r3, #20
 8006472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006478:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800647c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e3      	bne.n	8006452 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064aa:	f023 0310 	bic.w	r3, r3, #16
 80064ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	330c      	adds	r3, #12
 80064b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80064bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80064be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e3      	bne.n	8006498 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fd f935 	bl	8003744 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7fa ff3b 	bl	800136c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064f6:	e09b      	b.n	8006630 <HAL_UART_IRQHandler+0x518>
 80064f8:	08006b87 	.word	0x08006b87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006504:	b29b      	uxth	r3, r3
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 808e 	beq.w	8006634 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8089 	beq.w	8006634 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	330c      	adds	r3, #12
 8006528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006546:	647a      	str	r2, [r7, #68]	@ 0x44
 8006548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800654c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e3      	bne.n	8006522 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3314      	adds	r3, #20
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	623b      	str	r3, [r7, #32]
   return(result);
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f023 0301 	bic.w	r3, r3, #1
 8006570:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3314      	adds	r3, #20
 800657a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800657e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006580:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e3      	bne.n	800655a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0310 	bic.w	r3, r3, #16
 80065b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80065c4:	61fa      	str	r2, [r7, #28]
 80065c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	69b9      	ldr	r1, [r7, #24]
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	617b      	str	r3, [r7, #20]
   return(result);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e3      	bne.n	80065a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7fa fec1 	bl	800136c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065ea:	e023      	b.n	8006634 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <HAL_UART_IRQHandler+0x4f4>
 80065f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fad2 	bl	8006bae <UART_Transmit_IT>
    return;
 800660a:	e014      	b.n	8006636 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800660c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00e      	beq.n	8006636 <HAL_UART_IRQHandler+0x51e>
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800661c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fb12 	bl	8006c4e <UART_EndTransmit_IT>
    return;
 800662a:	e004      	b.n	8006636 <HAL_UART_IRQHandler+0x51e>
    return;
 800662c:	bf00      	nop
 800662e:	e002      	b.n	8006636 <HAL_UART_IRQHandler+0x51e>
      return;
 8006630:	bf00      	nop
 8006632:	e000      	b.n	8006636 <HAL_UART_IRQHandler+0x51e>
      return;
 8006634:	bf00      	nop
  }
}
 8006636:	37e8      	adds	r7, #232	@ 0xe8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b09c      	sub	sp, #112	@ 0x70
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d172      	bne.n	800678e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80066a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066aa:	2200      	movs	r2, #0
 80066ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	330c      	adds	r3, #12
 80066cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80066ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066d0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3314      	adds	r3, #20
 80066e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80066fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3314      	adds	r3, #20
 8006700:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006702:	647a      	str	r2, [r7, #68]	@ 0x44
 8006704:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006708:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e5      	bne.n	80066e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3314      	adds	r3, #20
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	623b      	str	r3, [r7, #32]
   return(result);
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800672c:	663b      	str	r3, [r7, #96]	@ 0x60
 800672e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3314      	adds	r3, #20
 8006734:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006736:	633a      	str	r2, [r7, #48]	@ 0x30
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800673c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e5      	bne.n	8006716 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800674a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800674c:	2220      	movs	r2, #32
 800674e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006756:	2b01      	cmp	r3, #1
 8006758:	d119      	bne.n	800678e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	60fb      	str	r3, [r7, #12]
   return(result);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f023 0310 	bic.w	r3, r3, #16
 8006770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800677a:	61fa      	str	r2, [r7, #28]
 800677c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	69b9      	ldr	r1, [r7, #24]
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	617b      	str	r3, [r7, #20]
   return(result);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800678e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006790:	2200      	movs	r2, #0
 8006792:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006798:	2b01      	cmp	r3, #1
 800679a:	d106      	bne.n	80067aa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800679c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800679e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067a0:	4619      	mov	r1, r3
 80067a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80067a4:	f7fa fde2 	bl	800136c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067a8:	e002      	b.n	80067b0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80067aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80067ac:	f7ff ff50 	bl	8006650 <HAL_UART_RxCpltCallback>
}
 80067b0:	bf00      	nop
 80067b2:	3770      	adds	r7, #112	@ 0x70
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d108      	bne.n	80067e6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067d8:	085b      	lsrs	r3, r3, #1
 80067da:	b29b      	uxth	r3, r3
 80067dc:	4619      	mov	r1, r3
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7fa fdc4 	bl	800136c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067e4:	e002      	b.n	80067ec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff ff3c 	bl	8006664 <HAL_UART_RxHalfCpltCallback>
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006804:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006810:	2b80      	cmp	r3, #128	@ 0x80
 8006812:	bf0c      	ite	eq
 8006814:	2301      	moveq	r3, #1
 8006816:	2300      	movne	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b21      	cmp	r3, #33	@ 0x21
 8006826:	d108      	bne.n	800683a <UART_DMAError+0x46>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2200      	movs	r2, #0
 8006832:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006834:	68b8      	ldr	r0, [r7, #8]
 8006836:	f000 f91b 	bl	8006a70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006844:	2b40      	cmp	r3, #64	@ 0x40
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b22      	cmp	r3, #34	@ 0x22
 800685a:	d108      	bne.n	800686e <UART_DMAError+0x7a>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006868:	68b8      	ldr	r0, [r7, #8]
 800686a:	f000 f929 	bl	8006ac0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006872:	f043 0210 	orr.w	r2, r3, #16
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f7ff fefc 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	4613      	mov	r3, r2
 8006896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006898:	e03b      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d037      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a2:	f7fc fd11 	bl	80032c8 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	6a3a      	ldr	r2, [r7, #32]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d302      	bcc.n	80068b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e03a      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d023      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b80      	cmp	r3, #128	@ 0x80
 80068ce:	d020      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b40      	cmp	r3, #64	@ 0x40
 80068d4:	d01d      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d116      	bne.n	8006912 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f8e0 	bl	8006ac0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2208      	movs	r2, #8
 8006904:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e00f      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	429a      	cmp	r2, r3
 800692e:	d0b4      	beq.n	800689a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b098      	sub	sp, #96	@ 0x60
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	88fa      	ldrh	r2, [r7, #6]
 8006954:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2222      	movs	r2, #34	@ 0x22
 8006960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006968:	4a3e      	ldr	r2, [pc, #248]	@ (8006a64 <UART_Start_Receive_DMA+0x128>)
 800696a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006970:	4a3d      	ldr	r2, [pc, #244]	@ (8006a68 <UART_Start_Receive_DMA+0x12c>)
 8006972:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006978:	4a3c      	ldr	r2, [pc, #240]	@ (8006a6c <UART_Start_Receive_DMA+0x130>)
 800697a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006980:	2200      	movs	r2, #0
 8006982:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006984:	f107 0308 	add.w	r3, r7, #8
 8006988:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3304      	adds	r3, #4
 8006994:	4619      	mov	r1, r3
 8006996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	88fb      	ldrh	r3, [r7, #6]
 800699c:	f7fc fe7a 	bl	8003694 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80069a0:	2300      	movs	r3, #0
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d019      	beq.n	80069f2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	330c      	adds	r3, #12
 80069c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069de:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80069e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80069e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e5      	bne.n	80069be <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3314      	adds	r3, #20
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a12:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006a14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006a18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	617b      	str	r3, [r7, #20]
   return(result);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3314      	adds	r3, #20
 8006a44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a46:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6a39      	ldr	r1, [r7, #32]
 8006a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e5      	bne.n	8006a26 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3760      	adds	r7, #96	@ 0x60
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	0800668d 	.word	0x0800668d
 8006a68:	080067b9 	.word	0x080067b9
 8006a6c:	080067f5 	.word	0x080067f5

08006a70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b089      	sub	sp, #36	@ 0x24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a8e:	61fb      	str	r3, [r7, #28]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	61ba      	str	r2, [r7, #24]
 8006a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6979      	ldr	r1, [r7, #20]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e5      	bne.n	8006a78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006ab4:	bf00      	nop
 8006ab6:	3724      	adds	r7, #36	@ 0x24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b095      	sub	sp, #84	@ 0x54
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330c      	adds	r3, #12
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	330c      	adds	r3, #12
 8006ae6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ae8:	643a      	str	r2, [r7, #64]	@ 0x40
 8006aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e5      	bne.n	8006ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3314      	adds	r3, #20
 8006b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f023 0301 	bic.w	r3, r3, #1
 8006b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3314      	adds	r3, #20
 8006b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e5      	bne.n	8006afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d119      	bne.n	8006b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f023 0310 	bic.w	r3, r3, #16
 8006b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b58:	61ba      	str	r2, [r7, #24]
 8006b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6979      	ldr	r1, [r7, #20]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	613b      	str	r3, [r7, #16]
   return(result);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e5      	bne.n	8006b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b7a:	bf00      	nop
 8006b7c:	3754      	adds	r7, #84	@ 0x54
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fd69 	bl	8006678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b21      	cmp	r3, #33	@ 0x21
 8006bc0:	d13e      	bne.n	8006c40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bca:	d114      	bne.n	8006bf6 <UART_Transmit_IT+0x48>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d110      	bne.n	8006bf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	1c9a      	adds	r2, r3, #2
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	621a      	str	r2, [r3, #32]
 8006bf4:	e008      	b.n	8006c08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6211      	str	r1, [r2, #32]
 8006c00:	781a      	ldrb	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4619      	mov	r1, r3
 8006c16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10f      	bne.n	8006c3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e000      	b.n	8006c42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c40:	2302      	movs	r3, #2
  }
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fce4 	bl	800663c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b08c      	sub	sp, #48	@ 0x30
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b22      	cmp	r3, #34	@ 0x22
 8006c90:	f040 80ae 	bne.w	8006df0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9c:	d117      	bne.n	8006cce <UART_Receive_IT+0x50>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d113      	bne.n	8006cce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	1c9a      	adds	r2, r3, #2
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ccc:	e026      	b.n	8006d1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce0:	d007      	beq.n	8006cf2 <UART_Receive_IT+0x74>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <UART_Receive_IT+0x82>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	e008      	b.n	8006d12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d15d      	bne.n	8006dec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0220 	bic.w	r2, r2, #32
 8006d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d135      	bne.n	8006de2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f023 0310 	bic.w	r3, r3, #16
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d9c:	623a      	str	r2, [r7, #32]
 8006d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	69f9      	ldr	r1, [r7, #28]
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e5      	bne.n	8006d7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d10a      	bne.n	8006dd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fa fac6 	bl	800136c <HAL_UARTEx_RxEventCallback>
 8006de0:	e002      	b.n	8006de8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff fc34 	bl	8006650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e002      	b.n	8006df2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e000      	b.n	8006df2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3730      	adds	r7, #48	@ 0x30
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e00:	b0c0      	sub	sp, #256	@ 0x100
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e18:	68d9      	ldr	r1, [r3, #12]
 8006e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	ea40 0301 	orr.w	r3, r0, r1
 8006e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e54:	f021 010c 	bic.w	r1, r1, #12
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e62:	430b      	orrs	r3, r1
 8006e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e76:	6999      	ldr	r1, [r3, #24]
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	ea40 0301 	orr.w	r3, r0, r1
 8006e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b8f      	ldr	r3, [pc, #572]	@ (80070c8 <UART_SetConfig+0x2cc>)
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d005      	beq.n	8006e9c <UART_SetConfig+0xa0>
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b8d      	ldr	r3, [pc, #564]	@ (80070cc <UART_SetConfig+0x2d0>)
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d104      	bne.n	8006ea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e9c:	f7fd fdd2 	bl	8004a44 <HAL_RCC_GetPCLK2Freq>
 8006ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ea4:	e003      	b.n	8006eae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ea6:	f7fd fdb9 	bl	8004a1c <HAL_RCC_GetPCLK1Freq>
 8006eaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eb8:	f040 810c 	bne.w	80070d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ece:	4622      	mov	r2, r4
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	1891      	adds	r1, r2, r2
 8006ed4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ed6:	415b      	adcs	r3, r3
 8006ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006eda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ede:	4621      	mov	r1, r4
 8006ee0:	eb12 0801 	adds.w	r8, r2, r1
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	eb43 0901 	adc.w	r9, r3, r1
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006efe:	4690      	mov	r8, r2
 8006f00:	4699      	mov	r9, r3
 8006f02:	4623      	mov	r3, r4
 8006f04:	eb18 0303 	adds.w	r3, r8, r3
 8006f08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	eb49 0303 	adc.w	r3, r9, r3
 8006f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	18db      	adds	r3, r3, r3
 8006f2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f30:	4613      	mov	r3, r2
 8006f32:	eb42 0303 	adc.w	r3, r2, r3
 8006f36:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f40:	f7f9 ffb0 	bl	8000ea4 <__aeabi_uldivmod>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4b61      	ldr	r3, [pc, #388]	@ (80070d0 <UART_SetConfig+0x2d4>)
 8006f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	011c      	lsls	r4, r3, #4
 8006f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	1891      	adds	r1, r2, r2
 8006f6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f74:	4641      	mov	r1, r8
 8006f76:	eb12 0a01 	adds.w	sl, r2, r1
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	eb43 0b01 	adc.w	fp, r3, r1
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f94:	4692      	mov	sl, r2
 8006f96:	469b      	mov	fp, r3
 8006f98:	4643      	mov	r3, r8
 8006f9a:	eb1a 0303 	adds.w	r3, sl, r3
 8006f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	eb4b 0303 	adc.w	r3, fp, r3
 8006fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006fbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	18db      	adds	r3, r3, r3
 8006fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	eb42 0303 	adc.w	r3, r2, r3
 8006fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006fd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006fd6:	f7f9 ff65 	bl	8000ea4 <__aeabi_uldivmod>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80070d0 <UART_SetConfig+0x2d4>)
 8006fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	2264      	movs	r2, #100	@ 0x64
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	1acb      	subs	r3, r1, r3
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ff6:	4b36      	ldr	r3, [pc, #216]	@ (80070d0 <UART_SetConfig+0x2d4>)
 8006ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007004:	441c      	add	r4, r3
 8007006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800700a:	2200      	movs	r2, #0
 800700c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007010:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	1891      	adds	r1, r2, r2
 800701e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007020:	415b      	adcs	r3, r3
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007028:	4641      	mov	r1, r8
 800702a:	1851      	adds	r1, r2, r1
 800702c:	6339      	str	r1, [r7, #48]	@ 0x30
 800702e:	4649      	mov	r1, r9
 8007030:	414b      	adcs	r3, r1
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007040:	4659      	mov	r1, fp
 8007042:	00cb      	lsls	r3, r1, #3
 8007044:	4651      	mov	r1, sl
 8007046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800704a:	4651      	mov	r1, sl
 800704c:	00ca      	lsls	r2, r1, #3
 800704e:	4610      	mov	r0, r2
 8007050:	4619      	mov	r1, r3
 8007052:	4603      	mov	r3, r0
 8007054:	4642      	mov	r2, r8
 8007056:	189b      	adds	r3, r3, r2
 8007058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800705c:	464b      	mov	r3, r9
 800705e:	460a      	mov	r2, r1
 8007060:	eb42 0303 	adc.w	r3, r2, r3
 8007064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007074:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800707c:	460b      	mov	r3, r1
 800707e:	18db      	adds	r3, r3, r3
 8007080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007082:	4613      	mov	r3, r2
 8007084:	eb42 0303 	adc.w	r3, r2, r3
 8007088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800708a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800708e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007092:	f7f9 ff07 	bl	8000ea4 <__aeabi_uldivmod>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4b0d      	ldr	r3, [pc, #52]	@ (80070d0 <UART_SetConfig+0x2d4>)
 800709c:	fba3 1302 	umull	r1, r3, r3, r2
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	2164      	movs	r1, #100	@ 0x64
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	3332      	adds	r3, #50	@ 0x32
 80070ae:	4a08      	ldr	r2, [pc, #32]	@ (80070d0 <UART_SetConfig+0x2d4>)
 80070b0:	fba2 2303 	umull	r2, r3, r2, r3
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	f003 0207 	and.w	r2, r3, #7
 80070ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4422      	add	r2, r4
 80070c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070c4:	e106      	b.n	80072d4 <UART_SetConfig+0x4d8>
 80070c6:	bf00      	nop
 80070c8:	40011000 	.word	0x40011000
 80070cc:	40011400 	.word	0x40011400
 80070d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80070e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80070e6:	4642      	mov	r2, r8
 80070e8:	464b      	mov	r3, r9
 80070ea:	1891      	adds	r1, r2, r2
 80070ec:	6239      	str	r1, [r7, #32]
 80070ee:	415b      	adcs	r3, r3
 80070f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070f6:	4641      	mov	r1, r8
 80070f8:	1854      	adds	r4, r2, r1
 80070fa:	4649      	mov	r1, r9
 80070fc:	eb43 0501 	adc.w	r5, r3, r1
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	00eb      	lsls	r3, r5, #3
 800710a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800710e:	00e2      	lsls	r2, r4, #3
 8007110:	4614      	mov	r4, r2
 8007112:	461d      	mov	r5, r3
 8007114:	4643      	mov	r3, r8
 8007116:	18e3      	adds	r3, r4, r3
 8007118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800711c:	464b      	mov	r3, r9
 800711e:	eb45 0303 	adc.w	r3, r5, r3
 8007122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007132:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007142:	4629      	mov	r1, r5
 8007144:	008b      	lsls	r3, r1, #2
 8007146:	4621      	mov	r1, r4
 8007148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800714c:	4621      	mov	r1, r4
 800714e:	008a      	lsls	r2, r1, #2
 8007150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007154:	f7f9 fea6 	bl	8000ea4 <__aeabi_uldivmod>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4b60      	ldr	r3, [pc, #384]	@ (80072e0 <UART_SetConfig+0x4e4>)
 800715e:	fba3 2302 	umull	r2, r3, r3, r2
 8007162:	095b      	lsrs	r3, r3, #5
 8007164:	011c      	lsls	r4, r3, #4
 8007166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800716a:	2200      	movs	r2, #0
 800716c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007170:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007178:	4642      	mov	r2, r8
 800717a:	464b      	mov	r3, r9
 800717c:	1891      	adds	r1, r2, r2
 800717e:	61b9      	str	r1, [r7, #24]
 8007180:	415b      	adcs	r3, r3
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007188:	4641      	mov	r1, r8
 800718a:	1851      	adds	r1, r2, r1
 800718c:	6139      	str	r1, [r7, #16]
 800718e:	4649      	mov	r1, r9
 8007190:	414b      	adcs	r3, r1
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	f04f 0200 	mov.w	r2, #0
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071a0:	4659      	mov	r1, fp
 80071a2:	00cb      	lsls	r3, r1, #3
 80071a4:	4651      	mov	r1, sl
 80071a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071aa:	4651      	mov	r1, sl
 80071ac:	00ca      	lsls	r2, r1, #3
 80071ae:	4610      	mov	r0, r2
 80071b0:	4619      	mov	r1, r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	4642      	mov	r2, r8
 80071b6:	189b      	adds	r3, r3, r2
 80071b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071bc:	464b      	mov	r3, r9
 80071be:	460a      	mov	r2, r1
 80071c0:	eb42 0303 	adc.w	r3, r2, r3
 80071c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80071e0:	4649      	mov	r1, r9
 80071e2:	008b      	lsls	r3, r1, #2
 80071e4:	4641      	mov	r1, r8
 80071e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ea:	4641      	mov	r1, r8
 80071ec:	008a      	lsls	r2, r1, #2
 80071ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80071f2:	f7f9 fe57 	bl	8000ea4 <__aeabi_uldivmod>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	4b38      	ldr	r3, [pc, #224]	@ (80072e0 <UART_SetConfig+0x4e4>)
 80071fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007202:	095b      	lsrs	r3, r3, #5
 8007204:	2264      	movs	r2, #100	@ 0x64
 8007206:	fb02 f303 	mul.w	r3, r2, r3
 800720a:	1acb      	subs	r3, r1, r3
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	3332      	adds	r3, #50	@ 0x32
 8007210:	4a33      	ldr	r2, [pc, #204]	@ (80072e0 <UART_SetConfig+0x4e4>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800721c:	441c      	add	r4, r3
 800721e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007222:	2200      	movs	r2, #0
 8007224:	673b      	str	r3, [r7, #112]	@ 0x70
 8007226:	677a      	str	r2, [r7, #116]	@ 0x74
 8007228:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800722c:	4642      	mov	r2, r8
 800722e:	464b      	mov	r3, r9
 8007230:	1891      	adds	r1, r2, r2
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	415b      	adcs	r3, r3
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800723c:	4641      	mov	r1, r8
 800723e:	1851      	adds	r1, r2, r1
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	4649      	mov	r1, r9
 8007244:	414b      	adcs	r3, r1
 8007246:	607b      	str	r3, [r7, #4]
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007254:	4659      	mov	r1, fp
 8007256:	00cb      	lsls	r3, r1, #3
 8007258:	4651      	mov	r1, sl
 800725a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800725e:	4651      	mov	r1, sl
 8007260:	00ca      	lsls	r2, r1, #3
 8007262:	4610      	mov	r0, r2
 8007264:	4619      	mov	r1, r3
 8007266:	4603      	mov	r3, r0
 8007268:	4642      	mov	r2, r8
 800726a:	189b      	adds	r3, r3, r2
 800726c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800726e:	464b      	mov	r3, r9
 8007270:	460a      	mov	r2, r1
 8007272:	eb42 0303 	adc.w	r3, r2, r3
 8007276:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	663b      	str	r3, [r7, #96]	@ 0x60
 8007282:	667a      	str	r2, [r7, #100]	@ 0x64
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007290:	4649      	mov	r1, r9
 8007292:	008b      	lsls	r3, r1, #2
 8007294:	4641      	mov	r1, r8
 8007296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800729a:	4641      	mov	r1, r8
 800729c:	008a      	lsls	r2, r1, #2
 800729e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80072a2:	f7f9 fdff 	bl	8000ea4 <__aeabi_uldivmod>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4b0d      	ldr	r3, [pc, #52]	@ (80072e0 <UART_SetConfig+0x4e4>)
 80072ac:	fba3 1302 	umull	r1, r3, r3, r2
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	2164      	movs	r1, #100	@ 0x64
 80072b4:	fb01 f303 	mul.w	r3, r1, r3
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	3332      	adds	r3, #50	@ 0x32
 80072be:	4a08      	ldr	r2, [pc, #32]	@ (80072e0 <UART_SetConfig+0x4e4>)
 80072c0:	fba2 2303 	umull	r2, r3, r2, r3
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	f003 020f 	and.w	r2, r3, #15
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4422      	add	r2, r4
 80072d2:	609a      	str	r2, [r3, #8]
}
 80072d4:	bf00      	nop
 80072d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80072da:	46bd      	mov	sp, r7
 80072dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e0:	51eb851f 	.word	0x51eb851f

080072e4 <MOTOR_driver_setupPWM>:
 */

#include "MOTOR_DRIVER.h"
#include <math.h>
void MOTOR_driver_setupPWM(MOTOR_DRIVER_t *motor, TIM_HandleTypeDef *htimPWM,
		uint32_t CH1, uint32_t CH2) {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
	motor->htimPWM = htimPWM;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	605a      	str	r2, [r3, #4]
	motor->PWM_CH1 = CH1;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	611a      	str	r2, [r3, #16]
	motor->PWM_CH2 = CH2;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH1);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	4619      	mov	r1, r3
 800730e:	4610      	mov	r0, r2
 8007310:	f7fd fd2e 	bl	8004d70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor->htimPWM, motor->PWM_CH2);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	4619      	mov	r1, r3
 800731e:	4610      	mov	r0, r2
 8007320:	f7fd fd26 	bl	8004d70 <HAL_TIM_PWM_Start>
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <MOTOR_driver_setupENCODER>:
void MOTOR_driver_setupENCODER(MOTOR_DRIVER_t *motor,
		TIM_HandleTypeDef *htimENC, uint32_t CH1, uint32_t CH2) {
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
	motor->htimENC = htimENC;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	601a      	str	r2, [r3, #0]
	motor->ENC_CH1 = CH1;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	619a      	str	r2, [r3, #24]
	motor->ENC_CH2 = CH2;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	61da      	str	r2, [r3, #28]
	HAL_TIM_Base_Start(motor->htimENC);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4618      	mov	r0, r3
 8007352:	f7fd fbdb 	bl	8004b0c <HAL_TIM_Base_Start>
	HAL_TIM_Encoder_Start(motor->htimENC, motor->ENC_CH1 | motor->ENC_CH1);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f7fd fe73 	bl	800504c <HAL_TIM_Encoder_Start>
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <MOTOR_driver_rotary>:
void MOTOR_driver_rotary(MOTOR_DRIVER_t *motor, float duty) {
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	ed87 0a00 	vstr	s0, [r7]
	uint16_t pwm = abs((int)duty);
 800737a:	edd7 7a00 	vldr	s15, [r7]
 800737e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007382:	ee17 3a90 	vmov	r3, s15
 8007386:	2b00      	cmp	r3, #0
 8007388:	bfb8      	it	lt
 800738a:	425b      	neglt	r3, r3
 800738c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, 0);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d105      	bne.n	80073a2 <MOTOR_driver_rotary+0x34>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2200      	movs	r2, #0
 800739e:	635a      	str	r2, [r3, #52]	@ 0x34
 80073a0:	e018      	b.n	80073d4 <MOTOR_driver_rotary+0x66>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d105      	bne.n	80073b6 <MOTOR_driver_rotary+0x48>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	2300      	movs	r3, #0
 80073b2:	6393      	str	r3, [r2, #56]	@ 0x38
 80073b4:	e00e      	b.n	80073d4 <MOTOR_driver_rotary+0x66>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d105      	bne.n	80073ca <MOTOR_driver_rotary+0x5c>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	2300      	movs	r3, #0
 80073c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80073c8:	e004      	b.n	80073d4 <MOTOR_driver_rotary+0x66>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	2300      	movs	r3, #0
 80073d2:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, 0);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d105      	bne.n	80073e8 <MOTOR_driver_rotary+0x7a>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2200      	movs	r2, #0
 80073e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80073e6:	e018      	b.n	800741a <MOTOR_driver_rotary+0xac>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d105      	bne.n	80073fc <MOTOR_driver_rotary+0x8e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	6393      	str	r3, [r2, #56]	@ 0x38
 80073fa:	e00e      	b.n	800741a <MOTOR_driver_rotary+0xac>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	2b08      	cmp	r3, #8
 8007402:	d105      	bne.n	8007410 <MOTOR_driver_rotary+0xa2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	2300      	movs	r3, #0
 800740c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800740e:	e004      	b.n	800741a <MOTOR_driver_rotary+0xac>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	2300      	movs	r3, #0
 8007418:	6413      	str	r3, [r2, #64]	@ 0x40
	if (duty >= 0) {
 800741a:	edd7 7a00 	vldr	s15, [r7]
 800741e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007426:	db23      	blt.n	8007470 <MOTOR_driver_rotary+0x102>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)pwm);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d105      	bne.n	800743c <MOTOR_driver_rotary+0xce>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	89fa      	ldrh	r2, [r7, #14]
 8007438:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
	}
}
 800743a:	e03d      	b.n	80074b8 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH1, (uint16_t)pwm);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b04      	cmp	r3, #4
 8007442:	d105      	bne.n	8007450 <MOTOR_driver_rotary+0xe2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	89fb      	ldrh	r3, [r7, #14]
 800744c:	6393      	str	r3, [r2, #56]	@ 0x38
 800744e:	e033      	b.n	80074b8 <MOTOR_driver_rotary+0x14a>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b08      	cmp	r3, #8
 8007456:	d105      	bne.n	8007464 <MOTOR_driver_rotary+0xf6>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	89fb      	ldrh	r3, [r7, #14]
 8007460:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8007462:	e029      	b.n	80074b8 <MOTOR_driver_rotary+0x14a>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	89fb      	ldrh	r3, [r7, #14]
 800746c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800746e:	e023      	b.n	80074b8 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d105      	bne.n	8007484 <MOTOR_driver_rotary+0x116>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	89fa      	ldrh	r2, [r7, #14]
 8007480:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007482:	e019      	b.n	80074b8 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	2b04      	cmp	r3, #4
 800748a:	d105      	bne.n	8007498 <MOTOR_driver_rotary+0x12a>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	89fb      	ldrh	r3, [r7, #14]
 8007494:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007496:	e00f      	b.n	80074b8 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	2b08      	cmp	r3, #8
 800749e:	d105      	bne.n	80074ac <MOTOR_driver_rotary+0x13e>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	89fb      	ldrh	r3, [r7, #14]
 80074a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80074aa:	e005      	b.n	80074b8 <MOTOR_driver_rotary+0x14a>
		__HAL_TIM_SetCompare(motor->htimPWM, motor->PWM_CH2, (uint16_t)pwm);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	89fb      	ldrh	r3, [r7, #14]
 80074b4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80074b6:	e7ff      	b.n	80074b8 <MOTOR_driver_rotary+0x14a>
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <MOTOR_driver_readPosAndSpeed>:
void MOTOR_driver_readPosAndSpeed(MOTOR_DRIVER_t *motor, float *pos,
		float *speed, float Ts) {
 80074c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	ed87 0a00 	vstr	s0, [r7]
	motor->EncCount += (int16_t) motor->htimENC->Instance->CNT; // Đọc xung encoder
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	b219      	sxth	r1, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80074e6:	b209      	sxth	r1, r1
 80074e8:	17c8      	asrs	r0, r1, #31
 80074ea:	460c      	mov	r4, r1
 80074ec:	4605      	mov	r5, r0
 80074ee:	eb12 0804 	adds.w	r8, r2, r4
 80074f2:	eb43 0905 	adc.w	r9, r3, r5
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	e9c3 8902 	strd	r8, r9, [r3, #8]
	__HAL_TIM_SET_COUNTER(motor->htimENC, 0); // Reset xung encoder
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2200      	movs	r2, #0
 8007504:	625a      	str	r2, [r3, #36]	@ 0x24

	*pos = motor->pos = (float) motor->EncCount / motor->ratio; // Tính góc hiện tại của trục động cơ
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800750c:	4610      	mov	r0, r2
 800750e:	4619      	mov	r1, r3
 8007510:	f7f9 fc8a 	bl	8000e28 <__aeabi_l2f>
 8007514:	ee06 0a90 	vmov	s13, r0
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800751e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	601a      	str	r2, [r3, #0]
	*speed = motor->speed = (motor->pos - motor->prePos) * 1000 / Ts; // tính vận tốc xoay góc
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800753c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007540:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8007570 <MOTOR_driver_readPosAndSpeed+0xac>
 8007544:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007548:	ed97 7a00 	vldr	s14, [r7]
 800754c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	edc3 7a08 	vstr	s15, [r3, #32]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
	motor->prePos = motor->pos;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007570:	447a0000 	.word	0x447a0000

08007574 <MOTOR_driver_reset>:
void MOTOR_driver_reset(MOTOR_DRIVER_t *motor) {
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
	motor->EncCount = 0;
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	e9c1 2302 	strd	r2, r3, [r1, #8]
	motor->pos = 0;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f04f 0200 	mov.w	r2, #0
 8007590:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->prePos = 0;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	62da      	str	r2, [r3, #44]	@ 0x2c
	motor->speed = 0;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	621a      	str	r2, [r3, #32]
	motor->preSpeed = 0;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_COUNTER(motor->htimENC, 0);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2200      	movs	r2, #0
 80075b2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <MOTOR_setPIDVelocity>:
 *  Created on: Nov 28, 2024
 *      Author: namdhay
 */
#include "MOTOR_PID_CONTROL.h"
void MOTOR_setPIDVelocity(MOTOR_t *motor, float Kp, float Ki, float Kd,
		float Ts) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6178      	str	r0, [r7, #20]
 80075c8:	ed87 0a04 	vstr	s0, [r7, #16]
 80075cc:	edc7 0a03 	vstr	s1, [r7, #12]
 80075d0:	ed87 1a02 	vstr	s2, [r7, #8]
 80075d4:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_init(&motor->PIDVelocity, Kp, Ki, Kd, Ts);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	edd7 1a01 	vldr	s3, [r7, #4]
 80075de:	ed97 1a02 	vldr	s2, [r7, #8]
 80075e2:	edd7 0a03 	vldr	s1, [r7, #12]
 80075e6:	ed97 0a04 	vldr	s0, [r7, #16]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f989 	bl	8007902 <PID_init>
}
 80075f0:	bf00      	nop
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <MOTOR_setPIDPosition>:
void MOTOR_setPIDPosition(MOTOR_t *motor, float Kp, float Ki, float Kd,
		float Ts) {
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6178      	str	r0, [r7, #20]
 8007600:	ed87 0a04 	vstr	s0, [r7, #16]
 8007604:	edc7 0a03 	vstr	s1, [r7, #12]
 8007608:	ed87 1a02 	vstr	s2, [r7, #8]
 800760c:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_init(&motor->PIDPosition, Kp, Ki, Kd, Ts);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3348      	adds	r3, #72	@ 0x48
 8007614:	edd7 1a01 	vldr	s3, [r7, #4]
 8007618:	ed97 1a02 	vldr	s2, [r7, #8]
 800761c:	edd7 0a03 	vldr	s1, [r7, #12]
 8007620:	ed97 0a04 	vldr	s0, [r7, #16]
 8007624:	4618      	mov	r0, r3
 8007626:	f000 f96c 	bl	8007902 <PID_init>
}
 800762a:	bf00      	nop
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <MOTOR_setOutputRange>:
void MOTOR_setOutputRange(MOTOR_t *motor, float OutMin, float OutMax) {
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007640:	edc7 0a01 	vstr	s1, [r7, #4]
	PID_setOutputRange(&motor->PIDPosition, -900, 900);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3348      	adds	r3, #72	@ 0x48
 8007648:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8007670 <MOTOR_setOutputRange+0x3c>
 800764c:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8007674 <MOTOR_setOutputRange+0x40>
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f993 	bl	800797c <PID_setOutputRange>
	PID_setOutputRange(&motor->PIDVelocity, OutMin, OutMax);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	edd7 0a01 	vldr	s1, [r7, #4]
 800765c:	ed97 0a02 	vldr	s0, [r7, #8]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 f98b 	bl	800797c <PID_setOutputRange>
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	44610000 	.word	0x44610000
 8007674:	c4610000 	.word	0xc4610000

08007678 <MOTOR_setWindupRange>:
void MOTOR_setWindupRange(MOTOR_t *motor, float OutMin, float OutMax) {
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	ed87 0a02 	vstr	s0, [r7, #8]
 8007684:	edc7 0a01 	vstr	s1, [r7, #4]
	PID_setWindupGain(&motor->PIDVelocity, 0);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80076ac <MOTOR_setWindupRange+0x34>
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f99c 	bl	80079cc <PID_setWindupGain>
	PID_setWindupRange(&motor->PIDVelocity, OutMin, OutMax);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	edd7 0a01 	vldr	s1, [r7, #4]
 800769a:	ed97 0a02 	vldr	s0, [r7, #8]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 f980 	bl	80079a4 <PID_setWindupRange>
}
 80076a4:	bf00      	nop
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	00000000 	.word	0x00000000

080076b0 <MOTOR_setAngle>:
void MOTOR_setAngle(MOTOR_t *motor, float setAngle) {
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	ed87 0a00 	vstr	s0, [r7]
	motor->setPoint = setAngle * motor->ratioJoint;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 80076c2:	edd7 7a00 	vldr	s15, [r7]
 80076c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <MOTOR_runAngle>:
void MOTOR_runAngle(MOTOR_t *motor) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
//        PID_clear(&motor->PIDPosition);
//        PID_clear(&motor->PIDVelocity);
//        motor->preSetPoint = motor->setPoint;
//    }

	MOTOR_driver_readPosAndSpeed(motor->motorDriver, &motor->pos, &motor->speed,
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f103 01ac 	add.w	r1, r3, #172	@ 0xac
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
			motor->PIDPosition.Sample_time);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
	MOTOR_driver_readPosAndSpeed(motor->motorDriver, &motor->pos, &motor->speed,
 80076fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007700:	f7ff fee0 	bl	80074c4 <MOTOR_driver_readPosAndSpeed>
	motor->error = motor->setPoint - motor->pos;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	ed93 7a26 	vldr	s14, [r3, #152]	@ 0x98
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8007710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
//    motor->error = motor->setPoint;

// PD+PI controller
	PID_compute(&motor->PIDPosition, motor->error);  // tinh PD
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 8007726:	eeb0 0a67 	vmov.f32	s0, s15
 800772a:	4610      	mov	r0, r2
 800772c:	f000 f95e 	bl	80079ec <PID_compute>
	PID_compute(&motor->PIDVelocity, motor->PIDPosition.Output - motor->speed); // tinh PI
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	ed93 7a20 	vldr	s14, [r3, #128]	@ 0x80
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 800773e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007742:	eeb0 0a67 	vmov.f32	s0, s15
 8007746:	4610      	mov	r0, r2
 8007748:	f000 f950 	bl	80079ec <PID_compute>

	if (fabs(motor->pos) < motor->limitPos) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8007752:	eeb0 7ae7 	vabs.f32	s14, s15
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 800775c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007764:	d50b      	bpl.n	800777e <MOTOR_runAngle+0xa2>
		MOTOR_driver_rotary(motor->motorDriver, motor->PIDVelocity.Output);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8007772:	eeb0 0a67 	vmov.f32	s0, s15
 8007776:	4610      	mov	r0, r2
 8007778:	f7ff fdf9 	bl	800736e <MOTOR_driver_rotary>
	} else {
		MOTOR_driver_rotary(motor->motorDriver, 0);
	}
}
 800777c:	e007      	b.n	800778e <MOTOR_runAngle+0xb2>
		MOTOR_driver_rotary(motor->motorDriver, 0);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007784:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8007798 <MOTOR_runAngle+0xbc>
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fdf0 	bl	800736e <MOTOR_driver_rotary>
}
 800778e:	bf00      	nop
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	00000000 	.word	0x00000000

0800779c <MOTOR_init>:
void MOTOR_init(MOTOR_t *motor, MOTOR_DRIVER_t *motorDriver, float ratio,
		uint16_t pinSetHome, float limitPos) {
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6178      	str	r0, [r7, #20]
 80077a4:	6139      	str	r1, [r7, #16]
 80077a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80077aa:	4613      	mov	r3, r2
 80077ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80077b0:	817b      	strh	r3, [r7, #10]
	motor->ratioJoint = ratio;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	motor->pinSetHome = 0;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2200      	movs	r2, #0
 80077be:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	motor->setPoint = 0;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	motor->preSetPoint = 0;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	motor->error = 0;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f04f 0200 	mov.w	r2, #0
 80077dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	motor->preError = 0;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	motor->pos = 0;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	motor->speed = 0;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	motor->motorDriver = motorDriver;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	motor->limitPos = limitPos * motor->ratioJoint;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 800780c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
	MOTOR_driver_setupPWM(motor->motorDriver, motor->motorDriver->htimPWM,
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007826:	6859      	ldr	r1, [r3, #4]
			motor->motorDriver->PWM_CH1, motor->motorDriver->PWM_CH2);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	MOTOR_driver_setupPWM(motor->motorDriver, motor->motorDriver->htimPWM,
 800782e:	691a      	ldr	r2, [r3, #16]
			motor->motorDriver->PWM_CH1, motor->motorDriver->PWM_CH2);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	MOTOR_driver_setupPWM(motor->motorDriver, motor->motorDriver->htimPWM,
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f7ff fd54 	bl	80072e4 <MOTOR_driver_setupPWM>
	MOTOR_driver_setupENCODER(motor->motorDriver, motor->motorDriver->htimENC,
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007848:	6819      	ldr	r1, [r3, #0]
			motor->motorDriver->ENC_CH1, motor->motorDriver->ENC_CH2);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	MOTOR_driver_setupENCODER(motor->motorDriver, motor->motorDriver->htimENC,
 8007850:	699a      	ldr	r2, [r3, #24]
			motor->motorDriver->ENC_CH1, motor->motorDriver->ENC_CH2);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
	MOTOR_driver_setupENCODER(motor->motorDriver, motor->motorDriver->htimENC,
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f7ff fd67 	bl	800732c <MOTOR_driver_setupENCODER>
}
 800785e:	bf00      	nop
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <MOTOR_reset>:
void MOTOR_reset(MOTOR_t *motor) {
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
	motor->pinSetHome = 0;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	motor->setPoint = 0;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	motor->preSetPoint = 0;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	motor->error = 0;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	motor->preError = 0;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	motor->pos = 0;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	motor->speed = 0;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	MOTOR_driver_reset(motor->motorDriver);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fe5b 	bl	8007574 <MOTOR_driver_reset>
	PID_clear(&motor->PIDPosition);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3348      	adds	r3, #72	@ 0x48
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f83c 	bl	8007940 <PID_clear>
	PID_clear(&motor->PIDVelocity);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 f838 	bl	8007940 <PID_clear>
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <MOTOR_getPos>:
float MOTOR_getPos(MOTOR_t *motor) {
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	return motor->pos / motor->ratioJoint;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80078ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80078f0:	eef0 7a66 	vmov.f32	s15, s13
}
 80078f4:	eeb0 0a67 	vmov.f32	s0, s15
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <PID_init>:
 *  Created on: Nov 28, 2024
 *      Author: namdhay
 */
#include "PID.h"
#include "stdint.h"
void PID_init(PID_TypeDef *pid, float Kp, float Ki, float Kd, float Sample_time) {
 8007902:	b580      	push	{r7, lr}
 8007904:	b086      	sub	sp, #24
 8007906:	af00      	add	r7, sp, #0
 8007908:	6178      	str	r0, [r7, #20]
 800790a:	ed87 0a04 	vstr	s0, [r7, #16]
 800790e:	edc7 0a03 	vstr	s1, [r7, #12]
 8007912:	ed87 1a02 	vstr	s2, [r7, #8]
 8007916:	edc7 1a01 	vstr	s3, [r7, #4]
	PID_clear(pid);
 800791a:	6978      	ldr	r0, [r7, #20]
 800791c:	f000 f810 	bl	8007940 <PID_clear>
	pid->Kp = Kp;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	609a      	str	r2, [r3, #8]
	pid->Sample_time = Sample_time;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8007938:	bf00      	nop
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <PID_clear>:
void PID_clear(PID_TypeDef *pid) {
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	pid->PTerm = 0;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	61da      	str	r2, [r3, #28]
	pid->ITerm = 0;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	621a      	str	r2, [r3, #32]
	pid->DTerm = 0;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->Output = 0;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f04f 0200 	mov.w	r2, #0
 8007966:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->FeedbackWindup = 0;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <PID_setOutputRange>:
	pid->Kd = value;
}
void PID_setSampleTime(PID_TypeDef *pid, float value) {
	pid->Sample_time = value;
}
void PID_setOutputRange(PID_TypeDef *pid, float valueMin, float valueMax) {
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	ed87 0a02 	vstr	s0, [r7, #8]
 8007988:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->OutMax = valueMax;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->OutMin = valueMin;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <PID_setWindupRange>:
void PID_setWindupRange(PID_TypeDef *pid, float valueMin, float valueMax) {
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80079b0:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->WindupMax = valueMax;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->WindupMin = valueMin;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <PID_setWindupGain>:
void PID_setWindupGain(PID_TypeDef *pid, float value) {
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	ed87 0a00 	vstr	s0, [r7]
	pid->Kb = value;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	60da      	str	r2, [r3, #12]
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
	...

080079ec <PID_compute>:
float PID_compute(PID_TypeDef *pid, float Error) {
 80079ec:	b5b0      	push	{r4, r5, r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	ed87 0a00 	vstr	s0, [r7]

	pid->PTerm = pid->Kp * Error;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	ed93 7a00 	vldr	s14, [r3]
 80079fe:	edd7 7a00 	vldr	s15, [r7]
 8007a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	edc3 7a07 	vstr	s15, [r3, #28]

	pid->ITerm += ((Error + pid->Last_error) * pid->Ki * 0.5
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	ed93 7a05 	vldr	s14, [r3, #20]
 8007a12:	edd7 7a00 	vldr	s15, [r7]
 8007a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a24:	ee17 0a90 	vmov	r0, s15
 8007a28:	f7f8 fd8e 	bl	8000548 <__aeabi_f2d>
 8007a2c:	f04f 0200 	mov.w	r2, #0
 8007a30:	4b75      	ldr	r3, [pc, #468]	@ (8007c08 <PID_compute+0x21c>)
 8007a32:	f7f8 fde1 	bl	80005f8 <__aeabi_dmul>
 8007a36:	4602      	mov	r2, r0
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4614      	mov	r4, r2
 8007a3c:	461d      	mov	r5, r3
			+ pid->FeedbackWindup * pid->Kb) * (pid->Sample_time / 1000.0);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	edd3 7a03 	vldr	s15, [r3, #12]
 8007a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4e:	ee17 0a90 	vmov	r0, s15
 8007a52:	f7f8 fd79 	bl	8000548 <__aeabi_f2d>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	f7f8 fc15 	bl	800028c <__adddf3>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4614      	mov	r4, r2
 8007a68:	461d      	mov	r5, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7f8 fd6a 	bl	8000548 <__aeabi_f2d>
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	4b64      	ldr	r3, [pc, #400]	@ (8007c0c <PID_compute+0x220>)
 8007a7a:	f7f8 fee7 	bl	800084c <__aeabi_ddiv>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4620      	mov	r0, r4
 8007a84:	4629      	mov	r1, r5
 8007a86:	f7f8 fdb7 	bl	80005f8 <__aeabi_dmul>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4614      	mov	r4, r2
 8007a90:	461d      	mov	r5, r3
	pid->ITerm += ((Error + pid->Last_error) * pid->Ki * 0.5
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7f8 fd56 	bl	8000548 <__aeabi_f2d>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	f7f8 fbf2 	bl	800028c <__adddf3>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4610      	mov	r0, r2
 8007aae:	4619      	mov	r1, r3
 8007ab0:	f7f9 f89a 	bl	8000be8 <__aeabi_d2f>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	621a      	str	r2, [r3, #32]
	if (pid->ITerm > pid->WindupMax)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	ed93 7a08 	vldr	s14, [r3, #32]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8007ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ace:	dd04      	ble.n	8007ada <PID_compute+0xee>
		pid->ITerm = pid->WindupMax;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	621a      	str	r2, [r3, #32]
 8007ad8:	e00e      	b.n	8007af8 <PID_compute+0x10c>
	else if (pid->ITerm < pid->WindupMin)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	ed93 7a08 	vldr	s14, [r3, #32]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aee:	d503      	bpl.n	8007af8 <PID_compute+0x10c>
		pid->ITerm = pid->WindupMin;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	621a      	str	r2, [r3, #32]

	pid->Delta_error = Error - pid->Last_error;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	edd3 7a05 	vldr	s15, [r3, #20]
 8007afe:	ed97 7a00 	vldr	s14, [r7]
 8007b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	pid->DTerm = pid->Kd * pid->Delta_error / (pid->Sample_time / 1000.0);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8007b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b1c:	ee17 0a90 	vmov	r0, s15
 8007b20:	f7f8 fd12 	bl	8000548 <__aeabi_f2d>
 8007b24:	4604      	mov	r4, r0
 8007b26:	460d      	mov	r5, r1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7f8 fd0b 	bl	8000548 <__aeabi_f2d>
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	4b35      	ldr	r3, [pc, #212]	@ (8007c0c <PID_compute+0x220>)
 8007b38:	f7f8 fe88 	bl	800084c <__aeabi_ddiv>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4620      	mov	r0, r4
 8007b42:	4629      	mov	r1, r5
 8007b44:	f7f8 fe82 	bl	800084c <__aeabi_ddiv>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4619      	mov	r1, r3
 8007b50:	f7f9 f84a 	bl	8000be8 <__aeabi_d2f>
 8007b54:	4602      	mov	r2, r0
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->Last_error = Error;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	615a      	str	r2, [r3, #20]

	pid->Output = pid->PTerm + pid->ITerm + pid->DTerm;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	ed93 7a07 	vldr	s14, [r3, #28]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	edd3 7a08 	vldr	s15, [r3, #32]
 8007b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	if (pid->Output > pid->OutMax) {
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8007b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b94:	dd0f      	ble.n	8007bb6 <PID_compute+0x1ca>
		pid->FeedbackWindup = pid->Output - pid->OutMax;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8007ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		pid->Output = pid->OutMax;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007bb4:	e01e      	b.n	8007bf4 <PID_compute+0x208>
	} else if (pid->Output < pid->OutMin) {
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bca:	d50f      	bpl.n	8007bec <PID_compute+0x200>
		pid->FeedbackWindup = pid->Output - pid->OutMin;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		pid->Output = pid->OutMin;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007bea:	e003      	b.n	8007bf4 <PID_compute+0x208>
	} else {
		pid->FeedbackWindup = 0;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	631a      	str	r2, [r3, #48]	@ 0x30
	}
	return pid->Output;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	ee07 3a90 	vmov	s15, r3
}
 8007bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bdb0      	pop	{r4, r5, r7, pc}
 8007c06:	bf00      	nop
 8007c08:	3fe00000 	.word	0x3fe00000
 8007c0c:	408f4000 	.word	0x408f4000

08007c10 <__cvt>:
 8007c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	ec57 6b10 	vmov	r6, r7, d0
 8007c18:	2f00      	cmp	r7, #0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	463b      	mov	r3, r7
 8007c20:	bfbb      	ittet	lt
 8007c22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c26:	461f      	movlt	r7, r3
 8007c28:	2300      	movge	r3, #0
 8007c2a:	232d      	movlt	r3, #45	@ 0x2d
 8007c2c:	700b      	strb	r3, [r1, #0]
 8007c2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c34:	4691      	mov	r9, r2
 8007c36:	f023 0820 	bic.w	r8, r3, #32
 8007c3a:	bfbc      	itt	lt
 8007c3c:	4632      	movlt	r2, r6
 8007c3e:	4616      	movlt	r6, r2
 8007c40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c44:	d005      	beq.n	8007c52 <__cvt+0x42>
 8007c46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c4a:	d100      	bne.n	8007c4e <__cvt+0x3e>
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	2102      	movs	r1, #2
 8007c50:	e000      	b.n	8007c54 <__cvt+0x44>
 8007c52:	2103      	movs	r1, #3
 8007c54:	ab03      	add	r3, sp, #12
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	ab02      	add	r3, sp, #8
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	ec47 6b10 	vmov	d0, r6, r7
 8007c60:	4653      	mov	r3, sl
 8007c62:	4622      	mov	r2, r4
 8007c64:	f001 f8c4 	bl	8008df0 <_dtoa_r>
 8007c68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	d119      	bne.n	8007ca4 <__cvt+0x94>
 8007c70:	f019 0f01 	tst.w	r9, #1
 8007c74:	d00e      	beq.n	8007c94 <__cvt+0x84>
 8007c76:	eb00 0904 	add.w	r9, r0, r4
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4630      	mov	r0, r6
 8007c80:	4639      	mov	r1, r7
 8007c82:	f7f8 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c86:	b108      	cbz	r0, 8007c8c <__cvt+0x7c>
 8007c88:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c8c:	2230      	movs	r2, #48	@ 0x30
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	454b      	cmp	r3, r9
 8007c92:	d31e      	bcc.n	8007cd2 <__cvt+0xc2>
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c98:	1b5b      	subs	r3, r3, r5
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	b004      	add	sp, #16
 8007ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ca8:	eb00 0904 	add.w	r9, r0, r4
 8007cac:	d1e5      	bne.n	8007c7a <__cvt+0x6a>
 8007cae:	7803      	ldrb	r3, [r0, #0]
 8007cb0:	2b30      	cmp	r3, #48	@ 0x30
 8007cb2:	d10a      	bne.n	8007cca <__cvt+0xba>
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4630      	mov	r0, r6
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f7f8 ff04 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc0:	b918      	cbnz	r0, 8007cca <__cvt+0xba>
 8007cc2:	f1c4 0401 	rsb	r4, r4, #1
 8007cc6:	f8ca 4000 	str.w	r4, [sl]
 8007cca:	f8da 3000 	ldr.w	r3, [sl]
 8007cce:	4499      	add	r9, r3
 8007cd0:	e7d3      	b.n	8007c7a <__cvt+0x6a>
 8007cd2:	1c59      	adds	r1, r3, #1
 8007cd4:	9103      	str	r1, [sp, #12]
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	e7d9      	b.n	8007c8e <__cvt+0x7e>

08007cda <__exponent>:
 8007cda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cdc:	2900      	cmp	r1, #0
 8007cde:	bfba      	itte	lt
 8007ce0:	4249      	neglt	r1, r1
 8007ce2:	232d      	movlt	r3, #45	@ 0x2d
 8007ce4:	232b      	movge	r3, #43	@ 0x2b
 8007ce6:	2909      	cmp	r1, #9
 8007ce8:	7002      	strb	r2, [r0, #0]
 8007cea:	7043      	strb	r3, [r0, #1]
 8007cec:	dd29      	ble.n	8007d42 <__exponent+0x68>
 8007cee:	f10d 0307 	add.w	r3, sp, #7
 8007cf2:	461d      	mov	r5, r3
 8007cf4:	270a      	movs	r7, #10
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cfc:	fb07 1416 	mls	r4, r7, r6, r1
 8007d00:	3430      	adds	r4, #48	@ 0x30
 8007d02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d06:	460c      	mov	r4, r1
 8007d08:	2c63      	cmp	r4, #99	@ 0x63
 8007d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d0e:	4631      	mov	r1, r6
 8007d10:	dcf1      	bgt.n	8007cf6 <__exponent+0x1c>
 8007d12:	3130      	adds	r1, #48	@ 0x30
 8007d14:	1e94      	subs	r4, r2, #2
 8007d16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d1a:	1c41      	adds	r1, r0, #1
 8007d1c:	4623      	mov	r3, r4
 8007d1e:	42ab      	cmp	r3, r5
 8007d20:	d30a      	bcc.n	8007d38 <__exponent+0x5e>
 8007d22:	f10d 0309 	add.w	r3, sp, #9
 8007d26:	1a9b      	subs	r3, r3, r2
 8007d28:	42ac      	cmp	r4, r5
 8007d2a:	bf88      	it	hi
 8007d2c:	2300      	movhi	r3, #0
 8007d2e:	3302      	adds	r3, #2
 8007d30:	4403      	add	r3, r0
 8007d32:	1a18      	subs	r0, r3, r0
 8007d34:	b003      	add	sp, #12
 8007d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d40:	e7ed      	b.n	8007d1e <__exponent+0x44>
 8007d42:	2330      	movs	r3, #48	@ 0x30
 8007d44:	3130      	adds	r1, #48	@ 0x30
 8007d46:	7083      	strb	r3, [r0, #2]
 8007d48:	70c1      	strb	r1, [r0, #3]
 8007d4a:	1d03      	adds	r3, r0, #4
 8007d4c:	e7f1      	b.n	8007d32 <__exponent+0x58>
	...

08007d50 <_printf_float>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	b08d      	sub	sp, #52	@ 0x34
 8007d56:	460c      	mov	r4, r1
 8007d58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d5c:	4616      	mov	r6, r2
 8007d5e:	461f      	mov	r7, r3
 8007d60:	4605      	mov	r5, r0
 8007d62:	f000 ff3d 	bl	8008be0 <_localeconv_r>
 8007d66:	6803      	ldr	r3, [r0, #0]
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7f8 fa80 	bl	8000270 <strlen>
 8007d70:	2300      	movs	r3, #0
 8007d72:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d74:	f8d8 3000 	ldr.w	r3, [r8]
 8007d78:	9005      	str	r0, [sp, #20]
 8007d7a:	3307      	adds	r3, #7
 8007d7c:	f023 0307 	bic.w	r3, r3, #7
 8007d80:	f103 0208 	add.w	r2, r3, #8
 8007d84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d88:	f8d4 b000 	ldr.w	fp, [r4]
 8007d8c:	f8c8 2000 	str.w	r2, [r8]
 8007d90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d98:	9307      	str	r3, [sp, #28]
 8007d9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007da6:	4b9c      	ldr	r3, [pc, #624]	@ (8008018 <_printf_float+0x2c8>)
 8007da8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dac:	f7f8 febe 	bl	8000b2c <__aeabi_dcmpun>
 8007db0:	bb70      	cbnz	r0, 8007e10 <_printf_float+0xc0>
 8007db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007db6:	4b98      	ldr	r3, [pc, #608]	@ (8008018 <_printf_float+0x2c8>)
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	f7f8 fe98 	bl	8000af0 <__aeabi_dcmple>
 8007dc0:	bb30      	cbnz	r0, 8007e10 <_printf_float+0xc0>
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	4649      	mov	r1, r9
 8007dca:	f7f8 fe87 	bl	8000adc <__aeabi_dcmplt>
 8007dce:	b110      	cbz	r0, 8007dd6 <_printf_float+0x86>
 8007dd0:	232d      	movs	r3, #45	@ 0x2d
 8007dd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dd6:	4a91      	ldr	r2, [pc, #580]	@ (800801c <_printf_float+0x2cc>)
 8007dd8:	4b91      	ldr	r3, [pc, #580]	@ (8008020 <_printf_float+0x2d0>)
 8007dda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007dde:	bf94      	ite	ls
 8007de0:	4690      	movls	r8, r2
 8007de2:	4698      	movhi	r8, r3
 8007de4:	2303      	movs	r3, #3
 8007de6:	6123      	str	r3, [r4, #16]
 8007de8:	f02b 0304 	bic.w	r3, fp, #4
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	f04f 0900 	mov.w	r9, #0
 8007df2:	9700      	str	r7, [sp, #0]
 8007df4:	4633      	mov	r3, r6
 8007df6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f000 f9d2 	bl	80081a4 <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	f040 808d 	bne.w	8007f20 <_printf_float+0x1d0>
 8007e06:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0a:	b00d      	add	sp, #52	@ 0x34
 8007e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7f8 fe88 	bl	8000b2c <__aeabi_dcmpun>
 8007e1c:	b140      	cbz	r0, 8007e30 <_printf_float+0xe0>
 8007e1e:	464b      	mov	r3, r9
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bfbc      	itt	lt
 8007e24:	232d      	movlt	r3, #45	@ 0x2d
 8007e26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8008024 <_printf_float+0x2d4>)
 8007e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8008028 <_printf_float+0x2d8>)
 8007e2e:	e7d4      	b.n	8007dda <_printf_float+0x8a>
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e36:	9206      	str	r2, [sp, #24]
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	d13b      	bne.n	8007eb4 <_printf_float+0x164>
 8007e3c:	2306      	movs	r3, #6
 8007e3e:	6063      	str	r3, [r4, #4]
 8007e40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e44:	2300      	movs	r3, #0
 8007e46:	6022      	str	r2, [r4, #0]
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e50:	ab09      	add	r3, sp, #36	@ 0x24
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	6861      	ldr	r1, [r4, #4]
 8007e56:	ec49 8b10 	vmov	d0, r8, r9
 8007e5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f7ff fed6 	bl	8007c10 <__cvt>
 8007e64:	9b06      	ldr	r3, [sp, #24]
 8007e66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e68:	2b47      	cmp	r3, #71	@ 0x47
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	d129      	bne.n	8007ec2 <_printf_float+0x172>
 8007e6e:	1cc8      	adds	r0, r1, #3
 8007e70:	db02      	blt.n	8007e78 <_printf_float+0x128>
 8007e72:	6863      	ldr	r3, [r4, #4]
 8007e74:	4299      	cmp	r1, r3
 8007e76:	dd41      	ble.n	8007efc <_printf_float+0x1ac>
 8007e78:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e7c:	fa5f fa8a 	uxtb.w	sl, sl
 8007e80:	3901      	subs	r1, #1
 8007e82:	4652      	mov	r2, sl
 8007e84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e88:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e8a:	f7ff ff26 	bl	8007cda <__exponent>
 8007e8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e90:	1813      	adds	r3, r2, r0
 8007e92:	2a01      	cmp	r2, #1
 8007e94:	4681      	mov	r9, r0
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	dc02      	bgt.n	8007ea0 <_printf_float+0x150>
 8007e9a:	6822      	ldr	r2, [r4, #0]
 8007e9c:	07d2      	lsls	r2, r2, #31
 8007e9e:	d501      	bpl.n	8007ea4 <_printf_float+0x154>
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0a2      	beq.n	8007df2 <_printf_float+0xa2>
 8007eac:	232d      	movs	r3, #45	@ 0x2d
 8007eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eb2:	e79e      	b.n	8007df2 <_printf_float+0xa2>
 8007eb4:	9a06      	ldr	r2, [sp, #24]
 8007eb6:	2a47      	cmp	r2, #71	@ 0x47
 8007eb8:	d1c2      	bne.n	8007e40 <_printf_float+0xf0>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1c0      	bne.n	8007e40 <_printf_float+0xf0>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e7bd      	b.n	8007e3e <_printf_float+0xee>
 8007ec2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ec6:	d9db      	bls.n	8007e80 <_printf_float+0x130>
 8007ec8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ecc:	d118      	bne.n	8007f00 <_printf_float+0x1b0>
 8007ece:	2900      	cmp	r1, #0
 8007ed0:	6863      	ldr	r3, [r4, #4]
 8007ed2:	dd0b      	ble.n	8007eec <_printf_float+0x19c>
 8007ed4:	6121      	str	r1, [r4, #16]
 8007ed6:	b913      	cbnz	r3, 8007ede <_printf_float+0x18e>
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	07d0      	lsls	r0, r2, #31
 8007edc:	d502      	bpl.n	8007ee4 <_printf_float+0x194>
 8007ede:	3301      	adds	r3, #1
 8007ee0:	440b      	add	r3, r1
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	e7db      	b.n	8007ea4 <_printf_float+0x154>
 8007eec:	b913      	cbnz	r3, 8007ef4 <_printf_float+0x1a4>
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	07d2      	lsls	r2, r2, #31
 8007ef2:	d501      	bpl.n	8007ef8 <_printf_float+0x1a8>
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	e7f4      	b.n	8007ee2 <_printf_float+0x192>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e7f2      	b.n	8007ee2 <_printf_float+0x192>
 8007efc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f02:	4299      	cmp	r1, r3
 8007f04:	db05      	blt.n	8007f12 <_printf_float+0x1c2>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	6121      	str	r1, [r4, #16]
 8007f0a:	07d8      	lsls	r0, r3, #31
 8007f0c:	d5ea      	bpl.n	8007ee4 <_printf_float+0x194>
 8007f0e:	1c4b      	adds	r3, r1, #1
 8007f10:	e7e7      	b.n	8007ee2 <_printf_float+0x192>
 8007f12:	2900      	cmp	r1, #0
 8007f14:	bfd4      	ite	le
 8007f16:	f1c1 0202 	rsble	r2, r1, #2
 8007f1a:	2201      	movgt	r2, #1
 8007f1c:	4413      	add	r3, r2
 8007f1e:	e7e0      	b.n	8007ee2 <_printf_float+0x192>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	055a      	lsls	r2, r3, #21
 8007f24:	d407      	bmi.n	8007f36 <_printf_float+0x1e6>
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	4642      	mov	r2, r8
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	d12b      	bne.n	8007f8c <_printf_float+0x23c>
 8007f34:	e767      	b.n	8007e06 <_printf_float+0xb6>
 8007f36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f3a:	f240 80dd 	bls.w	80080f8 <_printf_float+0x3a8>
 8007f3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f42:	2200      	movs	r2, #0
 8007f44:	2300      	movs	r3, #0
 8007f46:	f7f8 fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d033      	beq.n	8007fb6 <_printf_float+0x266>
 8007f4e:	4a37      	ldr	r2, [pc, #220]	@ (800802c <_printf_float+0x2dc>)
 8007f50:	2301      	movs	r3, #1
 8007f52:	4631      	mov	r1, r6
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b8      	blx	r7
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f43f af54 	beq.w	8007e06 <_printf_float+0xb6>
 8007f5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f62:	4543      	cmp	r3, r8
 8007f64:	db02      	blt.n	8007f6c <_printf_float+0x21c>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	07d8      	lsls	r0, r3, #31
 8007f6a:	d50f      	bpl.n	8007f8c <_printf_float+0x23c>
 8007f6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f70:	4631      	mov	r1, r6
 8007f72:	4628      	mov	r0, r5
 8007f74:	47b8      	blx	r7
 8007f76:	3001      	adds	r0, #1
 8007f78:	f43f af45 	beq.w	8007e06 <_printf_float+0xb6>
 8007f7c:	f04f 0900 	mov.w	r9, #0
 8007f80:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f84:	f104 0a1a 	add.w	sl, r4, #26
 8007f88:	45c8      	cmp	r8, r9
 8007f8a:	dc09      	bgt.n	8007fa0 <_printf_float+0x250>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	079b      	lsls	r3, r3, #30
 8007f90:	f100 8103 	bmi.w	800819a <_printf_float+0x44a>
 8007f94:	68e0      	ldr	r0, [r4, #12]
 8007f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f98:	4298      	cmp	r0, r3
 8007f9a:	bfb8      	it	lt
 8007f9c:	4618      	movlt	r0, r3
 8007f9e:	e734      	b.n	8007e0a <_printf_float+0xba>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af2b 	beq.w	8007e06 <_printf_float+0xb6>
 8007fb0:	f109 0901 	add.w	r9, r9, #1
 8007fb4:	e7e8      	b.n	8007f88 <_printf_float+0x238>
 8007fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc39      	bgt.n	8008030 <_printf_float+0x2e0>
 8007fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800802c <_printf_float+0x2dc>)
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f af1d 	beq.w	8007e06 <_printf_float+0xb6>
 8007fcc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fd0:	ea59 0303 	orrs.w	r3, r9, r3
 8007fd4:	d102      	bne.n	8007fdc <_printf_float+0x28c>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	07d9      	lsls	r1, r3, #31
 8007fda:	d5d7      	bpl.n	8007f8c <_printf_float+0x23c>
 8007fdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af0d 	beq.w	8007e06 <_printf_float+0xb6>
 8007fec:	f04f 0a00 	mov.w	sl, #0
 8007ff0:	f104 0b1a 	add.w	fp, r4, #26
 8007ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff6:	425b      	negs	r3, r3
 8007ff8:	4553      	cmp	r3, sl
 8007ffa:	dc01      	bgt.n	8008000 <_printf_float+0x2b0>
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	e793      	b.n	8007f28 <_printf_float+0x1d8>
 8008000:	2301      	movs	r3, #1
 8008002:	465a      	mov	r2, fp
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f aefb 	beq.w	8007e06 <_printf_float+0xb6>
 8008010:	f10a 0a01 	add.w	sl, sl, #1
 8008014:	e7ee      	b.n	8007ff4 <_printf_float+0x2a4>
 8008016:	bf00      	nop
 8008018:	7fefffff 	.word	0x7fefffff
 800801c:	0800cc3c 	.word	0x0800cc3c
 8008020:	0800cc40 	.word	0x0800cc40
 8008024:	0800cc44 	.word	0x0800cc44
 8008028:	0800cc48 	.word	0x0800cc48
 800802c:	0800cfd8 	.word	0x0800cfd8
 8008030:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008032:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008036:	4553      	cmp	r3, sl
 8008038:	bfa8      	it	ge
 800803a:	4653      	movge	r3, sl
 800803c:	2b00      	cmp	r3, #0
 800803e:	4699      	mov	r9, r3
 8008040:	dc36      	bgt.n	80080b0 <_printf_float+0x360>
 8008042:	f04f 0b00 	mov.w	fp, #0
 8008046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800804a:	f104 021a 	add.w	r2, r4, #26
 800804e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008050:	9306      	str	r3, [sp, #24]
 8008052:	eba3 0309 	sub.w	r3, r3, r9
 8008056:	455b      	cmp	r3, fp
 8008058:	dc31      	bgt.n	80080be <_printf_float+0x36e>
 800805a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805c:	459a      	cmp	sl, r3
 800805e:	dc3a      	bgt.n	80080d6 <_printf_float+0x386>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	07da      	lsls	r2, r3, #31
 8008064:	d437      	bmi.n	80080d6 <_printf_float+0x386>
 8008066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008068:	ebaa 0903 	sub.w	r9, sl, r3
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	ebaa 0303 	sub.w	r3, sl, r3
 8008072:	4599      	cmp	r9, r3
 8008074:	bfa8      	it	ge
 8008076:	4699      	movge	r9, r3
 8008078:	f1b9 0f00 	cmp.w	r9, #0
 800807c:	dc33      	bgt.n	80080e6 <_printf_float+0x396>
 800807e:	f04f 0800 	mov.w	r8, #0
 8008082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008086:	f104 0b1a 	add.w	fp, r4, #26
 800808a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808c:	ebaa 0303 	sub.w	r3, sl, r3
 8008090:	eba3 0309 	sub.w	r3, r3, r9
 8008094:	4543      	cmp	r3, r8
 8008096:	f77f af79 	ble.w	8007f8c <_printf_float+0x23c>
 800809a:	2301      	movs	r3, #1
 800809c:	465a      	mov	r2, fp
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f aeae 	beq.w	8007e06 <_printf_float+0xb6>
 80080aa:	f108 0801 	add.w	r8, r8, #1
 80080ae:	e7ec      	b.n	800808a <_printf_float+0x33a>
 80080b0:	4642      	mov	r2, r8
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	d1c2      	bne.n	8008042 <_printf_float+0x2f2>
 80080bc:	e6a3      	b.n	8007e06 <_printf_float+0xb6>
 80080be:	2301      	movs	r3, #1
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	9206      	str	r2, [sp, #24]
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	f43f ae9c 	beq.w	8007e06 <_printf_float+0xb6>
 80080ce:	9a06      	ldr	r2, [sp, #24]
 80080d0:	f10b 0b01 	add.w	fp, fp, #1
 80080d4:	e7bb      	b.n	800804e <_printf_float+0x2fe>
 80080d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	d1c0      	bne.n	8008066 <_printf_float+0x316>
 80080e4:	e68f      	b.n	8007e06 <_printf_float+0xb6>
 80080e6:	9a06      	ldr	r2, [sp, #24]
 80080e8:	464b      	mov	r3, r9
 80080ea:	4442      	add	r2, r8
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	d1c3      	bne.n	800807e <_printf_float+0x32e>
 80080f6:	e686      	b.n	8007e06 <_printf_float+0xb6>
 80080f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080fc:	f1ba 0f01 	cmp.w	sl, #1
 8008100:	dc01      	bgt.n	8008106 <_printf_float+0x3b6>
 8008102:	07db      	lsls	r3, r3, #31
 8008104:	d536      	bpl.n	8008174 <_printf_float+0x424>
 8008106:	2301      	movs	r3, #1
 8008108:	4642      	mov	r2, r8
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f ae78 	beq.w	8007e06 <_printf_float+0xb6>
 8008116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f ae70 	beq.w	8007e06 <_printf_float+0xb6>
 8008126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800812a:	2200      	movs	r2, #0
 800812c:	2300      	movs	r3, #0
 800812e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008132:	f7f8 fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008136:	b9c0      	cbnz	r0, 800816a <_printf_float+0x41a>
 8008138:	4653      	mov	r3, sl
 800813a:	f108 0201 	add.w	r2, r8, #1
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	d10c      	bne.n	8008162 <_printf_float+0x412>
 8008148:	e65d      	b.n	8007e06 <_printf_float+0xb6>
 800814a:	2301      	movs	r3, #1
 800814c:	465a      	mov	r2, fp
 800814e:	4631      	mov	r1, r6
 8008150:	4628      	mov	r0, r5
 8008152:	47b8      	blx	r7
 8008154:	3001      	adds	r0, #1
 8008156:	f43f ae56 	beq.w	8007e06 <_printf_float+0xb6>
 800815a:	f108 0801 	add.w	r8, r8, #1
 800815e:	45d0      	cmp	r8, sl
 8008160:	dbf3      	blt.n	800814a <_printf_float+0x3fa>
 8008162:	464b      	mov	r3, r9
 8008164:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008168:	e6df      	b.n	8007f2a <_printf_float+0x1da>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	f104 0b1a 	add.w	fp, r4, #26
 8008172:	e7f4      	b.n	800815e <_printf_float+0x40e>
 8008174:	2301      	movs	r3, #1
 8008176:	4642      	mov	r2, r8
 8008178:	e7e1      	b.n	800813e <_printf_float+0x3ee>
 800817a:	2301      	movs	r3, #1
 800817c:	464a      	mov	r2, r9
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae3e 	beq.w	8007e06 <_printf_float+0xb6>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008192:	1a5b      	subs	r3, r3, r1
 8008194:	4543      	cmp	r3, r8
 8008196:	dcf0      	bgt.n	800817a <_printf_float+0x42a>
 8008198:	e6fc      	b.n	8007f94 <_printf_float+0x244>
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	f104 0919 	add.w	r9, r4, #25
 80081a2:	e7f4      	b.n	800818e <_printf_float+0x43e>

080081a4 <_printf_common>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	4616      	mov	r6, r2
 80081aa:	4698      	mov	r8, r3
 80081ac:	688a      	ldr	r2, [r1, #8]
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bfb8      	it	lt
 80081b8:	4613      	movlt	r3, r2
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081c0:	4607      	mov	r7, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	b10a      	cbz	r2, 80081ca <_printf_common+0x26>
 80081c6:	3301      	adds	r3, #1
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	0699      	lsls	r1, r3, #26
 80081ce:	bf42      	ittt	mi
 80081d0:	6833      	ldrmi	r3, [r6, #0]
 80081d2:	3302      	addmi	r3, #2
 80081d4:	6033      	strmi	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	f015 0506 	ands.w	r5, r5, #6
 80081dc:	d106      	bne.n	80081ec <_printf_common+0x48>
 80081de:	f104 0a19 	add.w	sl, r4, #25
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	6832      	ldr	r2, [r6, #0]
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dc26      	bgt.n	800823a <_printf_common+0x96>
 80081ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	3b00      	subs	r3, #0
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	0692      	lsls	r2, r2, #26
 80081fa:	d42b      	bmi.n	8008254 <_printf_common+0xb0>
 80081fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008200:	4641      	mov	r1, r8
 8008202:	4638      	mov	r0, r7
 8008204:	47c8      	blx	r9
 8008206:	3001      	adds	r0, #1
 8008208:	d01e      	beq.n	8008248 <_printf_common+0xa4>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	2b04      	cmp	r3, #4
 8008214:	bf02      	ittt	eq
 8008216:	68e5      	ldreq	r5, [r4, #12]
 8008218:	6833      	ldreq	r3, [r6, #0]
 800821a:	1aed      	subeq	r5, r5, r3
 800821c:	68a3      	ldr	r3, [r4, #8]
 800821e:	bf0c      	ite	eq
 8008220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008224:	2500      	movne	r5, #0
 8008226:	4293      	cmp	r3, r2
 8008228:	bfc4      	itt	gt
 800822a:	1a9b      	subgt	r3, r3, r2
 800822c:	18ed      	addgt	r5, r5, r3
 800822e:	2600      	movs	r6, #0
 8008230:	341a      	adds	r4, #26
 8008232:	42b5      	cmp	r5, r6
 8008234:	d11a      	bne.n	800826c <_printf_common+0xc8>
 8008236:	2000      	movs	r0, #0
 8008238:	e008      	b.n	800824c <_printf_common+0xa8>
 800823a:	2301      	movs	r3, #1
 800823c:	4652      	mov	r2, sl
 800823e:	4641      	mov	r1, r8
 8008240:	4638      	mov	r0, r7
 8008242:	47c8      	blx	r9
 8008244:	3001      	adds	r0, #1
 8008246:	d103      	bne.n	8008250 <_printf_common+0xac>
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	3501      	adds	r5, #1
 8008252:	e7c6      	b.n	80081e2 <_printf_common+0x3e>
 8008254:	18e1      	adds	r1, r4, r3
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	2030      	movs	r0, #48	@ 0x30
 800825a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800825e:	4422      	add	r2, r4
 8008260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008268:	3302      	adds	r3, #2
 800826a:	e7c7      	b.n	80081fc <_printf_common+0x58>
 800826c:	2301      	movs	r3, #1
 800826e:	4622      	mov	r2, r4
 8008270:	4641      	mov	r1, r8
 8008272:	4638      	mov	r0, r7
 8008274:	47c8      	blx	r9
 8008276:	3001      	adds	r0, #1
 8008278:	d0e6      	beq.n	8008248 <_printf_common+0xa4>
 800827a:	3601      	adds	r6, #1
 800827c:	e7d9      	b.n	8008232 <_printf_common+0x8e>
	...

08008280 <_printf_i>:
 8008280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	7e0f      	ldrb	r7, [r1, #24]
 8008286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008288:	2f78      	cmp	r7, #120	@ 0x78
 800828a:	4691      	mov	r9, r2
 800828c:	4680      	mov	r8, r0
 800828e:	460c      	mov	r4, r1
 8008290:	469a      	mov	sl, r3
 8008292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008296:	d807      	bhi.n	80082a8 <_printf_i+0x28>
 8008298:	2f62      	cmp	r7, #98	@ 0x62
 800829a:	d80a      	bhi.n	80082b2 <_printf_i+0x32>
 800829c:	2f00      	cmp	r7, #0
 800829e:	f000 80d2 	beq.w	8008446 <_printf_i+0x1c6>
 80082a2:	2f58      	cmp	r7, #88	@ 0x58
 80082a4:	f000 80b9 	beq.w	800841a <_printf_i+0x19a>
 80082a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082b0:	e03a      	b.n	8008328 <_printf_i+0xa8>
 80082b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082b6:	2b15      	cmp	r3, #21
 80082b8:	d8f6      	bhi.n	80082a8 <_printf_i+0x28>
 80082ba:	a101      	add	r1, pc, #4	@ (adr r1, 80082c0 <_printf_i+0x40>)
 80082bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c0:	08008319 	.word	0x08008319
 80082c4:	0800832d 	.word	0x0800832d
 80082c8:	080082a9 	.word	0x080082a9
 80082cc:	080082a9 	.word	0x080082a9
 80082d0:	080082a9 	.word	0x080082a9
 80082d4:	080082a9 	.word	0x080082a9
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	080082a9 	.word	0x080082a9
 80082e0:	080082a9 	.word	0x080082a9
 80082e4:	080082a9 	.word	0x080082a9
 80082e8:	080082a9 	.word	0x080082a9
 80082ec:	0800842d 	.word	0x0800842d
 80082f0:	08008357 	.word	0x08008357
 80082f4:	080083e7 	.word	0x080083e7
 80082f8:	080082a9 	.word	0x080082a9
 80082fc:	080082a9 	.word	0x080082a9
 8008300:	0800844f 	.word	0x0800844f
 8008304:	080082a9 	.word	0x080082a9
 8008308:	08008357 	.word	0x08008357
 800830c:	080082a9 	.word	0x080082a9
 8008310:	080082a9 	.word	0x080082a9
 8008314:	080083ef 	.word	0x080083ef
 8008318:	6833      	ldr	r3, [r6, #0]
 800831a:	1d1a      	adds	r2, r3, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6032      	str	r2, [r6, #0]
 8008320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008328:	2301      	movs	r3, #1
 800832a:	e09d      	b.n	8008468 <_printf_i+0x1e8>
 800832c:	6833      	ldr	r3, [r6, #0]
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	1d19      	adds	r1, r3, #4
 8008332:	6031      	str	r1, [r6, #0]
 8008334:	0606      	lsls	r6, r0, #24
 8008336:	d501      	bpl.n	800833c <_printf_i+0xbc>
 8008338:	681d      	ldr	r5, [r3, #0]
 800833a:	e003      	b.n	8008344 <_printf_i+0xc4>
 800833c:	0645      	lsls	r5, r0, #25
 800833e:	d5fb      	bpl.n	8008338 <_printf_i+0xb8>
 8008340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008344:	2d00      	cmp	r5, #0
 8008346:	da03      	bge.n	8008350 <_printf_i+0xd0>
 8008348:	232d      	movs	r3, #45	@ 0x2d
 800834a:	426d      	negs	r5, r5
 800834c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008350:	4859      	ldr	r0, [pc, #356]	@ (80084b8 <_printf_i+0x238>)
 8008352:	230a      	movs	r3, #10
 8008354:	e011      	b.n	800837a <_printf_i+0xfa>
 8008356:	6821      	ldr	r1, [r4, #0]
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	0608      	lsls	r0, r1, #24
 800835c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008360:	d402      	bmi.n	8008368 <_printf_i+0xe8>
 8008362:	0649      	lsls	r1, r1, #25
 8008364:	bf48      	it	mi
 8008366:	b2ad      	uxthmi	r5, r5
 8008368:	2f6f      	cmp	r7, #111	@ 0x6f
 800836a:	4853      	ldr	r0, [pc, #332]	@ (80084b8 <_printf_i+0x238>)
 800836c:	6033      	str	r3, [r6, #0]
 800836e:	bf14      	ite	ne
 8008370:	230a      	movne	r3, #10
 8008372:	2308      	moveq	r3, #8
 8008374:	2100      	movs	r1, #0
 8008376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800837a:	6866      	ldr	r6, [r4, #4]
 800837c:	60a6      	str	r6, [r4, #8]
 800837e:	2e00      	cmp	r6, #0
 8008380:	bfa2      	ittt	ge
 8008382:	6821      	ldrge	r1, [r4, #0]
 8008384:	f021 0104 	bicge.w	r1, r1, #4
 8008388:	6021      	strge	r1, [r4, #0]
 800838a:	b90d      	cbnz	r5, 8008390 <_printf_i+0x110>
 800838c:	2e00      	cmp	r6, #0
 800838e:	d04b      	beq.n	8008428 <_printf_i+0x1a8>
 8008390:	4616      	mov	r6, r2
 8008392:	fbb5 f1f3 	udiv	r1, r5, r3
 8008396:	fb03 5711 	mls	r7, r3, r1, r5
 800839a:	5dc7      	ldrb	r7, [r0, r7]
 800839c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083a0:	462f      	mov	r7, r5
 80083a2:	42bb      	cmp	r3, r7
 80083a4:	460d      	mov	r5, r1
 80083a6:	d9f4      	bls.n	8008392 <_printf_i+0x112>
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d10b      	bne.n	80083c4 <_printf_i+0x144>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07df      	lsls	r7, r3, #31
 80083b0:	d508      	bpl.n	80083c4 <_printf_i+0x144>
 80083b2:	6923      	ldr	r3, [r4, #16]
 80083b4:	6861      	ldr	r1, [r4, #4]
 80083b6:	4299      	cmp	r1, r3
 80083b8:	bfde      	ittt	le
 80083ba:	2330      	movle	r3, #48	@ 0x30
 80083bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083c4:	1b92      	subs	r2, r2, r6
 80083c6:	6122      	str	r2, [r4, #16]
 80083c8:	f8cd a000 	str.w	sl, [sp]
 80083cc:	464b      	mov	r3, r9
 80083ce:	aa03      	add	r2, sp, #12
 80083d0:	4621      	mov	r1, r4
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff fee6 	bl	80081a4 <_printf_common>
 80083d8:	3001      	adds	r0, #1
 80083da:	d14a      	bne.n	8008472 <_printf_i+0x1f2>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	b004      	add	sp, #16
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	f043 0320 	orr.w	r3, r3, #32
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	4833      	ldr	r0, [pc, #204]	@ (80084bc <_printf_i+0x23c>)
 80083f0:	2778      	movs	r7, #120	@ 0x78
 80083f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	6831      	ldr	r1, [r6, #0]
 80083fa:	061f      	lsls	r7, r3, #24
 80083fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008400:	d402      	bmi.n	8008408 <_printf_i+0x188>
 8008402:	065f      	lsls	r7, r3, #25
 8008404:	bf48      	it	mi
 8008406:	b2ad      	uxthmi	r5, r5
 8008408:	6031      	str	r1, [r6, #0]
 800840a:	07d9      	lsls	r1, r3, #31
 800840c:	bf44      	itt	mi
 800840e:	f043 0320 	orrmi.w	r3, r3, #32
 8008412:	6023      	strmi	r3, [r4, #0]
 8008414:	b11d      	cbz	r5, 800841e <_printf_i+0x19e>
 8008416:	2310      	movs	r3, #16
 8008418:	e7ac      	b.n	8008374 <_printf_i+0xf4>
 800841a:	4827      	ldr	r0, [pc, #156]	@ (80084b8 <_printf_i+0x238>)
 800841c:	e7e9      	b.n	80083f2 <_printf_i+0x172>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	f023 0320 	bic.w	r3, r3, #32
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	e7f6      	b.n	8008416 <_printf_i+0x196>
 8008428:	4616      	mov	r6, r2
 800842a:	e7bd      	b.n	80083a8 <_printf_i+0x128>
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	6825      	ldr	r5, [r4, #0]
 8008430:	6961      	ldr	r1, [r4, #20]
 8008432:	1d18      	adds	r0, r3, #4
 8008434:	6030      	str	r0, [r6, #0]
 8008436:	062e      	lsls	r6, r5, #24
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	d501      	bpl.n	8008440 <_printf_i+0x1c0>
 800843c:	6019      	str	r1, [r3, #0]
 800843e:	e002      	b.n	8008446 <_printf_i+0x1c6>
 8008440:	0668      	lsls	r0, r5, #25
 8008442:	d5fb      	bpl.n	800843c <_printf_i+0x1bc>
 8008444:	8019      	strh	r1, [r3, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	4616      	mov	r6, r2
 800844c:	e7bc      	b.n	80083c8 <_printf_i+0x148>
 800844e:	6833      	ldr	r3, [r6, #0]
 8008450:	1d1a      	adds	r2, r3, #4
 8008452:	6032      	str	r2, [r6, #0]
 8008454:	681e      	ldr	r6, [r3, #0]
 8008456:	6862      	ldr	r2, [r4, #4]
 8008458:	2100      	movs	r1, #0
 800845a:	4630      	mov	r0, r6
 800845c:	f7f7 feb8 	bl	80001d0 <memchr>
 8008460:	b108      	cbz	r0, 8008466 <_printf_i+0x1e6>
 8008462:	1b80      	subs	r0, r0, r6
 8008464:	6060      	str	r0, [r4, #4]
 8008466:	6863      	ldr	r3, [r4, #4]
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	2300      	movs	r3, #0
 800846c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008470:	e7aa      	b.n	80083c8 <_printf_i+0x148>
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	4632      	mov	r2, r6
 8008476:	4649      	mov	r1, r9
 8008478:	4640      	mov	r0, r8
 800847a:	47d0      	blx	sl
 800847c:	3001      	adds	r0, #1
 800847e:	d0ad      	beq.n	80083dc <_printf_i+0x15c>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	079b      	lsls	r3, r3, #30
 8008484:	d413      	bmi.n	80084ae <_printf_i+0x22e>
 8008486:	68e0      	ldr	r0, [r4, #12]
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	4298      	cmp	r0, r3
 800848c:	bfb8      	it	lt
 800848e:	4618      	movlt	r0, r3
 8008490:	e7a6      	b.n	80083e0 <_printf_i+0x160>
 8008492:	2301      	movs	r3, #1
 8008494:	4632      	mov	r2, r6
 8008496:	4649      	mov	r1, r9
 8008498:	4640      	mov	r0, r8
 800849a:	47d0      	blx	sl
 800849c:	3001      	adds	r0, #1
 800849e:	d09d      	beq.n	80083dc <_printf_i+0x15c>
 80084a0:	3501      	adds	r5, #1
 80084a2:	68e3      	ldr	r3, [r4, #12]
 80084a4:	9903      	ldr	r1, [sp, #12]
 80084a6:	1a5b      	subs	r3, r3, r1
 80084a8:	42ab      	cmp	r3, r5
 80084aa:	dcf2      	bgt.n	8008492 <_printf_i+0x212>
 80084ac:	e7eb      	b.n	8008486 <_printf_i+0x206>
 80084ae:	2500      	movs	r5, #0
 80084b0:	f104 0619 	add.w	r6, r4, #25
 80084b4:	e7f5      	b.n	80084a2 <_printf_i+0x222>
 80084b6:	bf00      	nop
 80084b8:	0800cc4c 	.word	0x0800cc4c
 80084bc:	0800cc5d 	.word	0x0800cc5d

080084c0 <_scanf_float>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	b087      	sub	sp, #28
 80084c6:	4617      	mov	r7, r2
 80084c8:	9303      	str	r3, [sp, #12]
 80084ca:	688b      	ldr	r3, [r1, #8]
 80084cc:	1e5a      	subs	r2, r3, #1
 80084ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80084d2:	bf81      	itttt	hi
 80084d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80084dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084e0:	608b      	strhi	r3, [r1, #8]
 80084e2:	680b      	ldr	r3, [r1, #0]
 80084e4:	460a      	mov	r2, r1
 80084e6:	f04f 0500 	mov.w	r5, #0
 80084ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80084ee:	f842 3b1c 	str.w	r3, [r2], #28
 80084f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084f6:	4680      	mov	r8, r0
 80084f8:	460c      	mov	r4, r1
 80084fa:	bf98      	it	ls
 80084fc:	f04f 0b00 	movls.w	fp, #0
 8008500:	9201      	str	r2, [sp, #4]
 8008502:	4616      	mov	r6, r2
 8008504:	46aa      	mov	sl, r5
 8008506:	46a9      	mov	r9, r5
 8008508:	9502      	str	r5, [sp, #8]
 800850a:	68a2      	ldr	r2, [r4, #8]
 800850c:	b152      	cbz	r2, 8008524 <_scanf_float+0x64>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	2b4e      	cmp	r3, #78	@ 0x4e
 8008514:	d864      	bhi.n	80085e0 <_scanf_float+0x120>
 8008516:	2b40      	cmp	r3, #64	@ 0x40
 8008518:	d83c      	bhi.n	8008594 <_scanf_float+0xd4>
 800851a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800851e:	b2c8      	uxtb	r0, r1
 8008520:	280e      	cmp	r0, #14
 8008522:	d93a      	bls.n	800859a <_scanf_float+0xda>
 8008524:	f1b9 0f00 	cmp.w	r9, #0
 8008528:	d003      	beq.n	8008532 <_scanf_float+0x72>
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008536:	f1ba 0f01 	cmp.w	sl, #1
 800853a:	f200 8117 	bhi.w	800876c <_scanf_float+0x2ac>
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	429e      	cmp	r6, r3
 8008542:	f200 8108 	bhi.w	8008756 <_scanf_float+0x296>
 8008546:	2001      	movs	r0, #1
 8008548:	b007      	add	sp, #28
 800854a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008552:	2a0d      	cmp	r2, #13
 8008554:	d8e6      	bhi.n	8008524 <_scanf_float+0x64>
 8008556:	a101      	add	r1, pc, #4	@ (adr r1, 800855c <_scanf_float+0x9c>)
 8008558:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800855c:	080086a3 	.word	0x080086a3
 8008560:	08008525 	.word	0x08008525
 8008564:	08008525 	.word	0x08008525
 8008568:	08008525 	.word	0x08008525
 800856c:	08008703 	.word	0x08008703
 8008570:	080086db 	.word	0x080086db
 8008574:	08008525 	.word	0x08008525
 8008578:	08008525 	.word	0x08008525
 800857c:	080086b1 	.word	0x080086b1
 8008580:	08008525 	.word	0x08008525
 8008584:	08008525 	.word	0x08008525
 8008588:	08008525 	.word	0x08008525
 800858c:	08008525 	.word	0x08008525
 8008590:	08008669 	.word	0x08008669
 8008594:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008598:	e7db      	b.n	8008552 <_scanf_float+0x92>
 800859a:	290e      	cmp	r1, #14
 800859c:	d8c2      	bhi.n	8008524 <_scanf_float+0x64>
 800859e:	a001      	add	r0, pc, #4	@ (adr r0, 80085a4 <_scanf_float+0xe4>)
 80085a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085a4:	08008659 	.word	0x08008659
 80085a8:	08008525 	.word	0x08008525
 80085ac:	08008659 	.word	0x08008659
 80085b0:	080086ef 	.word	0x080086ef
 80085b4:	08008525 	.word	0x08008525
 80085b8:	08008601 	.word	0x08008601
 80085bc:	0800863f 	.word	0x0800863f
 80085c0:	0800863f 	.word	0x0800863f
 80085c4:	0800863f 	.word	0x0800863f
 80085c8:	0800863f 	.word	0x0800863f
 80085cc:	0800863f 	.word	0x0800863f
 80085d0:	0800863f 	.word	0x0800863f
 80085d4:	0800863f 	.word	0x0800863f
 80085d8:	0800863f 	.word	0x0800863f
 80085dc:	0800863f 	.word	0x0800863f
 80085e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80085e2:	d809      	bhi.n	80085f8 <_scanf_float+0x138>
 80085e4:	2b60      	cmp	r3, #96	@ 0x60
 80085e6:	d8b2      	bhi.n	800854e <_scanf_float+0x8e>
 80085e8:	2b54      	cmp	r3, #84	@ 0x54
 80085ea:	d07b      	beq.n	80086e4 <_scanf_float+0x224>
 80085ec:	2b59      	cmp	r3, #89	@ 0x59
 80085ee:	d199      	bne.n	8008524 <_scanf_float+0x64>
 80085f0:	2d07      	cmp	r5, #7
 80085f2:	d197      	bne.n	8008524 <_scanf_float+0x64>
 80085f4:	2508      	movs	r5, #8
 80085f6:	e02c      	b.n	8008652 <_scanf_float+0x192>
 80085f8:	2b74      	cmp	r3, #116	@ 0x74
 80085fa:	d073      	beq.n	80086e4 <_scanf_float+0x224>
 80085fc:	2b79      	cmp	r3, #121	@ 0x79
 80085fe:	e7f6      	b.n	80085ee <_scanf_float+0x12e>
 8008600:	6821      	ldr	r1, [r4, #0]
 8008602:	05c8      	lsls	r0, r1, #23
 8008604:	d51b      	bpl.n	800863e <_scanf_float+0x17e>
 8008606:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800860a:	6021      	str	r1, [r4, #0]
 800860c:	f109 0901 	add.w	r9, r9, #1
 8008610:	f1bb 0f00 	cmp.w	fp, #0
 8008614:	d003      	beq.n	800861e <_scanf_float+0x15e>
 8008616:	3201      	adds	r2, #1
 8008618:	f10b 3bff 	add.w	fp, fp, #4294967295
 800861c:	60a2      	str	r2, [r4, #8]
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	3b01      	subs	r3, #1
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	3301      	adds	r3, #1
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3b01      	subs	r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	607b      	str	r3, [r7, #4]
 8008632:	f340 8087 	ble.w	8008744 <_scanf_float+0x284>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	e765      	b.n	800850a <_scanf_float+0x4a>
 800863e:	eb1a 0105 	adds.w	r1, sl, r5
 8008642:	f47f af6f 	bne.w	8008524 <_scanf_float+0x64>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800864c:	6022      	str	r2, [r4, #0]
 800864e:	460d      	mov	r5, r1
 8008650:	468a      	mov	sl, r1
 8008652:	f806 3b01 	strb.w	r3, [r6], #1
 8008656:	e7e2      	b.n	800861e <_scanf_float+0x15e>
 8008658:	6822      	ldr	r2, [r4, #0]
 800865a:	0610      	lsls	r0, r2, #24
 800865c:	f57f af62 	bpl.w	8008524 <_scanf_float+0x64>
 8008660:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008664:	6022      	str	r2, [r4, #0]
 8008666:	e7f4      	b.n	8008652 <_scanf_float+0x192>
 8008668:	f1ba 0f00 	cmp.w	sl, #0
 800866c:	d10e      	bne.n	800868c <_scanf_float+0x1cc>
 800866e:	f1b9 0f00 	cmp.w	r9, #0
 8008672:	d10e      	bne.n	8008692 <_scanf_float+0x1d2>
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800867a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800867e:	d108      	bne.n	8008692 <_scanf_float+0x1d2>
 8008680:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008684:	6022      	str	r2, [r4, #0]
 8008686:	f04f 0a01 	mov.w	sl, #1
 800868a:	e7e2      	b.n	8008652 <_scanf_float+0x192>
 800868c:	f1ba 0f02 	cmp.w	sl, #2
 8008690:	d055      	beq.n	800873e <_scanf_float+0x27e>
 8008692:	2d01      	cmp	r5, #1
 8008694:	d002      	beq.n	800869c <_scanf_float+0x1dc>
 8008696:	2d04      	cmp	r5, #4
 8008698:	f47f af44 	bne.w	8008524 <_scanf_float+0x64>
 800869c:	3501      	adds	r5, #1
 800869e:	b2ed      	uxtb	r5, r5
 80086a0:	e7d7      	b.n	8008652 <_scanf_float+0x192>
 80086a2:	f1ba 0f01 	cmp.w	sl, #1
 80086a6:	f47f af3d 	bne.w	8008524 <_scanf_float+0x64>
 80086aa:	f04f 0a02 	mov.w	sl, #2
 80086ae:	e7d0      	b.n	8008652 <_scanf_float+0x192>
 80086b0:	b97d      	cbnz	r5, 80086d2 <_scanf_float+0x212>
 80086b2:	f1b9 0f00 	cmp.w	r9, #0
 80086b6:	f47f af38 	bne.w	800852a <_scanf_float+0x6a>
 80086ba:	6822      	ldr	r2, [r4, #0]
 80086bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086c4:	f040 8108 	bne.w	80088d8 <_scanf_float+0x418>
 80086c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086cc:	6022      	str	r2, [r4, #0]
 80086ce:	2501      	movs	r5, #1
 80086d0:	e7bf      	b.n	8008652 <_scanf_float+0x192>
 80086d2:	2d03      	cmp	r5, #3
 80086d4:	d0e2      	beq.n	800869c <_scanf_float+0x1dc>
 80086d6:	2d05      	cmp	r5, #5
 80086d8:	e7de      	b.n	8008698 <_scanf_float+0x1d8>
 80086da:	2d02      	cmp	r5, #2
 80086dc:	f47f af22 	bne.w	8008524 <_scanf_float+0x64>
 80086e0:	2503      	movs	r5, #3
 80086e2:	e7b6      	b.n	8008652 <_scanf_float+0x192>
 80086e4:	2d06      	cmp	r5, #6
 80086e6:	f47f af1d 	bne.w	8008524 <_scanf_float+0x64>
 80086ea:	2507      	movs	r5, #7
 80086ec:	e7b1      	b.n	8008652 <_scanf_float+0x192>
 80086ee:	6822      	ldr	r2, [r4, #0]
 80086f0:	0591      	lsls	r1, r2, #22
 80086f2:	f57f af17 	bpl.w	8008524 <_scanf_float+0x64>
 80086f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	f8cd 9008 	str.w	r9, [sp, #8]
 8008700:	e7a7      	b.n	8008652 <_scanf_float+0x192>
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008708:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800870c:	d006      	beq.n	800871c <_scanf_float+0x25c>
 800870e:	0550      	lsls	r0, r2, #21
 8008710:	f57f af08 	bpl.w	8008524 <_scanf_float+0x64>
 8008714:	f1b9 0f00 	cmp.w	r9, #0
 8008718:	f000 80de 	beq.w	80088d8 <_scanf_float+0x418>
 800871c:	0591      	lsls	r1, r2, #22
 800871e:	bf58      	it	pl
 8008720:	9902      	ldrpl	r1, [sp, #8]
 8008722:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008726:	bf58      	it	pl
 8008728:	eba9 0101 	subpl.w	r1, r9, r1
 800872c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008730:	bf58      	it	pl
 8008732:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008736:	6022      	str	r2, [r4, #0]
 8008738:	f04f 0900 	mov.w	r9, #0
 800873c:	e789      	b.n	8008652 <_scanf_float+0x192>
 800873e:	f04f 0a03 	mov.w	sl, #3
 8008742:	e786      	b.n	8008652 <_scanf_float+0x192>
 8008744:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008748:	4639      	mov	r1, r7
 800874a:	4640      	mov	r0, r8
 800874c:	4798      	blx	r3
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f aedb 	beq.w	800850a <_scanf_float+0x4a>
 8008754:	e6e6      	b.n	8008524 <_scanf_float+0x64>
 8008756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800875a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800875e:	463a      	mov	r2, r7
 8008760:	4640      	mov	r0, r8
 8008762:	4798      	blx	r3
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	3b01      	subs	r3, #1
 8008768:	6123      	str	r3, [r4, #16]
 800876a:	e6e8      	b.n	800853e <_scanf_float+0x7e>
 800876c:	1e6b      	subs	r3, r5, #1
 800876e:	2b06      	cmp	r3, #6
 8008770:	d824      	bhi.n	80087bc <_scanf_float+0x2fc>
 8008772:	2d02      	cmp	r5, #2
 8008774:	d836      	bhi.n	80087e4 <_scanf_float+0x324>
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	429e      	cmp	r6, r3
 800877a:	f67f aee4 	bls.w	8008546 <_scanf_float+0x86>
 800877e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008782:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008786:	463a      	mov	r2, r7
 8008788:	4640      	mov	r0, r8
 800878a:	4798      	blx	r3
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	3b01      	subs	r3, #1
 8008790:	6123      	str	r3, [r4, #16]
 8008792:	e7f0      	b.n	8008776 <_scanf_float+0x2b6>
 8008794:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008798:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800879c:	463a      	mov	r2, r7
 800879e:	4640      	mov	r0, r8
 80087a0:	4798      	blx	r3
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087ac:	fa5f fa8a 	uxtb.w	sl, sl
 80087b0:	f1ba 0f02 	cmp.w	sl, #2
 80087b4:	d1ee      	bne.n	8008794 <_scanf_float+0x2d4>
 80087b6:	3d03      	subs	r5, #3
 80087b8:	b2ed      	uxtb	r5, r5
 80087ba:	1b76      	subs	r6, r6, r5
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	05da      	lsls	r2, r3, #23
 80087c0:	d530      	bpl.n	8008824 <_scanf_float+0x364>
 80087c2:	055b      	lsls	r3, r3, #21
 80087c4:	d511      	bpl.n	80087ea <_scanf_float+0x32a>
 80087c6:	9b01      	ldr	r3, [sp, #4]
 80087c8:	429e      	cmp	r6, r3
 80087ca:	f67f aebc 	bls.w	8008546 <_scanf_float+0x86>
 80087ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087d6:	463a      	mov	r2, r7
 80087d8:	4640      	mov	r0, r8
 80087da:	4798      	blx	r3
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	3b01      	subs	r3, #1
 80087e0:	6123      	str	r3, [r4, #16]
 80087e2:	e7f0      	b.n	80087c6 <_scanf_float+0x306>
 80087e4:	46aa      	mov	sl, r5
 80087e6:	46b3      	mov	fp, r6
 80087e8:	e7de      	b.n	80087a8 <_scanf_float+0x2e8>
 80087ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	2965      	cmp	r1, #101	@ 0x65
 80087f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80087f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	d00c      	beq.n	8008818 <_scanf_float+0x358>
 80087fe:	2945      	cmp	r1, #69	@ 0x45
 8008800:	d00a      	beq.n	8008818 <_scanf_float+0x358>
 8008802:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008806:	463a      	mov	r2, r7
 8008808:	4640      	mov	r0, r8
 800880a:	4798      	blx	r3
 800880c:	6923      	ldr	r3, [r4, #16]
 800880e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008812:	3b01      	subs	r3, #1
 8008814:	1eb5      	subs	r5, r6, #2
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800881c:	463a      	mov	r2, r7
 800881e:	4640      	mov	r0, r8
 8008820:	4798      	blx	r3
 8008822:	462e      	mov	r6, r5
 8008824:	6822      	ldr	r2, [r4, #0]
 8008826:	f012 0210 	ands.w	r2, r2, #16
 800882a:	d001      	beq.n	8008830 <_scanf_float+0x370>
 800882c:	2000      	movs	r0, #0
 800882e:	e68b      	b.n	8008548 <_scanf_float+0x88>
 8008830:	7032      	strb	r2, [r6, #0]
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800883c:	d11c      	bne.n	8008878 <_scanf_float+0x3b8>
 800883e:	9b02      	ldr	r3, [sp, #8]
 8008840:	454b      	cmp	r3, r9
 8008842:	eba3 0209 	sub.w	r2, r3, r9
 8008846:	d123      	bne.n	8008890 <_scanf_float+0x3d0>
 8008848:	9901      	ldr	r1, [sp, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	4640      	mov	r0, r8
 800884e:	f002 fc47 	bl	800b0e0 <_strtod_r>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	6821      	ldr	r1, [r4, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f011 0f02 	tst.w	r1, #2
 800885c:	ec57 6b10 	vmov	r6, r7, d0
 8008860:	f103 0204 	add.w	r2, r3, #4
 8008864:	d01f      	beq.n	80088a6 <_scanf_float+0x3e6>
 8008866:	9903      	ldr	r1, [sp, #12]
 8008868:	600a      	str	r2, [r1, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	e9c3 6700 	strd	r6, r7, [r3]
 8008870:	68e3      	ldr	r3, [r4, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60e3      	str	r3, [r4, #12]
 8008876:	e7d9      	b.n	800882c <_scanf_float+0x36c>
 8008878:	9b04      	ldr	r3, [sp, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0e4      	beq.n	8008848 <_scanf_float+0x388>
 800887e:	9905      	ldr	r1, [sp, #20]
 8008880:	230a      	movs	r3, #10
 8008882:	3101      	adds	r1, #1
 8008884:	4640      	mov	r0, r8
 8008886:	f002 fcab 	bl	800b1e0 <_strtol_r>
 800888a:	9b04      	ldr	r3, [sp, #16]
 800888c:	9e05      	ldr	r6, [sp, #20]
 800888e:	1ac2      	subs	r2, r0, r3
 8008890:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008894:	429e      	cmp	r6, r3
 8008896:	bf28      	it	cs
 8008898:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800889c:	4910      	ldr	r1, [pc, #64]	@ (80088e0 <_scanf_float+0x420>)
 800889e:	4630      	mov	r0, r6
 80088a0:	f000 f8e4 	bl	8008a6c <siprintf>
 80088a4:	e7d0      	b.n	8008848 <_scanf_float+0x388>
 80088a6:	f011 0f04 	tst.w	r1, #4
 80088aa:	9903      	ldr	r1, [sp, #12]
 80088ac:	600a      	str	r2, [r1, #0]
 80088ae:	d1dc      	bne.n	800886a <_scanf_float+0x3aa>
 80088b0:	681d      	ldr	r5, [r3, #0]
 80088b2:	4632      	mov	r2, r6
 80088b4:	463b      	mov	r3, r7
 80088b6:	4630      	mov	r0, r6
 80088b8:	4639      	mov	r1, r7
 80088ba:	f7f8 f937 	bl	8000b2c <__aeabi_dcmpun>
 80088be:	b128      	cbz	r0, 80088cc <_scanf_float+0x40c>
 80088c0:	4808      	ldr	r0, [pc, #32]	@ (80088e4 <_scanf_float+0x424>)
 80088c2:	f000 fa05 	bl	8008cd0 <nanf>
 80088c6:	ed85 0a00 	vstr	s0, [r5]
 80088ca:	e7d1      	b.n	8008870 <_scanf_float+0x3b0>
 80088cc:	4630      	mov	r0, r6
 80088ce:	4639      	mov	r1, r7
 80088d0:	f7f8 f98a 	bl	8000be8 <__aeabi_d2f>
 80088d4:	6028      	str	r0, [r5, #0]
 80088d6:	e7cb      	b.n	8008870 <_scanf_float+0x3b0>
 80088d8:	f04f 0900 	mov.w	r9, #0
 80088dc:	e629      	b.n	8008532 <_scanf_float+0x72>
 80088de:	bf00      	nop
 80088e0:	0800cc6e 	.word	0x0800cc6e
 80088e4:	0800d020 	.word	0x0800d020

080088e8 <std>:
 80088e8:	2300      	movs	r3, #0
 80088ea:	b510      	push	{r4, lr}
 80088ec:	4604      	mov	r4, r0
 80088ee:	e9c0 3300 	strd	r3, r3, [r0]
 80088f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088f6:	6083      	str	r3, [r0, #8]
 80088f8:	8181      	strh	r1, [r0, #12]
 80088fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80088fc:	81c2      	strh	r2, [r0, #14]
 80088fe:	6183      	str	r3, [r0, #24]
 8008900:	4619      	mov	r1, r3
 8008902:	2208      	movs	r2, #8
 8008904:	305c      	adds	r0, #92	@ 0x5c
 8008906:	f000 f940 	bl	8008b8a <memset>
 800890a:	4b0d      	ldr	r3, [pc, #52]	@ (8008940 <std+0x58>)
 800890c:	6263      	str	r3, [r4, #36]	@ 0x24
 800890e:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <std+0x5c>)
 8008910:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008912:	4b0d      	ldr	r3, [pc, #52]	@ (8008948 <std+0x60>)
 8008914:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008916:	4b0d      	ldr	r3, [pc, #52]	@ (800894c <std+0x64>)
 8008918:	6323      	str	r3, [r4, #48]	@ 0x30
 800891a:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <std+0x68>)
 800891c:	6224      	str	r4, [r4, #32]
 800891e:	429c      	cmp	r4, r3
 8008920:	d006      	beq.n	8008930 <std+0x48>
 8008922:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008926:	4294      	cmp	r4, r2
 8008928:	d002      	beq.n	8008930 <std+0x48>
 800892a:	33d0      	adds	r3, #208	@ 0xd0
 800892c:	429c      	cmp	r4, r3
 800892e:	d105      	bne.n	800893c <std+0x54>
 8008930:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008938:	f000 b9c6 	b.w	8008cc8 <__retarget_lock_init_recursive>
 800893c:	bd10      	pop	{r4, pc}
 800893e:	bf00      	nop
 8008940:	08008b01 	.word	0x08008b01
 8008944:	08008b27 	.word	0x08008b27
 8008948:	08008b5f 	.word	0x08008b5f
 800894c:	08008b83 	.word	0x08008b83
 8008950:	20000910 	.word	0x20000910

08008954 <stdio_exit_handler>:
 8008954:	4a02      	ldr	r2, [pc, #8]	@ (8008960 <stdio_exit_handler+0xc>)
 8008956:	4903      	ldr	r1, [pc, #12]	@ (8008964 <stdio_exit_handler+0x10>)
 8008958:	4803      	ldr	r0, [pc, #12]	@ (8008968 <stdio_exit_handler+0x14>)
 800895a:	f000 b869 	b.w	8008a30 <_fwalk_sglue>
 800895e:	bf00      	nop
 8008960:	200000f0 	.word	0x200000f0
 8008964:	0800bbd1 	.word	0x0800bbd1
 8008968:	20000100 	.word	0x20000100

0800896c <cleanup_stdio>:
 800896c:	6841      	ldr	r1, [r0, #4]
 800896e:	4b0c      	ldr	r3, [pc, #48]	@ (80089a0 <cleanup_stdio+0x34>)
 8008970:	4299      	cmp	r1, r3
 8008972:	b510      	push	{r4, lr}
 8008974:	4604      	mov	r4, r0
 8008976:	d001      	beq.n	800897c <cleanup_stdio+0x10>
 8008978:	f003 f92a 	bl	800bbd0 <_fflush_r>
 800897c:	68a1      	ldr	r1, [r4, #8]
 800897e:	4b09      	ldr	r3, [pc, #36]	@ (80089a4 <cleanup_stdio+0x38>)
 8008980:	4299      	cmp	r1, r3
 8008982:	d002      	beq.n	800898a <cleanup_stdio+0x1e>
 8008984:	4620      	mov	r0, r4
 8008986:	f003 f923 	bl	800bbd0 <_fflush_r>
 800898a:	68e1      	ldr	r1, [r4, #12]
 800898c:	4b06      	ldr	r3, [pc, #24]	@ (80089a8 <cleanup_stdio+0x3c>)
 800898e:	4299      	cmp	r1, r3
 8008990:	d004      	beq.n	800899c <cleanup_stdio+0x30>
 8008992:	4620      	mov	r0, r4
 8008994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008998:	f003 b91a 	b.w	800bbd0 <_fflush_r>
 800899c:	bd10      	pop	{r4, pc}
 800899e:	bf00      	nop
 80089a0:	20000910 	.word	0x20000910
 80089a4:	20000978 	.word	0x20000978
 80089a8:	200009e0 	.word	0x200009e0

080089ac <global_stdio_init.part.0>:
 80089ac:	b510      	push	{r4, lr}
 80089ae:	4b0b      	ldr	r3, [pc, #44]	@ (80089dc <global_stdio_init.part.0+0x30>)
 80089b0:	4c0b      	ldr	r4, [pc, #44]	@ (80089e0 <global_stdio_init.part.0+0x34>)
 80089b2:	4a0c      	ldr	r2, [pc, #48]	@ (80089e4 <global_stdio_init.part.0+0x38>)
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	4620      	mov	r0, r4
 80089b8:	2200      	movs	r2, #0
 80089ba:	2104      	movs	r1, #4
 80089bc:	f7ff ff94 	bl	80088e8 <std>
 80089c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089c4:	2201      	movs	r2, #1
 80089c6:	2109      	movs	r1, #9
 80089c8:	f7ff ff8e 	bl	80088e8 <std>
 80089cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089d0:	2202      	movs	r2, #2
 80089d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d6:	2112      	movs	r1, #18
 80089d8:	f7ff bf86 	b.w	80088e8 <std>
 80089dc:	20000a48 	.word	0x20000a48
 80089e0:	20000910 	.word	0x20000910
 80089e4:	08008955 	.word	0x08008955

080089e8 <__sfp_lock_acquire>:
 80089e8:	4801      	ldr	r0, [pc, #4]	@ (80089f0 <__sfp_lock_acquire+0x8>)
 80089ea:	f000 b96e 	b.w	8008cca <__retarget_lock_acquire_recursive>
 80089ee:	bf00      	nop
 80089f0:	20000a51 	.word	0x20000a51

080089f4 <__sfp_lock_release>:
 80089f4:	4801      	ldr	r0, [pc, #4]	@ (80089fc <__sfp_lock_release+0x8>)
 80089f6:	f000 b969 	b.w	8008ccc <__retarget_lock_release_recursive>
 80089fa:	bf00      	nop
 80089fc:	20000a51 	.word	0x20000a51

08008a00 <__sinit>:
 8008a00:	b510      	push	{r4, lr}
 8008a02:	4604      	mov	r4, r0
 8008a04:	f7ff fff0 	bl	80089e8 <__sfp_lock_acquire>
 8008a08:	6a23      	ldr	r3, [r4, #32]
 8008a0a:	b11b      	cbz	r3, 8008a14 <__sinit+0x14>
 8008a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a10:	f7ff bff0 	b.w	80089f4 <__sfp_lock_release>
 8008a14:	4b04      	ldr	r3, [pc, #16]	@ (8008a28 <__sinit+0x28>)
 8008a16:	6223      	str	r3, [r4, #32]
 8008a18:	4b04      	ldr	r3, [pc, #16]	@ (8008a2c <__sinit+0x2c>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1f5      	bne.n	8008a0c <__sinit+0xc>
 8008a20:	f7ff ffc4 	bl	80089ac <global_stdio_init.part.0>
 8008a24:	e7f2      	b.n	8008a0c <__sinit+0xc>
 8008a26:	bf00      	nop
 8008a28:	0800896d 	.word	0x0800896d
 8008a2c:	20000a48 	.word	0x20000a48

08008a30 <_fwalk_sglue>:
 8008a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a34:	4607      	mov	r7, r0
 8008a36:	4688      	mov	r8, r1
 8008a38:	4614      	mov	r4, r2
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a40:	f1b9 0901 	subs.w	r9, r9, #1
 8008a44:	d505      	bpl.n	8008a52 <_fwalk_sglue+0x22>
 8008a46:	6824      	ldr	r4, [r4, #0]
 8008a48:	2c00      	cmp	r4, #0
 8008a4a:	d1f7      	bne.n	8008a3c <_fwalk_sglue+0xc>
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d907      	bls.n	8008a68 <_fwalk_sglue+0x38>
 8008a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	d003      	beq.n	8008a68 <_fwalk_sglue+0x38>
 8008a60:	4629      	mov	r1, r5
 8008a62:	4638      	mov	r0, r7
 8008a64:	47c0      	blx	r8
 8008a66:	4306      	orrs	r6, r0
 8008a68:	3568      	adds	r5, #104	@ 0x68
 8008a6a:	e7e9      	b.n	8008a40 <_fwalk_sglue+0x10>

08008a6c <siprintf>:
 8008a6c:	b40e      	push	{r1, r2, r3}
 8008a6e:	b500      	push	{lr}
 8008a70:	b09c      	sub	sp, #112	@ 0x70
 8008a72:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a74:	9002      	str	r0, [sp, #8]
 8008a76:	9006      	str	r0, [sp, #24]
 8008a78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a7c:	4809      	ldr	r0, [pc, #36]	@ (8008aa4 <siprintf+0x38>)
 8008a7e:	9107      	str	r1, [sp, #28]
 8008a80:	9104      	str	r1, [sp, #16]
 8008a82:	4909      	ldr	r1, [pc, #36]	@ (8008aa8 <siprintf+0x3c>)
 8008a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a88:	9105      	str	r1, [sp, #20]
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	a902      	add	r1, sp, #8
 8008a90:	f002 fc04 	bl	800b29c <_svfiprintf_r>
 8008a94:	9b02      	ldr	r3, [sp, #8]
 8008a96:	2200      	movs	r2, #0
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	b01c      	add	sp, #112	@ 0x70
 8008a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aa0:	b003      	add	sp, #12
 8008aa2:	4770      	bx	lr
 8008aa4:	200000fc 	.word	0x200000fc
 8008aa8:	ffff0208 	.word	0xffff0208

08008aac <siscanf>:
 8008aac:	b40e      	push	{r1, r2, r3}
 8008aae:	b530      	push	{r4, r5, lr}
 8008ab0:	b09c      	sub	sp, #112	@ 0x70
 8008ab2:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008ab4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008ab8:	f854 5b04 	ldr.w	r5, [r4], #4
 8008abc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008ac0:	9002      	str	r0, [sp, #8]
 8008ac2:	9006      	str	r0, [sp, #24]
 8008ac4:	f7f7 fbd4 	bl	8000270 <strlen>
 8008ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8008af8 <siscanf+0x4c>)
 8008aca:	9003      	str	r0, [sp, #12]
 8008acc:	9007      	str	r0, [sp, #28]
 8008ace:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ad0:	480a      	ldr	r0, [pc, #40]	@ (8008afc <siscanf+0x50>)
 8008ad2:	9401      	str	r4, [sp, #4]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ad8:	9314      	str	r3, [sp, #80]	@ 0x50
 8008ada:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ade:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	a902      	add	r1, sp, #8
 8008ae8:	6800      	ldr	r0, [r0, #0]
 8008aea:	f002 fd2b 	bl	800b544 <__ssvfiscanf_r>
 8008aee:	b01c      	add	sp, #112	@ 0x70
 8008af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008af4:	b003      	add	sp, #12
 8008af6:	4770      	bx	lr
 8008af8:	08008b23 	.word	0x08008b23
 8008afc:	200000fc 	.word	0x200000fc

08008b00 <__sread>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	460c      	mov	r4, r1
 8008b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b08:	f000 f890 	bl	8008c2c <_read_r>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	bfab      	itete	ge
 8008b10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b12:	89a3      	ldrhlt	r3, [r4, #12]
 8008b14:	181b      	addge	r3, r3, r0
 8008b16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b1a:	bfac      	ite	ge
 8008b1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b1e:	81a3      	strhlt	r3, [r4, #12]
 8008b20:	bd10      	pop	{r4, pc}

08008b22 <__seofread>:
 8008b22:	2000      	movs	r0, #0
 8008b24:	4770      	bx	lr

08008b26 <__swrite>:
 8008b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2a:	461f      	mov	r7, r3
 8008b2c:	898b      	ldrh	r3, [r1, #12]
 8008b2e:	05db      	lsls	r3, r3, #23
 8008b30:	4605      	mov	r5, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	4616      	mov	r6, r2
 8008b36:	d505      	bpl.n	8008b44 <__swrite+0x1e>
 8008b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f000 f862 	bl	8008c08 <_lseek_r>
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	4632      	mov	r2, r6
 8008b52:	463b      	mov	r3, r7
 8008b54:	4628      	mov	r0, r5
 8008b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5a:	f000 b879 	b.w	8008c50 <_write_r>

08008b5e <__sseek>:
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	460c      	mov	r4, r1
 8008b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b66:	f000 f84f 	bl	8008c08 <_lseek_r>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	bf15      	itete	ne
 8008b70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b7a:	81a3      	strheq	r3, [r4, #12]
 8008b7c:	bf18      	it	ne
 8008b7e:	81a3      	strhne	r3, [r4, #12]
 8008b80:	bd10      	pop	{r4, pc}

08008b82 <__sclose>:
 8008b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b86:	f000 b82f 	b.w	8008be8 <_close_r>

08008b8a <memset>:
 8008b8a:	4402      	add	r2, r0
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d100      	bne.n	8008b94 <memset+0xa>
 8008b92:	4770      	bx	lr
 8008b94:	f803 1b01 	strb.w	r1, [r3], #1
 8008b98:	e7f9      	b.n	8008b8e <memset+0x4>

08008b9a <strchr>:
 8008b9a:	b2c9      	uxtb	r1, r1
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ba4:	b112      	cbz	r2, 8008bac <strchr+0x12>
 8008ba6:	428a      	cmp	r2, r1
 8008ba8:	d1f9      	bne.n	8008b9e <strchr+0x4>
 8008baa:	4770      	bx	lr
 8008bac:	2900      	cmp	r1, #0
 8008bae:	bf18      	it	ne
 8008bb0:	2000      	movne	r0, #0
 8008bb2:	4770      	bx	lr

08008bb4 <strstr>:
 8008bb4:	780a      	ldrb	r2, [r1, #0]
 8008bb6:	b570      	push	{r4, r5, r6, lr}
 8008bb8:	b96a      	cbnz	r2, 8008bd6 <strstr+0x22>
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d109      	bne.n	8008bd4 <strstr+0x20>
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0f6      	beq.n	8008bba <strstr+0x6>
 8008bcc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008bd0:	429e      	cmp	r6, r3
 8008bd2:	d0f7      	beq.n	8008bc4 <strstr+0x10>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	7803      	ldrb	r3, [r0, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1ef      	bne.n	8008bbc <strstr+0x8>
 8008bdc:	4618      	mov	r0, r3
 8008bde:	e7ec      	b.n	8008bba <strstr+0x6>

08008be0 <_localeconv_r>:
 8008be0:	4800      	ldr	r0, [pc, #0]	@ (8008be4 <_localeconv_r+0x4>)
 8008be2:	4770      	bx	lr
 8008be4:	2000023c 	.word	0x2000023c

08008be8 <_close_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d06      	ldr	r5, [pc, #24]	@ (8008c04 <_close_r+0x1c>)
 8008bec:	2300      	movs	r3, #0
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	602b      	str	r3, [r5, #0]
 8008bf4:	f7fa fa5c 	bl	80030b0 <_close>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_close_r+0x1a>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_close_r+0x1a>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	20000a4c 	.word	0x20000a4c

08008c08 <_lseek_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d07      	ldr	r5, [pc, #28]	@ (8008c28 <_lseek_r+0x20>)
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	4608      	mov	r0, r1
 8008c10:	4611      	mov	r1, r2
 8008c12:	2200      	movs	r2, #0
 8008c14:	602a      	str	r2, [r5, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f7fa fa71 	bl	80030fe <_lseek>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_lseek_r+0x1e>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_lseek_r+0x1e>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	20000a4c 	.word	0x20000a4c

08008c2c <_read_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	@ (8008c4c <_read_r+0x20>)
 8008c30:	4604      	mov	r4, r0
 8008c32:	4608      	mov	r0, r1
 8008c34:	4611      	mov	r1, r2
 8008c36:	2200      	movs	r2, #0
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f7fa f9ff 	bl	800303e <_read>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_read_r+0x1e>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_read_r+0x1e>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	20000a4c 	.word	0x20000a4c

08008c50 <_write_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d07      	ldr	r5, [pc, #28]	@ (8008c70 <_write_r+0x20>)
 8008c54:	4604      	mov	r4, r0
 8008c56:	4608      	mov	r0, r1
 8008c58:	4611      	mov	r1, r2
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	602a      	str	r2, [r5, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f7fa fa0a 	bl	8003078 <_write>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_write_r+0x1e>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_write_r+0x1e>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	20000a4c 	.word	0x20000a4c

08008c74 <__errno>:
 8008c74:	4b01      	ldr	r3, [pc, #4]	@ (8008c7c <__errno+0x8>)
 8008c76:	6818      	ldr	r0, [r3, #0]
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	200000fc 	.word	0x200000fc

08008c80 <__libc_init_array>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	4d0d      	ldr	r5, [pc, #52]	@ (8008cb8 <__libc_init_array+0x38>)
 8008c84:	4c0d      	ldr	r4, [pc, #52]	@ (8008cbc <__libc_init_array+0x3c>)
 8008c86:	1b64      	subs	r4, r4, r5
 8008c88:	10a4      	asrs	r4, r4, #2
 8008c8a:	2600      	movs	r6, #0
 8008c8c:	42a6      	cmp	r6, r4
 8008c8e:	d109      	bne.n	8008ca4 <__libc_init_array+0x24>
 8008c90:	4d0b      	ldr	r5, [pc, #44]	@ (8008cc0 <__libc_init_array+0x40>)
 8008c92:	4c0c      	ldr	r4, [pc, #48]	@ (8008cc4 <__libc_init_array+0x44>)
 8008c94:	f003 ff74 	bl	800cb80 <_init>
 8008c98:	1b64      	subs	r4, r4, r5
 8008c9a:	10a4      	asrs	r4, r4, #2
 8008c9c:	2600      	movs	r6, #0
 8008c9e:	42a6      	cmp	r6, r4
 8008ca0:	d105      	bne.n	8008cae <__libc_init_array+0x2e>
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca8:	4798      	blx	r3
 8008caa:	3601      	adds	r6, #1
 8008cac:	e7ee      	b.n	8008c8c <__libc_init_array+0xc>
 8008cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cb2:	4798      	blx	r3
 8008cb4:	3601      	adds	r6, #1
 8008cb6:	e7f2      	b.n	8008c9e <__libc_init_array+0x1e>
 8008cb8:	0800d08c 	.word	0x0800d08c
 8008cbc:	0800d08c 	.word	0x0800d08c
 8008cc0:	0800d08c 	.word	0x0800d08c
 8008cc4:	0800d090 	.word	0x0800d090

08008cc8 <__retarget_lock_init_recursive>:
 8008cc8:	4770      	bx	lr

08008cca <__retarget_lock_acquire_recursive>:
 8008cca:	4770      	bx	lr

08008ccc <__retarget_lock_release_recursive>:
 8008ccc:	4770      	bx	lr
	...

08008cd0 <nanf>:
 8008cd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008cd8 <nanf+0x8>
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	7fc00000 	.word	0x7fc00000

08008cdc <quorem>:
 8008cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce0:	6903      	ldr	r3, [r0, #16]
 8008ce2:	690c      	ldr	r4, [r1, #16]
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	4607      	mov	r7, r0
 8008ce8:	db7e      	blt.n	8008de8 <quorem+0x10c>
 8008cea:	3c01      	subs	r4, #1
 8008cec:	f101 0814 	add.w	r8, r1, #20
 8008cf0:	00a3      	lsls	r3, r4, #2
 8008cf2:	f100 0514 	add.w	r5, r0, #20
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d06:	3301      	adds	r3, #1
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d12:	d32e      	bcc.n	8008d72 <quorem+0x96>
 8008d14:	f04f 0a00 	mov.w	sl, #0
 8008d18:	46c4      	mov	ip, r8
 8008d1a:	46ae      	mov	lr, r5
 8008d1c:	46d3      	mov	fp, sl
 8008d1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d22:	b298      	uxth	r0, r3
 8008d24:	fb06 a000 	mla	r0, r6, r0, sl
 8008d28:	0c02      	lsrs	r2, r0, #16
 8008d2a:	0c1b      	lsrs	r3, r3, #16
 8008d2c:	fb06 2303 	mla	r3, r6, r3, r2
 8008d30:	f8de 2000 	ldr.w	r2, [lr]
 8008d34:	b280      	uxth	r0, r0
 8008d36:	b292      	uxth	r2, r2
 8008d38:	1a12      	subs	r2, r2, r0
 8008d3a:	445a      	add	r2, fp
 8008d3c:	f8de 0000 	ldr.w	r0, [lr]
 8008d40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d4e:	b292      	uxth	r2, r2
 8008d50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d54:	45e1      	cmp	r9, ip
 8008d56:	f84e 2b04 	str.w	r2, [lr], #4
 8008d5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d5e:	d2de      	bcs.n	8008d1e <quorem+0x42>
 8008d60:	9b00      	ldr	r3, [sp, #0]
 8008d62:	58eb      	ldr	r3, [r5, r3]
 8008d64:	b92b      	cbnz	r3, 8008d72 <quorem+0x96>
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	3b04      	subs	r3, #4
 8008d6a:	429d      	cmp	r5, r3
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	d32f      	bcc.n	8008dd0 <quorem+0xf4>
 8008d70:	613c      	str	r4, [r7, #16]
 8008d72:	4638      	mov	r0, r7
 8008d74:	f001 f9c4 	bl	800a100 <__mcmp>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	db25      	blt.n	8008dc8 <quorem+0xec>
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d84:	f8d1 c000 	ldr.w	ip, [r1]
 8008d88:	fa1f fe82 	uxth.w	lr, r2
 8008d8c:	fa1f f38c 	uxth.w	r3, ip
 8008d90:	eba3 030e 	sub.w	r3, r3, lr
 8008d94:	4403      	add	r3, r0
 8008d96:	0c12      	lsrs	r2, r2, #16
 8008d98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008da6:	45c1      	cmp	r9, r8
 8008da8:	f841 3b04 	str.w	r3, [r1], #4
 8008dac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008db0:	d2e6      	bcs.n	8008d80 <quorem+0xa4>
 8008db2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008db6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dba:	b922      	cbnz	r2, 8008dc6 <quorem+0xea>
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	d30b      	bcc.n	8008ddc <quorem+0x100>
 8008dc4:	613c      	str	r4, [r7, #16]
 8008dc6:	3601      	adds	r6, #1
 8008dc8:	4630      	mov	r0, r6
 8008dca:	b003      	add	sp, #12
 8008dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	3b04      	subs	r3, #4
 8008dd4:	2a00      	cmp	r2, #0
 8008dd6:	d1cb      	bne.n	8008d70 <quorem+0x94>
 8008dd8:	3c01      	subs	r4, #1
 8008dda:	e7c6      	b.n	8008d6a <quorem+0x8e>
 8008ddc:	6812      	ldr	r2, [r2, #0]
 8008dde:	3b04      	subs	r3, #4
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	d1ef      	bne.n	8008dc4 <quorem+0xe8>
 8008de4:	3c01      	subs	r4, #1
 8008de6:	e7ea      	b.n	8008dbe <quorem+0xe2>
 8008de8:	2000      	movs	r0, #0
 8008dea:	e7ee      	b.n	8008dca <quorem+0xee>
 8008dec:	0000      	movs	r0, r0
	...

08008df0 <_dtoa_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	69c7      	ldr	r7, [r0, #28]
 8008df6:	b099      	sub	sp, #100	@ 0x64
 8008df8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008dfc:	ec55 4b10 	vmov	r4, r5, d0
 8008e00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008e02:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e04:	4683      	mov	fp, r0
 8008e06:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e0a:	b97f      	cbnz	r7, 8008e2c <_dtoa_r+0x3c>
 8008e0c:	2010      	movs	r0, #16
 8008e0e:	f000 fdfd 	bl	8009a0c <malloc>
 8008e12:	4602      	mov	r2, r0
 8008e14:	f8cb 001c 	str.w	r0, [fp, #28]
 8008e18:	b920      	cbnz	r0, 8008e24 <_dtoa_r+0x34>
 8008e1a:	4ba7      	ldr	r3, [pc, #668]	@ (80090b8 <_dtoa_r+0x2c8>)
 8008e1c:	21ef      	movs	r1, #239	@ 0xef
 8008e1e:	48a7      	ldr	r0, [pc, #668]	@ (80090bc <_dtoa_r+0x2cc>)
 8008e20:	f002 ffc6 	bl	800bdb0 <__assert_func>
 8008e24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e28:	6007      	str	r7, [r0, #0]
 8008e2a:	60c7      	str	r7, [r0, #12]
 8008e2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e30:	6819      	ldr	r1, [r3, #0]
 8008e32:	b159      	cbz	r1, 8008e4c <_dtoa_r+0x5c>
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	604a      	str	r2, [r1, #4]
 8008e38:	2301      	movs	r3, #1
 8008e3a:	4093      	lsls	r3, r2
 8008e3c:	608b      	str	r3, [r1, #8]
 8008e3e:	4658      	mov	r0, fp
 8008e40:	f000 feda 	bl	8009bf8 <_Bfree>
 8008e44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	1e2b      	subs	r3, r5, #0
 8008e4e:	bfb9      	ittee	lt
 8008e50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e54:	9303      	strlt	r3, [sp, #12]
 8008e56:	2300      	movge	r3, #0
 8008e58:	6033      	strge	r3, [r6, #0]
 8008e5a:	9f03      	ldr	r7, [sp, #12]
 8008e5c:	4b98      	ldr	r3, [pc, #608]	@ (80090c0 <_dtoa_r+0x2d0>)
 8008e5e:	bfbc      	itt	lt
 8008e60:	2201      	movlt	r2, #1
 8008e62:	6032      	strlt	r2, [r6, #0]
 8008e64:	43bb      	bics	r3, r7
 8008e66:	d112      	bne.n	8008e8e <_dtoa_r+0x9e>
 8008e68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e74:	4323      	orrs	r3, r4
 8008e76:	f000 854d 	beq.w	8009914 <_dtoa_r+0xb24>
 8008e7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80090d4 <_dtoa_r+0x2e4>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 854f 	beq.w	8009924 <_dtoa_r+0xb34>
 8008e86:	f10a 0303 	add.w	r3, sl, #3
 8008e8a:	f000 bd49 	b.w	8009920 <_dtoa_r+0xb30>
 8008e8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e92:	2200      	movs	r2, #0
 8008e94:	ec51 0b17 	vmov	r0, r1, d7
 8008e98:	2300      	movs	r3, #0
 8008e9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e9e:	f7f7 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ea2:	4680      	mov	r8, r0
 8008ea4:	b158      	cbz	r0, 8008ebe <_dtoa_r+0xce>
 8008ea6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008eae:	b113      	cbz	r3, 8008eb6 <_dtoa_r+0xc6>
 8008eb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008eb2:	4b84      	ldr	r3, [pc, #528]	@ (80090c4 <_dtoa_r+0x2d4>)
 8008eb4:	6013      	str	r3, [r2, #0]
 8008eb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80090d8 <_dtoa_r+0x2e8>
 8008eba:	f000 bd33 	b.w	8009924 <_dtoa_r+0xb34>
 8008ebe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008ec2:	aa16      	add	r2, sp, #88	@ 0x58
 8008ec4:	a917      	add	r1, sp, #92	@ 0x5c
 8008ec6:	4658      	mov	r0, fp
 8008ec8:	f001 fa3a 	bl	800a340 <__d2b>
 8008ecc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ed0:	4681      	mov	r9, r0
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	d077      	beq.n	8008fc6 <_dtoa_r+0x1d6>
 8008ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ed8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ee4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ee8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008eec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4b74      	ldr	r3, [pc, #464]	@ (80090c8 <_dtoa_r+0x2d8>)
 8008ef6:	f7f7 f9c7 	bl	8000288 <__aeabi_dsub>
 8008efa:	a369      	add	r3, pc, #420	@ (adr r3, 80090a0 <_dtoa_r+0x2b0>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f7f7 fb7a 	bl	80005f8 <__aeabi_dmul>
 8008f04:	a368      	add	r3, pc, #416	@ (adr r3, 80090a8 <_dtoa_r+0x2b8>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f7f7 f9bf 	bl	800028c <__adddf3>
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4630      	mov	r0, r6
 8008f12:	460d      	mov	r5, r1
 8008f14:	f7f7 fb06 	bl	8000524 <__aeabi_i2d>
 8008f18:	a365      	add	r3, pc, #404	@ (adr r3, 80090b0 <_dtoa_r+0x2c0>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	f7f7 fb6b 	bl	80005f8 <__aeabi_dmul>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4620      	mov	r0, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7f7 f9af 	bl	800028c <__adddf3>
 8008f2e:	4604      	mov	r4, r0
 8008f30:	460d      	mov	r5, r1
 8008f32:	f7f7 fe11 	bl	8000b58 <__aeabi_d2iz>
 8008f36:	2200      	movs	r2, #0
 8008f38:	4607      	mov	r7, r0
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7f7 fdcc 	bl	8000adc <__aeabi_dcmplt>
 8008f44:	b140      	cbz	r0, 8008f58 <_dtoa_r+0x168>
 8008f46:	4638      	mov	r0, r7
 8008f48:	f7f7 faec 	bl	8000524 <__aeabi_i2d>
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	462b      	mov	r3, r5
 8008f50:	f7f7 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f54:	b900      	cbnz	r0, 8008f58 <_dtoa_r+0x168>
 8008f56:	3f01      	subs	r7, #1
 8008f58:	2f16      	cmp	r7, #22
 8008f5a:	d851      	bhi.n	8009000 <_dtoa_r+0x210>
 8008f5c:	4b5b      	ldr	r3, [pc, #364]	@ (80090cc <_dtoa_r+0x2dc>)
 8008f5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f6a:	f7f7 fdb7 	bl	8000adc <__aeabi_dcmplt>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d048      	beq.n	8009004 <_dtoa_r+0x214>
 8008f72:	3f01      	subs	r7, #1
 8008f74:	2300      	movs	r3, #0
 8008f76:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f7a:	1b9b      	subs	r3, r3, r6
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	bf44      	itt	mi
 8008f80:	f1c3 0801 	rsbmi	r8, r3, #1
 8008f84:	2300      	movmi	r3, #0
 8008f86:	9208      	str	r2, [sp, #32]
 8008f88:	bf54      	ite	pl
 8008f8a:	f04f 0800 	movpl.w	r8, #0
 8008f8e:	9308      	strmi	r3, [sp, #32]
 8008f90:	2f00      	cmp	r7, #0
 8008f92:	db39      	blt.n	8009008 <_dtoa_r+0x218>
 8008f94:	9b08      	ldr	r3, [sp, #32]
 8008f96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f98:	443b      	add	r3, r7
 8008f9a:	9308      	str	r3, [sp, #32]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa2:	2b09      	cmp	r3, #9
 8008fa4:	d864      	bhi.n	8009070 <_dtoa_r+0x280>
 8008fa6:	2b05      	cmp	r3, #5
 8008fa8:	bfc4      	itt	gt
 8008faa:	3b04      	subgt	r3, #4
 8008fac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb0:	f1a3 0302 	sub.w	r3, r3, #2
 8008fb4:	bfcc      	ite	gt
 8008fb6:	2400      	movgt	r4, #0
 8008fb8:	2401      	movle	r4, #1
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d863      	bhi.n	8009086 <_dtoa_r+0x296>
 8008fbe:	e8df f003 	tbb	[pc, r3]
 8008fc2:	372a      	.short	0x372a
 8008fc4:	5535      	.short	0x5535
 8008fc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008fca:	441e      	add	r6, r3
 8008fcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	bfc1      	itttt	gt
 8008fd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008fd8:	409f      	lslgt	r7, r3
 8008fda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008fde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008fe2:	bfd6      	itet	le
 8008fe4:	f1c3 0320 	rsble	r3, r3, #32
 8008fe8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008fec:	fa04 f003 	lslle.w	r0, r4, r3
 8008ff0:	f7f7 fa88 	bl	8000504 <__aeabi_ui2d>
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008ffa:	3e01      	subs	r6, #1
 8008ffc:	9214      	str	r2, [sp, #80]	@ 0x50
 8008ffe:	e777      	b.n	8008ef0 <_dtoa_r+0x100>
 8009000:	2301      	movs	r3, #1
 8009002:	e7b8      	b.n	8008f76 <_dtoa_r+0x186>
 8009004:	9012      	str	r0, [sp, #72]	@ 0x48
 8009006:	e7b7      	b.n	8008f78 <_dtoa_r+0x188>
 8009008:	427b      	negs	r3, r7
 800900a:	930a      	str	r3, [sp, #40]	@ 0x28
 800900c:	2300      	movs	r3, #0
 800900e:	eba8 0807 	sub.w	r8, r8, r7
 8009012:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009014:	e7c4      	b.n	8008fa0 <_dtoa_r+0x1b0>
 8009016:	2300      	movs	r3, #0
 8009018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800901a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	dc35      	bgt.n	800908c <_dtoa_r+0x29c>
 8009020:	2301      	movs	r3, #1
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	9307      	str	r3, [sp, #28]
 8009026:	461a      	mov	r2, r3
 8009028:	920e      	str	r2, [sp, #56]	@ 0x38
 800902a:	e00b      	b.n	8009044 <_dtoa_r+0x254>
 800902c:	2301      	movs	r3, #1
 800902e:	e7f3      	b.n	8009018 <_dtoa_r+0x228>
 8009030:	2300      	movs	r3, #0
 8009032:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009036:	18fb      	adds	r3, r7, r3
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	3301      	adds	r3, #1
 800903c:	2b01      	cmp	r3, #1
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	bfb8      	it	lt
 8009042:	2301      	movlt	r3, #1
 8009044:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009048:	2100      	movs	r1, #0
 800904a:	2204      	movs	r2, #4
 800904c:	f102 0514 	add.w	r5, r2, #20
 8009050:	429d      	cmp	r5, r3
 8009052:	d91f      	bls.n	8009094 <_dtoa_r+0x2a4>
 8009054:	6041      	str	r1, [r0, #4]
 8009056:	4658      	mov	r0, fp
 8009058:	f000 fd8e 	bl	8009b78 <_Balloc>
 800905c:	4682      	mov	sl, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	d13c      	bne.n	80090dc <_dtoa_r+0x2ec>
 8009062:	4b1b      	ldr	r3, [pc, #108]	@ (80090d0 <_dtoa_r+0x2e0>)
 8009064:	4602      	mov	r2, r0
 8009066:	f240 11af 	movw	r1, #431	@ 0x1af
 800906a:	e6d8      	b.n	8008e1e <_dtoa_r+0x2e>
 800906c:	2301      	movs	r3, #1
 800906e:	e7e0      	b.n	8009032 <_dtoa_r+0x242>
 8009070:	2401      	movs	r4, #1
 8009072:	2300      	movs	r3, #0
 8009074:	9309      	str	r3, [sp, #36]	@ 0x24
 8009076:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009078:	f04f 33ff 	mov.w	r3, #4294967295
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	9307      	str	r3, [sp, #28]
 8009080:	2200      	movs	r2, #0
 8009082:	2312      	movs	r3, #18
 8009084:	e7d0      	b.n	8009028 <_dtoa_r+0x238>
 8009086:	2301      	movs	r3, #1
 8009088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800908a:	e7f5      	b.n	8009078 <_dtoa_r+0x288>
 800908c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	9307      	str	r3, [sp, #28]
 8009092:	e7d7      	b.n	8009044 <_dtoa_r+0x254>
 8009094:	3101      	adds	r1, #1
 8009096:	0052      	lsls	r2, r2, #1
 8009098:	e7d8      	b.n	800904c <_dtoa_r+0x25c>
 800909a:	bf00      	nop
 800909c:	f3af 8000 	nop.w
 80090a0:	636f4361 	.word	0x636f4361
 80090a4:	3fd287a7 	.word	0x3fd287a7
 80090a8:	8b60c8b3 	.word	0x8b60c8b3
 80090ac:	3fc68a28 	.word	0x3fc68a28
 80090b0:	509f79fb 	.word	0x509f79fb
 80090b4:	3fd34413 	.word	0x3fd34413
 80090b8:	0800cc80 	.word	0x0800cc80
 80090bc:	0800cc97 	.word	0x0800cc97
 80090c0:	7ff00000 	.word	0x7ff00000
 80090c4:	0800cfd9 	.word	0x0800cfd9
 80090c8:	3ff80000 	.word	0x3ff80000
 80090cc:	0800cd90 	.word	0x0800cd90
 80090d0:	0800ccef 	.word	0x0800ccef
 80090d4:	0800cc7c 	.word	0x0800cc7c
 80090d8:	0800cfd8 	.word	0x0800cfd8
 80090dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090e0:	6018      	str	r0, [r3, #0]
 80090e2:	9b07      	ldr	r3, [sp, #28]
 80090e4:	2b0e      	cmp	r3, #14
 80090e6:	f200 80a4 	bhi.w	8009232 <_dtoa_r+0x442>
 80090ea:	2c00      	cmp	r4, #0
 80090ec:	f000 80a1 	beq.w	8009232 <_dtoa_r+0x442>
 80090f0:	2f00      	cmp	r7, #0
 80090f2:	dd33      	ble.n	800915c <_dtoa_r+0x36c>
 80090f4:	4bad      	ldr	r3, [pc, #692]	@ (80093ac <_dtoa_r+0x5bc>)
 80090f6:	f007 020f 	and.w	r2, r7, #15
 80090fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090fe:	ed93 7b00 	vldr	d7, [r3]
 8009102:	05f8      	lsls	r0, r7, #23
 8009104:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009108:	ea4f 1427 	mov.w	r4, r7, asr #4
 800910c:	d516      	bpl.n	800913c <_dtoa_r+0x34c>
 800910e:	4ba8      	ldr	r3, [pc, #672]	@ (80093b0 <_dtoa_r+0x5c0>)
 8009110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009118:	f7f7 fb98 	bl	800084c <__aeabi_ddiv>
 800911c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009120:	f004 040f 	and.w	r4, r4, #15
 8009124:	2603      	movs	r6, #3
 8009126:	4da2      	ldr	r5, [pc, #648]	@ (80093b0 <_dtoa_r+0x5c0>)
 8009128:	b954      	cbnz	r4, 8009140 <_dtoa_r+0x350>
 800912a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800912e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009132:	f7f7 fb8b 	bl	800084c <__aeabi_ddiv>
 8009136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800913a:	e028      	b.n	800918e <_dtoa_r+0x39e>
 800913c:	2602      	movs	r6, #2
 800913e:	e7f2      	b.n	8009126 <_dtoa_r+0x336>
 8009140:	07e1      	lsls	r1, r4, #31
 8009142:	d508      	bpl.n	8009156 <_dtoa_r+0x366>
 8009144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009148:	e9d5 2300 	ldrd	r2, r3, [r5]
 800914c:	f7f7 fa54 	bl	80005f8 <__aeabi_dmul>
 8009150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009154:	3601      	adds	r6, #1
 8009156:	1064      	asrs	r4, r4, #1
 8009158:	3508      	adds	r5, #8
 800915a:	e7e5      	b.n	8009128 <_dtoa_r+0x338>
 800915c:	f000 80d2 	beq.w	8009304 <_dtoa_r+0x514>
 8009160:	427c      	negs	r4, r7
 8009162:	4b92      	ldr	r3, [pc, #584]	@ (80093ac <_dtoa_r+0x5bc>)
 8009164:	4d92      	ldr	r5, [pc, #584]	@ (80093b0 <_dtoa_r+0x5c0>)
 8009166:	f004 020f 	and.w	r2, r4, #15
 800916a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009176:	f7f7 fa3f 	bl	80005f8 <__aeabi_dmul>
 800917a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800917e:	1124      	asrs	r4, r4, #4
 8009180:	2300      	movs	r3, #0
 8009182:	2602      	movs	r6, #2
 8009184:	2c00      	cmp	r4, #0
 8009186:	f040 80b2 	bne.w	80092ee <_dtoa_r+0x4fe>
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1d3      	bne.n	8009136 <_dtoa_r+0x346>
 800918e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009190:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 80b7 	beq.w	8009308 <_dtoa_r+0x518>
 800919a:	4b86      	ldr	r3, [pc, #536]	@ (80093b4 <_dtoa_r+0x5c4>)
 800919c:	2200      	movs	r2, #0
 800919e:	4620      	mov	r0, r4
 80091a0:	4629      	mov	r1, r5
 80091a2:	f7f7 fc9b 	bl	8000adc <__aeabi_dcmplt>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f000 80ae 	beq.w	8009308 <_dtoa_r+0x518>
 80091ac:	9b07      	ldr	r3, [sp, #28]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 80aa 	beq.w	8009308 <_dtoa_r+0x518>
 80091b4:	9b00      	ldr	r3, [sp, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dd37      	ble.n	800922a <_dtoa_r+0x43a>
 80091ba:	1e7b      	subs	r3, r7, #1
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	4620      	mov	r0, r4
 80091c0:	4b7d      	ldr	r3, [pc, #500]	@ (80093b8 <_dtoa_r+0x5c8>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	4629      	mov	r1, r5
 80091c6:	f7f7 fa17 	bl	80005f8 <__aeabi_dmul>
 80091ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ce:	9c00      	ldr	r4, [sp, #0]
 80091d0:	3601      	adds	r6, #1
 80091d2:	4630      	mov	r0, r6
 80091d4:	f7f7 f9a6 	bl	8000524 <__aeabi_i2d>
 80091d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091dc:	f7f7 fa0c 	bl	80005f8 <__aeabi_dmul>
 80091e0:	4b76      	ldr	r3, [pc, #472]	@ (80093bc <_dtoa_r+0x5cc>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	f7f7 f852 	bl	800028c <__adddf3>
 80091e8:	4605      	mov	r5, r0
 80091ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091ee:	2c00      	cmp	r4, #0
 80091f0:	f040 808d 	bne.w	800930e <_dtoa_r+0x51e>
 80091f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091f8:	4b71      	ldr	r3, [pc, #452]	@ (80093c0 <_dtoa_r+0x5d0>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	f7f7 f844 	bl	8000288 <__aeabi_dsub>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009208:	462a      	mov	r2, r5
 800920a:	4633      	mov	r3, r6
 800920c:	f7f7 fc84 	bl	8000b18 <__aeabi_dcmpgt>
 8009210:	2800      	cmp	r0, #0
 8009212:	f040 828b 	bne.w	800972c <_dtoa_r+0x93c>
 8009216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800921a:	462a      	mov	r2, r5
 800921c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009220:	f7f7 fc5c 	bl	8000adc <__aeabi_dcmplt>
 8009224:	2800      	cmp	r0, #0
 8009226:	f040 8128 	bne.w	800947a <_dtoa_r+0x68a>
 800922a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800922e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009234:	2b00      	cmp	r3, #0
 8009236:	f2c0 815a 	blt.w	80094ee <_dtoa_r+0x6fe>
 800923a:	2f0e      	cmp	r7, #14
 800923c:	f300 8157 	bgt.w	80094ee <_dtoa_r+0x6fe>
 8009240:	4b5a      	ldr	r3, [pc, #360]	@ (80093ac <_dtoa_r+0x5bc>)
 8009242:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009246:	ed93 7b00 	vldr	d7, [r3]
 800924a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800924c:	2b00      	cmp	r3, #0
 800924e:	ed8d 7b00 	vstr	d7, [sp]
 8009252:	da03      	bge.n	800925c <_dtoa_r+0x46c>
 8009254:	9b07      	ldr	r3, [sp, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f340 8101 	ble.w	800945e <_dtoa_r+0x66e>
 800925c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009260:	4656      	mov	r6, sl
 8009262:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009266:	4620      	mov	r0, r4
 8009268:	4629      	mov	r1, r5
 800926a:	f7f7 faef 	bl	800084c <__aeabi_ddiv>
 800926e:	f7f7 fc73 	bl	8000b58 <__aeabi_d2iz>
 8009272:	4680      	mov	r8, r0
 8009274:	f7f7 f956 	bl	8000524 <__aeabi_i2d>
 8009278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800927c:	f7f7 f9bc 	bl	80005f8 <__aeabi_dmul>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	4620      	mov	r0, r4
 8009286:	4629      	mov	r1, r5
 8009288:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800928c:	f7f6 fffc 	bl	8000288 <__aeabi_dsub>
 8009290:	f806 4b01 	strb.w	r4, [r6], #1
 8009294:	9d07      	ldr	r5, [sp, #28]
 8009296:	eba6 040a 	sub.w	r4, r6, sl
 800929a:	42a5      	cmp	r5, r4
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	f040 8117 	bne.w	80094d2 <_dtoa_r+0x6e2>
 80092a4:	f7f6 fff2 	bl	800028c <__adddf3>
 80092a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092ac:	4604      	mov	r4, r0
 80092ae:	460d      	mov	r5, r1
 80092b0:	f7f7 fc32 	bl	8000b18 <__aeabi_dcmpgt>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f040 80f9 	bne.w	80094ac <_dtoa_r+0x6bc>
 80092ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f7 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 80092c6:	b118      	cbz	r0, 80092d0 <_dtoa_r+0x4e0>
 80092c8:	f018 0f01 	tst.w	r8, #1
 80092cc:	f040 80ee 	bne.w	80094ac <_dtoa_r+0x6bc>
 80092d0:	4649      	mov	r1, r9
 80092d2:	4658      	mov	r0, fp
 80092d4:	f000 fc90 	bl	8009bf8 <_Bfree>
 80092d8:	2300      	movs	r3, #0
 80092da:	7033      	strb	r3, [r6, #0]
 80092dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092de:	3701      	adds	r7, #1
 80092e0:	601f      	str	r7, [r3, #0]
 80092e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 831d 	beq.w	8009924 <_dtoa_r+0xb34>
 80092ea:	601e      	str	r6, [r3, #0]
 80092ec:	e31a      	b.n	8009924 <_dtoa_r+0xb34>
 80092ee:	07e2      	lsls	r2, r4, #31
 80092f0:	d505      	bpl.n	80092fe <_dtoa_r+0x50e>
 80092f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092f6:	f7f7 f97f 	bl	80005f8 <__aeabi_dmul>
 80092fa:	3601      	adds	r6, #1
 80092fc:	2301      	movs	r3, #1
 80092fe:	1064      	asrs	r4, r4, #1
 8009300:	3508      	adds	r5, #8
 8009302:	e73f      	b.n	8009184 <_dtoa_r+0x394>
 8009304:	2602      	movs	r6, #2
 8009306:	e742      	b.n	800918e <_dtoa_r+0x39e>
 8009308:	9c07      	ldr	r4, [sp, #28]
 800930a:	9704      	str	r7, [sp, #16]
 800930c:	e761      	b.n	80091d2 <_dtoa_r+0x3e2>
 800930e:	4b27      	ldr	r3, [pc, #156]	@ (80093ac <_dtoa_r+0x5bc>)
 8009310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009316:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800931a:	4454      	add	r4, sl
 800931c:	2900      	cmp	r1, #0
 800931e:	d053      	beq.n	80093c8 <_dtoa_r+0x5d8>
 8009320:	4928      	ldr	r1, [pc, #160]	@ (80093c4 <_dtoa_r+0x5d4>)
 8009322:	2000      	movs	r0, #0
 8009324:	f7f7 fa92 	bl	800084c <__aeabi_ddiv>
 8009328:	4633      	mov	r3, r6
 800932a:	462a      	mov	r2, r5
 800932c:	f7f6 ffac 	bl	8000288 <__aeabi_dsub>
 8009330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009334:	4656      	mov	r6, sl
 8009336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800933a:	f7f7 fc0d 	bl	8000b58 <__aeabi_d2iz>
 800933e:	4605      	mov	r5, r0
 8009340:	f7f7 f8f0 	bl	8000524 <__aeabi_i2d>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800934c:	f7f6 ff9c 	bl	8000288 <__aeabi_dsub>
 8009350:	3530      	adds	r5, #48	@ 0x30
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800935a:	f806 5b01 	strb.w	r5, [r6], #1
 800935e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009362:	f7f7 fbbb 	bl	8000adc <__aeabi_dcmplt>
 8009366:	2800      	cmp	r0, #0
 8009368:	d171      	bne.n	800944e <_dtoa_r+0x65e>
 800936a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800936e:	4911      	ldr	r1, [pc, #68]	@ (80093b4 <_dtoa_r+0x5c4>)
 8009370:	2000      	movs	r0, #0
 8009372:	f7f6 ff89 	bl	8000288 <__aeabi_dsub>
 8009376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800937a:	f7f7 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800937e:	2800      	cmp	r0, #0
 8009380:	f040 8095 	bne.w	80094ae <_dtoa_r+0x6be>
 8009384:	42a6      	cmp	r6, r4
 8009386:	f43f af50 	beq.w	800922a <_dtoa_r+0x43a>
 800938a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800938e:	4b0a      	ldr	r3, [pc, #40]	@ (80093b8 <_dtoa_r+0x5c8>)
 8009390:	2200      	movs	r2, #0
 8009392:	f7f7 f931 	bl	80005f8 <__aeabi_dmul>
 8009396:	4b08      	ldr	r3, [pc, #32]	@ (80093b8 <_dtoa_r+0x5c8>)
 8009398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800939c:	2200      	movs	r2, #0
 800939e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093a2:	f7f7 f929 	bl	80005f8 <__aeabi_dmul>
 80093a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093aa:	e7c4      	b.n	8009336 <_dtoa_r+0x546>
 80093ac:	0800cd90 	.word	0x0800cd90
 80093b0:	0800cd68 	.word	0x0800cd68
 80093b4:	3ff00000 	.word	0x3ff00000
 80093b8:	40240000 	.word	0x40240000
 80093bc:	401c0000 	.word	0x401c0000
 80093c0:	40140000 	.word	0x40140000
 80093c4:	3fe00000 	.word	0x3fe00000
 80093c8:	4631      	mov	r1, r6
 80093ca:	4628      	mov	r0, r5
 80093cc:	f7f7 f914 	bl	80005f8 <__aeabi_dmul>
 80093d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80093d6:	4656      	mov	r6, sl
 80093d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093dc:	f7f7 fbbc 	bl	8000b58 <__aeabi_d2iz>
 80093e0:	4605      	mov	r5, r0
 80093e2:	f7f7 f89f 	bl	8000524 <__aeabi_i2d>
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ee:	f7f6 ff4b 	bl	8000288 <__aeabi_dsub>
 80093f2:	3530      	adds	r5, #48	@ 0x30
 80093f4:	f806 5b01 	strb.w	r5, [r6], #1
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	42a6      	cmp	r6, r4
 80093fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	d124      	bne.n	8009452 <_dtoa_r+0x662>
 8009408:	4bac      	ldr	r3, [pc, #688]	@ (80096bc <_dtoa_r+0x8cc>)
 800940a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800940e:	f7f6 ff3d 	bl	800028c <__adddf3>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800941a:	f7f7 fb7d 	bl	8000b18 <__aeabi_dcmpgt>
 800941e:	2800      	cmp	r0, #0
 8009420:	d145      	bne.n	80094ae <_dtoa_r+0x6be>
 8009422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009426:	49a5      	ldr	r1, [pc, #660]	@ (80096bc <_dtoa_r+0x8cc>)
 8009428:	2000      	movs	r0, #0
 800942a:	f7f6 ff2d 	bl	8000288 <__aeabi_dsub>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009436:	f7f7 fb51 	bl	8000adc <__aeabi_dcmplt>
 800943a:	2800      	cmp	r0, #0
 800943c:	f43f aef5 	beq.w	800922a <_dtoa_r+0x43a>
 8009440:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009442:	1e73      	subs	r3, r6, #1
 8009444:	9315      	str	r3, [sp, #84]	@ 0x54
 8009446:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800944a:	2b30      	cmp	r3, #48	@ 0x30
 800944c:	d0f8      	beq.n	8009440 <_dtoa_r+0x650>
 800944e:	9f04      	ldr	r7, [sp, #16]
 8009450:	e73e      	b.n	80092d0 <_dtoa_r+0x4e0>
 8009452:	4b9b      	ldr	r3, [pc, #620]	@ (80096c0 <_dtoa_r+0x8d0>)
 8009454:	f7f7 f8d0 	bl	80005f8 <__aeabi_dmul>
 8009458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800945c:	e7bc      	b.n	80093d8 <_dtoa_r+0x5e8>
 800945e:	d10c      	bne.n	800947a <_dtoa_r+0x68a>
 8009460:	4b98      	ldr	r3, [pc, #608]	@ (80096c4 <_dtoa_r+0x8d4>)
 8009462:	2200      	movs	r2, #0
 8009464:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009468:	f7f7 f8c6 	bl	80005f8 <__aeabi_dmul>
 800946c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009470:	f7f7 fb48 	bl	8000b04 <__aeabi_dcmpge>
 8009474:	2800      	cmp	r0, #0
 8009476:	f000 8157 	beq.w	8009728 <_dtoa_r+0x938>
 800947a:	2400      	movs	r4, #0
 800947c:	4625      	mov	r5, r4
 800947e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009480:	43db      	mvns	r3, r3
 8009482:	9304      	str	r3, [sp, #16]
 8009484:	4656      	mov	r6, sl
 8009486:	2700      	movs	r7, #0
 8009488:	4621      	mov	r1, r4
 800948a:	4658      	mov	r0, fp
 800948c:	f000 fbb4 	bl	8009bf8 <_Bfree>
 8009490:	2d00      	cmp	r5, #0
 8009492:	d0dc      	beq.n	800944e <_dtoa_r+0x65e>
 8009494:	b12f      	cbz	r7, 80094a2 <_dtoa_r+0x6b2>
 8009496:	42af      	cmp	r7, r5
 8009498:	d003      	beq.n	80094a2 <_dtoa_r+0x6b2>
 800949a:	4639      	mov	r1, r7
 800949c:	4658      	mov	r0, fp
 800949e:	f000 fbab 	bl	8009bf8 <_Bfree>
 80094a2:	4629      	mov	r1, r5
 80094a4:	4658      	mov	r0, fp
 80094a6:	f000 fba7 	bl	8009bf8 <_Bfree>
 80094aa:	e7d0      	b.n	800944e <_dtoa_r+0x65e>
 80094ac:	9704      	str	r7, [sp, #16]
 80094ae:	4633      	mov	r3, r6
 80094b0:	461e      	mov	r6, r3
 80094b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094b6:	2a39      	cmp	r2, #57	@ 0x39
 80094b8:	d107      	bne.n	80094ca <_dtoa_r+0x6da>
 80094ba:	459a      	cmp	sl, r3
 80094bc:	d1f8      	bne.n	80094b0 <_dtoa_r+0x6c0>
 80094be:	9a04      	ldr	r2, [sp, #16]
 80094c0:	3201      	adds	r2, #1
 80094c2:	9204      	str	r2, [sp, #16]
 80094c4:	2230      	movs	r2, #48	@ 0x30
 80094c6:	f88a 2000 	strb.w	r2, [sl]
 80094ca:	781a      	ldrb	r2, [r3, #0]
 80094cc:	3201      	adds	r2, #1
 80094ce:	701a      	strb	r2, [r3, #0]
 80094d0:	e7bd      	b.n	800944e <_dtoa_r+0x65e>
 80094d2:	4b7b      	ldr	r3, [pc, #492]	@ (80096c0 <_dtoa_r+0x8d0>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	f7f7 f88f 	bl	80005f8 <__aeabi_dmul>
 80094da:	2200      	movs	r2, #0
 80094dc:	2300      	movs	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	460d      	mov	r5, r1
 80094e2:	f7f7 faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f43f aebb 	beq.w	8009262 <_dtoa_r+0x472>
 80094ec:	e6f0      	b.n	80092d0 <_dtoa_r+0x4e0>
 80094ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	f000 80db 	beq.w	80096ac <_dtoa_r+0x8bc>
 80094f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094f8:	2a01      	cmp	r2, #1
 80094fa:	f300 80bf 	bgt.w	800967c <_dtoa_r+0x88c>
 80094fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009500:	2a00      	cmp	r2, #0
 8009502:	f000 80b7 	beq.w	8009674 <_dtoa_r+0x884>
 8009506:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800950a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800950c:	4646      	mov	r6, r8
 800950e:	9a08      	ldr	r2, [sp, #32]
 8009510:	2101      	movs	r1, #1
 8009512:	441a      	add	r2, r3
 8009514:	4658      	mov	r0, fp
 8009516:	4498      	add	r8, r3
 8009518:	9208      	str	r2, [sp, #32]
 800951a:	f000 fc6b 	bl	8009df4 <__i2b>
 800951e:	4605      	mov	r5, r0
 8009520:	b15e      	cbz	r6, 800953a <_dtoa_r+0x74a>
 8009522:	9b08      	ldr	r3, [sp, #32]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dd08      	ble.n	800953a <_dtoa_r+0x74a>
 8009528:	42b3      	cmp	r3, r6
 800952a:	9a08      	ldr	r2, [sp, #32]
 800952c:	bfa8      	it	ge
 800952e:	4633      	movge	r3, r6
 8009530:	eba8 0803 	sub.w	r8, r8, r3
 8009534:	1af6      	subs	r6, r6, r3
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	9308      	str	r3, [sp, #32]
 800953a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800953c:	b1f3      	cbz	r3, 800957c <_dtoa_r+0x78c>
 800953e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80b7 	beq.w	80096b4 <_dtoa_r+0x8c4>
 8009546:	b18c      	cbz	r4, 800956c <_dtoa_r+0x77c>
 8009548:	4629      	mov	r1, r5
 800954a:	4622      	mov	r2, r4
 800954c:	4658      	mov	r0, fp
 800954e:	f000 fd11 	bl	8009f74 <__pow5mult>
 8009552:	464a      	mov	r2, r9
 8009554:	4601      	mov	r1, r0
 8009556:	4605      	mov	r5, r0
 8009558:	4658      	mov	r0, fp
 800955a:	f000 fc61 	bl	8009e20 <__multiply>
 800955e:	4649      	mov	r1, r9
 8009560:	9004      	str	r0, [sp, #16]
 8009562:	4658      	mov	r0, fp
 8009564:	f000 fb48 	bl	8009bf8 <_Bfree>
 8009568:	9b04      	ldr	r3, [sp, #16]
 800956a:	4699      	mov	r9, r3
 800956c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800956e:	1b1a      	subs	r2, r3, r4
 8009570:	d004      	beq.n	800957c <_dtoa_r+0x78c>
 8009572:	4649      	mov	r1, r9
 8009574:	4658      	mov	r0, fp
 8009576:	f000 fcfd 	bl	8009f74 <__pow5mult>
 800957a:	4681      	mov	r9, r0
 800957c:	2101      	movs	r1, #1
 800957e:	4658      	mov	r0, fp
 8009580:	f000 fc38 	bl	8009df4 <__i2b>
 8009584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009586:	4604      	mov	r4, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 81cf 	beq.w	800992c <_dtoa_r+0xb3c>
 800958e:	461a      	mov	r2, r3
 8009590:	4601      	mov	r1, r0
 8009592:	4658      	mov	r0, fp
 8009594:	f000 fcee 	bl	8009f74 <__pow5mult>
 8009598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800959a:	2b01      	cmp	r3, #1
 800959c:	4604      	mov	r4, r0
 800959e:	f300 8095 	bgt.w	80096cc <_dtoa_r+0x8dc>
 80095a2:	9b02      	ldr	r3, [sp, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f040 8087 	bne.w	80096b8 <_dtoa_r+0x8c8>
 80095aa:	9b03      	ldr	r3, [sp, #12]
 80095ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f040 8089 	bne.w	80096c8 <_dtoa_r+0x8d8>
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095bc:	0d1b      	lsrs	r3, r3, #20
 80095be:	051b      	lsls	r3, r3, #20
 80095c0:	b12b      	cbz	r3, 80095ce <_dtoa_r+0x7de>
 80095c2:	9b08      	ldr	r3, [sp, #32]
 80095c4:	3301      	adds	r3, #1
 80095c6:	9308      	str	r3, [sp, #32]
 80095c8:	f108 0801 	add.w	r8, r8, #1
 80095cc:	2301      	movs	r3, #1
 80095ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80095d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 81b0 	beq.w	8009938 <_dtoa_r+0xb48>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095de:	6918      	ldr	r0, [r3, #16]
 80095e0:	f000 fbbc 	bl	8009d5c <__hi0bits>
 80095e4:	f1c0 0020 	rsb	r0, r0, #32
 80095e8:	9b08      	ldr	r3, [sp, #32]
 80095ea:	4418      	add	r0, r3
 80095ec:	f010 001f 	ands.w	r0, r0, #31
 80095f0:	d077      	beq.n	80096e2 <_dtoa_r+0x8f2>
 80095f2:	f1c0 0320 	rsb	r3, r0, #32
 80095f6:	2b04      	cmp	r3, #4
 80095f8:	dd6b      	ble.n	80096d2 <_dtoa_r+0x8e2>
 80095fa:	9b08      	ldr	r3, [sp, #32]
 80095fc:	f1c0 001c 	rsb	r0, r0, #28
 8009600:	4403      	add	r3, r0
 8009602:	4480      	add	r8, r0
 8009604:	4406      	add	r6, r0
 8009606:	9308      	str	r3, [sp, #32]
 8009608:	f1b8 0f00 	cmp.w	r8, #0
 800960c:	dd05      	ble.n	800961a <_dtoa_r+0x82a>
 800960e:	4649      	mov	r1, r9
 8009610:	4642      	mov	r2, r8
 8009612:	4658      	mov	r0, fp
 8009614:	f000 fd08 	bl	800a028 <__lshift>
 8009618:	4681      	mov	r9, r0
 800961a:	9b08      	ldr	r3, [sp, #32]
 800961c:	2b00      	cmp	r3, #0
 800961e:	dd05      	ble.n	800962c <_dtoa_r+0x83c>
 8009620:	4621      	mov	r1, r4
 8009622:	461a      	mov	r2, r3
 8009624:	4658      	mov	r0, fp
 8009626:	f000 fcff 	bl	800a028 <__lshift>
 800962a:	4604      	mov	r4, r0
 800962c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800962e:	2b00      	cmp	r3, #0
 8009630:	d059      	beq.n	80096e6 <_dtoa_r+0x8f6>
 8009632:	4621      	mov	r1, r4
 8009634:	4648      	mov	r0, r9
 8009636:	f000 fd63 	bl	800a100 <__mcmp>
 800963a:	2800      	cmp	r0, #0
 800963c:	da53      	bge.n	80096e6 <_dtoa_r+0x8f6>
 800963e:	1e7b      	subs	r3, r7, #1
 8009640:	9304      	str	r3, [sp, #16]
 8009642:	4649      	mov	r1, r9
 8009644:	2300      	movs	r3, #0
 8009646:	220a      	movs	r2, #10
 8009648:	4658      	mov	r0, fp
 800964a:	f000 faf7 	bl	8009c3c <__multadd>
 800964e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009650:	4681      	mov	r9, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 8172 	beq.w	800993c <_dtoa_r+0xb4c>
 8009658:	2300      	movs	r3, #0
 800965a:	4629      	mov	r1, r5
 800965c:	220a      	movs	r2, #10
 800965e:	4658      	mov	r0, fp
 8009660:	f000 faec 	bl	8009c3c <__multadd>
 8009664:	9b00      	ldr	r3, [sp, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	4605      	mov	r5, r0
 800966a:	dc67      	bgt.n	800973c <_dtoa_r+0x94c>
 800966c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966e:	2b02      	cmp	r3, #2
 8009670:	dc41      	bgt.n	80096f6 <_dtoa_r+0x906>
 8009672:	e063      	b.n	800973c <_dtoa_r+0x94c>
 8009674:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009676:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800967a:	e746      	b.n	800950a <_dtoa_r+0x71a>
 800967c:	9b07      	ldr	r3, [sp, #28]
 800967e:	1e5c      	subs	r4, r3, #1
 8009680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009682:	42a3      	cmp	r3, r4
 8009684:	bfbf      	itttt	lt
 8009686:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009688:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800968a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800968c:	1ae3      	sublt	r3, r4, r3
 800968e:	bfb4      	ite	lt
 8009690:	18d2      	addlt	r2, r2, r3
 8009692:	1b1c      	subge	r4, r3, r4
 8009694:	9b07      	ldr	r3, [sp, #28]
 8009696:	bfbc      	itt	lt
 8009698:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800969a:	2400      	movlt	r4, #0
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfb5      	itete	lt
 80096a0:	eba8 0603 	sublt.w	r6, r8, r3
 80096a4:	9b07      	ldrge	r3, [sp, #28]
 80096a6:	2300      	movlt	r3, #0
 80096a8:	4646      	movge	r6, r8
 80096aa:	e730      	b.n	800950e <_dtoa_r+0x71e>
 80096ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80096ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80096b0:	4646      	mov	r6, r8
 80096b2:	e735      	b.n	8009520 <_dtoa_r+0x730>
 80096b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096b6:	e75c      	b.n	8009572 <_dtoa_r+0x782>
 80096b8:	2300      	movs	r3, #0
 80096ba:	e788      	b.n	80095ce <_dtoa_r+0x7de>
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	40240000 	.word	0x40240000
 80096c4:	40140000 	.word	0x40140000
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	e780      	b.n	80095ce <_dtoa_r+0x7de>
 80096cc:	2300      	movs	r3, #0
 80096ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80096d0:	e782      	b.n	80095d8 <_dtoa_r+0x7e8>
 80096d2:	d099      	beq.n	8009608 <_dtoa_r+0x818>
 80096d4:	9a08      	ldr	r2, [sp, #32]
 80096d6:	331c      	adds	r3, #28
 80096d8:	441a      	add	r2, r3
 80096da:	4498      	add	r8, r3
 80096dc:	441e      	add	r6, r3
 80096de:	9208      	str	r2, [sp, #32]
 80096e0:	e792      	b.n	8009608 <_dtoa_r+0x818>
 80096e2:	4603      	mov	r3, r0
 80096e4:	e7f6      	b.n	80096d4 <_dtoa_r+0x8e4>
 80096e6:	9b07      	ldr	r3, [sp, #28]
 80096e8:	9704      	str	r7, [sp, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dc20      	bgt.n	8009730 <_dtoa_r+0x940>
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	dd1e      	ble.n	8009734 <_dtoa_r+0x944>
 80096f6:	9b00      	ldr	r3, [sp, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f47f aec0 	bne.w	800947e <_dtoa_r+0x68e>
 80096fe:	4621      	mov	r1, r4
 8009700:	2205      	movs	r2, #5
 8009702:	4658      	mov	r0, fp
 8009704:	f000 fa9a 	bl	8009c3c <__multadd>
 8009708:	4601      	mov	r1, r0
 800970a:	4604      	mov	r4, r0
 800970c:	4648      	mov	r0, r9
 800970e:	f000 fcf7 	bl	800a100 <__mcmp>
 8009712:	2800      	cmp	r0, #0
 8009714:	f77f aeb3 	ble.w	800947e <_dtoa_r+0x68e>
 8009718:	4656      	mov	r6, sl
 800971a:	2331      	movs	r3, #49	@ 0x31
 800971c:	f806 3b01 	strb.w	r3, [r6], #1
 8009720:	9b04      	ldr	r3, [sp, #16]
 8009722:	3301      	adds	r3, #1
 8009724:	9304      	str	r3, [sp, #16]
 8009726:	e6ae      	b.n	8009486 <_dtoa_r+0x696>
 8009728:	9c07      	ldr	r4, [sp, #28]
 800972a:	9704      	str	r7, [sp, #16]
 800972c:	4625      	mov	r5, r4
 800972e:	e7f3      	b.n	8009718 <_dtoa_r+0x928>
 8009730:	9b07      	ldr	r3, [sp, #28]
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 8104 	beq.w	8009944 <_dtoa_r+0xb54>
 800973c:	2e00      	cmp	r6, #0
 800973e:	dd05      	ble.n	800974c <_dtoa_r+0x95c>
 8009740:	4629      	mov	r1, r5
 8009742:	4632      	mov	r2, r6
 8009744:	4658      	mov	r0, fp
 8009746:	f000 fc6f 	bl	800a028 <__lshift>
 800974a:	4605      	mov	r5, r0
 800974c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800974e:	2b00      	cmp	r3, #0
 8009750:	d05a      	beq.n	8009808 <_dtoa_r+0xa18>
 8009752:	6869      	ldr	r1, [r5, #4]
 8009754:	4658      	mov	r0, fp
 8009756:	f000 fa0f 	bl	8009b78 <_Balloc>
 800975a:	4606      	mov	r6, r0
 800975c:	b928      	cbnz	r0, 800976a <_dtoa_r+0x97a>
 800975e:	4b84      	ldr	r3, [pc, #528]	@ (8009970 <_dtoa_r+0xb80>)
 8009760:	4602      	mov	r2, r0
 8009762:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009766:	f7ff bb5a 	b.w	8008e1e <_dtoa_r+0x2e>
 800976a:	692a      	ldr	r2, [r5, #16]
 800976c:	3202      	adds	r2, #2
 800976e:	0092      	lsls	r2, r2, #2
 8009770:	f105 010c 	add.w	r1, r5, #12
 8009774:	300c      	adds	r0, #12
 8009776:	f002 fb03 	bl	800bd80 <memcpy>
 800977a:	2201      	movs	r2, #1
 800977c:	4631      	mov	r1, r6
 800977e:	4658      	mov	r0, fp
 8009780:	f000 fc52 	bl	800a028 <__lshift>
 8009784:	f10a 0301 	add.w	r3, sl, #1
 8009788:	9307      	str	r3, [sp, #28]
 800978a:	9b00      	ldr	r3, [sp, #0]
 800978c:	4453      	add	r3, sl
 800978e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009790:	9b02      	ldr	r3, [sp, #8]
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	462f      	mov	r7, r5
 8009798:	930a      	str	r3, [sp, #40]	@ 0x28
 800979a:	4605      	mov	r5, r0
 800979c:	9b07      	ldr	r3, [sp, #28]
 800979e:	4621      	mov	r1, r4
 80097a0:	3b01      	subs	r3, #1
 80097a2:	4648      	mov	r0, r9
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	f7ff fa99 	bl	8008cdc <quorem>
 80097aa:	4639      	mov	r1, r7
 80097ac:	9002      	str	r0, [sp, #8]
 80097ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80097b2:	4648      	mov	r0, r9
 80097b4:	f000 fca4 	bl	800a100 <__mcmp>
 80097b8:	462a      	mov	r2, r5
 80097ba:	9008      	str	r0, [sp, #32]
 80097bc:	4621      	mov	r1, r4
 80097be:	4658      	mov	r0, fp
 80097c0:	f000 fcba 	bl	800a138 <__mdiff>
 80097c4:	68c2      	ldr	r2, [r0, #12]
 80097c6:	4606      	mov	r6, r0
 80097c8:	bb02      	cbnz	r2, 800980c <_dtoa_r+0xa1c>
 80097ca:	4601      	mov	r1, r0
 80097cc:	4648      	mov	r0, r9
 80097ce:	f000 fc97 	bl	800a100 <__mcmp>
 80097d2:	4602      	mov	r2, r0
 80097d4:	4631      	mov	r1, r6
 80097d6:	4658      	mov	r0, fp
 80097d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80097da:	f000 fa0d 	bl	8009bf8 <_Bfree>
 80097de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097e2:	9e07      	ldr	r6, [sp, #28]
 80097e4:	ea43 0102 	orr.w	r1, r3, r2
 80097e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ea:	4319      	orrs	r1, r3
 80097ec:	d110      	bne.n	8009810 <_dtoa_r+0xa20>
 80097ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097f2:	d029      	beq.n	8009848 <_dtoa_r+0xa58>
 80097f4:	9b08      	ldr	r3, [sp, #32]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	dd02      	ble.n	8009800 <_dtoa_r+0xa10>
 80097fa:	9b02      	ldr	r3, [sp, #8]
 80097fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009800:	9b00      	ldr	r3, [sp, #0]
 8009802:	f883 8000 	strb.w	r8, [r3]
 8009806:	e63f      	b.n	8009488 <_dtoa_r+0x698>
 8009808:	4628      	mov	r0, r5
 800980a:	e7bb      	b.n	8009784 <_dtoa_r+0x994>
 800980c:	2201      	movs	r2, #1
 800980e:	e7e1      	b.n	80097d4 <_dtoa_r+0x9e4>
 8009810:	9b08      	ldr	r3, [sp, #32]
 8009812:	2b00      	cmp	r3, #0
 8009814:	db04      	blt.n	8009820 <_dtoa_r+0xa30>
 8009816:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009818:	430b      	orrs	r3, r1
 800981a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800981c:	430b      	orrs	r3, r1
 800981e:	d120      	bne.n	8009862 <_dtoa_r+0xa72>
 8009820:	2a00      	cmp	r2, #0
 8009822:	dded      	ble.n	8009800 <_dtoa_r+0xa10>
 8009824:	4649      	mov	r1, r9
 8009826:	2201      	movs	r2, #1
 8009828:	4658      	mov	r0, fp
 800982a:	f000 fbfd 	bl	800a028 <__lshift>
 800982e:	4621      	mov	r1, r4
 8009830:	4681      	mov	r9, r0
 8009832:	f000 fc65 	bl	800a100 <__mcmp>
 8009836:	2800      	cmp	r0, #0
 8009838:	dc03      	bgt.n	8009842 <_dtoa_r+0xa52>
 800983a:	d1e1      	bne.n	8009800 <_dtoa_r+0xa10>
 800983c:	f018 0f01 	tst.w	r8, #1
 8009840:	d0de      	beq.n	8009800 <_dtoa_r+0xa10>
 8009842:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009846:	d1d8      	bne.n	80097fa <_dtoa_r+0xa0a>
 8009848:	9a00      	ldr	r2, [sp, #0]
 800984a:	2339      	movs	r3, #57	@ 0x39
 800984c:	7013      	strb	r3, [r2, #0]
 800984e:	4633      	mov	r3, r6
 8009850:	461e      	mov	r6, r3
 8009852:	3b01      	subs	r3, #1
 8009854:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009858:	2a39      	cmp	r2, #57	@ 0x39
 800985a:	d052      	beq.n	8009902 <_dtoa_r+0xb12>
 800985c:	3201      	adds	r2, #1
 800985e:	701a      	strb	r2, [r3, #0]
 8009860:	e612      	b.n	8009488 <_dtoa_r+0x698>
 8009862:	2a00      	cmp	r2, #0
 8009864:	dd07      	ble.n	8009876 <_dtoa_r+0xa86>
 8009866:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800986a:	d0ed      	beq.n	8009848 <_dtoa_r+0xa58>
 800986c:	9a00      	ldr	r2, [sp, #0]
 800986e:	f108 0301 	add.w	r3, r8, #1
 8009872:	7013      	strb	r3, [r2, #0]
 8009874:	e608      	b.n	8009488 <_dtoa_r+0x698>
 8009876:	9b07      	ldr	r3, [sp, #28]
 8009878:	9a07      	ldr	r2, [sp, #28]
 800987a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800987e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009880:	4293      	cmp	r3, r2
 8009882:	d028      	beq.n	80098d6 <_dtoa_r+0xae6>
 8009884:	4649      	mov	r1, r9
 8009886:	2300      	movs	r3, #0
 8009888:	220a      	movs	r2, #10
 800988a:	4658      	mov	r0, fp
 800988c:	f000 f9d6 	bl	8009c3c <__multadd>
 8009890:	42af      	cmp	r7, r5
 8009892:	4681      	mov	r9, r0
 8009894:	f04f 0300 	mov.w	r3, #0
 8009898:	f04f 020a 	mov.w	r2, #10
 800989c:	4639      	mov	r1, r7
 800989e:	4658      	mov	r0, fp
 80098a0:	d107      	bne.n	80098b2 <_dtoa_r+0xac2>
 80098a2:	f000 f9cb 	bl	8009c3c <__multadd>
 80098a6:	4607      	mov	r7, r0
 80098a8:	4605      	mov	r5, r0
 80098aa:	9b07      	ldr	r3, [sp, #28]
 80098ac:	3301      	adds	r3, #1
 80098ae:	9307      	str	r3, [sp, #28]
 80098b0:	e774      	b.n	800979c <_dtoa_r+0x9ac>
 80098b2:	f000 f9c3 	bl	8009c3c <__multadd>
 80098b6:	4629      	mov	r1, r5
 80098b8:	4607      	mov	r7, r0
 80098ba:	2300      	movs	r3, #0
 80098bc:	220a      	movs	r2, #10
 80098be:	4658      	mov	r0, fp
 80098c0:	f000 f9bc 	bl	8009c3c <__multadd>
 80098c4:	4605      	mov	r5, r0
 80098c6:	e7f0      	b.n	80098aa <_dtoa_r+0xaba>
 80098c8:	9b00      	ldr	r3, [sp, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bfcc      	ite	gt
 80098ce:	461e      	movgt	r6, r3
 80098d0:	2601      	movle	r6, #1
 80098d2:	4456      	add	r6, sl
 80098d4:	2700      	movs	r7, #0
 80098d6:	4649      	mov	r1, r9
 80098d8:	2201      	movs	r2, #1
 80098da:	4658      	mov	r0, fp
 80098dc:	f000 fba4 	bl	800a028 <__lshift>
 80098e0:	4621      	mov	r1, r4
 80098e2:	4681      	mov	r9, r0
 80098e4:	f000 fc0c 	bl	800a100 <__mcmp>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	dcb0      	bgt.n	800984e <_dtoa_r+0xa5e>
 80098ec:	d102      	bne.n	80098f4 <_dtoa_r+0xb04>
 80098ee:	f018 0f01 	tst.w	r8, #1
 80098f2:	d1ac      	bne.n	800984e <_dtoa_r+0xa5e>
 80098f4:	4633      	mov	r3, r6
 80098f6:	461e      	mov	r6, r3
 80098f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098fc:	2a30      	cmp	r2, #48	@ 0x30
 80098fe:	d0fa      	beq.n	80098f6 <_dtoa_r+0xb06>
 8009900:	e5c2      	b.n	8009488 <_dtoa_r+0x698>
 8009902:	459a      	cmp	sl, r3
 8009904:	d1a4      	bne.n	8009850 <_dtoa_r+0xa60>
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	3301      	adds	r3, #1
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	2331      	movs	r3, #49	@ 0x31
 800990e:	f88a 3000 	strb.w	r3, [sl]
 8009912:	e5b9      	b.n	8009488 <_dtoa_r+0x698>
 8009914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009916:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009974 <_dtoa_r+0xb84>
 800991a:	b11b      	cbz	r3, 8009924 <_dtoa_r+0xb34>
 800991c:	f10a 0308 	add.w	r3, sl, #8
 8009920:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009922:	6013      	str	r3, [r2, #0]
 8009924:	4650      	mov	r0, sl
 8009926:	b019      	add	sp, #100	@ 0x64
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800992e:	2b01      	cmp	r3, #1
 8009930:	f77f ae37 	ble.w	80095a2 <_dtoa_r+0x7b2>
 8009934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009936:	930a      	str	r3, [sp, #40]	@ 0x28
 8009938:	2001      	movs	r0, #1
 800993a:	e655      	b.n	80095e8 <_dtoa_r+0x7f8>
 800993c:	9b00      	ldr	r3, [sp, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	f77f aed6 	ble.w	80096f0 <_dtoa_r+0x900>
 8009944:	4656      	mov	r6, sl
 8009946:	4621      	mov	r1, r4
 8009948:	4648      	mov	r0, r9
 800994a:	f7ff f9c7 	bl	8008cdc <quorem>
 800994e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009952:	f806 8b01 	strb.w	r8, [r6], #1
 8009956:	9b00      	ldr	r3, [sp, #0]
 8009958:	eba6 020a 	sub.w	r2, r6, sl
 800995c:	4293      	cmp	r3, r2
 800995e:	ddb3      	ble.n	80098c8 <_dtoa_r+0xad8>
 8009960:	4649      	mov	r1, r9
 8009962:	2300      	movs	r3, #0
 8009964:	220a      	movs	r2, #10
 8009966:	4658      	mov	r0, fp
 8009968:	f000 f968 	bl	8009c3c <__multadd>
 800996c:	4681      	mov	r9, r0
 800996e:	e7ea      	b.n	8009946 <_dtoa_r+0xb56>
 8009970:	0800ccef 	.word	0x0800ccef
 8009974:	0800cc73 	.word	0x0800cc73

08009978 <_free_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4605      	mov	r5, r0
 800997c:	2900      	cmp	r1, #0
 800997e:	d041      	beq.n	8009a04 <_free_r+0x8c>
 8009980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009984:	1f0c      	subs	r4, r1, #4
 8009986:	2b00      	cmp	r3, #0
 8009988:	bfb8      	it	lt
 800998a:	18e4      	addlt	r4, r4, r3
 800998c:	f000 f8e8 	bl	8009b60 <__malloc_lock>
 8009990:	4a1d      	ldr	r2, [pc, #116]	@ (8009a08 <_free_r+0x90>)
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	b933      	cbnz	r3, 80099a4 <_free_r+0x2c>
 8009996:	6063      	str	r3, [r4, #4]
 8009998:	6014      	str	r4, [r2, #0]
 800999a:	4628      	mov	r0, r5
 800999c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a0:	f000 b8e4 	b.w	8009b6c <__malloc_unlock>
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	d908      	bls.n	80099ba <_free_r+0x42>
 80099a8:	6820      	ldr	r0, [r4, #0]
 80099aa:	1821      	adds	r1, r4, r0
 80099ac:	428b      	cmp	r3, r1
 80099ae:	bf01      	itttt	eq
 80099b0:	6819      	ldreq	r1, [r3, #0]
 80099b2:	685b      	ldreq	r3, [r3, #4]
 80099b4:	1809      	addeq	r1, r1, r0
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	e7ed      	b.n	8009996 <_free_r+0x1e>
 80099ba:	461a      	mov	r2, r3
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	b10b      	cbz	r3, 80099c4 <_free_r+0x4c>
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	d9fa      	bls.n	80099ba <_free_r+0x42>
 80099c4:	6811      	ldr	r1, [r2, #0]
 80099c6:	1850      	adds	r0, r2, r1
 80099c8:	42a0      	cmp	r0, r4
 80099ca:	d10b      	bne.n	80099e4 <_free_r+0x6c>
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	4401      	add	r1, r0
 80099d0:	1850      	adds	r0, r2, r1
 80099d2:	4283      	cmp	r3, r0
 80099d4:	6011      	str	r1, [r2, #0]
 80099d6:	d1e0      	bne.n	800999a <_free_r+0x22>
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	6053      	str	r3, [r2, #4]
 80099de:	4408      	add	r0, r1
 80099e0:	6010      	str	r0, [r2, #0]
 80099e2:	e7da      	b.n	800999a <_free_r+0x22>
 80099e4:	d902      	bls.n	80099ec <_free_r+0x74>
 80099e6:	230c      	movs	r3, #12
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	e7d6      	b.n	800999a <_free_r+0x22>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	1821      	adds	r1, r4, r0
 80099f0:	428b      	cmp	r3, r1
 80099f2:	bf04      	itt	eq
 80099f4:	6819      	ldreq	r1, [r3, #0]
 80099f6:	685b      	ldreq	r3, [r3, #4]
 80099f8:	6063      	str	r3, [r4, #4]
 80099fa:	bf04      	itt	eq
 80099fc:	1809      	addeq	r1, r1, r0
 80099fe:	6021      	streq	r1, [r4, #0]
 8009a00:	6054      	str	r4, [r2, #4]
 8009a02:	e7ca      	b.n	800999a <_free_r+0x22>
 8009a04:	bd38      	pop	{r3, r4, r5, pc}
 8009a06:	bf00      	nop
 8009a08:	20000a58 	.word	0x20000a58

08009a0c <malloc>:
 8009a0c:	4b02      	ldr	r3, [pc, #8]	@ (8009a18 <malloc+0xc>)
 8009a0e:	4601      	mov	r1, r0
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	f000 b825 	b.w	8009a60 <_malloc_r>
 8009a16:	bf00      	nop
 8009a18:	200000fc 	.word	0x200000fc

08009a1c <sbrk_aligned>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	4e0f      	ldr	r6, [pc, #60]	@ (8009a5c <sbrk_aligned+0x40>)
 8009a20:	460c      	mov	r4, r1
 8009a22:	6831      	ldr	r1, [r6, #0]
 8009a24:	4605      	mov	r5, r0
 8009a26:	b911      	cbnz	r1, 8009a2e <sbrk_aligned+0x12>
 8009a28:	f002 f99a 	bl	800bd60 <_sbrk_r>
 8009a2c:	6030      	str	r0, [r6, #0]
 8009a2e:	4621      	mov	r1, r4
 8009a30:	4628      	mov	r0, r5
 8009a32:	f002 f995 	bl	800bd60 <_sbrk_r>
 8009a36:	1c43      	adds	r3, r0, #1
 8009a38:	d103      	bne.n	8009a42 <sbrk_aligned+0x26>
 8009a3a:	f04f 34ff 	mov.w	r4, #4294967295
 8009a3e:	4620      	mov	r0, r4
 8009a40:	bd70      	pop	{r4, r5, r6, pc}
 8009a42:	1cc4      	adds	r4, r0, #3
 8009a44:	f024 0403 	bic.w	r4, r4, #3
 8009a48:	42a0      	cmp	r0, r4
 8009a4a:	d0f8      	beq.n	8009a3e <sbrk_aligned+0x22>
 8009a4c:	1a21      	subs	r1, r4, r0
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f002 f986 	bl	800bd60 <_sbrk_r>
 8009a54:	3001      	adds	r0, #1
 8009a56:	d1f2      	bne.n	8009a3e <sbrk_aligned+0x22>
 8009a58:	e7ef      	b.n	8009a3a <sbrk_aligned+0x1e>
 8009a5a:	bf00      	nop
 8009a5c:	20000a54 	.word	0x20000a54

08009a60 <_malloc_r>:
 8009a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a64:	1ccd      	adds	r5, r1, #3
 8009a66:	f025 0503 	bic.w	r5, r5, #3
 8009a6a:	3508      	adds	r5, #8
 8009a6c:	2d0c      	cmp	r5, #12
 8009a6e:	bf38      	it	cc
 8009a70:	250c      	movcc	r5, #12
 8009a72:	2d00      	cmp	r5, #0
 8009a74:	4606      	mov	r6, r0
 8009a76:	db01      	blt.n	8009a7c <_malloc_r+0x1c>
 8009a78:	42a9      	cmp	r1, r5
 8009a7a:	d904      	bls.n	8009a86 <_malloc_r+0x26>
 8009a7c:	230c      	movs	r3, #12
 8009a7e:	6033      	str	r3, [r6, #0]
 8009a80:	2000      	movs	r0, #0
 8009a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b5c <_malloc_r+0xfc>
 8009a8a:	f000 f869 	bl	8009b60 <__malloc_lock>
 8009a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a92:	461c      	mov	r4, r3
 8009a94:	bb44      	cbnz	r4, 8009ae8 <_malloc_r+0x88>
 8009a96:	4629      	mov	r1, r5
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7ff ffbf 	bl	8009a1c <sbrk_aligned>
 8009a9e:	1c43      	adds	r3, r0, #1
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	d158      	bne.n	8009b56 <_malloc_r+0xf6>
 8009aa4:	f8d8 4000 	ldr.w	r4, [r8]
 8009aa8:	4627      	mov	r7, r4
 8009aaa:	2f00      	cmp	r7, #0
 8009aac:	d143      	bne.n	8009b36 <_malloc_r+0xd6>
 8009aae:	2c00      	cmp	r4, #0
 8009ab0:	d04b      	beq.n	8009b4a <_malloc_r+0xea>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	eb04 0903 	add.w	r9, r4, r3
 8009abc:	f002 f950 	bl	800bd60 <_sbrk_r>
 8009ac0:	4581      	cmp	r9, r0
 8009ac2:	d142      	bne.n	8009b4a <_malloc_r+0xea>
 8009ac4:	6821      	ldr	r1, [r4, #0]
 8009ac6:	1a6d      	subs	r5, r5, r1
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4630      	mov	r0, r6
 8009acc:	f7ff ffa6 	bl	8009a1c <sbrk_aligned>
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d03a      	beq.n	8009b4a <_malloc_r+0xea>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	442b      	add	r3, r5
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	f8d8 3000 	ldr.w	r3, [r8]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	bb62      	cbnz	r2, 8009b3c <_malloc_r+0xdc>
 8009ae2:	f8c8 7000 	str.w	r7, [r8]
 8009ae6:	e00f      	b.n	8009b08 <_malloc_r+0xa8>
 8009ae8:	6822      	ldr	r2, [r4, #0]
 8009aea:	1b52      	subs	r2, r2, r5
 8009aec:	d420      	bmi.n	8009b30 <_malloc_r+0xd0>
 8009aee:	2a0b      	cmp	r2, #11
 8009af0:	d917      	bls.n	8009b22 <_malloc_r+0xc2>
 8009af2:	1961      	adds	r1, r4, r5
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	6025      	str	r5, [r4, #0]
 8009af8:	bf18      	it	ne
 8009afa:	6059      	strne	r1, [r3, #4]
 8009afc:	6863      	ldr	r3, [r4, #4]
 8009afe:	bf08      	it	eq
 8009b00:	f8c8 1000 	streq.w	r1, [r8]
 8009b04:	5162      	str	r2, [r4, r5]
 8009b06:	604b      	str	r3, [r1, #4]
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f000 f82f 	bl	8009b6c <__malloc_unlock>
 8009b0e:	f104 000b 	add.w	r0, r4, #11
 8009b12:	1d23      	adds	r3, r4, #4
 8009b14:	f020 0007 	bic.w	r0, r0, #7
 8009b18:	1ac2      	subs	r2, r0, r3
 8009b1a:	bf1c      	itt	ne
 8009b1c:	1a1b      	subne	r3, r3, r0
 8009b1e:	50a3      	strne	r3, [r4, r2]
 8009b20:	e7af      	b.n	8009a82 <_malloc_r+0x22>
 8009b22:	6862      	ldr	r2, [r4, #4]
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	bf0c      	ite	eq
 8009b28:	f8c8 2000 	streq.w	r2, [r8]
 8009b2c:	605a      	strne	r2, [r3, #4]
 8009b2e:	e7eb      	b.n	8009b08 <_malloc_r+0xa8>
 8009b30:	4623      	mov	r3, r4
 8009b32:	6864      	ldr	r4, [r4, #4]
 8009b34:	e7ae      	b.n	8009a94 <_malloc_r+0x34>
 8009b36:	463c      	mov	r4, r7
 8009b38:	687f      	ldr	r7, [r7, #4]
 8009b3a:	e7b6      	b.n	8009aaa <_malloc_r+0x4a>
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	42a3      	cmp	r3, r4
 8009b42:	d1fb      	bne.n	8009b3c <_malloc_r+0xdc>
 8009b44:	2300      	movs	r3, #0
 8009b46:	6053      	str	r3, [r2, #4]
 8009b48:	e7de      	b.n	8009b08 <_malloc_r+0xa8>
 8009b4a:	230c      	movs	r3, #12
 8009b4c:	6033      	str	r3, [r6, #0]
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f000 f80c 	bl	8009b6c <__malloc_unlock>
 8009b54:	e794      	b.n	8009a80 <_malloc_r+0x20>
 8009b56:	6005      	str	r5, [r0, #0]
 8009b58:	e7d6      	b.n	8009b08 <_malloc_r+0xa8>
 8009b5a:	bf00      	nop
 8009b5c:	20000a58 	.word	0x20000a58

08009b60 <__malloc_lock>:
 8009b60:	4801      	ldr	r0, [pc, #4]	@ (8009b68 <__malloc_lock+0x8>)
 8009b62:	f7ff b8b2 	b.w	8008cca <__retarget_lock_acquire_recursive>
 8009b66:	bf00      	nop
 8009b68:	20000a50 	.word	0x20000a50

08009b6c <__malloc_unlock>:
 8009b6c:	4801      	ldr	r0, [pc, #4]	@ (8009b74 <__malloc_unlock+0x8>)
 8009b6e:	f7ff b8ad 	b.w	8008ccc <__retarget_lock_release_recursive>
 8009b72:	bf00      	nop
 8009b74:	20000a50 	.word	0x20000a50

08009b78 <_Balloc>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	69c6      	ldr	r6, [r0, #28]
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	460d      	mov	r5, r1
 8009b80:	b976      	cbnz	r6, 8009ba0 <_Balloc+0x28>
 8009b82:	2010      	movs	r0, #16
 8009b84:	f7ff ff42 	bl	8009a0c <malloc>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	61e0      	str	r0, [r4, #28]
 8009b8c:	b920      	cbnz	r0, 8009b98 <_Balloc+0x20>
 8009b8e:	4b18      	ldr	r3, [pc, #96]	@ (8009bf0 <_Balloc+0x78>)
 8009b90:	4818      	ldr	r0, [pc, #96]	@ (8009bf4 <_Balloc+0x7c>)
 8009b92:	216b      	movs	r1, #107	@ 0x6b
 8009b94:	f002 f90c 	bl	800bdb0 <__assert_func>
 8009b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b9c:	6006      	str	r6, [r0, #0]
 8009b9e:	60c6      	str	r6, [r0, #12]
 8009ba0:	69e6      	ldr	r6, [r4, #28]
 8009ba2:	68f3      	ldr	r3, [r6, #12]
 8009ba4:	b183      	cbz	r3, 8009bc8 <_Balloc+0x50>
 8009ba6:	69e3      	ldr	r3, [r4, #28]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bae:	b9b8      	cbnz	r0, 8009be0 <_Balloc+0x68>
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8009bb6:	1d72      	adds	r2, r6, #5
 8009bb8:	0092      	lsls	r2, r2, #2
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f002 f916 	bl	800bdec <_calloc_r>
 8009bc0:	b160      	cbz	r0, 8009bdc <_Balloc+0x64>
 8009bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bc6:	e00e      	b.n	8009be6 <_Balloc+0x6e>
 8009bc8:	2221      	movs	r2, #33	@ 0x21
 8009bca:	2104      	movs	r1, #4
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f002 f90d 	bl	800bdec <_calloc_r>
 8009bd2:	69e3      	ldr	r3, [r4, #28]
 8009bd4:	60f0      	str	r0, [r6, #12]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e4      	bne.n	8009ba6 <_Balloc+0x2e>
 8009bdc:	2000      	movs	r0, #0
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	6802      	ldr	r2, [r0, #0]
 8009be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009be6:	2300      	movs	r3, #0
 8009be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bec:	e7f7      	b.n	8009bde <_Balloc+0x66>
 8009bee:	bf00      	nop
 8009bf0:	0800cc80 	.word	0x0800cc80
 8009bf4:	0800cd00 	.word	0x0800cd00

08009bf8 <_Bfree>:
 8009bf8:	b570      	push	{r4, r5, r6, lr}
 8009bfa:	69c6      	ldr	r6, [r0, #28]
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	b976      	cbnz	r6, 8009c20 <_Bfree+0x28>
 8009c02:	2010      	movs	r0, #16
 8009c04:	f7ff ff02 	bl	8009a0c <malloc>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	61e8      	str	r0, [r5, #28]
 8009c0c:	b920      	cbnz	r0, 8009c18 <_Bfree+0x20>
 8009c0e:	4b09      	ldr	r3, [pc, #36]	@ (8009c34 <_Bfree+0x3c>)
 8009c10:	4809      	ldr	r0, [pc, #36]	@ (8009c38 <_Bfree+0x40>)
 8009c12:	218f      	movs	r1, #143	@ 0x8f
 8009c14:	f002 f8cc 	bl	800bdb0 <__assert_func>
 8009c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c1c:	6006      	str	r6, [r0, #0]
 8009c1e:	60c6      	str	r6, [r0, #12]
 8009c20:	b13c      	cbz	r4, 8009c32 <_Bfree+0x3a>
 8009c22:	69eb      	ldr	r3, [r5, #28]
 8009c24:	6862      	ldr	r2, [r4, #4]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c2c:	6021      	str	r1, [r4, #0]
 8009c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	0800cc80 	.word	0x0800cc80
 8009c38:	0800cd00 	.word	0x0800cd00

08009c3c <__multadd>:
 8009c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c40:	690d      	ldr	r5, [r1, #16]
 8009c42:	4607      	mov	r7, r0
 8009c44:	460c      	mov	r4, r1
 8009c46:	461e      	mov	r6, r3
 8009c48:	f101 0c14 	add.w	ip, r1, #20
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c52:	b299      	uxth	r1, r3
 8009c54:	fb02 6101 	mla	r1, r2, r1, r6
 8009c58:	0c1e      	lsrs	r6, r3, #16
 8009c5a:	0c0b      	lsrs	r3, r1, #16
 8009c5c:	fb02 3306 	mla	r3, r2, r6, r3
 8009c60:	b289      	uxth	r1, r1
 8009c62:	3001      	adds	r0, #1
 8009c64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c68:	4285      	cmp	r5, r0
 8009c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8009c6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c72:	dcec      	bgt.n	8009c4e <__multadd+0x12>
 8009c74:	b30e      	cbz	r6, 8009cba <__multadd+0x7e>
 8009c76:	68a3      	ldr	r3, [r4, #8]
 8009c78:	42ab      	cmp	r3, r5
 8009c7a:	dc19      	bgt.n	8009cb0 <__multadd+0x74>
 8009c7c:	6861      	ldr	r1, [r4, #4]
 8009c7e:	4638      	mov	r0, r7
 8009c80:	3101      	adds	r1, #1
 8009c82:	f7ff ff79 	bl	8009b78 <_Balloc>
 8009c86:	4680      	mov	r8, r0
 8009c88:	b928      	cbnz	r0, 8009c96 <__multadd+0x5a>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <__multadd+0x84>)
 8009c8e:	480d      	ldr	r0, [pc, #52]	@ (8009cc4 <__multadd+0x88>)
 8009c90:	21ba      	movs	r1, #186	@ 0xba
 8009c92:	f002 f88d 	bl	800bdb0 <__assert_func>
 8009c96:	6922      	ldr	r2, [r4, #16]
 8009c98:	3202      	adds	r2, #2
 8009c9a:	f104 010c 	add.w	r1, r4, #12
 8009c9e:	0092      	lsls	r2, r2, #2
 8009ca0:	300c      	adds	r0, #12
 8009ca2:	f002 f86d 	bl	800bd80 <memcpy>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4638      	mov	r0, r7
 8009caa:	f7ff ffa5 	bl	8009bf8 <_Bfree>
 8009cae:	4644      	mov	r4, r8
 8009cb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cb4:	3501      	adds	r5, #1
 8009cb6:	615e      	str	r6, [r3, #20]
 8009cb8:	6125      	str	r5, [r4, #16]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc0:	0800ccef 	.word	0x0800ccef
 8009cc4:	0800cd00 	.word	0x0800cd00

08009cc8 <__s2b>:
 8009cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ccc:	460c      	mov	r4, r1
 8009cce:	4615      	mov	r5, r2
 8009cd0:	461f      	mov	r7, r3
 8009cd2:	2209      	movs	r2, #9
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cdc:	2100      	movs	r1, #0
 8009cde:	2201      	movs	r2, #1
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	db09      	blt.n	8009cf8 <__s2b+0x30>
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f7ff ff47 	bl	8009b78 <_Balloc>
 8009cea:	b940      	cbnz	r0, 8009cfe <__s2b+0x36>
 8009cec:	4602      	mov	r2, r0
 8009cee:	4b19      	ldr	r3, [pc, #100]	@ (8009d54 <__s2b+0x8c>)
 8009cf0:	4819      	ldr	r0, [pc, #100]	@ (8009d58 <__s2b+0x90>)
 8009cf2:	21d3      	movs	r1, #211	@ 0xd3
 8009cf4:	f002 f85c 	bl	800bdb0 <__assert_func>
 8009cf8:	0052      	lsls	r2, r2, #1
 8009cfa:	3101      	adds	r1, #1
 8009cfc:	e7f0      	b.n	8009ce0 <__s2b+0x18>
 8009cfe:	9b08      	ldr	r3, [sp, #32]
 8009d00:	6143      	str	r3, [r0, #20]
 8009d02:	2d09      	cmp	r5, #9
 8009d04:	f04f 0301 	mov.w	r3, #1
 8009d08:	6103      	str	r3, [r0, #16]
 8009d0a:	dd16      	ble.n	8009d3a <__s2b+0x72>
 8009d0c:	f104 0909 	add.w	r9, r4, #9
 8009d10:	46c8      	mov	r8, r9
 8009d12:	442c      	add	r4, r5
 8009d14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d18:	4601      	mov	r1, r0
 8009d1a:	3b30      	subs	r3, #48	@ 0x30
 8009d1c:	220a      	movs	r2, #10
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7ff ff8c 	bl	8009c3c <__multadd>
 8009d24:	45a0      	cmp	r8, r4
 8009d26:	d1f5      	bne.n	8009d14 <__s2b+0x4c>
 8009d28:	f1a5 0408 	sub.w	r4, r5, #8
 8009d2c:	444c      	add	r4, r9
 8009d2e:	1b2d      	subs	r5, r5, r4
 8009d30:	1963      	adds	r3, r4, r5
 8009d32:	42bb      	cmp	r3, r7
 8009d34:	db04      	blt.n	8009d40 <__s2b+0x78>
 8009d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d3a:	340a      	adds	r4, #10
 8009d3c:	2509      	movs	r5, #9
 8009d3e:	e7f6      	b.n	8009d2e <__s2b+0x66>
 8009d40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d44:	4601      	mov	r1, r0
 8009d46:	3b30      	subs	r3, #48	@ 0x30
 8009d48:	220a      	movs	r2, #10
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f7ff ff76 	bl	8009c3c <__multadd>
 8009d50:	e7ee      	b.n	8009d30 <__s2b+0x68>
 8009d52:	bf00      	nop
 8009d54:	0800ccef 	.word	0x0800ccef
 8009d58:	0800cd00 	.word	0x0800cd00

08009d5c <__hi0bits>:
 8009d5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d60:	4603      	mov	r3, r0
 8009d62:	bf36      	itet	cc
 8009d64:	0403      	lslcc	r3, r0, #16
 8009d66:	2000      	movcs	r0, #0
 8009d68:	2010      	movcc	r0, #16
 8009d6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d6e:	bf3c      	itt	cc
 8009d70:	021b      	lslcc	r3, r3, #8
 8009d72:	3008      	addcc	r0, #8
 8009d74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d78:	bf3c      	itt	cc
 8009d7a:	011b      	lslcc	r3, r3, #4
 8009d7c:	3004      	addcc	r0, #4
 8009d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d82:	bf3c      	itt	cc
 8009d84:	009b      	lslcc	r3, r3, #2
 8009d86:	3002      	addcc	r0, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	db05      	blt.n	8009d98 <__hi0bits+0x3c>
 8009d8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d90:	f100 0001 	add.w	r0, r0, #1
 8009d94:	bf08      	it	eq
 8009d96:	2020      	moveq	r0, #32
 8009d98:	4770      	bx	lr

08009d9a <__lo0bits>:
 8009d9a:	6803      	ldr	r3, [r0, #0]
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	f013 0007 	ands.w	r0, r3, #7
 8009da2:	d00b      	beq.n	8009dbc <__lo0bits+0x22>
 8009da4:	07d9      	lsls	r1, r3, #31
 8009da6:	d421      	bmi.n	8009dec <__lo0bits+0x52>
 8009da8:	0798      	lsls	r0, r3, #30
 8009daa:	bf49      	itett	mi
 8009dac:	085b      	lsrmi	r3, r3, #1
 8009dae:	089b      	lsrpl	r3, r3, #2
 8009db0:	2001      	movmi	r0, #1
 8009db2:	6013      	strmi	r3, [r2, #0]
 8009db4:	bf5c      	itt	pl
 8009db6:	6013      	strpl	r3, [r2, #0]
 8009db8:	2002      	movpl	r0, #2
 8009dba:	4770      	bx	lr
 8009dbc:	b299      	uxth	r1, r3
 8009dbe:	b909      	cbnz	r1, 8009dc4 <__lo0bits+0x2a>
 8009dc0:	0c1b      	lsrs	r3, r3, #16
 8009dc2:	2010      	movs	r0, #16
 8009dc4:	b2d9      	uxtb	r1, r3
 8009dc6:	b909      	cbnz	r1, 8009dcc <__lo0bits+0x32>
 8009dc8:	3008      	adds	r0, #8
 8009dca:	0a1b      	lsrs	r3, r3, #8
 8009dcc:	0719      	lsls	r1, r3, #28
 8009dce:	bf04      	itt	eq
 8009dd0:	091b      	lsreq	r3, r3, #4
 8009dd2:	3004      	addeq	r0, #4
 8009dd4:	0799      	lsls	r1, r3, #30
 8009dd6:	bf04      	itt	eq
 8009dd8:	089b      	lsreq	r3, r3, #2
 8009dda:	3002      	addeq	r0, #2
 8009ddc:	07d9      	lsls	r1, r3, #31
 8009dde:	d403      	bmi.n	8009de8 <__lo0bits+0x4e>
 8009de0:	085b      	lsrs	r3, r3, #1
 8009de2:	f100 0001 	add.w	r0, r0, #1
 8009de6:	d003      	beq.n	8009df0 <__lo0bits+0x56>
 8009de8:	6013      	str	r3, [r2, #0]
 8009dea:	4770      	bx	lr
 8009dec:	2000      	movs	r0, #0
 8009dee:	4770      	bx	lr
 8009df0:	2020      	movs	r0, #32
 8009df2:	4770      	bx	lr

08009df4 <__i2b>:
 8009df4:	b510      	push	{r4, lr}
 8009df6:	460c      	mov	r4, r1
 8009df8:	2101      	movs	r1, #1
 8009dfa:	f7ff febd 	bl	8009b78 <_Balloc>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	b928      	cbnz	r0, 8009e0e <__i2b+0x1a>
 8009e02:	4b05      	ldr	r3, [pc, #20]	@ (8009e18 <__i2b+0x24>)
 8009e04:	4805      	ldr	r0, [pc, #20]	@ (8009e1c <__i2b+0x28>)
 8009e06:	f240 1145 	movw	r1, #325	@ 0x145
 8009e0a:	f001 ffd1 	bl	800bdb0 <__assert_func>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	6144      	str	r4, [r0, #20]
 8009e12:	6103      	str	r3, [r0, #16]
 8009e14:	bd10      	pop	{r4, pc}
 8009e16:	bf00      	nop
 8009e18:	0800ccef 	.word	0x0800ccef
 8009e1c:	0800cd00 	.word	0x0800cd00

08009e20 <__multiply>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	4614      	mov	r4, r2
 8009e26:	690a      	ldr	r2, [r1, #16]
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	bfa8      	it	ge
 8009e2e:	4623      	movge	r3, r4
 8009e30:	460f      	mov	r7, r1
 8009e32:	bfa4      	itt	ge
 8009e34:	460c      	movge	r4, r1
 8009e36:	461f      	movge	r7, r3
 8009e38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009e3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009e40:	68a3      	ldr	r3, [r4, #8]
 8009e42:	6861      	ldr	r1, [r4, #4]
 8009e44:	eb0a 0609 	add.w	r6, sl, r9
 8009e48:	42b3      	cmp	r3, r6
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	bfb8      	it	lt
 8009e4e:	3101      	addlt	r1, #1
 8009e50:	f7ff fe92 	bl	8009b78 <_Balloc>
 8009e54:	b930      	cbnz	r0, 8009e64 <__multiply+0x44>
 8009e56:	4602      	mov	r2, r0
 8009e58:	4b44      	ldr	r3, [pc, #272]	@ (8009f6c <__multiply+0x14c>)
 8009e5a:	4845      	ldr	r0, [pc, #276]	@ (8009f70 <__multiply+0x150>)
 8009e5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e60:	f001 ffa6 	bl	800bdb0 <__assert_func>
 8009e64:	f100 0514 	add.w	r5, r0, #20
 8009e68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e6c:	462b      	mov	r3, r5
 8009e6e:	2200      	movs	r2, #0
 8009e70:	4543      	cmp	r3, r8
 8009e72:	d321      	bcc.n	8009eb8 <__multiply+0x98>
 8009e74:	f107 0114 	add.w	r1, r7, #20
 8009e78:	f104 0214 	add.w	r2, r4, #20
 8009e7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009e80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009e84:	9302      	str	r3, [sp, #8]
 8009e86:	1b13      	subs	r3, r2, r4
 8009e88:	3b15      	subs	r3, #21
 8009e8a:	f023 0303 	bic.w	r3, r3, #3
 8009e8e:	3304      	adds	r3, #4
 8009e90:	f104 0715 	add.w	r7, r4, #21
 8009e94:	42ba      	cmp	r2, r7
 8009e96:	bf38      	it	cc
 8009e98:	2304      	movcc	r3, #4
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	9b02      	ldr	r3, [sp, #8]
 8009e9e:	9103      	str	r1, [sp, #12]
 8009ea0:	428b      	cmp	r3, r1
 8009ea2:	d80c      	bhi.n	8009ebe <__multiply+0x9e>
 8009ea4:	2e00      	cmp	r6, #0
 8009ea6:	dd03      	ble.n	8009eb0 <__multiply+0x90>
 8009ea8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d05b      	beq.n	8009f68 <__multiply+0x148>
 8009eb0:	6106      	str	r6, [r0, #16]
 8009eb2:	b005      	add	sp, #20
 8009eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb8:	f843 2b04 	str.w	r2, [r3], #4
 8009ebc:	e7d8      	b.n	8009e70 <__multiply+0x50>
 8009ebe:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ec2:	f1ba 0f00 	cmp.w	sl, #0
 8009ec6:	d024      	beq.n	8009f12 <__multiply+0xf2>
 8009ec8:	f104 0e14 	add.w	lr, r4, #20
 8009ecc:	46a9      	mov	r9, r5
 8009ece:	f04f 0c00 	mov.w	ip, #0
 8009ed2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ed6:	f8d9 3000 	ldr.w	r3, [r9]
 8009eda:	fa1f fb87 	uxth.w	fp, r7
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ee4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009ee8:	f8d9 7000 	ldr.w	r7, [r9]
 8009eec:	4463      	add	r3, ip
 8009eee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ef2:	fb0a c70b 	mla	r7, sl, fp, ip
 8009ef6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f00:	4572      	cmp	r2, lr
 8009f02:	f849 3b04 	str.w	r3, [r9], #4
 8009f06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f0a:	d8e2      	bhi.n	8009ed2 <__multiply+0xb2>
 8009f0c:	9b01      	ldr	r3, [sp, #4]
 8009f0e:	f845 c003 	str.w	ip, [r5, r3]
 8009f12:	9b03      	ldr	r3, [sp, #12]
 8009f14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009f18:	3104      	adds	r1, #4
 8009f1a:	f1b9 0f00 	cmp.w	r9, #0
 8009f1e:	d021      	beq.n	8009f64 <__multiply+0x144>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	f104 0c14 	add.w	ip, r4, #20
 8009f26:	46ae      	mov	lr, r5
 8009f28:	f04f 0a00 	mov.w	sl, #0
 8009f2c:	f8bc b000 	ldrh.w	fp, [ip]
 8009f30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009f34:	fb09 770b 	mla	r7, r9, fp, r7
 8009f38:	4457      	add	r7, sl
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f40:	f84e 3b04 	str.w	r3, [lr], #4
 8009f44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f4c:	f8be 3000 	ldrh.w	r3, [lr]
 8009f50:	fb09 330a 	mla	r3, r9, sl, r3
 8009f54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009f58:	4562      	cmp	r2, ip
 8009f5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f5e:	d8e5      	bhi.n	8009f2c <__multiply+0x10c>
 8009f60:	9f01      	ldr	r7, [sp, #4]
 8009f62:	51eb      	str	r3, [r5, r7]
 8009f64:	3504      	adds	r5, #4
 8009f66:	e799      	b.n	8009e9c <__multiply+0x7c>
 8009f68:	3e01      	subs	r6, #1
 8009f6a:	e79b      	b.n	8009ea4 <__multiply+0x84>
 8009f6c:	0800ccef 	.word	0x0800ccef
 8009f70:	0800cd00 	.word	0x0800cd00

08009f74 <__pow5mult>:
 8009f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f78:	4615      	mov	r5, r2
 8009f7a:	f012 0203 	ands.w	r2, r2, #3
 8009f7e:	4607      	mov	r7, r0
 8009f80:	460e      	mov	r6, r1
 8009f82:	d007      	beq.n	8009f94 <__pow5mult+0x20>
 8009f84:	4c25      	ldr	r4, [pc, #148]	@ (800a01c <__pow5mult+0xa8>)
 8009f86:	3a01      	subs	r2, #1
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f8e:	f7ff fe55 	bl	8009c3c <__multadd>
 8009f92:	4606      	mov	r6, r0
 8009f94:	10ad      	asrs	r5, r5, #2
 8009f96:	d03d      	beq.n	800a014 <__pow5mult+0xa0>
 8009f98:	69fc      	ldr	r4, [r7, #28]
 8009f9a:	b97c      	cbnz	r4, 8009fbc <__pow5mult+0x48>
 8009f9c:	2010      	movs	r0, #16
 8009f9e:	f7ff fd35 	bl	8009a0c <malloc>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	61f8      	str	r0, [r7, #28]
 8009fa6:	b928      	cbnz	r0, 8009fb4 <__pow5mult+0x40>
 8009fa8:	4b1d      	ldr	r3, [pc, #116]	@ (800a020 <__pow5mult+0xac>)
 8009faa:	481e      	ldr	r0, [pc, #120]	@ (800a024 <__pow5mult+0xb0>)
 8009fac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009fb0:	f001 fefe 	bl	800bdb0 <__assert_func>
 8009fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fb8:	6004      	str	r4, [r0, #0]
 8009fba:	60c4      	str	r4, [r0, #12]
 8009fbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009fc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fc4:	b94c      	cbnz	r4, 8009fda <__pow5mult+0x66>
 8009fc6:	f240 2171 	movw	r1, #625	@ 0x271
 8009fca:	4638      	mov	r0, r7
 8009fcc:	f7ff ff12 	bl	8009df4 <__i2b>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	6003      	str	r3, [r0, #0]
 8009fda:	f04f 0900 	mov.w	r9, #0
 8009fde:	07eb      	lsls	r3, r5, #31
 8009fe0:	d50a      	bpl.n	8009ff8 <__pow5mult+0x84>
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	f7ff ff1a 	bl	8009e20 <__multiply>
 8009fec:	4631      	mov	r1, r6
 8009fee:	4680      	mov	r8, r0
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f7ff fe01 	bl	8009bf8 <_Bfree>
 8009ff6:	4646      	mov	r6, r8
 8009ff8:	106d      	asrs	r5, r5, #1
 8009ffa:	d00b      	beq.n	800a014 <__pow5mult+0xa0>
 8009ffc:	6820      	ldr	r0, [r4, #0]
 8009ffe:	b938      	cbnz	r0, 800a010 <__pow5mult+0x9c>
 800a000:	4622      	mov	r2, r4
 800a002:	4621      	mov	r1, r4
 800a004:	4638      	mov	r0, r7
 800a006:	f7ff ff0b 	bl	8009e20 <__multiply>
 800a00a:	6020      	str	r0, [r4, #0]
 800a00c:	f8c0 9000 	str.w	r9, [r0]
 800a010:	4604      	mov	r4, r0
 800a012:	e7e4      	b.n	8009fde <__pow5mult+0x6a>
 800a014:	4630      	mov	r0, r6
 800a016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a01a:	bf00      	nop
 800a01c:	0800cd5c 	.word	0x0800cd5c
 800a020:	0800cc80 	.word	0x0800cc80
 800a024:	0800cd00 	.word	0x0800cd00

0800a028 <__lshift>:
 800a028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a02c:	460c      	mov	r4, r1
 800a02e:	6849      	ldr	r1, [r1, #4]
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a036:	68a3      	ldr	r3, [r4, #8]
 800a038:	4607      	mov	r7, r0
 800a03a:	4691      	mov	r9, r2
 800a03c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a040:	f108 0601 	add.w	r6, r8, #1
 800a044:	42b3      	cmp	r3, r6
 800a046:	db0b      	blt.n	800a060 <__lshift+0x38>
 800a048:	4638      	mov	r0, r7
 800a04a:	f7ff fd95 	bl	8009b78 <_Balloc>
 800a04e:	4605      	mov	r5, r0
 800a050:	b948      	cbnz	r0, 800a066 <__lshift+0x3e>
 800a052:	4602      	mov	r2, r0
 800a054:	4b28      	ldr	r3, [pc, #160]	@ (800a0f8 <__lshift+0xd0>)
 800a056:	4829      	ldr	r0, [pc, #164]	@ (800a0fc <__lshift+0xd4>)
 800a058:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a05c:	f001 fea8 	bl	800bdb0 <__assert_func>
 800a060:	3101      	adds	r1, #1
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	e7ee      	b.n	800a044 <__lshift+0x1c>
 800a066:	2300      	movs	r3, #0
 800a068:	f100 0114 	add.w	r1, r0, #20
 800a06c:	f100 0210 	add.w	r2, r0, #16
 800a070:	4618      	mov	r0, r3
 800a072:	4553      	cmp	r3, sl
 800a074:	db33      	blt.n	800a0de <__lshift+0xb6>
 800a076:	6920      	ldr	r0, [r4, #16]
 800a078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a07c:	f104 0314 	add.w	r3, r4, #20
 800a080:	f019 091f 	ands.w	r9, r9, #31
 800a084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a088:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a08c:	d02b      	beq.n	800a0e6 <__lshift+0xbe>
 800a08e:	f1c9 0e20 	rsb	lr, r9, #32
 800a092:	468a      	mov	sl, r1
 800a094:	2200      	movs	r2, #0
 800a096:	6818      	ldr	r0, [r3, #0]
 800a098:	fa00 f009 	lsl.w	r0, r0, r9
 800a09c:	4310      	orrs	r0, r2
 800a09e:	f84a 0b04 	str.w	r0, [sl], #4
 800a0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a6:	459c      	cmp	ip, r3
 800a0a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a0ac:	d8f3      	bhi.n	800a096 <__lshift+0x6e>
 800a0ae:	ebac 0304 	sub.w	r3, ip, r4
 800a0b2:	3b15      	subs	r3, #21
 800a0b4:	f023 0303 	bic.w	r3, r3, #3
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	f104 0015 	add.w	r0, r4, #21
 800a0be:	4584      	cmp	ip, r0
 800a0c0:	bf38      	it	cc
 800a0c2:	2304      	movcc	r3, #4
 800a0c4:	50ca      	str	r2, [r1, r3]
 800a0c6:	b10a      	cbz	r2, 800a0cc <__lshift+0xa4>
 800a0c8:	f108 0602 	add.w	r6, r8, #2
 800a0cc:	3e01      	subs	r6, #1
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	612e      	str	r6, [r5, #16]
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	f7ff fd90 	bl	8009bf8 <_Bfree>
 800a0d8:	4628      	mov	r0, r5
 800a0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0de:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	e7c5      	b.n	800a072 <__lshift+0x4a>
 800a0e6:	3904      	subs	r1, #4
 800a0e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0f0:	459c      	cmp	ip, r3
 800a0f2:	d8f9      	bhi.n	800a0e8 <__lshift+0xc0>
 800a0f4:	e7ea      	b.n	800a0cc <__lshift+0xa4>
 800a0f6:	bf00      	nop
 800a0f8:	0800ccef 	.word	0x0800ccef
 800a0fc:	0800cd00 	.word	0x0800cd00

0800a100 <__mcmp>:
 800a100:	690a      	ldr	r2, [r1, #16]
 800a102:	4603      	mov	r3, r0
 800a104:	6900      	ldr	r0, [r0, #16]
 800a106:	1a80      	subs	r0, r0, r2
 800a108:	b530      	push	{r4, r5, lr}
 800a10a:	d10e      	bne.n	800a12a <__mcmp+0x2a>
 800a10c:	3314      	adds	r3, #20
 800a10e:	3114      	adds	r1, #20
 800a110:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a114:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a118:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a11c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a120:	4295      	cmp	r5, r2
 800a122:	d003      	beq.n	800a12c <__mcmp+0x2c>
 800a124:	d205      	bcs.n	800a132 <__mcmp+0x32>
 800a126:	f04f 30ff 	mov.w	r0, #4294967295
 800a12a:	bd30      	pop	{r4, r5, pc}
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	d3f3      	bcc.n	800a118 <__mcmp+0x18>
 800a130:	e7fb      	b.n	800a12a <__mcmp+0x2a>
 800a132:	2001      	movs	r0, #1
 800a134:	e7f9      	b.n	800a12a <__mcmp+0x2a>
	...

0800a138 <__mdiff>:
 800a138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	4689      	mov	r9, r1
 800a13e:	4606      	mov	r6, r0
 800a140:	4611      	mov	r1, r2
 800a142:	4648      	mov	r0, r9
 800a144:	4614      	mov	r4, r2
 800a146:	f7ff ffdb 	bl	800a100 <__mcmp>
 800a14a:	1e05      	subs	r5, r0, #0
 800a14c:	d112      	bne.n	800a174 <__mdiff+0x3c>
 800a14e:	4629      	mov	r1, r5
 800a150:	4630      	mov	r0, r6
 800a152:	f7ff fd11 	bl	8009b78 <_Balloc>
 800a156:	4602      	mov	r2, r0
 800a158:	b928      	cbnz	r0, 800a166 <__mdiff+0x2e>
 800a15a:	4b3f      	ldr	r3, [pc, #252]	@ (800a258 <__mdiff+0x120>)
 800a15c:	f240 2137 	movw	r1, #567	@ 0x237
 800a160:	483e      	ldr	r0, [pc, #248]	@ (800a25c <__mdiff+0x124>)
 800a162:	f001 fe25 	bl	800bdb0 <__assert_func>
 800a166:	2301      	movs	r3, #1
 800a168:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a16c:	4610      	mov	r0, r2
 800a16e:	b003      	add	sp, #12
 800a170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a174:	bfbc      	itt	lt
 800a176:	464b      	movlt	r3, r9
 800a178:	46a1      	movlt	r9, r4
 800a17a:	4630      	mov	r0, r6
 800a17c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a180:	bfba      	itte	lt
 800a182:	461c      	movlt	r4, r3
 800a184:	2501      	movlt	r5, #1
 800a186:	2500      	movge	r5, #0
 800a188:	f7ff fcf6 	bl	8009b78 <_Balloc>
 800a18c:	4602      	mov	r2, r0
 800a18e:	b918      	cbnz	r0, 800a198 <__mdiff+0x60>
 800a190:	4b31      	ldr	r3, [pc, #196]	@ (800a258 <__mdiff+0x120>)
 800a192:	f240 2145 	movw	r1, #581	@ 0x245
 800a196:	e7e3      	b.n	800a160 <__mdiff+0x28>
 800a198:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a19c:	6926      	ldr	r6, [r4, #16]
 800a19e:	60c5      	str	r5, [r0, #12]
 800a1a0:	f109 0310 	add.w	r3, r9, #16
 800a1a4:	f109 0514 	add.w	r5, r9, #20
 800a1a8:	f104 0e14 	add.w	lr, r4, #20
 800a1ac:	f100 0b14 	add.w	fp, r0, #20
 800a1b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a1b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a1b8:	9301      	str	r3, [sp, #4]
 800a1ba:	46d9      	mov	r9, fp
 800a1bc:	f04f 0c00 	mov.w	ip, #0
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a1c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a1ca:	9301      	str	r3, [sp, #4]
 800a1cc:	fa1f f38a 	uxth.w	r3, sl
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	b283      	uxth	r3, r0
 800a1d4:	1acb      	subs	r3, r1, r3
 800a1d6:	0c00      	lsrs	r0, r0, #16
 800a1d8:	4463      	add	r3, ip
 800a1da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a1de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a1e8:	4576      	cmp	r6, lr
 800a1ea:	f849 3b04 	str.w	r3, [r9], #4
 800a1ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1f2:	d8e5      	bhi.n	800a1c0 <__mdiff+0x88>
 800a1f4:	1b33      	subs	r3, r6, r4
 800a1f6:	3b15      	subs	r3, #21
 800a1f8:	f023 0303 	bic.w	r3, r3, #3
 800a1fc:	3415      	adds	r4, #21
 800a1fe:	3304      	adds	r3, #4
 800a200:	42a6      	cmp	r6, r4
 800a202:	bf38      	it	cc
 800a204:	2304      	movcc	r3, #4
 800a206:	441d      	add	r5, r3
 800a208:	445b      	add	r3, fp
 800a20a:	461e      	mov	r6, r3
 800a20c:	462c      	mov	r4, r5
 800a20e:	4544      	cmp	r4, r8
 800a210:	d30e      	bcc.n	800a230 <__mdiff+0xf8>
 800a212:	f108 0103 	add.w	r1, r8, #3
 800a216:	1b49      	subs	r1, r1, r5
 800a218:	f021 0103 	bic.w	r1, r1, #3
 800a21c:	3d03      	subs	r5, #3
 800a21e:	45a8      	cmp	r8, r5
 800a220:	bf38      	it	cc
 800a222:	2100      	movcc	r1, #0
 800a224:	440b      	add	r3, r1
 800a226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a22a:	b191      	cbz	r1, 800a252 <__mdiff+0x11a>
 800a22c:	6117      	str	r7, [r2, #16]
 800a22e:	e79d      	b.n	800a16c <__mdiff+0x34>
 800a230:	f854 1b04 	ldr.w	r1, [r4], #4
 800a234:	46e6      	mov	lr, ip
 800a236:	0c08      	lsrs	r0, r1, #16
 800a238:	fa1c fc81 	uxtah	ip, ip, r1
 800a23c:	4471      	add	r1, lr
 800a23e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a242:	b289      	uxth	r1, r1
 800a244:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a248:	f846 1b04 	str.w	r1, [r6], #4
 800a24c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a250:	e7dd      	b.n	800a20e <__mdiff+0xd6>
 800a252:	3f01      	subs	r7, #1
 800a254:	e7e7      	b.n	800a226 <__mdiff+0xee>
 800a256:	bf00      	nop
 800a258:	0800ccef 	.word	0x0800ccef
 800a25c:	0800cd00 	.word	0x0800cd00

0800a260 <__ulp>:
 800a260:	b082      	sub	sp, #8
 800a262:	ed8d 0b00 	vstr	d0, [sp]
 800a266:	9a01      	ldr	r2, [sp, #4]
 800a268:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a8 <__ulp+0x48>)
 800a26a:	4013      	ands	r3, r2
 800a26c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a270:	2b00      	cmp	r3, #0
 800a272:	dc08      	bgt.n	800a286 <__ulp+0x26>
 800a274:	425b      	negs	r3, r3
 800a276:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a27a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a27e:	da04      	bge.n	800a28a <__ulp+0x2a>
 800a280:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a284:	4113      	asrs	r3, r2
 800a286:	2200      	movs	r2, #0
 800a288:	e008      	b.n	800a29c <__ulp+0x3c>
 800a28a:	f1a2 0314 	sub.w	r3, r2, #20
 800a28e:	2b1e      	cmp	r3, #30
 800a290:	bfda      	itte	le
 800a292:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a296:	40da      	lsrle	r2, r3
 800a298:	2201      	movgt	r2, #1
 800a29a:	2300      	movs	r3, #0
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	ec41 0b10 	vmov	d0, r0, r1
 800a2a4:	b002      	add	sp, #8
 800a2a6:	4770      	bx	lr
 800a2a8:	7ff00000 	.word	0x7ff00000

0800a2ac <__b2d>:
 800a2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b0:	6906      	ldr	r6, [r0, #16]
 800a2b2:	f100 0814 	add.w	r8, r0, #20
 800a2b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a2ba:	1f37      	subs	r7, r6, #4
 800a2bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	f7ff fd4b 	bl	8009d5c <__hi0bits>
 800a2c6:	f1c0 0320 	rsb	r3, r0, #32
 800a2ca:	280a      	cmp	r0, #10
 800a2cc:	600b      	str	r3, [r1, #0]
 800a2ce:	491b      	ldr	r1, [pc, #108]	@ (800a33c <__b2d+0x90>)
 800a2d0:	dc15      	bgt.n	800a2fe <__b2d+0x52>
 800a2d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a2d6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a2da:	45b8      	cmp	r8, r7
 800a2dc:	ea43 0501 	orr.w	r5, r3, r1
 800a2e0:	bf34      	ite	cc
 800a2e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a2e6:	2300      	movcs	r3, #0
 800a2e8:	3015      	adds	r0, #21
 800a2ea:	fa02 f000 	lsl.w	r0, r2, r0
 800a2ee:	fa23 f30c 	lsr.w	r3, r3, ip
 800a2f2:	4303      	orrs	r3, r0
 800a2f4:	461c      	mov	r4, r3
 800a2f6:	ec45 4b10 	vmov	d0, r4, r5
 800a2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2fe:	45b8      	cmp	r8, r7
 800a300:	bf3a      	itte	cc
 800a302:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a306:	f1a6 0708 	subcc.w	r7, r6, #8
 800a30a:	2300      	movcs	r3, #0
 800a30c:	380b      	subs	r0, #11
 800a30e:	d012      	beq.n	800a336 <__b2d+0x8a>
 800a310:	f1c0 0120 	rsb	r1, r0, #32
 800a314:	fa23 f401 	lsr.w	r4, r3, r1
 800a318:	4082      	lsls	r2, r0
 800a31a:	4322      	orrs	r2, r4
 800a31c:	4547      	cmp	r7, r8
 800a31e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a322:	bf8c      	ite	hi
 800a324:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a328:	2200      	movls	r2, #0
 800a32a:	4083      	lsls	r3, r0
 800a32c:	40ca      	lsrs	r2, r1
 800a32e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a332:	4313      	orrs	r3, r2
 800a334:	e7de      	b.n	800a2f4 <__b2d+0x48>
 800a336:	ea42 0501 	orr.w	r5, r2, r1
 800a33a:	e7db      	b.n	800a2f4 <__b2d+0x48>
 800a33c:	3ff00000 	.word	0x3ff00000

0800a340 <__d2b>:
 800a340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a344:	460f      	mov	r7, r1
 800a346:	2101      	movs	r1, #1
 800a348:	ec59 8b10 	vmov	r8, r9, d0
 800a34c:	4616      	mov	r6, r2
 800a34e:	f7ff fc13 	bl	8009b78 <_Balloc>
 800a352:	4604      	mov	r4, r0
 800a354:	b930      	cbnz	r0, 800a364 <__d2b+0x24>
 800a356:	4602      	mov	r2, r0
 800a358:	4b23      	ldr	r3, [pc, #140]	@ (800a3e8 <__d2b+0xa8>)
 800a35a:	4824      	ldr	r0, [pc, #144]	@ (800a3ec <__d2b+0xac>)
 800a35c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a360:	f001 fd26 	bl	800bdb0 <__assert_func>
 800a364:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a36c:	b10d      	cbz	r5, 800a372 <__d2b+0x32>
 800a36e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	f1b8 0300 	subs.w	r3, r8, #0
 800a378:	d023      	beq.n	800a3c2 <__d2b+0x82>
 800a37a:	4668      	mov	r0, sp
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	f7ff fd0c 	bl	8009d9a <__lo0bits>
 800a382:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a386:	b1d0      	cbz	r0, 800a3be <__d2b+0x7e>
 800a388:	f1c0 0320 	rsb	r3, r0, #32
 800a38c:	fa02 f303 	lsl.w	r3, r2, r3
 800a390:	430b      	orrs	r3, r1
 800a392:	40c2      	lsrs	r2, r0
 800a394:	6163      	str	r3, [r4, #20]
 800a396:	9201      	str	r2, [sp, #4]
 800a398:	9b01      	ldr	r3, [sp, #4]
 800a39a:	61a3      	str	r3, [r4, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bf0c      	ite	eq
 800a3a0:	2201      	moveq	r2, #1
 800a3a2:	2202      	movne	r2, #2
 800a3a4:	6122      	str	r2, [r4, #16]
 800a3a6:	b1a5      	cbz	r5, 800a3d2 <__d2b+0x92>
 800a3a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a3ac:	4405      	add	r5, r0
 800a3ae:	603d      	str	r5, [r7, #0]
 800a3b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a3b4:	6030      	str	r0, [r6, #0]
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	b003      	add	sp, #12
 800a3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3be:	6161      	str	r1, [r4, #20]
 800a3c0:	e7ea      	b.n	800a398 <__d2b+0x58>
 800a3c2:	a801      	add	r0, sp, #4
 800a3c4:	f7ff fce9 	bl	8009d9a <__lo0bits>
 800a3c8:	9b01      	ldr	r3, [sp, #4]
 800a3ca:	6163      	str	r3, [r4, #20]
 800a3cc:	3020      	adds	r0, #32
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	e7e8      	b.n	800a3a4 <__d2b+0x64>
 800a3d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a3da:	6038      	str	r0, [r7, #0]
 800a3dc:	6918      	ldr	r0, [r3, #16]
 800a3de:	f7ff fcbd 	bl	8009d5c <__hi0bits>
 800a3e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3e6:	e7e5      	b.n	800a3b4 <__d2b+0x74>
 800a3e8:	0800ccef 	.word	0x0800ccef
 800a3ec:	0800cd00 	.word	0x0800cd00

0800a3f0 <__ratio>:
 800a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	e9cd 1000 	strd	r1, r0, [sp]
 800a3fa:	a902      	add	r1, sp, #8
 800a3fc:	f7ff ff56 	bl	800a2ac <__b2d>
 800a400:	9800      	ldr	r0, [sp, #0]
 800a402:	a903      	add	r1, sp, #12
 800a404:	ec55 4b10 	vmov	r4, r5, d0
 800a408:	f7ff ff50 	bl	800a2ac <__b2d>
 800a40c:	9b01      	ldr	r3, [sp, #4]
 800a40e:	6919      	ldr	r1, [r3, #16]
 800a410:	9b00      	ldr	r3, [sp, #0]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	1ac9      	subs	r1, r1, r3
 800a416:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a41a:	1a9b      	subs	r3, r3, r2
 800a41c:	ec5b ab10 	vmov	sl, fp, d0
 800a420:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfce      	itee	gt
 800a428:	462a      	movgt	r2, r5
 800a42a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a42e:	465a      	movle	r2, fp
 800a430:	462f      	mov	r7, r5
 800a432:	46d9      	mov	r9, fp
 800a434:	bfcc      	ite	gt
 800a436:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a43a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a43e:	464b      	mov	r3, r9
 800a440:	4652      	mov	r2, sl
 800a442:	4620      	mov	r0, r4
 800a444:	4639      	mov	r1, r7
 800a446:	f7f6 fa01 	bl	800084c <__aeabi_ddiv>
 800a44a:	ec41 0b10 	vmov	d0, r0, r1
 800a44e:	b005      	add	sp, #20
 800a450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a454 <__copybits>:
 800a454:	3901      	subs	r1, #1
 800a456:	b570      	push	{r4, r5, r6, lr}
 800a458:	1149      	asrs	r1, r1, #5
 800a45a:	6914      	ldr	r4, [r2, #16]
 800a45c:	3101      	adds	r1, #1
 800a45e:	f102 0314 	add.w	r3, r2, #20
 800a462:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a466:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a46a:	1f05      	subs	r5, r0, #4
 800a46c:	42a3      	cmp	r3, r4
 800a46e:	d30c      	bcc.n	800a48a <__copybits+0x36>
 800a470:	1aa3      	subs	r3, r4, r2
 800a472:	3b11      	subs	r3, #17
 800a474:	f023 0303 	bic.w	r3, r3, #3
 800a478:	3211      	adds	r2, #17
 800a47a:	42a2      	cmp	r2, r4
 800a47c:	bf88      	it	hi
 800a47e:	2300      	movhi	r3, #0
 800a480:	4418      	add	r0, r3
 800a482:	2300      	movs	r3, #0
 800a484:	4288      	cmp	r0, r1
 800a486:	d305      	bcc.n	800a494 <__copybits+0x40>
 800a488:	bd70      	pop	{r4, r5, r6, pc}
 800a48a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a48e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a492:	e7eb      	b.n	800a46c <__copybits+0x18>
 800a494:	f840 3b04 	str.w	r3, [r0], #4
 800a498:	e7f4      	b.n	800a484 <__copybits+0x30>

0800a49a <__any_on>:
 800a49a:	f100 0214 	add.w	r2, r0, #20
 800a49e:	6900      	ldr	r0, [r0, #16]
 800a4a0:	114b      	asrs	r3, r1, #5
 800a4a2:	4298      	cmp	r0, r3
 800a4a4:	b510      	push	{r4, lr}
 800a4a6:	db11      	blt.n	800a4cc <__any_on+0x32>
 800a4a8:	dd0a      	ble.n	800a4c0 <__any_on+0x26>
 800a4aa:	f011 011f 	ands.w	r1, r1, #31
 800a4ae:	d007      	beq.n	800a4c0 <__any_on+0x26>
 800a4b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4b4:	fa24 f001 	lsr.w	r0, r4, r1
 800a4b8:	fa00 f101 	lsl.w	r1, r0, r1
 800a4bc:	428c      	cmp	r4, r1
 800a4be:	d10b      	bne.n	800a4d8 <__any_on+0x3e>
 800a4c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d803      	bhi.n	800a4d0 <__any_on+0x36>
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	bd10      	pop	{r4, pc}
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	e7f7      	b.n	800a4c0 <__any_on+0x26>
 800a4d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	d0f5      	beq.n	800a4c4 <__any_on+0x2a>
 800a4d8:	2001      	movs	r0, #1
 800a4da:	e7f6      	b.n	800a4ca <__any_on+0x30>

0800a4dc <sulp>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	4604      	mov	r4, r0
 800a4e0:	460d      	mov	r5, r1
 800a4e2:	ec45 4b10 	vmov	d0, r4, r5
 800a4e6:	4616      	mov	r6, r2
 800a4e8:	f7ff feba 	bl	800a260 <__ulp>
 800a4ec:	ec51 0b10 	vmov	r0, r1, d0
 800a4f0:	b17e      	cbz	r6, 800a512 <sulp+0x36>
 800a4f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	dd09      	ble.n	800a512 <sulp+0x36>
 800a4fe:	051b      	lsls	r3, r3, #20
 800a500:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a504:	2400      	movs	r4, #0
 800a506:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a50a:	4622      	mov	r2, r4
 800a50c:	462b      	mov	r3, r5
 800a50e:	f7f6 f873 	bl	80005f8 <__aeabi_dmul>
 800a512:	ec41 0b10 	vmov	d0, r0, r1
 800a516:	bd70      	pop	{r4, r5, r6, pc}

0800a518 <_strtod_l>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	b09f      	sub	sp, #124	@ 0x7c
 800a51e:	460c      	mov	r4, r1
 800a520:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a522:	2200      	movs	r2, #0
 800a524:	921a      	str	r2, [sp, #104]	@ 0x68
 800a526:	9005      	str	r0, [sp, #20]
 800a528:	f04f 0a00 	mov.w	sl, #0
 800a52c:	f04f 0b00 	mov.w	fp, #0
 800a530:	460a      	mov	r2, r1
 800a532:	9219      	str	r2, [sp, #100]	@ 0x64
 800a534:	7811      	ldrb	r1, [r2, #0]
 800a536:	292b      	cmp	r1, #43	@ 0x2b
 800a538:	d04a      	beq.n	800a5d0 <_strtod_l+0xb8>
 800a53a:	d838      	bhi.n	800a5ae <_strtod_l+0x96>
 800a53c:	290d      	cmp	r1, #13
 800a53e:	d832      	bhi.n	800a5a6 <_strtod_l+0x8e>
 800a540:	2908      	cmp	r1, #8
 800a542:	d832      	bhi.n	800a5aa <_strtod_l+0x92>
 800a544:	2900      	cmp	r1, #0
 800a546:	d03b      	beq.n	800a5c0 <_strtod_l+0xa8>
 800a548:	2200      	movs	r2, #0
 800a54a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a54c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a54e:	782a      	ldrb	r2, [r5, #0]
 800a550:	2a30      	cmp	r2, #48	@ 0x30
 800a552:	f040 80b3 	bne.w	800a6bc <_strtod_l+0x1a4>
 800a556:	786a      	ldrb	r2, [r5, #1]
 800a558:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a55c:	2a58      	cmp	r2, #88	@ 0x58
 800a55e:	d16e      	bne.n	800a63e <_strtod_l+0x126>
 800a560:	9302      	str	r3, [sp, #8]
 800a562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	ab1a      	add	r3, sp, #104	@ 0x68
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	4a8e      	ldr	r2, [pc, #568]	@ (800a7a4 <_strtod_l+0x28c>)
 800a56c:	9805      	ldr	r0, [sp, #20]
 800a56e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a570:	a919      	add	r1, sp, #100	@ 0x64
 800a572:	f001 fcb7 	bl	800bee4 <__gethex>
 800a576:	f010 060f 	ands.w	r6, r0, #15
 800a57a:	4604      	mov	r4, r0
 800a57c:	d005      	beq.n	800a58a <_strtod_l+0x72>
 800a57e:	2e06      	cmp	r6, #6
 800a580:	d128      	bne.n	800a5d4 <_strtod_l+0xbc>
 800a582:	3501      	adds	r5, #1
 800a584:	2300      	movs	r3, #0
 800a586:	9519      	str	r5, [sp, #100]	@ 0x64
 800a588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a58a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 858e 	bne.w	800b0ae <_strtod_l+0xb96>
 800a592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a594:	b1cb      	cbz	r3, 800a5ca <_strtod_l+0xb2>
 800a596:	4652      	mov	r2, sl
 800a598:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a59c:	ec43 2b10 	vmov	d0, r2, r3
 800a5a0:	b01f      	add	sp, #124	@ 0x7c
 800a5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a6:	2920      	cmp	r1, #32
 800a5a8:	d1ce      	bne.n	800a548 <_strtod_l+0x30>
 800a5aa:	3201      	adds	r2, #1
 800a5ac:	e7c1      	b.n	800a532 <_strtod_l+0x1a>
 800a5ae:	292d      	cmp	r1, #45	@ 0x2d
 800a5b0:	d1ca      	bne.n	800a548 <_strtod_l+0x30>
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a5b6:	1c51      	adds	r1, r2, #1
 800a5b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a5ba:	7852      	ldrb	r2, [r2, #1]
 800a5bc:	2a00      	cmp	r2, #0
 800a5be:	d1c5      	bne.n	800a54c <_strtod_l+0x34>
 800a5c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f040 8570 	bne.w	800b0aa <_strtod_l+0xb92>
 800a5ca:	4652      	mov	r2, sl
 800a5cc:	465b      	mov	r3, fp
 800a5ce:	e7e5      	b.n	800a59c <_strtod_l+0x84>
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	e7ef      	b.n	800a5b4 <_strtod_l+0x9c>
 800a5d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a5d6:	b13a      	cbz	r2, 800a5e8 <_strtod_l+0xd0>
 800a5d8:	2135      	movs	r1, #53	@ 0x35
 800a5da:	a81c      	add	r0, sp, #112	@ 0x70
 800a5dc:	f7ff ff3a 	bl	800a454 <__copybits>
 800a5e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5e2:	9805      	ldr	r0, [sp, #20]
 800a5e4:	f7ff fb08 	bl	8009bf8 <_Bfree>
 800a5e8:	3e01      	subs	r6, #1
 800a5ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a5ec:	2e04      	cmp	r6, #4
 800a5ee:	d806      	bhi.n	800a5fe <_strtod_l+0xe6>
 800a5f0:	e8df f006 	tbb	[pc, r6]
 800a5f4:	201d0314 	.word	0x201d0314
 800a5f8:	14          	.byte	0x14
 800a5f9:	00          	.byte	0x00
 800a5fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a5fe:	05e1      	lsls	r1, r4, #23
 800a600:	bf48      	it	mi
 800a602:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a606:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a60a:	0d1b      	lsrs	r3, r3, #20
 800a60c:	051b      	lsls	r3, r3, #20
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1bb      	bne.n	800a58a <_strtod_l+0x72>
 800a612:	f7fe fb2f 	bl	8008c74 <__errno>
 800a616:	2322      	movs	r3, #34	@ 0x22
 800a618:	6003      	str	r3, [r0, #0]
 800a61a:	e7b6      	b.n	800a58a <_strtod_l+0x72>
 800a61c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a620:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a624:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a628:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a62c:	e7e7      	b.n	800a5fe <_strtod_l+0xe6>
 800a62e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a7ac <_strtod_l+0x294>
 800a632:	e7e4      	b.n	800a5fe <_strtod_l+0xe6>
 800a634:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a638:	f04f 3aff 	mov.w	sl, #4294967295
 800a63c:	e7df      	b.n	800a5fe <_strtod_l+0xe6>
 800a63e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	9219      	str	r2, [sp, #100]	@ 0x64
 800a644:	785b      	ldrb	r3, [r3, #1]
 800a646:	2b30      	cmp	r3, #48	@ 0x30
 800a648:	d0f9      	beq.n	800a63e <_strtod_l+0x126>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d09d      	beq.n	800a58a <_strtod_l+0x72>
 800a64e:	2301      	movs	r3, #1
 800a650:	9309      	str	r3, [sp, #36]	@ 0x24
 800a652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a654:	930c      	str	r3, [sp, #48]	@ 0x30
 800a656:	2300      	movs	r3, #0
 800a658:	9308      	str	r3, [sp, #32]
 800a65a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a65c:	461f      	mov	r7, r3
 800a65e:	220a      	movs	r2, #10
 800a660:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a662:	7805      	ldrb	r5, [r0, #0]
 800a664:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a668:	b2d9      	uxtb	r1, r3
 800a66a:	2909      	cmp	r1, #9
 800a66c:	d928      	bls.n	800a6c0 <_strtod_l+0x1a8>
 800a66e:	494e      	ldr	r1, [pc, #312]	@ (800a7a8 <_strtod_l+0x290>)
 800a670:	2201      	movs	r2, #1
 800a672:	f001 fb62 	bl	800bd3a <strncmp>
 800a676:	2800      	cmp	r0, #0
 800a678:	d032      	beq.n	800a6e0 <_strtod_l+0x1c8>
 800a67a:	2000      	movs	r0, #0
 800a67c:	462a      	mov	r2, r5
 800a67e:	4681      	mov	r9, r0
 800a680:	463d      	mov	r5, r7
 800a682:	4603      	mov	r3, r0
 800a684:	2a65      	cmp	r2, #101	@ 0x65
 800a686:	d001      	beq.n	800a68c <_strtod_l+0x174>
 800a688:	2a45      	cmp	r2, #69	@ 0x45
 800a68a:	d114      	bne.n	800a6b6 <_strtod_l+0x19e>
 800a68c:	b91d      	cbnz	r5, 800a696 <_strtod_l+0x17e>
 800a68e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a690:	4302      	orrs	r2, r0
 800a692:	d095      	beq.n	800a5c0 <_strtod_l+0xa8>
 800a694:	2500      	movs	r5, #0
 800a696:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a698:	1c62      	adds	r2, r4, #1
 800a69a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a69c:	7862      	ldrb	r2, [r4, #1]
 800a69e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a6a0:	d077      	beq.n	800a792 <_strtod_l+0x27a>
 800a6a2:	2a2d      	cmp	r2, #45	@ 0x2d
 800a6a4:	d07b      	beq.n	800a79e <_strtod_l+0x286>
 800a6a6:	f04f 0c00 	mov.w	ip, #0
 800a6aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a6ae:	2909      	cmp	r1, #9
 800a6b0:	f240 8082 	bls.w	800a7b8 <_strtod_l+0x2a0>
 800a6b4:	9419      	str	r4, [sp, #100]	@ 0x64
 800a6b6:	f04f 0800 	mov.w	r8, #0
 800a6ba:	e0a2      	b.n	800a802 <_strtod_l+0x2ea>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e7c7      	b.n	800a650 <_strtod_l+0x138>
 800a6c0:	2f08      	cmp	r7, #8
 800a6c2:	bfd5      	itete	le
 800a6c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a6c6:	9908      	ldrgt	r1, [sp, #32]
 800a6c8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a6d0:	f100 0001 	add.w	r0, r0, #1
 800a6d4:	bfd4      	ite	le
 800a6d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a6d8:	9308      	strgt	r3, [sp, #32]
 800a6da:	3701      	adds	r7, #1
 800a6dc:	9019      	str	r0, [sp, #100]	@ 0x64
 800a6de:	e7bf      	b.n	800a660 <_strtod_l+0x148>
 800a6e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6e6:	785a      	ldrb	r2, [r3, #1]
 800a6e8:	b37f      	cbz	r7, 800a74a <_strtod_l+0x232>
 800a6ea:	4681      	mov	r9, r0
 800a6ec:	463d      	mov	r5, r7
 800a6ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a6f2:	2b09      	cmp	r3, #9
 800a6f4:	d912      	bls.n	800a71c <_strtod_l+0x204>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7c4      	b.n	800a684 <_strtod_l+0x16c>
 800a6fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800a700:	785a      	ldrb	r2, [r3, #1]
 800a702:	3001      	adds	r0, #1
 800a704:	2a30      	cmp	r2, #48	@ 0x30
 800a706:	d0f8      	beq.n	800a6fa <_strtod_l+0x1e2>
 800a708:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	f200 84d3 	bhi.w	800b0b8 <_strtod_l+0xba0>
 800a712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a714:	930c      	str	r3, [sp, #48]	@ 0x30
 800a716:	4681      	mov	r9, r0
 800a718:	2000      	movs	r0, #0
 800a71a:	4605      	mov	r5, r0
 800a71c:	3a30      	subs	r2, #48	@ 0x30
 800a71e:	f100 0301 	add.w	r3, r0, #1
 800a722:	d02a      	beq.n	800a77a <_strtod_l+0x262>
 800a724:	4499      	add	r9, r3
 800a726:	eb00 0c05 	add.w	ip, r0, r5
 800a72a:	462b      	mov	r3, r5
 800a72c:	210a      	movs	r1, #10
 800a72e:	4563      	cmp	r3, ip
 800a730:	d10d      	bne.n	800a74e <_strtod_l+0x236>
 800a732:	1c69      	adds	r1, r5, #1
 800a734:	4401      	add	r1, r0
 800a736:	4428      	add	r0, r5
 800a738:	2808      	cmp	r0, #8
 800a73a:	dc16      	bgt.n	800a76a <_strtod_l+0x252>
 800a73c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a73e:	230a      	movs	r3, #10
 800a740:	fb03 2300 	mla	r3, r3, r0, r2
 800a744:	930a      	str	r3, [sp, #40]	@ 0x28
 800a746:	2300      	movs	r3, #0
 800a748:	e018      	b.n	800a77c <_strtod_l+0x264>
 800a74a:	4638      	mov	r0, r7
 800a74c:	e7da      	b.n	800a704 <_strtod_l+0x1ec>
 800a74e:	2b08      	cmp	r3, #8
 800a750:	f103 0301 	add.w	r3, r3, #1
 800a754:	dc03      	bgt.n	800a75e <_strtod_l+0x246>
 800a756:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a758:	434e      	muls	r6, r1
 800a75a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a75c:	e7e7      	b.n	800a72e <_strtod_l+0x216>
 800a75e:	2b10      	cmp	r3, #16
 800a760:	bfde      	ittt	le
 800a762:	9e08      	ldrle	r6, [sp, #32]
 800a764:	434e      	mulle	r6, r1
 800a766:	9608      	strle	r6, [sp, #32]
 800a768:	e7e1      	b.n	800a72e <_strtod_l+0x216>
 800a76a:	280f      	cmp	r0, #15
 800a76c:	dceb      	bgt.n	800a746 <_strtod_l+0x22e>
 800a76e:	9808      	ldr	r0, [sp, #32]
 800a770:	230a      	movs	r3, #10
 800a772:	fb03 2300 	mla	r3, r3, r0, r2
 800a776:	9308      	str	r3, [sp, #32]
 800a778:	e7e5      	b.n	800a746 <_strtod_l+0x22e>
 800a77a:	4629      	mov	r1, r5
 800a77c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a77e:	1c50      	adds	r0, r2, #1
 800a780:	9019      	str	r0, [sp, #100]	@ 0x64
 800a782:	7852      	ldrb	r2, [r2, #1]
 800a784:	4618      	mov	r0, r3
 800a786:	460d      	mov	r5, r1
 800a788:	e7b1      	b.n	800a6ee <_strtod_l+0x1d6>
 800a78a:	f04f 0900 	mov.w	r9, #0
 800a78e:	2301      	movs	r3, #1
 800a790:	e77d      	b.n	800a68e <_strtod_l+0x176>
 800a792:	f04f 0c00 	mov.w	ip, #0
 800a796:	1ca2      	adds	r2, r4, #2
 800a798:	9219      	str	r2, [sp, #100]	@ 0x64
 800a79a:	78a2      	ldrb	r2, [r4, #2]
 800a79c:	e785      	b.n	800a6aa <_strtod_l+0x192>
 800a79e:	f04f 0c01 	mov.w	ip, #1
 800a7a2:	e7f8      	b.n	800a796 <_strtod_l+0x27e>
 800a7a4:	0800ce70 	.word	0x0800ce70
 800a7a8:	0800ce58 	.word	0x0800ce58
 800a7ac:	7ff00000 	.word	0x7ff00000
 800a7b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a7b2:	1c51      	adds	r1, r2, #1
 800a7b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a7b6:	7852      	ldrb	r2, [r2, #1]
 800a7b8:	2a30      	cmp	r2, #48	@ 0x30
 800a7ba:	d0f9      	beq.n	800a7b0 <_strtod_l+0x298>
 800a7bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a7c0:	2908      	cmp	r1, #8
 800a7c2:	f63f af78 	bhi.w	800a6b6 <_strtod_l+0x19e>
 800a7c6:	3a30      	subs	r2, #48	@ 0x30
 800a7c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a7cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a7ce:	f04f 080a 	mov.w	r8, #10
 800a7d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a7d4:	1c56      	adds	r6, r2, #1
 800a7d6:	9619      	str	r6, [sp, #100]	@ 0x64
 800a7d8:	7852      	ldrb	r2, [r2, #1]
 800a7da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a7de:	f1be 0f09 	cmp.w	lr, #9
 800a7e2:	d939      	bls.n	800a858 <_strtod_l+0x340>
 800a7e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a7e6:	1a76      	subs	r6, r6, r1
 800a7e8:	2e08      	cmp	r6, #8
 800a7ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a7ee:	dc03      	bgt.n	800a7f8 <_strtod_l+0x2e0>
 800a7f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a7f2:	4588      	cmp	r8, r1
 800a7f4:	bfa8      	it	ge
 800a7f6:	4688      	movge	r8, r1
 800a7f8:	f1bc 0f00 	cmp.w	ip, #0
 800a7fc:	d001      	beq.n	800a802 <_strtod_l+0x2ea>
 800a7fe:	f1c8 0800 	rsb	r8, r8, #0
 800a802:	2d00      	cmp	r5, #0
 800a804:	d14e      	bne.n	800a8a4 <_strtod_l+0x38c>
 800a806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a808:	4308      	orrs	r0, r1
 800a80a:	f47f aebe 	bne.w	800a58a <_strtod_l+0x72>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f47f aed6 	bne.w	800a5c0 <_strtod_l+0xa8>
 800a814:	2a69      	cmp	r2, #105	@ 0x69
 800a816:	d028      	beq.n	800a86a <_strtod_l+0x352>
 800a818:	dc25      	bgt.n	800a866 <_strtod_l+0x34e>
 800a81a:	2a49      	cmp	r2, #73	@ 0x49
 800a81c:	d025      	beq.n	800a86a <_strtod_l+0x352>
 800a81e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a820:	f47f aece 	bne.w	800a5c0 <_strtod_l+0xa8>
 800a824:	499b      	ldr	r1, [pc, #620]	@ (800aa94 <_strtod_l+0x57c>)
 800a826:	a819      	add	r0, sp, #100	@ 0x64
 800a828:	f001 fd7e 	bl	800c328 <__match>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	f43f aec7 	beq.w	800a5c0 <_strtod_l+0xa8>
 800a832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b28      	cmp	r3, #40	@ 0x28
 800a838:	d12e      	bne.n	800a898 <_strtod_l+0x380>
 800a83a:	4997      	ldr	r1, [pc, #604]	@ (800aa98 <_strtod_l+0x580>)
 800a83c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a83e:	a819      	add	r0, sp, #100	@ 0x64
 800a840:	f001 fd86 	bl	800c350 <__hexnan>
 800a844:	2805      	cmp	r0, #5
 800a846:	d127      	bne.n	800a898 <_strtod_l+0x380>
 800a848:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a84a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a84e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a852:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a856:	e698      	b.n	800a58a <_strtod_l+0x72>
 800a858:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a85a:	fb08 2101 	mla	r1, r8, r1, r2
 800a85e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a862:	920e      	str	r2, [sp, #56]	@ 0x38
 800a864:	e7b5      	b.n	800a7d2 <_strtod_l+0x2ba>
 800a866:	2a6e      	cmp	r2, #110	@ 0x6e
 800a868:	e7da      	b.n	800a820 <_strtod_l+0x308>
 800a86a:	498c      	ldr	r1, [pc, #560]	@ (800aa9c <_strtod_l+0x584>)
 800a86c:	a819      	add	r0, sp, #100	@ 0x64
 800a86e:	f001 fd5b 	bl	800c328 <__match>
 800a872:	2800      	cmp	r0, #0
 800a874:	f43f aea4 	beq.w	800a5c0 <_strtod_l+0xa8>
 800a878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a87a:	4989      	ldr	r1, [pc, #548]	@ (800aaa0 <_strtod_l+0x588>)
 800a87c:	3b01      	subs	r3, #1
 800a87e:	a819      	add	r0, sp, #100	@ 0x64
 800a880:	9319      	str	r3, [sp, #100]	@ 0x64
 800a882:	f001 fd51 	bl	800c328 <__match>
 800a886:	b910      	cbnz	r0, 800a88e <_strtod_l+0x376>
 800a888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a88a:	3301      	adds	r3, #1
 800a88c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a88e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aab0 <_strtod_l+0x598>
 800a892:	f04f 0a00 	mov.w	sl, #0
 800a896:	e678      	b.n	800a58a <_strtod_l+0x72>
 800a898:	4882      	ldr	r0, [pc, #520]	@ (800aaa4 <_strtod_l+0x58c>)
 800a89a:	f001 fa81 	bl	800bda0 <nan>
 800a89e:	ec5b ab10 	vmov	sl, fp, d0
 800a8a2:	e672      	b.n	800a58a <_strtod_l+0x72>
 800a8a4:	eba8 0309 	sub.w	r3, r8, r9
 800a8a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a8aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ac:	2f00      	cmp	r7, #0
 800a8ae:	bf08      	it	eq
 800a8b0:	462f      	moveq	r7, r5
 800a8b2:	2d10      	cmp	r5, #16
 800a8b4:	462c      	mov	r4, r5
 800a8b6:	bfa8      	it	ge
 800a8b8:	2410      	movge	r4, #16
 800a8ba:	f7f5 fe23 	bl	8000504 <__aeabi_ui2d>
 800a8be:	2d09      	cmp	r5, #9
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	468b      	mov	fp, r1
 800a8c4:	dc13      	bgt.n	800a8ee <_strtod_l+0x3d6>
 800a8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f43f ae5e 	beq.w	800a58a <_strtod_l+0x72>
 800a8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d0:	dd78      	ble.n	800a9c4 <_strtod_l+0x4ac>
 800a8d2:	2b16      	cmp	r3, #22
 800a8d4:	dc5f      	bgt.n	800a996 <_strtod_l+0x47e>
 800a8d6:	4974      	ldr	r1, [pc, #464]	@ (800aaa8 <_strtod_l+0x590>)
 800a8d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e0:	4652      	mov	r2, sl
 800a8e2:	465b      	mov	r3, fp
 800a8e4:	f7f5 fe88 	bl	80005f8 <__aeabi_dmul>
 800a8e8:	4682      	mov	sl, r0
 800a8ea:	468b      	mov	fp, r1
 800a8ec:	e64d      	b.n	800a58a <_strtod_l+0x72>
 800a8ee:	4b6e      	ldr	r3, [pc, #440]	@ (800aaa8 <_strtod_l+0x590>)
 800a8f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a8f8:	f7f5 fe7e 	bl	80005f8 <__aeabi_dmul>
 800a8fc:	4682      	mov	sl, r0
 800a8fe:	9808      	ldr	r0, [sp, #32]
 800a900:	468b      	mov	fp, r1
 800a902:	f7f5 fdff 	bl	8000504 <__aeabi_ui2d>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4650      	mov	r0, sl
 800a90c:	4659      	mov	r1, fp
 800a90e:	f7f5 fcbd 	bl	800028c <__adddf3>
 800a912:	2d0f      	cmp	r5, #15
 800a914:	4682      	mov	sl, r0
 800a916:	468b      	mov	fp, r1
 800a918:	ddd5      	ble.n	800a8c6 <_strtod_l+0x3ae>
 800a91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a91c:	1b2c      	subs	r4, r5, r4
 800a91e:	441c      	add	r4, r3
 800a920:	2c00      	cmp	r4, #0
 800a922:	f340 8096 	ble.w	800aa52 <_strtod_l+0x53a>
 800a926:	f014 030f 	ands.w	r3, r4, #15
 800a92a:	d00a      	beq.n	800a942 <_strtod_l+0x42a>
 800a92c:	495e      	ldr	r1, [pc, #376]	@ (800aaa8 <_strtod_l+0x590>)
 800a92e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a932:	4652      	mov	r2, sl
 800a934:	465b      	mov	r3, fp
 800a936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a93a:	f7f5 fe5d 	bl	80005f8 <__aeabi_dmul>
 800a93e:	4682      	mov	sl, r0
 800a940:	468b      	mov	fp, r1
 800a942:	f034 040f 	bics.w	r4, r4, #15
 800a946:	d073      	beq.n	800aa30 <_strtod_l+0x518>
 800a948:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a94c:	dd48      	ble.n	800a9e0 <_strtod_l+0x4c8>
 800a94e:	2400      	movs	r4, #0
 800a950:	46a0      	mov	r8, r4
 800a952:	940a      	str	r4, [sp, #40]	@ 0x28
 800a954:	46a1      	mov	r9, r4
 800a956:	9a05      	ldr	r2, [sp, #20]
 800a958:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aab0 <_strtod_l+0x598>
 800a95c:	2322      	movs	r3, #34	@ 0x22
 800a95e:	6013      	str	r3, [r2, #0]
 800a960:	f04f 0a00 	mov.w	sl, #0
 800a964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a966:	2b00      	cmp	r3, #0
 800a968:	f43f ae0f 	beq.w	800a58a <_strtod_l+0x72>
 800a96c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a96e:	9805      	ldr	r0, [sp, #20]
 800a970:	f7ff f942 	bl	8009bf8 <_Bfree>
 800a974:	9805      	ldr	r0, [sp, #20]
 800a976:	4649      	mov	r1, r9
 800a978:	f7ff f93e 	bl	8009bf8 <_Bfree>
 800a97c:	9805      	ldr	r0, [sp, #20]
 800a97e:	4641      	mov	r1, r8
 800a980:	f7ff f93a 	bl	8009bf8 <_Bfree>
 800a984:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a986:	9805      	ldr	r0, [sp, #20]
 800a988:	f7ff f936 	bl	8009bf8 <_Bfree>
 800a98c:	9805      	ldr	r0, [sp, #20]
 800a98e:	4621      	mov	r1, r4
 800a990:	f7ff f932 	bl	8009bf8 <_Bfree>
 800a994:	e5f9      	b.n	800a58a <_strtod_l+0x72>
 800a996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a998:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a99c:	4293      	cmp	r3, r2
 800a99e:	dbbc      	blt.n	800a91a <_strtod_l+0x402>
 800a9a0:	4c41      	ldr	r4, [pc, #260]	@ (800aaa8 <_strtod_l+0x590>)
 800a9a2:	f1c5 050f 	rsb	r5, r5, #15
 800a9a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a9aa:	4652      	mov	r2, sl
 800a9ac:	465b      	mov	r3, fp
 800a9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9b2:	f7f5 fe21 	bl	80005f8 <__aeabi_dmul>
 800a9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b8:	1b5d      	subs	r5, r3, r5
 800a9ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a9be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a9c2:	e78f      	b.n	800a8e4 <_strtod_l+0x3cc>
 800a9c4:	3316      	adds	r3, #22
 800a9c6:	dba8      	blt.n	800a91a <_strtod_l+0x402>
 800a9c8:	4b37      	ldr	r3, [pc, #220]	@ (800aaa8 <_strtod_l+0x590>)
 800a9ca:	eba9 0808 	sub.w	r8, r9, r8
 800a9ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a9d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a9d6:	4650      	mov	r0, sl
 800a9d8:	4659      	mov	r1, fp
 800a9da:	f7f5 ff37 	bl	800084c <__aeabi_ddiv>
 800a9de:	e783      	b.n	800a8e8 <_strtod_l+0x3d0>
 800a9e0:	4b32      	ldr	r3, [pc, #200]	@ (800aaac <_strtod_l+0x594>)
 800a9e2:	9308      	str	r3, [sp, #32]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	1124      	asrs	r4, r4, #4
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	4659      	mov	r1, fp
 800a9ec:	461e      	mov	r6, r3
 800a9ee:	2c01      	cmp	r4, #1
 800a9f0:	dc21      	bgt.n	800aa36 <_strtod_l+0x51e>
 800a9f2:	b10b      	cbz	r3, 800a9f8 <_strtod_l+0x4e0>
 800a9f4:	4682      	mov	sl, r0
 800a9f6:	468b      	mov	fp, r1
 800a9f8:	492c      	ldr	r1, [pc, #176]	@ (800aaac <_strtod_l+0x594>)
 800a9fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a9fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aa02:	4652      	mov	r2, sl
 800aa04:	465b      	mov	r3, fp
 800aa06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa0a:	f7f5 fdf5 	bl	80005f8 <__aeabi_dmul>
 800aa0e:	4b28      	ldr	r3, [pc, #160]	@ (800aab0 <_strtod_l+0x598>)
 800aa10:	460a      	mov	r2, r1
 800aa12:	400b      	ands	r3, r1
 800aa14:	4927      	ldr	r1, [pc, #156]	@ (800aab4 <_strtod_l+0x59c>)
 800aa16:	428b      	cmp	r3, r1
 800aa18:	4682      	mov	sl, r0
 800aa1a:	d898      	bhi.n	800a94e <_strtod_l+0x436>
 800aa1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aa20:	428b      	cmp	r3, r1
 800aa22:	bf86      	itte	hi
 800aa24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aab8 <_strtod_l+0x5a0>
 800aa28:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800aa30:	2300      	movs	r3, #0
 800aa32:	9308      	str	r3, [sp, #32]
 800aa34:	e07a      	b.n	800ab2c <_strtod_l+0x614>
 800aa36:	07e2      	lsls	r2, r4, #31
 800aa38:	d505      	bpl.n	800aa46 <_strtod_l+0x52e>
 800aa3a:	9b08      	ldr	r3, [sp, #32]
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fdda 	bl	80005f8 <__aeabi_dmul>
 800aa44:	2301      	movs	r3, #1
 800aa46:	9a08      	ldr	r2, [sp, #32]
 800aa48:	3208      	adds	r2, #8
 800aa4a:	3601      	adds	r6, #1
 800aa4c:	1064      	asrs	r4, r4, #1
 800aa4e:	9208      	str	r2, [sp, #32]
 800aa50:	e7cd      	b.n	800a9ee <_strtod_l+0x4d6>
 800aa52:	d0ed      	beq.n	800aa30 <_strtod_l+0x518>
 800aa54:	4264      	negs	r4, r4
 800aa56:	f014 020f 	ands.w	r2, r4, #15
 800aa5a:	d00a      	beq.n	800aa72 <_strtod_l+0x55a>
 800aa5c:	4b12      	ldr	r3, [pc, #72]	@ (800aaa8 <_strtod_l+0x590>)
 800aa5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa62:	4650      	mov	r0, sl
 800aa64:	4659      	mov	r1, fp
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	f7f5 feef 	bl	800084c <__aeabi_ddiv>
 800aa6e:	4682      	mov	sl, r0
 800aa70:	468b      	mov	fp, r1
 800aa72:	1124      	asrs	r4, r4, #4
 800aa74:	d0dc      	beq.n	800aa30 <_strtod_l+0x518>
 800aa76:	2c1f      	cmp	r4, #31
 800aa78:	dd20      	ble.n	800aabc <_strtod_l+0x5a4>
 800aa7a:	2400      	movs	r4, #0
 800aa7c:	46a0      	mov	r8, r4
 800aa7e:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa80:	46a1      	mov	r9, r4
 800aa82:	9a05      	ldr	r2, [sp, #20]
 800aa84:	2322      	movs	r3, #34	@ 0x22
 800aa86:	f04f 0a00 	mov.w	sl, #0
 800aa8a:	f04f 0b00 	mov.w	fp, #0
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	e768      	b.n	800a964 <_strtod_l+0x44c>
 800aa92:	bf00      	nop
 800aa94:	0800cc49 	.word	0x0800cc49
 800aa98:	0800ce5c 	.word	0x0800ce5c
 800aa9c:	0800cc41 	.word	0x0800cc41
 800aaa0:	0800cc76 	.word	0x0800cc76
 800aaa4:	0800d020 	.word	0x0800d020
 800aaa8:	0800cd90 	.word	0x0800cd90
 800aaac:	0800cd68 	.word	0x0800cd68
 800aab0:	7ff00000 	.word	0x7ff00000
 800aab4:	7ca00000 	.word	0x7ca00000
 800aab8:	7fefffff 	.word	0x7fefffff
 800aabc:	f014 0310 	ands.w	r3, r4, #16
 800aac0:	bf18      	it	ne
 800aac2:	236a      	movne	r3, #106	@ 0x6a
 800aac4:	4ea9      	ldr	r6, [pc, #676]	@ (800ad6c <_strtod_l+0x854>)
 800aac6:	9308      	str	r3, [sp, #32]
 800aac8:	4650      	mov	r0, sl
 800aaca:	4659      	mov	r1, fp
 800aacc:	2300      	movs	r3, #0
 800aace:	07e2      	lsls	r2, r4, #31
 800aad0:	d504      	bpl.n	800aadc <_strtod_l+0x5c4>
 800aad2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aad6:	f7f5 fd8f 	bl	80005f8 <__aeabi_dmul>
 800aada:	2301      	movs	r3, #1
 800aadc:	1064      	asrs	r4, r4, #1
 800aade:	f106 0608 	add.w	r6, r6, #8
 800aae2:	d1f4      	bne.n	800aace <_strtod_l+0x5b6>
 800aae4:	b10b      	cbz	r3, 800aaea <_strtod_l+0x5d2>
 800aae6:	4682      	mov	sl, r0
 800aae8:	468b      	mov	fp, r1
 800aaea:	9b08      	ldr	r3, [sp, #32]
 800aaec:	b1b3      	cbz	r3, 800ab1c <_strtod_l+0x604>
 800aaee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aaf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	4659      	mov	r1, fp
 800aafa:	dd0f      	ble.n	800ab1c <_strtod_l+0x604>
 800aafc:	2b1f      	cmp	r3, #31
 800aafe:	dd55      	ble.n	800abac <_strtod_l+0x694>
 800ab00:	2b34      	cmp	r3, #52	@ 0x34
 800ab02:	bfde      	ittt	le
 800ab04:	f04f 33ff 	movle.w	r3, #4294967295
 800ab08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ab0c:	4093      	lslle	r3, r2
 800ab0e:	f04f 0a00 	mov.w	sl, #0
 800ab12:	bfcc      	ite	gt
 800ab14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ab18:	ea03 0b01 	andle.w	fp, r3, r1
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2300      	movs	r3, #0
 800ab20:	4650      	mov	r0, sl
 800ab22:	4659      	mov	r1, fp
 800ab24:	f7f5 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d1a6      	bne.n	800aa7a <_strtod_l+0x562>
 800ab2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ab32:	9805      	ldr	r0, [sp, #20]
 800ab34:	462b      	mov	r3, r5
 800ab36:	463a      	mov	r2, r7
 800ab38:	f7ff f8c6 	bl	8009cc8 <__s2b>
 800ab3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f43f af05 	beq.w	800a94e <_strtod_l+0x436>
 800ab44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab46:	2a00      	cmp	r2, #0
 800ab48:	eba9 0308 	sub.w	r3, r9, r8
 800ab4c:	bfa8      	it	ge
 800ab4e:	2300      	movge	r3, #0
 800ab50:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab52:	2400      	movs	r4, #0
 800ab54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ab58:	9316      	str	r3, [sp, #88]	@ 0x58
 800ab5a:	46a0      	mov	r8, r4
 800ab5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5e:	9805      	ldr	r0, [sp, #20]
 800ab60:	6859      	ldr	r1, [r3, #4]
 800ab62:	f7ff f809 	bl	8009b78 <_Balloc>
 800ab66:	4681      	mov	r9, r0
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f43f aef4 	beq.w	800a956 <_strtod_l+0x43e>
 800ab6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab70:	691a      	ldr	r2, [r3, #16]
 800ab72:	3202      	adds	r2, #2
 800ab74:	f103 010c 	add.w	r1, r3, #12
 800ab78:	0092      	lsls	r2, r2, #2
 800ab7a:	300c      	adds	r0, #12
 800ab7c:	f001 f900 	bl	800bd80 <memcpy>
 800ab80:	ec4b ab10 	vmov	d0, sl, fp
 800ab84:	9805      	ldr	r0, [sp, #20]
 800ab86:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab88:	a91b      	add	r1, sp, #108	@ 0x6c
 800ab8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ab8e:	f7ff fbd7 	bl	800a340 <__d2b>
 800ab92:	901a      	str	r0, [sp, #104]	@ 0x68
 800ab94:	2800      	cmp	r0, #0
 800ab96:	f43f aede 	beq.w	800a956 <_strtod_l+0x43e>
 800ab9a:	9805      	ldr	r0, [sp, #20]
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	f7ff f929 	bl	8009df4 <__i2b>
 800aba2:	4680      	mov	r8, r0
 800aba4:	b948      	cbnz	r0, 800abba <_strtod_l+0x6a2>
 800aba6:	f04f 0800 	mov.w	r8, #0
 800abaa:	e6d4      	b.n	800a956 <_strtod_l+0x43e>
 800abac:	f04f 32ff 	mov.w	r2, #4294967295
 800abb0:	fa02 f303 	lsl.w	r3, r2, r3
 800abb4:	ea03 0a0a 	and.w	sl, r3, sl
 800abb8:	e7b0      	b.n	800ab1c <_strtod_l+0x604>
 800abba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800abbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800abbe:	2d00      	cmp	r5, #0
 800abc0:	bfab      	itete	ge
 800abc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800abc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800abc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800abc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800abca:	bfac      	ite	ge
 800abcc:	18ef      	addge	r7, r5, r3
 800abce:	1b5e      	sublt	r6, r3, r5
 800abd0:	9b08      	ldr	r3, [sp, #32]
 800abd2:	1aed      	subs	r5, r5, r3
 800abd4:	4415      	add	r5, r2
 800abd6:	4b66      	ldr	r3, [pc, #408]	@ (800ad70 <_strtod_l+0x858>)
 800abd8:	3d01      	subs	r5, #1
 800abda:	429d      	cmp	r5, r3
 800abdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800abe0:	da50      	bge.n	800ac84 <_strtod_l+0x76c>
 800abe2:	1b5b      	subs	r3, r3, r5
 800abe4:	2b1f      	cmp	r3, #31
 800abe6:	eba2 0203 	sub.w	r2, r2, r3
 800abea:	f04f 0101 	mov.w	r1, #1
 800abee:	dc3d      	bgt.n	800ac6c <_strtod_l+0x754>
 800abf0:	fa01 f303 	lsl.w	r3, r1, r3
 800abf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abf6:	2300      	movs	r3, #0
 800abf8:	9310      	str	r3, [sp, #64]	@ 0x40
 800abfa:	18bd      	adds	r5, r7, r2
 800abfc:	9b08      	ldr	r3, [sp, #32]
 800abfe:	42af      	cmp	r7, r5
 800ac00:	4416      	add	r6, r2
 800ac02:	441e      	add	r6, r3
 800ac04:	463b      	mov	r3, r7
 800ac06:	bfa8      	it	ge
 800ac08:	462b      	movge	r3, r5
 800ac0a:	42b3      	cmp	r3, r6
 800ac0c:	bfa8      	it	ge
 800ac0e:	4633      	movge	r3, r6
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bfc2      	ittt	gt
 800ac14:	1aed      	subgt	r5, r5, r3
 800ac16:	1af6      	subgt	r6, r6, r3
 800ac18:	1aff      	subgt	r7, r7, r3
 800ac1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd16      	ble.n	800ac4e <_strtod_l+0x736>
 800ac20:	4641      	mov	r1, r8
 800ac22:	9805      	ldr	r0, [sp, #20]
 800ac24:	461a      	mov	r2, r3
 800ac26:	f7ff f9a5 	bl	8009f74 <__pow5mult>
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d0ba      	beq.n	800aba6 <_strtod_l+0x68e>
 800ac30:	4601      	mov	r1, r0
 800ac32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac34:	9805      	ldr	r0, [sp, #20]
 800ac36:	f7ff f8f3 	bl	8009e20 <__multiply>
 800ac3a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	f43f ae8a 	beq.w	800a956 <_strtod_l+0x43e>
 800ac42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac44:	9805      	ldr	r0, [sp, #20]
 800ac46:	f7fe ffd7 	bl	8009bf8 <_Bfree>
 800ac4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac4e:	2d00      	cmp	r5, #0
 800ac50:	dc1d      	bgt.n	800ac8e <_strtod_l+0x776>
 800ac52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	dd23      	ble.n	800aca0 <_strtod_l+0x788>
 800ac58:	4649      	mov	r1, r9
 800ac5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ac5c:	9805      	ldr	r0, [sp, #20]
 800ac5e:	f7ff f989 	bl	8009f74 <__pow5mult>
 800ac62:	4681      	mov	r9, r0
 800ac64:	b9e0      	cbnz	r0, 800aca0 <_strtod_l+0x788>
 800ac66:	f04f 0900 	mov.w	r9, #0
 800ac6a:	e674      	b.n	800a956 <_strtod_l+0x43e>
 800ac6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ac70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ac74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ac78:	35e2      	adds	r5, #226	@ 0xe2
 800ac7a:	fa01 f305 	lsl.w	r3, r1, r5
 800ac7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac80:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ac82:	e7ba      	b.n	800abfa <_strtod_l+0x6e2>
 800ac84:	2300      	movs	r3, #0
 800ac86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac88:	2301      	movs	r3, #1
 800ac8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac8c:	e7b5      	b.n	800abfa <_strtod_l+0x6e2>
 800ac8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac90:	9805      	ldr	r0, [sp, #20]
 800ac92:	462a      	mov	r2, r5
 800ac94:	f7ff f9c8 	bl	800a028 <__lshift>
 800ac98:	901a      	str	r0, [sp, #104]	@ 0x68
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d1d9      	bne.n	800ac52 <_strtod_l+0x73a>
 800ac9e:	e65a      	b.n	800a956 <_strtod_l+0x43e>
 800aca0:	2e00      	cmp	r6, #0
 800aca2:	dd07      	ble.n	800acb4 <_strtod_l+0x79c>
 800aca4:	4649      	mov	r1, r9
 800aca6:	9805      	ldr	r0, [sp, #20]
 800aca8:	4632      	mov	r2, r6
 800acaa:	f7ff f9bd 	bl	800a028 <__lshift>
 800acae:	4681      	mov	r9, r0
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d0d8      	beq.n	800ac66 <_strtod_l+0x74e>
 800acb4:	2f00      	cmp	r7, #0
 800acb6:	dd08      	ble.n	800acca <_strtod_l+0x7b2>
 800acb8:	4641      	mov	r1, r8
 800acba:	9805      	ldr	r0, [sp, #20]
 800acbc:	463a      	mov	r2, r7
 800acbe:	f7ff f9b3 	bl	800a028 <__lshift>
 800acc2:	4680      	mov	r8, r0
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f ae46 	beq.w	800a956 <_strtod_l+0x43e>
 800acca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800accc:	9805      	ldr	r0, [sp, #20]
 800acce:	464a      	mov	r2, r9
 800acd0:	f7ff fa32 	bl	800a138 <__mdiff>
 800acd4:	4604      	mov	r4, r0
 800acd6:	2800      	cmp	r0, #0
 800acd8:	f43f ae3d 	beq.w	800a956 <_strtod_l+0x43e>
 800acdc:	68c3      	ldr	r3, [r0, #12]
 800acde:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ace0:	2300      	movs	r3, #0
 800ace2:	60c3      	str	r3, [r0, #12]
 800ace4:	4641      	mov	r1, r8
 800ace6:	f7ff fa0b 	bl	800a100 <__mcmp>
 800acea:	2800      	cmp	r0, #0
 800acec:	da46      	bge.n	800ad7c <_strtod_l+0x864>
 800acee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acf0:	ea53 030a 	orrs.w	r3, r3, sl
 800acf4:	d16c      	bne.n	800add0 <_strtod_l+0x8b8>
 800acf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d168      	bne.n	800add0 <_strtod_l+0x8b8>
 800acfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad02:	0d1b      	lsrs	r3, r3, #20
 800ad04:	051b      	lsls	r3, r3, #20
 800ad06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ad0a:	d961      	bls.n	800add0 <_strtod_l+0x8b8>
 800ad0c:	6963      	ldr	r3, [r4, #20]
 800ad0e:	b913      	cbnz	r3, 800ad16 <_strtod_l+0x7fe>
 800ad10:	6923      	ldr	r3, [r4, #16]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	dd5c      	ble.n	800add0 <_strtod_l+0x8b8>
 800ad16:	4621      	mov	r1, r4
 800ad18:	2201      	movs	r2, #1
 800ad1a:	9805      	ldr	r0, [sp, #20]
 800ad1c:	f7ff f984 	bl	800a028 <__lshift>
 800ad20:	4641      	mov	r1, r8
 800ad22:	4604      	mov	r4, r0
 800ad24:	f7ff f9ec 	bl	800a100 <__mcmp>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	dd51      	ble.n	800add0 <_strtod_l+0x8b8>
 800ad2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad30:	9a08      	ldr	r2, [sp, #32]
 800ad32:	0d1b      	lsrs	r3, r3, #20
 800ad34:	051b      	lsls	r3, r3, #20
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	d06b      	beq.n	800ae12 <_strtod_l+0x8fa>
 800ad3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ad3e:	d868      	bhi.n	800ae12 <_strtod_l+0x8fa>
 800ad40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ad44:	f67f ae9d 	bls.w	800aa82 <_strtod_l+0x56a>
 800ad48:	4b0a      	ldr	r3, [pc, #40]	@ (800ad74 <_strtod_l+0x85c>)
 800ad4a:	4650      	mov	r0, sl
 800ad4c:	4659      	mov	r1, fp
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f7f5 fc52 	bl	80005f8 <__aeabi_dmul>
 800ad54:	4b08      	ldr	r3, [pc, #32]	@ (800ad78 <_strtod_l+0x860>)
 800ad56:	400b      	ands	r3, r1
 800ad58:	4682      	mov	sl, r0
 800ad5a:	468b      	mov	fp, r1
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f47f ae05 	bne.w	800a96c <_strtod_l+0x454>
 800ad62:	9a05      	ldr	r2, [sp, #20]
 800ad64:	2322      	movs	r3, #34	@ 0x22
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	e600      	b.n	800a96c <_strtod_l+0x454>
 800ad6a:	bf00      	nop
 800ad6c:	0800ce88 	.word	0x0800ce88
 800ad70:	fffffc02 	.word	0xfffffc02
 800ad74:	39500000 	.word	0x39500000
 800ad78:	7ff00000 	.word	0x7ff00000
 800ad7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ad80:	d165      	bne.n	800ae4e <_strtod_l+0x936>
 800ad82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ad84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad88:	b35a      	cbz	r2, 800ade2 <_strtod_l+0x8ca>
 800ad8a:	4a9f      	ldr	r2, [pc, #636]	@ (800b008 <_strtod_l+0xaf0>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d12b      	bne.n	800ade8 <_strtod_l+0x8d0>
 800ad90:	9b08      	ldr	r3, [sp, #32]
 800ad92:	4651      	mov	r1, sl
 800ad94:	b303      	cbz	r3, 800add8 <_strtod_l+0x8c0>
 800ad96:	4b9d      	ldr	r3, [pc, #628]	@ (800b00c <_strtod_l+0xaf4>)
 800ad98:	465a      	mov	r2, fp
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ada0:	f04f 32ff 	mov.w	r2, #4294967295
 800ada4:	d81b      	bhi.n	800adde <_strtod_l+0x8c6>
 800ada6:	0d1b      	lsrs	r3, r3, #20
 800ada8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800adac:	fa02 f303 	lsl.w	r3, r2, r3
 800adb0:	4299      	cmp	r1, r3
 800adb2:	d119      	bne.n	800ade8 <_strtod_l+0x8d0>
 800adb4:	4b96      	ldr	r3, [pc, #600]	@ (800b010 <_strtod_l+0xaf8>)
 800adb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adb8:	429a      	cmp	r2, r3
 800adba:	d102      	bne.n	800adc2 <_strtod_l+0x8aa>
 800adbc:	3101      	adds	r1, #1
 800adbe:	f43f adca 	beq.w	800a956 <_strtod_l+0x43e>
 800adc2:	4b92      	ldr	r3, [pc, #584]	@ (800b00c <_strtod_l+0xaf4>)
 800adc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adc6:	401a      	ands	r2, r3
 800adc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800adcc:	f04f 0a00 	mov.w	sl, #0
 800add0:	9b08      	ldr	r3, [sp, #32]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1b8      	bne.n	800ad48 <_strtod_l+0x830>
 800add6:	e5c9      	b.n	800a96c <_strtod_l+0x454>
 800add8:	f04f 33ff 	mov.w	r3, #4294967295
 800addc:	e7e8      	b.n	800adb0 <_strtod_l+0x898>
 800adde:	4613      	mov	r3, r2
 800ade0:	e7e6      	b.n	800adb0 <_strtod_l+0x898>
 800ade2:	ea53 030a 	orrs.w	r3, r3, sl
 800ade6:	d0a1      	beq.n	800ad2c <_strtod_l+0x814>
 800ade8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adea:	b1db      	cbz	r3, 800ae24 <_strtod_l+0x90c>
 800adec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adee:	4213      	tst	r3, r2
 800adf0:	d0ee      	beq.n	800add0 <_strtod_l+0x8b8>
 800adf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adf4:	9a08      	ldr	r2, [sp, #32]
 800adf6:	4650      	mov	r0, sl
 800adf8:	4659      	mov	r1, fp
 800adfa:	b1bb      	cbz	r3, 800ae2c <_strtod_l+0x914>
 800adfc:	f7ff fb6e 	bl	800a4dc <sulp>
 800ae00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae04:	ec53 2b10 	vmov	r2, r3, d0
 800ae08:	f7f5 fa40 	bl	800028c <__adddf3>
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	468b      	mov	fp, r1
 800ae10:	e7de      	b.n	800add0 <_strtod_l+0x8b8>
 800ae12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ae16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ae1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ae1e:	f04f 3aff 	mov.w	sl, #4294967295
 800ae22:	e7d5      	b.n	800add0 <_strtod_l+0x8b8>
 800ae24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae26:	ea13 0f0a 	tst.w	r3, sl
 800ae2a:	e7e1      	b.n	800adf0 <_strtod_l+0x8d8>
 800ae2c:	f7ff fb56 	bl	800a4dc <sulp>
 800ae30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae34:	ec53 2b10 	vmov	r2, r3, d0
 800ae38:	f7f5 fa26 	bl	8000288 <__aeabi_dsub>
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2300      	movs	r3, #0
 800ae40:	4682      	mov	sl, r0
 800ae42:	468b      	mov	fp, r1
 800ae44:	f7f5 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d0c1      	beq.n	800add0 <_strtod_l+0x8b8>
 800ae4c:	e619      	b.n	800aa82 <_strtod_l+0x56a>
 800ae4e:	4641      	mov	r1, r8
 800ae50:	4620      	mov	r0, r4
 800ae52:	f7ff facd 	bl	800a3f0 <__ratio>
 800ae56:	ec57 6b10 	vmov	r6, r7, d0
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ae60:	4630      	mov	r0, r6
 800ae62:	4639      	mov	r1, r7
 800ae64:	f7f5 fe44 	bl	8000af0 <__aeabi_dcmple>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d06f      	beq.n	800af4c <_strtod_l+0xa34>
 800ae6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d17a      	bne.n	800af68 <_strtod_l+0xa50>
 800ae72:	f1ba 0f00 	cmp.w	sl, #0
 800ae76:	d158      	bne.n	800af2a <_strtod_l+0xa12>
 800ae78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d15a      	bne.n	800af38 <_strtod_l+0xa20>
 800ae82:	4b64      	ldr	r3, [pc, #400]	@ (800b014 <_strtod_l+0xafc>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	4630      	mov	r0, r6
 800ae88:	4639      	mov	r1, r7
 800ae8a:	f7f5 fe27 	bl	8000adc <__aeabi_dcmplt>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d159      	bne.n	800af46 <_strtod_l+0xa2e>
 800ae92:	4630      	mov	r0, r6
 800ae94:	4639      	mov	r1, r7
 800ae96:	4b60      	ldr	r3, [pc, #384]	@ (800b018 <_strtod_l+0xb00>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f7f5 fbad 	bl	80005f8 <__aeabi_dmul>
 800ae9e:	4606      	mov	r6, r0
 800aea0:	460f      	mov	r7, r1
 800aea2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aea6:	9606      	str	r6, [sp, #24]
 800aea8:	9307      	str	r3, [sp, #28]
 800aeaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aeae:	4d57      	ldr	r5, [pc, #348]	@ (800b00c <_strtod_l+0xaf4>)
 800aeb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aeb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeb6:	401d      	ands	r5, r3
 800aeb8:	4b58      	ldr	r3, [pc, #352]	@ (800b01c <_strtod_l+0xb04>)
 800aeba:	429d      	cmp	r5, r3
 800aebc:	f040 80b2 	bne.w	800b024 <_strtod_l+0xb0c>
 800aec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aec2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aec6:	ec4b ab10 	vmov	d0, sl, fp
 800aeca:	f7ff f9c9 	bl	800a260 <__ulp>
 800aece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aed2:	ec51 0b10 	vmov	r0, r1, d0
 800aed6:	f7f5 fb8f 	bl	80005f8 <__aeabi_dmul>
 800aeda:	4652      	mov	r2, sl
 800aedc:	465b      	mov	r3, fp
 800aede:	f7f5 f9d5 	bl	800028c <__adddf3>
 800aee2:	460b      	mov	r3, r1
 800aee4:	4949      	ldr	r1, [pc, #292]	@ (800b00c <_strtod_l+0xaf4>)
 800aee6:	4a4e      	ldr	r2, [pc, #312]	@ (800b020 <_strtod_l+0xb08>)
 800aee8:	4019      	ands	r1, r3
 800aeea:	4291      	cmp	r1, r2
 800aeec:	4682      	mov	sl, r0
 800aeee:	d942      	bls.n	800af76 <_strtod_l+0xa5e>
 800aef0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aef2:	4b47      	ldr	r3, [pc, #284]	@ (800b010 <_strtod_l+0xaf8>)
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d103      	bne.n	800af00 <_strtod_l+0x9e8>
 800aef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aefa:	3301      	adds	r3, #1
 800aefc:	f43f ad2b 	beq.w	800a956 <_strtod_l+0x43e>
 800af00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b010 <_strtod_l+0xaf8>
 800af04:	f04f 3aff 	mov.w	sl, #4294967295
 800af08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af0a:	9805      	ldr	r0, [sp, #20]
 800af0c:	f7fe fe74 	bl	8009bf8 <_Bfree>
 800af10:	9805      	ldr	r0, [sp, #20]
 800af12:	4649      	mov	r1, r9
 800af14:	f7fe fe70 	bl	8009bf8 <_Bfree>
 800af18:	9805      	ldr	r0, [sp, #20]
 800af1a:	4641      	mov	r1, r8
 800af1c:	f7fe fe6c 	bl	8009bf8 <_Bfree>
 800af20:	9805      	ldr	r0, [sp, #20]
 800af22:	4621      	mov	r1, r4
 800af24:	f7fe fe68 	bl	8009bf8 <_Bfree>
 800af28:	e618      	b.n	800ab5c <_strtod_l+0x644>
 800af2a:	f1ba 0f01 	cmp.w	sl, #1
 800af2e:	d103      	bne.n	800af38 <_strtod_l+0xa20>
 800af30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af32:	2b00      	cmp	r3, #0
 800af34:	f43f ada5 	beq.w	800aa82 <_strtod_l+0x56a>
 800af38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800afe8 <_strtod_l+0xad0>
 800af3c:	4f35      	ldr	r7, [pc, #212]	@ (800b014 <_strtod_l+0xafc>)
 800af3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af42:	2600      	movs	r6, #0
 800af44:	e7b1      	b.n	800aeaa <_strtod_l+0x992>
 800af46:	4f34      	ldr	r7, [pc, #208]	@ (800b018 <_strtod_l+0xb00>)
 800af48:	2600      	movs	r6, #0
 800af4a:	e7aa      	b.n	800aea2 <_strtod_l+0x98a>
 800af4c:	4b32      	ldr	r3, [pc, #200]	@ (800b018 <_strtod_l+0xb00>)
 800af4e:	4630      	mov	r0, r6
 800af50:	4639      	mov	r1, r7
 800af52:	2200      	movs	r2, #0
 800af54:	f7f5 fb50 	bl	80005f8 <__aeabi_dmul>
 800af58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af5a:	4606      	mov	r6, r0
 800af5c:	460f      	mov	r7, r1
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d09f      	beq.n	800aea2 <_strtod_l+0x98a>
 800af62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800af66:	e7a0      	b.n	800aeaa <_strtod_l+0x992>
 800af68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aff0 <_strtod_l+0xad8>
 800af6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af70:	ec57 6b17 	vmov	r6, r7, d7
 800af74:	e799      	b.n	800aeaa <_strtod_l+0x992>
 800af76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800af7a:	9b08      	ldr	r3, [sp, #32]
 800af7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1c1      	bne.n	800af08 <_strtod_l+0x9f0>
 800af84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af88:	0d1b      	lsrs	r3, r3, #20
 800af8a:	051b      	lsls	r3, r3, #20
 800af8c:	429d      	cmp	r5, r3
 800af8e:	d1bb      	bne.n	800af08 <_strtod_l+0x9f0>
 800af90:	4630      	mov	r0, r6
 800af92:	4639      	mov	r1, r7
 800af94:	f7f5 ff9e 	bl	8000ed4 <__aeabi_d2lz>
 800af98:	f7f5 fb00 	bl	800059c <__aeabi_l2d>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 f970 	bl	8000288 <__aeabi_dsub>
 800afa8:	460b      	mov	r3, r1
 800afaa:	4602      	mov	r2, r0
 800afac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800afb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800afb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afb6:	ea46 060a 	orr.w	r6, r6, sl
 800afba:	431e      	orrs	r6, r3
 800afbc:	d06f      	beq.n	800b09e <_strtod_l+0xb86>
 800afbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800aff8 <_strtod_l+0xae0>)
 800afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc4:	f7f5 fd8a 	bl	8000adc <__aeabi_dcmplt>
 800afc8:	2800      	cmp	r0, #0
 800afca:	f47f accf 	bne.w	800a96c <_strtod_l+0x454>
 800afce:	a30c      	add	r3, pc, #48	@ (adr r3, 800b000 <_strtod_l+0xae8>)
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afd8:	f7f5 fd9e 	bl	8000b18 <__aeabi_dcmpgt>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d093      	beq.n	800af08 <_strtod_l+0x9f0>
 800afe0:	e4c4      	b.n	800a96c <_strtod_l+0x454>
 800afe2:	bf00      	nop
 800afe4:	f3af 8000 	nop.w
 800afe8:	00000000 	.word	0x00000000
 800afec:	bff00000 	.word	0xbff00000
 800aff0:	00000000 	.word	0x00000000
 800aff4:	3ff00000 	.word	0x3ff00000
 800aff8:	94a03595 	.word	0x94a03595
 800affc:	3fdfffff 	.word	0x3fdfffff
 800b000:	35afe535 	.word	0x35afe535
 800b004:	3fe00000 	.word	0x3fe00000
 800b008:	000fffff 	.word	0x000fffff
 800b00c:	7ff00000 	.word	0x7ff00000
 800b010:	7fefffff 	.word	0x7fefffff
 800b014:	3ff00000 	.word	0x3ff00000
 800b018:	3fe00000 	.word	0x3fe00000
 800b01c:	7fe00000 	.word	0x7fe00000
 800b020:	7c9fffff 	.word	0x7c9fffff
 800b024:	9b08      	ldr	r3, [sp, #32]
 800b026:	b323      	cbz	r3, 800b072 <_strtod_l+0xb5a>
 800b028:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b02c:	d821      	bhi.n	800b072 <_strtod_l+0xb5a>
 800b02e:	a328      	add	r3, pc, #160	@ (adr r3, 800b0d0 <_strtod_l+0xbb8>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fd5a 	bl	8000af0 <__aeabi_dcmple>
 800b03c:	b1a0      	cbz	r0, 800b068 <_strtod_l+0xb50>
 800b03e:	4639      	mov	r1, r7
 800b040:	4630      	mov	r0, r6
 800b042:	f7f5 fdb1 	bl	8000ba8 <__aeabi_d2uiz>
 800b046:	2801      	cmp	r0, #1
 800b048:	bf38      	it	cc
 800b04a:	2001      	movcc	r0, #1
 800b04c:	f7f5 fa5a 	bl	8000504 <__aeabi_ui2d>
 800b050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b052:	4606      	mov	r6, r0
 800b054:	460f      	mov	r7, r1
 800b056:	b9fb      	cbnz	r3, 800b098 <_strtod_l+0xb80>
 800b058:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b05c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b05e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b060:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b064:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b068:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b06a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b06e:	1b5b      	subs	r3, r3, r5
 800b070:	9311      	str	r3, [sp, #68]	@ 0x44
 800b072:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b076:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b07a:	f7ff f8f1 	bl	800a260 <__ulp>
 800b07e:	4650      	mov	r0, sl
 800b080:	ec53 2b10 	vmov	r2, r3, d0
 800b084:	4659      	mov	r1, fp
 800b086:	f7f5 fab7 	bl	80005f8 <__aeabi_dmul>
 800b08a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b08e:	f7f5 f8fd 	bl	800028c <__adddf3>
 800b092:	4682      	mov	sl, r0
 800b094:	468b      	mov	fp, r1
 800b096:	e770      	b.n	800af7a <_strtod_l+0xa62>
 800b098:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b09c:	e7e0      	b.n	800b060 <_strtod_l+0xb48>
 800b09e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b0d8 <_strtod_l+0xbc0>)
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f7f5 fd1a 	bl	8000adc <__aeabi_dcmplt>
 800b0a8:	e798      	b.n	800afdc <_strtod_l+0xac4>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b0b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	f7ff ba6d 	b.w	800a592 <_strtod_l+0x7a>
 800b0b8:	2a65      	cmp	r2, #101	@ 0x65
 800b0ba:	f43f ab66 	beq.w	800a78a <_strtod_l+0x272>
 800b0be:	2a45      	cmp	r2, #69	@ 0x45
 800b0c0:	f43f ab63 	beq.w	800a78a <_strtod_l+0x272>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f7ff bb9e 	b.w	800a806 <_strtod_l+0x2ee>
 800b0ca:	bf00      	nop
 800b0cc:	f3af 8000 	nop.w
 800b0d0:	ffc00000 	.word	0xffc00000
 800b0d4:	41dfffff 	.word	0x41dfffff
 800b0d8:	94a03595 	.word	0x94a03595
 800b0dc:	3fcfffff 	.word	0x3fcfffff

0800b0e0 <_strtod_r>:
 800b0e0:	4b01      	ldr	r3, [pc, #4]	@ (800b0e8 <_strtod_r+0x8>)
 800b0e2:	f7ff ba19 	b.w	800a518 <_strtod_l>
 800b0e6:	bf00      	nop
 800b0e8:	2000014c 	.word	0x2000014c

0800b0ec <_strtol_l.constprop.0>:
 800b0ec:	2b24      	cmp	r3, #36	@ 0x24
 800b0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f2:	4686      	mov	lr, r0
 800b0f4:	4690      	mov	r8, r2
 800b0f6:	d801      	bhi.n	800b0fc <_strtol_l.constprop.0+0x10>
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d106      	bne.n	800b10a <_strtol_l.constprop.0+0x1e>
 800b0fc:	f7fd fdba 	bl	8008c74 <__errno>
 800b100:	2316      	movs	r3, #22
 800b102:	6003      	str	r3, [r0, #0]
 800b104:	2000      	movs	r0, #0
 800b106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10a:	4834      	ldr	r0, [pc, #208]	@ (800b1dc <_strtol_l.constprop.0+0xf0>)
 800b10c:	460d      	mov	r5, r1
 800b10e:	462a      	mov	r2, r5
 800b110:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b114:	5d06      	ldrb	r6, [r0, r4]
 800b116:	f016 0608 	ands.w	r6, r6, #8
 800b11a:	d1f8      	bne.n	800b10e <_strtol_l.constprop.0+0x22>
 800b11c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b11e:	d12d      	bne.n	800b17c <_strtol_l.constprop.0+0x90>
 800b120:	782c      	ldrb	r4, [r5, #0]
 800b122:	2601      	movs	r6, #1
 800b124:	1c95      	adds	r5, r2, #2
 800b126:	f033 0210 	bics.w	r2, r3, #16
 800b12a:	d109      	bne.n	800b140 <_strtol_l.constprop.0+0x54>
 800b12c:	2c30      	cmp	r4, #48	@ 0x30
 800b12e:	d12a      	bne.n	800b186 <_strtol_l.constprop.0+0x9a>
 800b130:	782a      	ldrb	r2, [r5, #0]
 800b132:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b136:	2a58      	cmp	r2, #88	@ 0x58
 800b138:	d125      	bne.n	800b186 <_strtol_l.constprop.0+0x9a>
 800b13a:	786c      	ldrb	r4, [r5, #1]
 800b13c:	2310      	movs	r3, #16
 800b13e:	3502      	adds	r5, #2
 800b140:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b144:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b148:	2200      	movs	r2, #0
 800b14a:	fbbc f9f3 	udiv	r9, ip, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	fb03 ca19 	mls	sl, r3, r9, ip
 800b154:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b158:	2f09      	cmp	r7, #9
 800b15a:	d81b      	bhi.n	800b194 <_strtol_l.constprop.0+0xa8>
 800b15c:	463c      	mov	r4, r7
 800b15e:	42a3      	cmp	r3, r4
 800b160:	dd27      	ble.n	800b1b2 <_strtol_l.constprop.0+0xc6>
 800b162:	1c57      	adds	r7, r2, #1
 800b164:	d007      	beq.n	800b176 <_strtol_l.constprop.0+0x8a>
 800b166:	4581      	cmp	r9, r0
 800b168:	d320      	bcc.n	800b1ac <_strtol_l.constprop.0+0xc0>
 800b16a:	d101      	bne.n	800b170 <_strtol_l.constprop.0+0x84>
 800b16c:	45a2      	cmp	sl, r4
 800b16e:	db1d      	blt.n	800b1ac <_strtol_l.constprop.0+0xc0>
 800b170:	fb00 4003 	mla	r0, r0, r3, r4
 800b174:	2201      	movs	r2, #1
 800b176:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b17a:	e7eb      	b.n	800b154 <_strtol_l.constprop.0+0x68>
 800b17c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b17e:	bf04      	itt	eq
 800b180:	782c      	ldrbeq	r4, [r5, #0]
 800b182:	1c95      	addeq	r5, r2, #2
 800b184:	e7cf      	b.n	800b126 <_strtol_l.constprop.0+0x3a>
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1da      	bne.n	800b140 <_strtol_l.constprop.0+0x54>
 800b18a:	2c30      	cmp	r4, #48	@ 0x30
 800b18c:	bf0c      	ite	eq
 800b18e:	2308      	moveq	r3, #8
 800b190:	230a      	movne	r3, #10
 800b192:	e7d5      	b.n	800b140 <_strtol_l.constprop.0+0x54>
 800b194:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b198:	2f19      	cmp	r7, #25
 800b19a:	d801      	bhi.n	800b1a0 <_strtol_l.constprop.0+0xb4>
 800b19c:	3c37      	subs	r4, #55	@ 0x37
 800b19e:	e7de      	b.n	800b15e <_strtol_l.constprop.0+0x72>
 800b1a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b1a4:	2f19      	cmp	r7, #25
 800b1a6:	d804      	bhi.n	800b1b2 <_strtol_l.constprop.0+0xc6>
 800b1a8:	3c57      	subs	r4, #87	@ 0x57
 800b1aa:	e7d8      	b.n	800b15e <_strtol_l.constprop.0+0x72>
 800b1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b0:	e7e1      	b.n	800b176 <_strtol_l.constprop.0+0x8a>
 800b1b2:	1c53      	adds	r3, r2, #1
 800b1b4:	d108      	bne.n	800b1c8 <_strtol_l.constprop.0+0xdc>
 800b1b6:	2322      	movs	r3, #34	@ 0x22
 800b1b8:	f8ce 3000 	str.w	r3, [lr]
 800b1bc:	4660      	mov	r0, ip
 800b1be:	f1b8 0f00 	cmp.w	r8, #0
 800b1c2:	d0a0      	beq.n	800b106 <_strtol_l.constprop.0+0x1a>
 800b1c4:	1e69      	subs	r1, r5, #1
 800b1c6:	e006      	b.n	800b1d6 <_strtol_l.constprop.0+0xea>
 800b1c8:	b106      	cbz	r6, 800b1cc <_strtol_l.constprop.0+0xe0>
 800b1ca:	4240      	negs	r0, r0
 800b1cc:	f1b8 0f00 	cmp.w	r8, #0
 800b1d0:	d099      	beq.n	800b106 <_strtol_l.constprop.0+0x1a>
 800b1d2:	2a00      	cmp	r2, #0
 800b1d4:	d1f6      	bne.n	800b1c4 <_strtol_l.constprop.0+0xd8>
 800b1d6:	f8c8 1000 	str.w	r1, [r8]
 800b1da:	e794      	b.n	800b106 <_strtol_l.constprop.0+0x1a>
 800b1dc:	0800ceb1 	.word	0x0800ceb1

0800b1e0 <_strtol_r>:
 800b1e0:	f7ff bf84 	b.w	800b0ec <_strtol_l.constprop.0>

0800b1e4 <__ssputs_r>:
 800b1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e8:	688e      	ldr	r6, [r1, #8]
 800b1ea:	461f      	mov	r7, r3
 800b1ec:	42be      	cmp	r6, r7
 800b1ee:	680b      	ldr	r3, [r1, #0]
 800b1f0:	4682      	mov	sl, r0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	4690      	mov	r8, r2
 800b1f6:	d82d      	bhi.n	800b254 <__ssputs_r+0x70>
 800b1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b200:	d026      	beq.n	800b250 <__ssputs_r+0x6c>
 800b202:	6965      	ldr	r5, [r4, #20]
 800b204:	6909      	ldr	r1, [r1, #16]
 800b206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b20a:	eba3 0901 	sub.w	r9, r3, r1
 800b20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b212:	1c7b      	adds	r3, r7, #1
 800b214:	444b      	add	r3, r9
 800b216:	106d      	asrs	r5, r5, #1
 800b218:	429d      	cmp	r5, r3
 800b21a:	bf38      	it	cc
 800b21c:	461d      	movcc	r5, r3
 800b21e:	0553      	lsls	r3, r2, #21
 800b220:	d527      	bpl.n	800b272 <__ssputs_r+0x8e>
 800b222:	4629      	mov	r1, r5
 800b224:	f7fe fc1c 	bl	8009a60 <_malloc_r>
 800b228:	4606      	mov	r6, r0
 800b22a:	b360      	cbz	r0, 800b286 <__ssputs_r+0xa2>
 800b22c:	6921      	ldr	r1, [r4, #16]
 800b22e:	464a      	mov	r2, r9
 800b230:	f000 fda6 	bl	800bd80 <memcpy>
 800b234:	89a3      	ldrh	r3, [r4, #12]
 800b236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	6126      	str	r6, [r4, #16]
 800b242:	6165      	str	r5, [r4, #20]
 800b244:	444e      	add	r6, r9
 800b246:	eba5 0509 	sub.w	r5, r5, r9
 800b24a:	6026      	str	r6, [r4, #0]
 800b24c:	60a5      	str	r5, [r4, #8]
 800b24e:	463e      	mov	r6, r7
 800b250:	42be      	cmp	r6, r7
 800b252:	d900      	bls.n	800b256 <__ssputs_r+0x72>
 800b254:	463e      	mov	r6, r7
 800b256:	6820      	ldr	r0, [r4, #0]
 800b258:	4632      	mov	r2, r6
 800b25a:	4641      	mov	r1, r8
 800b25c:	f000 fd53 	bl	800bd06 <memmove>
 800b260:	68a3      	ldr	r3, [r4, #8]
 800b262:	1b9b      	subs	r3, r3, r6
 800b264:	60a3      	str	r3, [r4, #8]
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	4433      	add	r3, r6
 800b26a:	6023      	str	r3, [r4, #0]
 800b26c:	2000      	movs	r0, #0
 800b26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b272:	462a      	mov	r2, r5
 800b274:	f001 f919 	bl	800c4aa <_realloc_r>
 800b278:	4606      	mov	r6, r0
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d1e0      	bne.n	800b240 <__ssputs_r+0x5c>
 800b27e:	6921      	ldr	r1, [r4, #16]
 800b280:	4650      	mov	r0, sl
 800b282:	f7fe fb79 	bl	8009978 <_free_r>
 800b286:	230c      	movs	r3, #12
 800b288:	f8ca 3000 	str.w	r3, [sl]
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b292:	81a3      	strh	r3, [r4, #12]
 800b294:	f04f 30ff 	mov.w	r0, #4294967295
 800b298:	e7e9      	b.n	800b26e <__ssputs_r+0x8a>
	...

0800b29c <_svfiprintf_r>:
 800b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a0:	4698      	mov	r8, r3
 800b2a2:	898b      	ldrh	r3, [r1, #12]
 800b2a4:	061b      	lsls	r3, r3, #24
 800b2a6:	b09d      	sub	sp, #116	@ 0x74
 800b2a8:	4607      	mov	r7, r0
 800b2aa:	460d      	mov	r5, r1
 800b2ac:	4614      	mov	r4, r2
 800b2ae:	d510      	bpl.n	800b2d2 <_svfiprintf_r+0x36>
 800b2b0:	690b      	ldr	r3, [r1, #16]
 800b2b2:	b973      	cbnz	r3, 800b2d2 <_svfiprintf_r+0x36>
 800b2b4:	2140      	movs	r1, #64	@ 0x40
 800b2b6:	f7fe fbd3 	bl	8009a60 <_malloc_r>
 800b2ba:	6028      	str	r0, [r5, #0]
 800b2bc:	6128      	str	r0, [r5, #16]
 800b2be:	b930      	cbnz	r0, 800b2ce <_svfiprintf_r+0x32>
 800b2c0:	230c      	movs	r3, #12
 800b2c2:	603b      	str	r3, [r7, #0]
 800b2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c8:	b01d      	add	sp, #116	@ 0x74
 800b2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ce:	2340      	movs	r3, #64	@ 0x40
 800b2d0:	616b      	str	r3, [r5, #20]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2d6:	2320      	movs	r3, #32
 800b2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2e0:	2330      	movs	r3, #48	@ 0x30
 800b2e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b480 <_svfiprintf_r+0x1e4>
 800b2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2ea:	f04f 0901 	mov.w	r9, #1
 800b2ee:	4623      	mov	r3, r4
 800b2f0:	469a      	mov	sl, r3
 800b2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2f6:	b10a      	cbz	r2, 800b2fc <_svfiprintf_r+0x60>
 800b2f8:	2a25      	cmp	r2, #37	@ 0x25
 800b2fa:	d1f9      	bne.n	800b2f0 <_svfiprintf_r+0x54>
 800b2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b300:	d00b      	beq.n	800b31a <_svfiprintf_r+0x7e>
 800b302:	465b      	mov	r3, fp
 800b304:	4622      	mov	r2, r4
 800b306:	4629      	mov	r1, r5
 800b308:	4638      	mov	r0, r7
 800b30a:	f7ff ff6b 	bl	800b1e4 <__ssputs_r>
 800b30e:	3001      	adds	r0, #1
 800b310:	f000 80a7 	beq.w	800b462 <_svfiprintf_r+0x1c6>
 800b314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b316:	445a      	add	r2, fp
 800b318:	9209      	str	r2, [sp, #36]	@ 0x24
 800b31a:	f89a 3000 	ldrb.w	r3, [sl]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f000 809f 	beq.w	800b462 <_svfiprintf_r+0x1c6>
 800b324:	2300      	movs	r3, #0
 800b326:	f04f 32ff 	mov.w	r2, #4294967295
 800b32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b32e:	f10a 0a01 	add.w	sl, sl, #1
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	9307      	str	r3, [sp, #28]
 800b336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b33c:	4654      	mov	r4, sl
 800b33e:	2205      	movs	r2, #5
 800b340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b344:	484e      	ldr	r0, [pc, #312]	@ (800b480 <_svfiprintf_r+0x1e4>)
 800b346:	f7f4 ff43 	bl	80001d0 <memchr>
 800b34a:	9a04      	ldr	r2, [sp, #16]
 800b34c:	b9d8      	cbnz	r0, 800b386 <_svfiprintf_r+0xea>
 800b34e:	06d0      	lsls	r0, r2, #27
 800b350:	bf44      	itt	mi
 800b352:	2320      	movmi	r3, #32
 800b354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b358:	0711      	lsls	r1, r2, #28
 800b35a:	bf44      	itt	mi
 800b35c:	232b      	movmi	r3, #43	@ 0x2b
 800b35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b362:	f89a 3000 	ldrb.w	r3, [sl]
 800b366:	2b2a      	cmp	r3, #42	@ 0x2a
 800b368:	d015      	beq.n	800b396 <_svfiprintf_r+0xfa>
 800b36a:	9a07      	ldr	r2, [sp, #28]
 800b36c:	4654      	mov	r4, sl
 800b36e:	2000      	movs	r0, #0
 800b370:	f04f 0c0a 	mov.w	ip, #10
 800b374:	4621      	mov	r1, r4
 800b376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b37a:	3b30      	subs	r3, #48	@ 0x30
 800b37c:	2b09      	cmp	r3, #9
 800b37e:	d94b      	bls.n	800b418 <_svfiprintf_r+0x17c>
 800b380:	b1b0      	cbz	r0, 800b3b0 <_svfiprintf_r+0x114>
 800b382:	9207      	str	r2, [sp, #28]
 800b384:	e014      	b.n	800b3b0 <_svfiprintf_r+0x114>
 800b386:	eba0 0308 	sub.w	r3, r0, r8
 800b38a:	fa09 f303 	lsl.w	r3, r9, r3
 800b38e:	4313      	orrs	r3, r2
 800b390:	9304      	str	r3, [sp, #16]
 800b392:	46a2      	mov	sl, r4
 800b394:	e7d2      	b.n	800b33c <_svfiprintf_r+0xa0>
 800b396:	9b03      	ldr	r3, [sp, #12]
 800b398:	1d19      	adds	r1, r3, #4
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	9103      	str	r1, [sp, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	bfbb      	ittet	lt
 800b3a2:	425b      	neglt	r3, r3
 800b3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b3a8:	9307      	strge	r3, [sp, #28]
 800b3aa:	9307      	strlt	r3, [sp, #28]
 800b3ac:	bfb8      	it	lt
 800b3ae:	9204      	strlt	r2, [sp, #16]
 800b3b0:	7823      	ldrb	r3, [r4, #0]
 800b3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3b4:	d10a      	bne.n	800b3cc <_svfiprintf_r+0x130>
 800b3b6:	7863      	ldrb	r3, [r4, #1]
 800b3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ba:	d132      	bne.n	800b422 <_svfiprintf_r+0x186>
 800b3bc:	9b03      	ldr	r3, [sp, #12]
 800b3be:	1d1a      	adds	r2, r3, #4
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	9203      	str	r2, [sp, #12]
 800b3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3c8:	3402      	adds	r4, #2
 800b3ca:	9305      	str	r3, [sp, #20]
 800b3cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b490 <_svfiprintf_r+0x1f4>
 800b3d0:	7821      	ldrb	r1, [r4, #0]
 800b3d2:	2203      	movs	r2, #3
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	f7f4 fefb 	bl	80001d0 <memchr>
 800b3da:	b138      	cbz	r0, 800b3ec <_svfiprintf_r+0x150>
 800b3dc:	9b04      	ldr	r3, [sp, #16]
 800b3de:	eba0 000a 	sub.w	r0, r0, sl
 800b3e2:	2240      	movs	r2, #64	@ 0x40
 800b3e4:	4082      	lsls	r2, r0
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	3401      	adds	r4, #1
 800b3ea:	9304      	str	r3, [sp, #16]
 800b3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f0:	4824      	ldr	r0, [pc, #144]	@ (800b484 <_svfiprintf_r+0x1e8>)
 800b3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3f6:	2206      	movs	r2, #6
 800b3f8:	f7f4 feea 	bl	80001d0 <memchr>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d036      	beq.n	800b46e <_svfiprintf_r+0x1d2>
 800b400:	4b21      	ldr	r3, [pc, #132]	@ (800b488 <_svfiprintf_r+0x1ec>)
 800b402:	bb1b      	cbnz	r3, 800b44c <_svfiprintf_r+0x1b0>
 800b404:	9b03      	ldr	r3, [sp, #12]
 800b406:	3307      	adds	r3, #7
 800b408:	f023 0307 	bic.w	r3, r3, #7
 800b40c:	3308      	adds	r3, #8
 800b40e:	9303      	str	r3, [sp, #12]
 800b410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b412:	4433      	add	r3, r6
 800b414:	9309      	str	r3, [sp, #36]	@ 0x24
 800b416:	e76a      	b.n	800b2ee <_svfiprintf_r+0x52>
 800b418:	fb0c 3202 	mla	r2, ip, r2, r3
 800b41c:	460c      	mov	r4, r1
 800b41e:	2001      	movs	r0, #1
 800b420:	e7a8      	b.n	800b374 <_svfiprintf_r+0xd8>
 800b422:	2300      	movs	r3, #0
 800b424:	3401      	adds	r4, #1
 800b426:	9305      	str	r3, [sp, #20]
 800b428:	4619      	mov	r1, r3
 800b42a:	f04f 0c0a 	mov.w	ip, #10
 800b42e:	4620      	mov	r0, r4
 800b430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b434:	3a30      	subs	r2, #48	@ 0x30
 800b436:	2a09      	cmp	r2, #9
 800b438:	d903      	bls.n	800b442 <_svfiprintf_r+0x1a6>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0c6      	beq.n	800b3cc <_svfiprintf_r+0x130>
 800b43e:	9105      	str	r1, [sp, #20]
 800b440:	e7c4      	b.n	800b3cc <_svfiprintf_r+0x130>
 800b442:	fb0c 2101 	mla	r1, ip, r1, r2
 800b446:	4604      	mov	r4, r0
 800b448:	2301      	movs	r3, #1
 800b44a:	e7f0      	b.n	800b42e <_svfiprintf_r+0x192>
 800b44c:	ab03      	add	r3, sp, #12
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	462a      	mov	r2, r5
 800b452:	4b0e      	ldr	r3, [pc, #56]	@ (800b48c <_svfiprintf_r+0x1f0>)
 800b454:	a904      	add	r1, sp, #16
 800b456:	4638      	mov	r0, r7
 800b458:	f7fc fc7a 	bl	8007d50 <_printf_float>
 800b45c:	1c42      	adds	r2, r0, #1
 800b45e:	4606      	mov	r6, r0
 800b460:	d1d6      	bne.n	800b410 <_svfiprintf_r+0x174>
 800b462:	89ab      	ldrh	r3, [r5, #12]
 800b464:	065b      	lsls	r3, r3, #25
 800b466:	f53f af2d 	bmi.w	800b2c4 <_svfiprintf_r+0x28>
 800b46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b46c:	e72c      	b.n	800b2c8 <_svfiprintf_r+0x2c>
 800b46e:	ab03      	add	r3, sp, #12
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	462a      	mov	r2, r5
 800b474:	4b05      	ldr	r3, [pc, #20]	@ (800b48c <_svfiprintf_r+0x1f0>)
 800b476:	a904      	add	r1, sp, #16
 800b478:	4638      	mov	r0, r7
 800b47a:	f7fc ff01 	bl	8008280 <_printf_i>
 800b47e:	e7ed      	b.n	800b45c <_svfiprintf_r+0x1c0>
 800b480:	0800cfb1 	.word	0x0800cfb1
 800b484:	0800cfbb 	.word	0x0800cfbb
 800b488:	08007d51 	.word	0x08007d51
 800b48c:	0800b1e5 	.word	0x0800b1e5
 800b490:	0800cfb7 	.word	0x0800cfb7

0800b494 <_sungetc_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	1c4b      	adds	r3, r1, #1
 800b498:	4614      	mov	r4, r2
 800b49a:	d103      	bne.n	800b4a4 <_sungetc_r+0x10>
 800b49c:	f04f 35ff 	mov.w	r5, #4294967295
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	bd38      	pop	{r3, r4, r5, pc}
 800b4a4:	8993      	ldrh	r3, [r2, #12]
 800b4a6:	f023 0320 	bic.w	r3, r3, #32
 800b4aa:	8193      	strh	r3, [r2, #12]
 800b4ac:	6853      	ldr	r3, [r2, #4]
 800b4ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b4b0:	b2cd      	uxtb	r5, r1
 800b4b2:	b18a      	cbz	r2, 800b4d8 <_sungetc_r+0x44>
 800b4b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	dd08      	ble.n	800b4cc <_sungetc_r+0x38>
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	1e5a      	subs	r2, r3, #1
 800b4be:	6022      	str	r2, [r4, #0]
 800b4c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b4c4:	6863      	ldr	r3, [r4, #4]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	6063      	str	r3, [r4, #4]
 800b4ca:	e7e9      	b.n	800b4a0 <_sungetc_r+0xc>
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	f000 fbe0 	bl	800bc92 <__submore>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d0f1      	beq.n	800b4ba <_sungetc_r+0x26>
 800b4d6:	e7e1      	b.n	800b49c <_sungetc_r+0x8>
 800b4d8:	6921      	ldr	r1, [r4, #16]
 800b4da:	6822      	ldr	r2, [r4, #0]
 800b4dc:	b141      	cbz	r1, 800b4f0 <_sungetc_r+0x5c>
 800b4de:	4291      	cmp	r1, r2
 800b4e0:	d206      	bcs.n	800b4f0 <_sungetc_r+0x5c>
 800b4e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b4e6:	42a9      	cmp	r1, r5
 800b4e8:	d102      	bne.n	800b4f0 <_sungetc_r+0x5c>
 800b4ea:	3a01      	subs	r2, #1
 800b4ec:	6022      	str	r2, [r4, #0]
 800b4ee:	e7ea      	b.n	800b4c6 <_sungetc_r+0x32>
 800b4f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b4f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b4fe:	4623      	mov	r3, r4
 800b500:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	2301      	movs	r3, #1
 800b508:	e7de      	b.n	800b4c8 <_sungetc_r+0x34>

0800b50a <__ssrefill_r>:
 800b50a:	b510      	push	{r4, lr}
 800b50c:	460c      	mov	r4, r1
 800b50e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b510:	b169      	cbz	r1, 800b52e <__ssrefill_r+0x24>
 800b512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b516:	4299      	cmp	r1, r3
 800b518:	d001      	beq.n	800b51e <__ssrefill_r+0x14>
 800b51a:	f7fe fa2d 	bl	8009978 <_free_r>
 800b51e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b520:	6063      	str	r3, [r4, #4]
 800b522:	2000      	movs	r0, #0
 800b524:	6360      	str	r0, [r4, #52]	@ 0x34
 800b526:	b113      	cbz	r3, 800b52e <__ssrefill_r+0x24>
 800b528:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b52a:	6023      	str	r3, [r4, #0]
 800b52c:	bd10      	pop	{r4, pc}
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	2300      	movs	r3, #0
 800b534:	6063      	str	r3, [r4, #4]
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	f043 0320 	orr.w	r3, r3, #32
 800b53c:	81a3      	strh	r3, [r4, #12]
 800b53e:	f04f 30ff 	mov.w	r0, #4294967295
 800b542:	e7f3      	b.n	800b52c <__ssrefill_r+0x22>

0800b544 <__ssvfiscanf_r>:
 800b544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b548:	460c      	mov	r4, r1
 800b54a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b54e:	2100      	movs	r1, #0
 800b550:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b554:	49a5      	ldr	r1, [pc, #660]	@ (800b7ec <__ssvfiscanf_r+0x2a8>)
 800b556:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b558:	f10d 0804 	add.w	r8, sp, #4
 800b55c:	49a4      	ldr	r1, [pc, #656]	@ (800b7f0 <__ssvfiscanf_r+0x2ac>)
 800b55e:	4fa5      	ldr	r7, [pc, #660]	@ (800b7f4 <__ssvfiscanf_r+0x2b0>)
 800b560:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b564:	4606      	mov	r6, r0
 800b566:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	7813      	ldrb	r3, [r2, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 8158 	beq.w	800b822 <__ssvfiscanf_r+0x2de>
 800b572:	5cf9      	ldrb	r1, [r7, r3]
 800b574:	f011 0108 	ands.w	r1, r1, #8
 800b578:	f102 0501 	add.w	r5, r2, #1
 800b57c:	d019      	beq.n	800b5b2 <__ssvfiscanf_r+0x6e>
 800b57e:	6863      	ldr	r3, [r4, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	dd0f      	ble.n	800b5a4 <__ssvfiscanf_r+0x60>
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	781a      	ldrb	r2, [r3, #0]
 800b588:	5cba      	ldrb	r2, [r7, r2]
 800b58a:	0712      	lsls	r2, r2, #28
 800b58c:	d401      	bmi.n	800b592 <__ssvfiscanf_r+0x4e>
 800b58e:	462a      	mov	r2, r5
 800b590:	e7eb      	b.n	800b56a <__ssvfiscanf_r+0x26>
 800b592:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b594:	3201      	adds	r2, #1
 800b596:	9245      	str	r2, [sp, #276]	@ 0x114
 800b598:	6862      	ldr	r2, [r4, #4]
 800b59a:	3301      	adds	r3, #1
 800b59c:	3a01      	subs	r2, #1
 800b59e:	6062      	str	r2, [r4, #4]
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	e7ec      	b.n	800b57e <__ssvfiscanf_r+0x3a>
 800b5a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4798      	blx	r3
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d0e9      	beq.n	800b584 <__ssvfiscanf_r+0x40>
 800b5b0:	e7ed      	b.n	800b58e <__ssvfiscanf_r+0x4a>
 800b5b2:	2b25      	cmp	r3, #37	@ 0x25
 800b5b4:	d012      	beq.n	800b5dc <__ssvfiscanf_r+0x98>
 800b5b6:	4699      	mov	r9, r3
 800b5b8:	6863      	ldr	r3, [r4, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f340 8093 	ble.w	800b6e6 <__ssvfiscanf_r+0x1a2>
 800b5c0:	6822      	ldr	r2, [r4, #0]
 800b5c2:	7813      	ldrb	r3, [r2, #0]
 800b5c4:	454b      	cmp	r3, r9
 800b5c6:	f040 812c 	bne.w	800b822 <__ssvfiscanf_r+0x2de>
 800b5ca:	6863      	ldr	r3, [r4, #4]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	6063      	str	r3, [r4, #4]
 800b5d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b5d2:	3201      	adds	r2, #1
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	6022      	str	r2, [r4, #0]
 800b5d8:	9345      	str	r3, [sp, #276]	@ 0x114
 800b5da:	e7d8      	b.n	800b58e <__ssvfiscanf_r+0x4a>
 800b5dc:	9141      	str	r1, [sp, #260]	@ 0x104
 800b5de:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b5e0:	7853      	ldrb	r3, [r2, #1]
 800b5e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5e4:	bf02      	ittt	eq
 800b5e6:	2310      	moveq	r3, #16
 800b5e8:	1c95      	addeq	r5, r2, #2
 800b5ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b5ec:	220a      	movs	r2, #10
 800b5ee:	46a9      	mov	r9, r5
 800b5f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b5f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b5f8:	2b09      	cmp	r3, #9
 800b5fa:	d91e      	bls.n	800b63a <__ssvfiscanf_r+0xf6>
 800b5fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800b7f8 <__ssvfiscanf_r+0x2b4>
 800b600:	2203      	movs	r2, #3
 800b602:	4650      	mov	r0, sl
 800b604:	f7f4 fde4 	bl	80001d0 <memchr>
 800b608:	b138      	cbz	r0, 800b61a <__ssvfiscanf_r+0xd6>
 800b60a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b60c:	eba0 000a 	sub.w	r0, r0, sl
 800b610:	2301      	movs	r3, #1
 800b612:	4083      	lsls	r3, r0
 800b614:	4313      	orrs	r3, r2
 800b616:	9341      	str	r3, [sp, #260]	@ 0x104
 800b618:	464d      	mov	r5, r9
 800b61a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b61e:	2b78      	cmp	r3, #120	@ 0x78
 800b620:	d806      	bhi.n	800b630 <__ssvfiscanf_r+0xec>
 800b622:	2b57      	cmp	r3, #87	@ 0x57
 800b624:	d810      	bhi.n	800b648 <__ssvfiscanf_r+0x104>
 800b626:	2b25      	cmp	r3, #37	@ 0x25
 800b628:	d0c5      	beq.n	800b5b6 <__ssvfiscanf_r+0x72>
 800b62a:	d857      	bhi.n	800b6dc <__ssvfiscanf_r+0x198>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d065      	beq.n	800b6fc <__ssvfiscanf_r+0x1b8>
 800b630:	2303      	movs	r3, #3
 800b632:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b634:	230a      	movs	r3, #10
 800b636:	9342      	str	r3, [sp, #264]	@ 0x108
 800b638:	e078      	b.n	800b72c <__ssvfiscanf_r+0x1e8>
 800b63a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b63c:	fb02 1103 	mla	r1, r2, r3, r1
 800b640:	3930      	subs	r1, #48	@ 0x30
 800b642:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b644:	464d      	mov	r5, r9
 800b646:	e7d2      	b.n	800b5ee <__ssvfiscanf_r+0xaa>
 800b648:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b64c:	2a20      	cmp	r2, #32
 800b64e:	d8ef      	bhi.n	800b630 <__ssvfiscanf_r+0xec>
 800b650:	a101      	add	r1, pc, #4	@ (adr r1, 800b658 <__ssvfiscanf_r+0x114>)
 800b652:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b656:	bf00      	nop
 800b658:	0800b70b 	.word	0x0800b70b
 800b65c:	0800b631 	.word	0x0800b631
 800b660:	0800b631 	.word	0x0800b631
 800b664:	0800b765 	.word	0x0800b765
 800b668:	0800b631 	.word	0x0800b631
 800b66c:	0800b631 	.word	0x0800b631
 800b670:	0800b631 	.word	0x0800b631
 800b674:	0800b631 	.word	0x0800b631
 800b678:	0800b631 	.word	0x0800b631
 800b67c:	0800b631 	.word	0x0800b631
 800b680:	0800b631 	.word	0x0800b631
 800b684:	0800b77b 	.word	0x0800b77b
 800b688:	0800b761 	.word	0x0800b761
 800b68c:	0800b6e3 	.word	0x0800b6e3
 800b690:	0800b6e3 	.word	0x0800b6e3
 800b694:	0800b6e3 	.word	0x0800b6e3
 800b698:	0800b631 	.word	0x0800b631
 800b69c:	0800b71d 	.word	0x0800b71d
 800b6a0:	0800b631 	.word	0x0800b631
 800b6a4:	0800b631 	.word	0x0800b631
 800b6a8:	0800b631 	.word	0x0800b631
 800b6ac:	0800b631 	.word	0x0800b631
 800b6b0:	0800b78b 	.word	0x0800b78b
 800b6b4:	0800b725 	.word	0x0800b725
 800b6b8:	0800b703 	.word	0x0800b703
 800b6bc:	0800b631 	.word	0x0800b631
 800b6c0:	0800b631 	.word	0x0800b631
 800b6c4:	0800b787 	.word	0x0800b787
 800b6c8:	0800b631 	.word	0x0800b631
 800b6cc:	0800b761 	.word	0x0800b761
 800b6d0:	0800b631 	.word	0x0800b631
 800b6d4:	0800b631 	.word	0x0800b631
 800b6d8:	0800b70b 	.word	0x0800b70b
 800b6dc:	3b45      	subs	r3, #69	@ 0x45
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d8a6      	bhi.n	800b630 <__ssvfiscanf_r+0xec>
 800b6e2:	2305      	movs	r3, #5
 800b6e4:	e021      	b.n	800b72a <__ssvfiscanf_r+0x1e6>
 800b6e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	4798      	blx	r3
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	f43f af66 	beq.w	800b5c0 <__ssvfiscanf_r+0x7c>
 800b6f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f040 808b 	bne.w	800b812 <__ssvfiscanf_r+0x2ce>
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b700:	e08b      	b.n	800b81a <__ssvfiscanf_r+0x2d6>
 800b702:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b704:	f042 0220 	orr.w	r2, r2, #32
 800b708:	9241      	str	r2, [sp, #260]	@ 0x104
 800b70a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b70c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b710:	9241      	str	r2, [sp, #260]	@ 0x104
 800b712:	2210      	movs	r2, #16
 800b714:	2b6e      	cmp	r3, #110	@ 0x6e
 800b716:	9242      	str	r2, [sp, #264]	@ 0x108
 800b718:	d902      	bls.n	800b720 <__ssvfiscanf_r+0x1dc>
 800b71a:	e005      	b.n	800b728 <__ssvfiscanf_r+0x1e4>
 800b71c:	2300      	movs	r3, #0
 800b71e:	9342      	str	r3, [sp, #264]	@ 0x108
 800b720:	2303      	movs	r3, #3
 800b722:	e002      	b.n	800b72a <__ssvfiscanf_r+0x1e6>
 800b724:	2308      	movs	r3, #8
 800b726:	9342      	str	r3, [sp, #264]	@ 0x108
 800b728:	2304      	movs	r3, #4
 800b72a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	dd39      	ble.n	800b7a6 <__ssvfiscanf_r+0x262>
 800b732:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b734:	0659      	lsls	r1, r3, #25
 800b736:	d404      	bmi.n	800b742 <__ssvfiscanf_r+0x1fe>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	781a      	ldrb	r2, [r3, #0]
 800b73c:	5cba      	ldrb	r2, [r7, r2]
 800b73e:	0712      	lsls	r2, r2, #28
 800b740:	d438      	bmi.n	800b7b4 <__ssvfiscanf_r+0x270>
 800b742:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b744:	2b02      	cmp	r3, #2
 800b746:	dc47      	bgt.n	800b7d8 <__ssvfiscanf_r+0x294>
 800b748:	466b      	mov	r3, sp
 800b74a:	4622      	mov	r2, r4
 800b74c:	a941      	add	r1, sp, #260	@ 0x104
 800b74e:	4630      	mov	r0, r6
 800b750:	f000 f86c 	bl	800b82c <_scanf_chars>
 800b754:	2801      	cmp	r0, #1
 800b756:	d064      	beq.n	800b822 <__ssvfiscanf_r+0x2de>
 800b758:	2802      	cmp	r0, #2
 800b75a:	f47f af18 	bne.w	800b58e <__ssvfiscanf_r+0x4a>
 800b75e:	e7c9      	b.n	800b6f4 <__ssvfiscanf_r+0x1b0>
 800b760:	220a      	movs	r2, #10
 800b762:	e7d7      	b.n	800b714 <__ssvfiscanf_r+0x1d0>
 800b764:	4629      	mov	r1, r5
 800b766:	4640      	mov	r0, r8
 800b768:	f000 fa5a 	bl	800bc20 <__sccl>
 800b76c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b772:	9341      	str	r3, [sp, #260]	@ 0x104
 800b774:	4605      	mov	r5, r0
 800b776:	2301      	movs	r3, #1
 800b778:	e7d7      	b.n	800b72a <__ssvfiscanf_r+0x1e6>
 800b77a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b77c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b780:	9341      	str	r3, [sp, #260]	@ 0x104
 800b782:	2300      	movs	r3, #0
 800b784:	e7d1      	b.n	800b72a <__ssvfiscanf_r+0x1e6>
 800b786:	2302      	movs	r3, #2
 800b788:	e7cf      	b.n	800b72a <__ssvfiscanf_r+0x1e6>
 800b78a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b78c:	06c3      	lsls	r3, r0, #27
 800b78e:	f53f aefe 	bmi.w	800b58e <__ssvfiscanf_r+0x4a>
 800b792:	9b00      	ldr	r3, [sp, #0]
 800b794:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b796:	1d19      	adds	r1, r3, #4
 800b798:	9100      	str	r1, [sp, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	07c0      	lsls	r0, r0, #31
 800b79e:	bf4c      	ite	mi
 800b7a0:	801a      	strhmi	r2, [r3, #0]
 800b7a2:	601a      	strpl	r2, [r3, #0]
 800b7a4:	e6f3      	b.n	800b58e <__ssvfiscanf_r+0x4a>
 800b7a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	4798      	blx	r3
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d0bf      	beq.n	800b732 <__ssvfiscanf_r+0x1ee>
 800b7b2:	e79f      	b.n	800b6f4 <__ssvfiscanf_r+0x1b0>
 800b7b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b7b6:	3201      	adds	r2, #1
 800b7b8:	9245      	str	r2, [sp, #276]	@ 0x114
 800b7ba:	6862      	ldr	r2, [r4, #4]
 800b7bc:	3a01      	subs	r2, #1
 800b7be:	2a00      	cmp	r2, #0
 800b7c0:	6062      	str	r2, [r4, #4]
 800b7c2:	dd02      	ble.n	800b7ca <__ssvfiscanf_r+0x286>
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	e7b6      	b.n	800b738 <__ssvfiscanf_r+0x1f4>
 800b7ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	4798      	blx	r3
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d0b0      	beq.n	800b738 <__ssvfiscanf_r+0x1f4>
 800b7d6:	e78d      	b.n	800b6f4 <__ssvfiscanf_r+0x1b0>
 800b7d8:	2b04      	cmp	r3, #4
 800b7da:	dc0f      	bgt.n	800b7fc <__ssvfiscanf_r+0x2b8>
 800b7dc:	466b      	mov	r3, sp
 800b7de:	4622      	mov	r2, r4
 800b7e0:	a941      	add	r1, sp, #260	@ 0x104
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f000 f87c 	bl	800b8e0 <_scanf_i>
 800b7e8:	e7b4      	b.n	800b754 <__ssvfiscanf_r+0x210>
 800b7ea:	bf00      	nop
 800b7ec:	0800b495 	.word	0x0800b495
 800b7f0:	0800b50b 	.word	0x0800b50b
 800b7f4:	0800ceb1 	.word	0x0800ceb1
 800b7f8:	0800cfb7 	.word	0x0800cfb7
 800b7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b828 <__ssvfiscanf_r+0x2e4>)
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f43f aec5 	beq.w	800b58e <__ssvfiscanf_r+0x4a>
 800b804:	466b      	mov	r3, sp
 800b806:	4622      	mov	r2, r4
 800b808:	a941      	add	r1, sp, #260	@ 0x104
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7fc fe58 	bl	80084c0 <_scanf_float>
 800b810:	e7a0      	b.n	800b754 <__ssvfiscanf_r+0x210>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	065b      	lsls	r3, r3, #25
 800b816:	f53f af71 	bmi.w	800b6fc <__ssvfiscanf_r+0x1b8>
 800b81a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b822:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b824:	e7f9      	b.n	800b81a <__ssvfiscanf_r+0x2d6>
 800b826:	bf00      	nop
 800b828:	080084c1 	.word	0x080084c1

0800b82c <_scanf_chars>:
 800b82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b830:	4615      	mov	r5, r2
 800b832:	688a      	ldr	r2, [r1, #8]
 800b834:	4680      	mov	r8, r0
 800b836:	460c      	mov	r4, r1
 800b838:	b932      	cbnz	r2, 800b848 <_scanf_chars+0x1c>
 800b83a:	698a      	ldr	r2, [r1, #24]
 800b83c:	2a00      	cmp	r2, #0
 800b83e:	bf14      	ite	ne
 800b840:	f04f 32ff 	movne.w	r2, #4294967295
 800b844:	2201      	moveq	r2, #1
 800b846:	608a      	str	r2, [r1, #8]
 800b848:	6822      	ldr	r2, [r4, #0]
 800b84a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b8dc <_scanf_chars+0xb0>
 800b84e:	06d1      	lsls	r1, r2, #27
 800b850:	bf5f      	itttt	pl
 800b852:	681a      	ldrpl	r2, [r3, #0]
 800b854:	1d11      	addpl	r1, r2, #4
 800b856:	6019      	strpl	r1, [r3, #0]
 800b858:	6816      	ldrpl	r6, [r2, #0]
 800b85a:	2700      	movs	r7, #0
 800b85c:	69a0      	ldr	r0, [r4, #24]
 800b85e:	b188      	cbz	r0, 800b884 <_scanf_chars+0x58>
 800b860:	2801      	cmp	r0, #1
 800b862:	d107      	bne.n	800b874 <_scanf_chars+0x48>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	781a      	ldrb	r2, [r3, #0]
 800b868:	6963      	ldr	r3, [r4, #20]
 800b86a:	5c9b      	ldrb	r3, [r3, r2]
 800b86c:	b953      	cbnz	r3, 800b884 <_scanf_chars+0x58>
 800b86e:	2f00      	cmp	r7, #0
 800b870:	d031      	beq.n	800b8d6 <_scanf_chars+0xaa>
 800b872:	e022      	b.n	800b8ba <_scanf_chars+0x8e>
 800b874:	2802      	cmp	r0, #2
 800b876:	d120      	bne.n	800b8ba <_scanf_chars+0x8e>
 800b878:	682b      	ldr	r3, [r5, #0]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b880:	071b      	lsls	r3, r3, #28
 800b882:	d41a      	bmi.n	800b8ba <_scanf_chars+0x8e>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	06da      	lsls	r2, r3, #27
 800b888:	bf5e      	ittt	pl
 800b88a:	682b      	ldrpl	r3, [r5, #0]
 800b88c:	781b      	ldrbpl	r3, [r3, #0]
 800b88e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b892:	682a      	ldr	r2, [r5, #0]
 800b894:	686b      	ldr	r3, [r5, #4]
 800b896:	3201      	adds	r2, #1
 800b898:	602a      	str	r2, [r5, #0]
 800b89a:	68a2      	ldr	r2, [r4, #8]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	3a01      	subs	r2, #1
 800b8a0:	606b      	str	r3, [r5, #4]
 800b8a2:	3701      	adds	r7, #1
 800b8a4:	60a2      	str	r2, [r4, #8]
 800b8a6:	b142      	cbz	r2, 800b8ba <_scanf_chars+0x8e>
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	dcd7      	bgt.n	800b85c <_scanf_chars+0x30>
 800b8ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	4798      	blx	r3
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d0d0      	beq.n	800b85c <_scanf_chars+0x30>
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	f013 0310 	ands.w	r3, r3, #16
 800b8c0:	d105      	bne.n	800b8ce <_scanf_chars+0xa2>
 800b8c2:	68e2      	ldr	r2, [r4, #12]
 800b8c4:	3201      	adds	r2, #1
 800b8c6:	60e2      	str	r2, [r4, #12]
 800b8c8:	69a2      	ldr	r2, [r4, #24]
 800b8ca:	b102      	cbz	r2, 800b8ce <_scanf_chars+0xa2>
 800b8cc:	7033      	strb	r3, [r6, #0]
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	443b      	add	r3, r7
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8da:	bf00      	nop
 800b8dc:	0800ceb1 	.word	0x0800ceb1

0800b8e0 <_scanf_i>:
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	4698      	mov	r8, r3
 800b8e6:	4b74      	ldr	r3, [pc, #464]	@ (800bab8 <_scanf_i+0x1d8>)
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	4682      	mov	sl, r0
 800b8ec:	4616      	mov	r6, r2
 800b8ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	ab03      	add	r3, sp, #12
 800b8f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8fa:	4b70      	ldr	r3, [pc, #448]	@ (800babc <_scanf_i+0x1dc>)
 800b8fc:	69a1      	ldr	r1, [r4, #24]
 800b8fe:	4a70      	ldr	r2, [pc, #448]	@ (800bac0 <_scanf_i+0x1e0>)
 800b900:	2903      	cmp	r1, #3
 800b902:	bf08      	it	eq
 800b904:	461a      	moveq	r2, r3
 800b906:	68a3      	ldr	r3, [r4, #8]
 800b908:	9201      	str	r2, [sp, #4]
 800b90a:	1e5a      	subs	r2, r3, #1
 800b90c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b910:	bf88      	it	hi
 800b912:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b916:	4627      	mov	r7, r4
 800b918:	bf82      	ittt	hi
 800b91a:	eb03 0905 	addhi.w	r9, r3, r5
 800b91e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b922:	60a3      	strhi	r3, [r4, #8]
 800b924:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b928:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b92c:	bf98      	it	ls
 800b92e:	f04f 0900 	movls.w	r9, #0
 800b932:	6023      	str	r3, [r4, #0]
 800b934:	463d      	mov	r5, r7
 800b936:	f04f 0b00 	mov.w	fp, #0
 800b93a:	6831      	ldr	r1, [r6, #0]
 800b93c:	ab03      	add	r3, sp, #12
 800b93e:	7809      	ldrb	r1, [r1, #0]
 800b940:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b944:	2202      	movs	r2, #2
 800b946:	f7f4 fc43 	bl	80001d0 <memchr>
 800b94a:	b328      	cbz	r0, 800b998 <_scanf_i+0xb8>
 800b94c:	f1bb 0f01 	cmp.w	fp, #1
 800b950:	d159      	bne.n	800ba06 <_scanf_i+0x126>
 800b952:	6862      	ldr	r2, [r4, #4]
 800b954:	b92a      	cbnz	r2, 800b962 <_scanf_i+0x82>
 800b956:	6822      	ldr	r2, [r4, #0]
 800b958:	2108      	movs	r1, #8
 800b95a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b95e:	6061      	str	r1, [r4, #4]
 800b960:	6022      	str	r2, [r4, #0]
 800b962:	6822      	ldr	r2, [r4, #0]
 800b964:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b968:	6022      	str	r2, [r4, #0]
 800b96a:	68a2      	ldr	r2, [r4, #8]
 800b96c:	1e51      	subs	r1, r2, #1
 800b96e:	60a1      	str	r1, [r4, #8]
 800b970:	b192      	cbz	r2, 800b998 <_scanf_i+0xb8>
 800b972:	6832      	ldr	r2, [r6, #0]
 800b974:	1c51      	adds	r1, r2, #1
 800b976:	6031      	str	r1, [r6, #0]
 800b978:	7812      	ldrb	r2, [r2, #0]
 800b97a:	f805 2b01 	strb.w	r2, [r5], #1
 800b97e:	6872      	ldr	r2, [r6, #4]
 800b980:	3a01      	subs	r2, #1
 800b982:	2a00      	cmp	r2, #0
 800b984:	6072      	str	r2, [r6, #4]
 800b986:	dc07      	bgt.n	800b998 <_scanf_i+0xb8>
 800b988:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b98c:	4631      	mov	r1, r6
 800b98e:	4650      	mov	r0, sl
 800b990:	4790      	blx	r2
 800b992:	2800      	cmp	r0, #0
 800b994:	f040 8085 	bne.w	800baa2 <_scanf_i+0x1c2>
 800b998:	f10b 0b01 	add.w	fp, fp, #1
 800b99c:	f1bb 0f03 	cmp.w	fp, #3
 800b9a0:	d1cb      	bne.n	800b93a <_scanf_i+0x5a>
 800b9a2:	6863      	ldr	r3, [r4, #4]
 800b9a4:	b90b      	cbnz	r3, 800b9aa <_scanf_i+0xca>
 800b9a6:	230a      	movs	r3, #10
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	6863      	ldr	r3, [r4, #4]
 800b9ac:	4945      	ldr	r1, [pc, #276]	@ (800bac4 <_scanf_i+0x1e4>)
 800b9ae:	6960      	ldr	r0, [r4, #20]
 800b9b0:	1ac9      	subs	r1, r1, r3
 800b9b2:	f000 f935 	bl	800bc20 <__sccl>
 800b9b6:	f04f 0b00 	mov.w	fp, #0
 800b9ba:	68a3      	ldr	r3, [r4, #8]
 800b9bc:	6822      	ldr	r2, [r4, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d03d      	beq.n	800ba3e <_scanf_i+0x15e>
 800b9c2:	6831      	ldr	r1, [r6, #0]
 800b9c4:	6960      	ldr	r0, [r4, #20]
 800b9c6:	f891 c000 	ldrb.w	ip, [r1]
 800b9ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d035      	beq.n	800ba3e <_scanf_i+0x15e>
 800b9d2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b9d6:	d124      	bne.n	800ba22 <_scanf_i+0x142>
 800b9d8:	0510      	lsls	r0, r2, #20
 800b9da:	d522      	bpl.n	800ba22 <_scanf_i+0x142>
 800b9dc:	f10b 0b01 	add.w	fp, fp, #1
 800b9e0:	f1b9 0f00 	cmp.w	r9, #0
 800b9e4:	d003      	beq.n	800b9ee <_scanf_i+0x10e>
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800b9ec:	60a3      	str	r3, [r4, #8]
 800b9ee:	6873      	ldr	r3, [r6, #4]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	6073      	str	r3, [r6, #4]
 800b9f6:	dd1b      	ble.n	800ba30 <_scanf_i+0x150>
 800b9f8:	6833      	ldr	r3, [r6, #0]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	6033      	str	r3, [r6, #0]
 800b9fe:	68a3      	ldr	r3, [r4, #8]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	60a3      	str	r3, [r4, #8]
 800ba04:	e7d9      	b.n	800b9ba <_scanf_i+0xda>
 800ba06:	f1bb 0f02 	cmp.w	fp, #2
 800ba0a:	d1ae      	bne.n	800b96a <_scanf_i+0x8a>
 800ba0c:	6822      	ldr	r2, [r4, #0]
 800ba0e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ba12:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ba16:	d1bf      	bne.n	800b998 <_scanf_i+0xb8>
 800ba18:	2110      	movs	r1, #16
 800ba1a:	6061      	str	r1, [r4, #4]
 800ba1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba20:	e7a2      	b.n	800b968 <_scanf_i+0x88>
 800ba22:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ba26:	6022      	str	r2, [r4, #0]
 800ba28:	780b      	ldrb	r3, [r1, #0]
 800ba2a:	f805 3b01 	strb.w	r3, [r5], #1
 800ba2e:	e7de      	b.n	800b9ee <_scanf_i+0x10e>
 800ba30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ba34:	4631      	mov	r1, r6
 800ba36:	4650      	mov	r0, sl
 800ba38:	4798      	blx	r3
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d0df      	beq.n	800b9fe <_scanf_i+0x11e>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	05d9      	lsls	r1, r3, #23
 800ba42:	d50d      	bpl.n	800ba60 <_scanf_i+0x180>
 800ba44:	42bd      	cmp	r5, r7
 800ba46:	d909      	bls.n	800ba5c <_scanf_i+0x17c>
 800ba48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ba4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba50:	4632      	mov	r2, r6
 800ba52:	4650      	mov	r0, sl
 800ba54:	4798      	blx	r3
 800ba56:	f105 39ff 	add.w	r9, r5, #4294967295
 800ba5a:	464d      	mov	r5, r9
 800ba5c:	42bd      	cmp	r5, r7
 800ba5e:	d028      	beq.n	800bab2 <_scanf_i+0x1d2>
 800ba60:	6822      	ldr	r2, [r4, #0]
 800ba62:	f012 0210 	ands.w	r2, r2, #16
 800ba66:	d113      	bne.n	800ba90 <_scanf_i+0x1b0>
 800ba68:	702a      	strb	r2, [r5, #0]
 800ba6a:	6863      	ldr	r3, [r4, #4]
 800ba6c:	9e01      	ldr	r6, [sp, #4]
 800ba6e:	4639      	mov	r1, r7
 800ba70:	4650      	mov	r0, sl
 800ba72:	47b0      	blx	r6
 800ba74:	f8d8 3000 	ldr.w	r3, [r8]
 800ba78:	6821      	ldr	r1, [r4, #0]
 800ba7a:	1d1a      	adds	r2, r3, #4
 800ba7c:	f8c8 2000 	str.w	r2, [r8]
 800ba80:	f011 0f20 	tst.w	r1, #32
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	d00f      	beq.n	800baa8 <_scanf_i+0x1c8>
 800ba88:	6018      	str	r0, [r3, #0]
 800ba8a:	68e3      	ldr	r3, [r4, #12]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	60e3      	str	r3, [r4, #12]
 800ba90:	6923      	ldr	r3, [r4, #16]
 800ba92:	1bed      	subs	r5, r5, r7
 800ba94:	445d      	add	r5, fp
 800ba96:	442b      	add	r3, r5
 800ba98:	6123      	str	r3, [r4, #16]
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	b007      	add	sp, #28
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	f04f 0b00 	mov.w	fp, #0
 800baa6:	e7ca      	b.n	800ba3e <_scanf_i+0x15e>
 800baa8:	07ca      	lsls	r2, r1, #31
 800baaa:	bf4c      	ite	mi
 800baac:	8018      	strhmi	r0, [r3, #0]
 800baae:	6018      	strpl	r0, [r3, #0]
 800bab0:	e7eb      	b.n	800ba8a <_scanf_i+0x1aa>
 800bab2:	2001      	movs	r0, #1
 800bab4:	e7f2      	b.n	800ba9c <_scanf_i+0x1bc>
 800bab6:	bf00      	nop
 800bab8:	0800cc10 	.word	0x0800cc10
 800babc:	0800b1e1 	.word	0x0800b1e1
 800bac0:	0800c5e5 	.word	0x0800c5e5
 800bac4:	0800cfd2 	.word	0x0800cfd2

0800bac8 <__sflush_r>:
 800bac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad0:	0716      	lsls	r6, r2, #28
 800bad2:	4605      	mov	r5, r0
 800bad4:	460c      	mov	r4, r1
 800bad6:	d454      	bmi.n	800bb82 <__sflush_r+0xba>
 800bad8:	684b      	ldr	r3, [r1, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	dc02      	bgt.n	800bae4 <__sflush_r+0x1c>
 800bade:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	dd48      	ble.n	800bb76 <__sflush_r+0xae>
 800bae4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bae6:	2e00      	cmp	r6, #0
 800bae8:	d045      	beq.n	800bb76 <__sflush_r+0xae>
 800baea:	2300      	movs	r3, #0
 800baec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800baf0:	682f      	ldr	r7, [r5, #0]
 800baf2:	6a21      	ldr	r1, [r4, #32]
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	d030      	beq.n	800bb5a <__sflush_r+0x92>
 800baf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bafa:	89a3      	ldrh	r3, [r4, #12]
 800bafc:	0759      	lsls	r1, r3, #29
 800bafe:	d505      	bpl.n	800bb0c <__sflush_r+0x44>
 800bb00:	6863      	ldr	r3, [r4, #4]
 800bb02:	1ad2      	subs	r2, r2, r3
 800bb04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb06:	b10b      	cbz	r3, 800bb0c <__sflush_r+0x44>
 800bb08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb0a:	1ad2      	subs	r2, r2, r3
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb10:	6a21      	ldr	r1, [r4, #32]
 800bb12:	4628      	mov	r0, r5
 800bb14:	47b0      	blx	r6
 800bb16:	1c43      	adds	r3, r0, #1
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	d106      	bne.n	800bb2a <__sflush_r+0x62>
 800bb1c:	6829      	ldr	r1, [r5, #0]
 800bb1e:	291d      	cmp	r1, #29
 800bb20:	d82b      	bhi.n	800bb7a <__sflush_r+0xb2>
 800bb22:	4a2a      	ldr	r2, [pc, #168]	@ (800bbcc <__sflush_r+0x104>)
 800bb24:	410a      	asrs	r2, r1
 800bb26:	07d6      	lsls	r6, r2, #31
 800bb28:	d427      	bmi.n	800bb7a <__sflush_r+0xb2>
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	6062      	str	r2, [r4, #4]
 800bb2e:	04d9      	lsls	r1, r3, #19
 800bb30:	6922      	ldr	r2, [r4, #16]
 800bb32:	6022      	str	r2, [r4, #0]
 800bb34:	d504      	bpl.n	800bb40 <__sflush_r+0x78>
 800bb36:	1c42      	adds	r2, r0, #1
 800bb38:	d101      	bne.n	800bb3e <__sflush_r+0x76>
 800bb3a:	682b      	ldr	r3, [r5, #0]
 800bb3c:	b903      	cbnz	r3, 800bb40 <__sflush_r+0x78>
 800bb3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb42:	602f      	str	r7, [r5, #0]
 800bb44:	b1b9      	cbz	r1, 800bb76 <__sflush_r+0xae>
 800bb46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb4a:	4299      	cmp	r1, r3
 800bb4c:	d002      	beq.n	800bb54 <__sflush_r+0x8c>
 800bb4e:	4628      	mov	r0, r5
 800bb50:	f7fd ff12 	bl	8009978 <_free_r>
 800bb54:	2300      	movs	r3, #0
 800bb56:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb58:	e00d      	b.n	800bb76 <__sflush_r+0xae>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	47b0      	blx	r6
 800bb60:	4602      	mov	r2, r0
 800bb62:	1c50      	adds	r0, r2, #1
 800bb64:	d1c9      	bne.n	800bafa <__sflush_r+0x32>
 800bb66:	682b      	ldr	r3, [r5, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d0c6      	beq.n	800bafa <__sflush_r+0x32>
 800bb6c:	2b1d      	cmp	r3, #29
 800bb6e:	d001      	beq.n	800bb74 <__sflush_r+0xac>
 800bb70:	2b16      	cmp	r3, #22
 800bb72:	d11e      	bne.n	800bbb2 <__sflush_r+0xea>
 800bb74:	602f      	str	r7, [r5, #0]
 800bb76:	2000      	movs	r0, #0
 800bb78:	e022      	b.n	800bbc0 <__sflush_r+0xf8>
 800bb7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb7e:	b21b      	sxth	r3, r3
 800bb80:	e01b      	b.n	800bbba <__sflush_r+0xf2>
 800bb82:	690f      	ldr	r7, [r1, #16]
 800bb84:	2f00      	cmp	r7, #0
 800bb86:	d0f6      	beq.n	800bb76 <__sflush_r+0xae>
 800bb88:	0793      	lsls	r3, r2, #30
 800bb8a:	680e      	ldr	r6, [r1, #0]
 800bb8c:	bf08      	it	eq
 800bb8e:	694b      	ldreq	r3, [r1, #20]
 800bb90:	600f      	str	r7, [r1, #0]
 800bb92:	bf18      	it	ne
 800bb94:	2300      	movne	r3, #0
 800bb96:	eba6 0807 	sub.w	r8, r6, r7
 800bb9a:	608b      	str	r3, [r1, #8]
 800bb9c:	f1b8 0f00 	cmp.w	r8, #0
 800bba0:	dde9      	ble.n	800bb76 <__sflush_r+0xae>
 800bba2:	6a21      	ldr	r1, [r4, #32]
 800bba4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bba6:	4643      	mov	r3, r8
 800bba8:	463a      	mov	r2, r7
 800bbaa:	4628      	mov	r0, r5
 800bbac:	47b0      	blx	r6
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	dc08      	bgt.n	800bbc4 <__sflush_r+0xfc>
 800bbb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbba:	81a3      	strh	r3, [r4, #12]
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc4:	4407      	add	r7, r0
 800bbc6:	eba8 0800 	sub.w	r8, r8, r0
 800bbca:	e7e7      	b.n	800bb9c <__sflush_r+0xd4>
 800bbcc:	dfbffffe 	.word	0xdfbffffe

0800bbd0 <_fflush_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	690b      	ldr	r3, [r1, #16]
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	b913      	cbnz	r3, 800bbe0 <_fflush_r+0x10>
 800bbda:	2500      	movs	r5, #0
 800bbdc:	4628      	mov	r0, r5
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	b118      	cbz	r0, 800bbea <_fflush_r+0x1a>
 800bbe2:	6a03      	ldr	r3, [r0, #32]
 800bbe4:	b90b      	cbnz	r3, 800bbea <_fflush_r+0x1a>
 800bbe6:	f7fc ff0b 	bl	8008a00 <__sinit>
 800bbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0f3      	beq.n	800bbda <_fflush_r+0xa>
 800bbf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbf4:	07d0      	lsls	r0, r2, #31
 800bbf6:	d404      	bmi.n	800bc02 <_fflush_r+0x32>
 800bbf8:	0599      	lsls	r1, r3, #22
 800bbfa:	d402      	bmi.n	800bc02 <_fflush_r+0x32>
 800bbfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbfe:	f7fd f864 	bl	8008cca <__retarget_lock_acquire_recursive>
 800bc02:	4628      	mov	r0, r5
 800bc04:	4621      	mov	r1, r4
 800bc06:	f7ff ff5f 	bl	800bac8 <__sflush_r>
 800bc0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc0c:	07da      	lsls	r2, r3, #31
 800bc0e:	4605      	mov	r5, r0
 800bc10:	d4e4      	bmi.n	800bbdc <_fflush_r+0xc>
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	059b      	lsls	r3, r3, #22
 800bc16:	d4e1      	bmi.n	800bbdc <_fflush_r+0xc>
 800bc18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc1a:	f7fd f857 	bl	8008ccc <__retarget_lock_release_recursive>
 800bc1e:	e7dd      	b.n	800bbdc <_fflush_r+0xc>

0800bc20 <__sccl>:
 800bc20:	b570      	push	{r4, r5, r6, lr}
 800bc22:	780b      	ldrb	r3, [r1, #0]
 800bc24:	4604      	mov	r4, r0
 800bc26:	2b5e      	cmp	r3, #94	@ 0x5e
 800bc28:	bf0b      	itete	eq
 800bc2a:	784b      	ldrbeq	r3, [r1, #1]
 800bc2c:	1c4a      	addne	r2, r1, #1
 800bc2e:	1c8a      	addeq	r2, r1, #2
 800bc30:	2100      	movne	r1, #0
 800bc32:	bf08      	it	eq
 800bc34:	2101      	moveq	r1, #1
 800bc36:	3801      	subs	r0, #1
 800bc38:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800bc3c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800bc40:	42a8      	cmp	r0, r5
 800bc42:	d1fb      	bne.n	800bc3c <__sccl+0x1c>
 800bc44:	b90b      	cbnz	r3, 800bc4a <__sccl+0x2a>
 800bc46:	1e50      	subs	r0, r2, #1
 800bc48:	bd70      	pop	{r4, r5, r6, pc}
 800bc4a:	f081 0101 	eor.w	r1, r1, #1
 800bc4e:	54e1      	strb	r1, [r4, r3]
 800bc50:	4610      	mov	r0, r2
 800bc52:	4602      	mov	r2, r0
 800bc54:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bc58:	2d2d      	cmp	r5, #45	@ 0x2d
 800bc5a:	d005      	beq.n	800bc68 <__sccl+0x48>
 800bc5c:	2d5d      	cmp	r5, #93	@ 0x5d
 800bc5e:	d016      	beq.n	800bc8e <__sccl+0x6e>
 800bc60:	2d00      	cmp	r5, #0
 800bc62:	d0f1      	beq.n	800bc48 <__sccl+0x28>
 800bc64:	462b      	mov	r3, r5
 800bc66:	e7f2      	b.n	800bc4e <__sccl+0x2e>
 800bc68:	7846      	ldrb	r6, [r0, #1]
 800bc6a:	2e5d      	cmp	r6, #93	@ 0x5d
 800bc6c:	d0fa      	beq.n	800bc64 <__sccl+0x44>
 800bc6e:	42b3      	cmp	r3, r6
 800bc70:	dcf8      	bgt.n	800bc64 <__sccl+0x44>
 800bc72:	3002      	adds	r0, #2
 800bc74:	461a      	mov	r2, r3
 800bc76:	3201      	adds	r2, #1
 800bc78:	4296      	cmp	r6, r2
 800bc7a:	54a1      	strb	r1, [r4, r2]
 800bc7c:	dcfb      	bgt.n	800bc76 <__sccl+0x56>
 800bc7e:	1af2      	subs	r2, r6, r3
 800bc80:	3a01      	subs	r2, #1
 800bc82:	1c5d      	adds	r5, r3, #1
 800bc84:	42b3      	cmp	r3, r6
 800bc86:	bfa8      	it	ge
 800bc88:	2200      	movge	r2, #0
 800bc8a:	18ab      	adds	r3, r5, r2
 800bc8c:	e7e1      	b.n	800bc52 <__sccl+0x32>
 800bc8e:	4610      	mov	r0, r2
 800bc90:	e7da      	b.n	800bc48 <__sccl+0x28>

0800bc92 <__submore>:
 800bc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc96:	460c      	mov	r4, r1
 800bc98:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bc9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc9e:	4299      	cmp	r1, r3
 800bca0:	d11d      	bne.n	800bcde <__submore+0x4c>
 800bca2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bca6:	f7fd fedb 	bl	8009a60 <_malloc_r>
 800bcaa:	b918      	cbnz	r0, 800bcb4 <__submore+0x22>
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcb8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bcba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bcbe:	6360      	str	r0, [r4, #52]	@ 0x34
 800bcc0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800bcc4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bcc8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800bccc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bcd0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800bcd4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bcd8:	6020      	str	r0, [r4, #0]
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e7e8      	b.n	800bcb0 <__submore+0x1e>
 800bcde:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bce0:	0077      	lsls	r7, r6, #1
 800bce2:	463a      	mov	r2, r7
 800bce4:	f000 fbe1 	bl	800c4aa <_realloc_r>
 800bce8:	4605      	mov	r5, r0
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d0de      	beq.n	800bcac <__submore+0x1a>
 800bcee:	eb00 0806 	add.w	r8, r0, r6
 800bcf2:	4601      	mov	r1, r0
 800bcf4:	4632      	mov	r2, r6
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	f000 f842 	bl	800bd80 <memcpy>
 800bcfc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bd00:	f8c4 8000 	str.w	r8, [r4]
 800bd04:	e7e9      	b.n	800bcda <__submore+0x48>

0800bd06 <memmove>:
 800bd06:	4288      	cmp	r0, r1
 800bd08:	b510      	push	{r4, lr}
 800bd0a:	eb01 0402 	add.w	r4, r1, r2
 800bd0e:	d902      	bls.n	800bd16 <memmove+0x10>
 800bd10:	4284      	cmp	r4, r0
 800bd12:	4623      	mov	r3, r4
 800bd14:	d807      	bhi.n	800bd26 <memmove+0x20>
 800bd16:	1e43      	subs	r3, r0, #1
 800bd18:	42a1      	cmp	r1, r4
 800bd1a:	d008      	beq.n	800bd2e <memmove+0x28>
 800bd1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd24:	e7f8      	b.n	800bd18 <memmove+0x12>
 800bd26:	4402      	add	r2, r0
 800bd28:	4601      	mov	r1, r0
 800bd2a:	428a      	cmp	r2, r1
 800bd2c:	d100      	bne.n	800bd30 <memmove+0x2a>
 800bd2e:	bd10      	pop	{r4, pc}
 800bd30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd38:	e7f7      	b.n	800bd2a <memmove+0x24>

0800bd3a <strncmp>:
 800bd3a:	b510      	push	{r4, lr}
 800bd3c:	b16a      	cbz	r2, 800bd5a <strncmp+0x20>
 800bd3e:	3901      	subs	r1, #1
 800bd40:	1884      	adds	r4, r0, r2
 800bd42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d103      	bne.n	800bd56 <strncmp+0x1c>
 800bd4e:	42a0      	cmp	r0, r4
 800bd50:	d001      	beq.n	800bd56 <strncmp+0x1c>
 800bd52:	2a00      	cmp	r2, #0
 800bd54:	d1f5      	bne.n	800bd42 <strncmp+0x8>
 800bd56:	1ad0      	subs	r0, r2, r3
 800bd58:	bd10      	pop	{r4, pc}
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	e7fc      	b.n	800bd58 <strncmp+0x1e>
	...

0800bd60 <_sbrk_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d06      	ldr	r5, [pc, #24]	@ (800bd7c <_sbrk_r+0x1c>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f7f7 f9d4 	bl	8003118 <_sbrk>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_sbrk_r+0x1a>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_sbrk_r+0x1a>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	20000a4c 	.word	0x20000a4c

0800bd80 <memcpy>:
 800bd80:	440a      	add	r2, r1
 800bd82:	4291      	cmp	r1, r2
 800bd84:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd88:	d100      	bne.n	800bd8c <memcpy+0xc>
 800bd8a:	4770      	bx	lr
 800bd8c:	b510      	push	{r4, lr}
 800bd8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd96:	4291      	cmp	r1, r2
 800bd98:	d1f9      	bne.n	800bd8e <memcpy+0xe>
 800bd9a:	bd10      	pop	{r4, pc}
 800bd9c:	0000      	movs	r0, r0
	...

0800bda0 <nan>:
 800bda0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bda8 <nan+0x8>
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	00000000 	.word	0x00000000
 800bdac:	7ff80000 	.word	0x7ff80000

0800bdb0 <__assert_func>:
 800bdb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdb2:	4614      	mov	r4, r2
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	4b09      	ldr	r3, [pc, #36]	@ (800bddc <__assert_func+0x2c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4605      	mov	r5, r0
 800bdbc:	68d8      	ldr	r0, [r3, #12]
 800bdbe:	b954      	cbnz	r4, 800bdd6 <__assert_func+0x26>
 800bdc0:	4b07      	ldr	r3, [pc, #28]	@ (800bde0 <__assert_func+0x30>)
 800bdc2:	461c      	mov	r4, r3
 800bdc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bdc8:	9100      	str	r1, [sp, #0]
 800bdca:	462b      	mov	r3, r5
 800bdcc:	4905      	ldr	r1, [pc, #20]	@ (800bde4 <__assert_func+0x34>)
 800bdce:	f000 fc19 	bl	800c604 <fiprintf>
 800bdd2:	f000 fc29 	bl	800c628 <abort>
 800bdd6:	4b04      	ldr	r3, [pc, #16]	@ (800bde8 <__assert_func+0x38>)
 800bdd8:	e7f4      	b.n	800bdc4 <__assert_func+0x14>
 800bdda:	bf00      	nop
 800bddc:	200000fc 	.word	0x200000fc
 800bde0:	0800d020 	.word	0x0800d020
 800bde4:	0800cff2 	.word	0x0800cff2
 800bde8:	0800cfe5 	.word	0x0800cfe5

0800bdec <_calloc_r>:
 800bdec:	b570      	push	{r4, r5, r6, lr}
 800bdee:	fba1 5402 	umull	r5, r4, r1, r2
 800bdf2:	b93c      	cbnz	r4, 800be04 <_calloc_r+0x18>
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	f7fd fe33 	bl	8009a60 <_malloc_r>
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	b928      	cbnz	r0, 800be0a <_calloc_r+0x1e>
 800bdfe:	2600      	movs	r6, #0
 800be00:	4630      	mov	r0, r6
 800be02:	bd70      	pop	{r4, r5, r6, pc}
 800be04:	220c      	movs	r2, #12
 800be06:	6002      	str	r2, [r0, #0]
 800be08:	e7f9      	b.n	800bdfe <_calloc_r+0x12>
 800be0a:	462a      	mov	r2, r5
 800be0c:	4621      	mov	r1, r4
 800be0e:	f7fc febc 	bl	8008b8a <memset>
 800be12:	e7f5      	b.n	800be00 <_calloc_r+0x14>

0800be14 <rshift>:
 800be14:	6903      	ldr	r3, [r0, #16]
 800be16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be22:	f100 0414 	add.w	r4, r0, #20
 800be26:	dd45      	ble.n	800beb4 <rshift+0xa0>
 800be28:	f011 011f 	ands.w	r1, r1, #31
 800be2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800be34:	d10c      	bne.n	800be50 <rshift+0x3c>
 800be36:	f100 0710 	add.w	r7, r0, #16
 800be3a:	4629      	mov	r1, r5
 800be3c:	42b1      	cmp	r1, r6
 800be3e:	d334      	bcc.n	800beaa <rshift+0x96>
 800be40:	1a9b      	subs	r3, r3, r2
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	1eea      	subs	r2, r5, #3
 800be46:	4296      	cmp	r6, r2
 800be48:	bf38      	it	cc
 800be4a:	2300      	movcc	r3, #0
 800be4c:	4423      	add	r3, r4
 800be4e:	e015      	b.n	800be7c <rshift+0x68>
 800be50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800be54:	f1c1 0820 	rsb	r8, r1, #32
 800be58:	40cf      	lsrs	r7, r1
 800be5a:	f105 0e04 	add.w	lr, r5, #4
 800be5e:	46a1      	mov	r9, r4
 800be60:	4576      	cmp	r6, lr
 800be62:	46f4      	mov	ip, lr
 800be64:	d815      	bhi.n	800be92 <rshift+0x7e>
 800be66:	1a9a      	subs	r2, r3, r2
 800be68:	0092      	lsls	r2, r2, #2
 800be6a:	3a04      	subs	r2, #4
 800be6c:	3501      	adds	r5, #1
 800be6e:	42ae      	cmp	r6, r5
 800be70:	bf38      	it	cc
 800be72:	2200      	movcc	r2, #0
 800be74:	18a3      	adds	r3, r4, r2
 800be76:	50a7      	str	r7, [r4, r2]
 800be78:	b107      	cbz	r7, 800be7c <rshift+0x68>
 800be7a:	3304      	adds	r3, #4
 800be7c:	1b1a      	subs	r2, r3, r4
 800be7e:	42a3      	cmp	r3, r4
 800be80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be84:	bf08      	it	eq
 800be86:	2300      	moveq	r3, #0
 800be88:	6102      	str	r2, [r0, #16]
 800be8a:	bf08      	it	eq
 800be8c:	6143      	streq	r3, [r0, #20]
 800be8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be92:	f8dc c000 	ldr.w	ip, [ip]
 800be96:	fa0c fc08 	lsl.w	ip, ip, r8
 800be9a:	ea4c 0707 	orr.w	r7, ip, r7
 800be9e:	f849 7b04 	str.w	r7, [r9], #4
 800bea2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bea6:	40cf      	lsrs	r7, r1
 800bea8:	e7da      	b.n	800be60 <rshift+0x4c>
 800beaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800beae:	f847 cf04 	str.w	ip, [r7, #4]!
 800beb2:	e7c3      	b.n	800be3c <rshift+0x28>
 800beb4:	4623      	mov	r3, r4
 800beb6:	e7e1      	b.n	800be7c <rshift+0x68>

0800beb8 <__hexdig_fun>:
 800beb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bebc:	2b09      	cmp	r3, #9
 800bebe:	d802      	bhi.n	800bec6 <__hexdig_fun+0xe>
 800bec0:	3820      	subs	r0, #32
 800bec2:	b2c0      	uxtb	r0, r0
 800bec4:	4770      	bx	lr
 800bec6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800beca:	2b05      	cmp	r3, #5
 800becc:	d801      	bhi.n	800bed2 <__hexdig_fun+0x1a>
 800bece:	3847      	subs	r0, #71	@ 0x47
 800bed0:	e7f7      	b.n	800bec2 <__hexdig_fun+0xa>
 800bed2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bed6:	2b05      	cmp	r3, #5
 800bed8:	d801      	bhi.n	800bede <__hexdig_fun+0x26>
 800beda:	3827      	subs	r0, #39	@ 0x27
 800bedc:	e7f1      	b.n	800bec2 <__hexdig_fun+0xa>
 800bede:	2000      	movs	r0, #0
 800bee0:	4770      	bx	lr
	...

0800bee4 <__gethex>:
 800bee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee8:	b085      	sub	sp, #20
 800beea:	468a      	mov	sl, r1
 800beec:	9302      	str	r3, [sp, #8]
 800beee:	680b      	ldr	r3, [r1, #0]
 800bef0:	9001      	str	r0, [sp, #4]
 800bef2:	4690      	mov	r8, r2
 800bef4:	1c9c      	adds	r4, r3, #2
 800bef6:	46a1      	mov	r9, r4
 800bef8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800befc:	2830      	cmp	r0, #48	@ 0x30
 800befe:	d0fa      	beq.n	800bef6 <__gethex+0x12>
 800bf00:	eba9 0303 	sub.w	r3, r9, r3
 800bf04:	f1a3 0b02 	sub.w	fp, r3, #2
 800bf08:	f7ff ffd6 	bl	800beb8 <__hexdig_fun>
 800bf0c:	4605      	mov	r5, r0
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d168      	bne.n	800bfe4 <__gethex+0x100>
 800bf12:	49a0      	ldr	r1, [pc, #640]	@ (800c194 <__gethex+0x2b0>)
 800bf14:	2201      	movs	r2, #1
 800bf16:	4648      	mov	r0, r9
 800bf18:	f7ff ff0f 	bl	800bd3a <strncmp>
 800bf1c:	4607      	mov	r7, r0
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d167      	bne.n	800bff2 <__gethex+0x10e>
 800bf22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bf26:	4626      	mov	r6, r4
 800bf28:	f7ff ffc6 	bl	800beb8 <__hexdig_fun>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	d062      	beq.n	800bff6 <__gethex+0x112>
 800bf30:	4623      	mov	r3, r4
 800bf32:	7818      	ldrb	r0, [r3, #0]
 800bf34:	2830      	cmp	r0, #48	@ 0x30
 800bf36:	4699      	mov	r9, r3
 800bf38:	f103 0301 	add.w	r3, r3, #1
 800bf3c:	d0f9      	beq.n	800bf32 <__gethex+0x4e>
 800bf3e:	f7ff ffbb 	bl	800beb8 <__hexdig_fun>
 800bf42:	fab0 f580 	clz	r5, r0
 800bf46:	096d      	lsrs	r5, r5, #5
 800bf48:	f04f 0b01 	mov.w	fp, #1
 800bf4c:	464a      	mov	r2, r9
 800bf4e:	4616      	mov	r6, r2
 800bf50:	3201      	adds	r2, #1
 800bf52:	7830      	ldrb	r0, [r6, #0]
 800bf54:	f7ff ffb0 	bl	800beb8 <__hexdig_fun>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d1f8      	bne.n	800bf4e <__gethex+0x6a>
 800bf5c:	498d      	ldr	r1, [pc, #564]	@ (800c194 <__gethex+0x2b0>)
 800bf5e:	2201      	movs	r2, #1
 800bf60:	4630      	mov	r0, r6
 800bf62:	f7ff feea 	bl	800bd3a <strncmp>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d13f      	bne.n	800bfea <__gethex+0x106>
 800bf6a:	b944      	cbnz	r4, 800bf7e <__gethex+0x9a>
 800bf6c:	1c74      	adds	r4, r6, #1
 800bf6e:	4622      	mov	r2, r4
 800bf70:	4616      	mov	r6, r2
 800bf72:	3201      	adds	r2, #1
 800bf74:	7830      	ldrb	r0, [r6, #0]
 800bf76:	f7ff ff9f 	bl	800beb8 <__hexdig_fun>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d1f8      	bne.n	800bf70 <__gethex+0x8c>
 800bf7e:	1ba4      	subs	r4, r4, r6
 800bf80:	00a7      	lsls	r7, r4, #2
 800bf82:	7833      	ldrb	r3, [r6, #0]
 800bf84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bf88:	2b50      	cmp	r3, #80	@ 0x50
 800bf8a:	d13e      	bne.n	800c00a <__gethex+0x126>
 800bf8c:	7873      	ldrb	r3, [r6, #1]
 800bf8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800bf90:	d033      	beq.n	800bffa <__gethex+0x116>
 800bf92:	2b2d      	cmp	r3, #45	@ 0x2d
 800bf94:	d034      	beq.n	800c000 <__gethex+0x11c>
 800bf96:	1c71      	adds	r1, r6, #1
 800bf98:	2400      	movs	r4, #0
 800bf9a:	7808      	ldrb	r0, [r1, #0]
 800bf9c:	f7ff ff8c 	bl	800beb8 <__hexdig_fun>
 800bfa0:	1e43      	subs	r3, r0, #1
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b18      	cmp	r3, #24
 800bfa6:	d830      	bhi.n	800c00a <__gethex+0x126>
 800bfa8:	f1a0 0210 	sub.w	r2, r0, #16
 800bfac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bfb0:	f7ff ff82 	bl	800beb8 <__hexdig_fun>
 800bfb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800bfb8:	fa5f fc8c 	uxtb.w	ip, ip
 800bfbc:	f1bc 0f18 	cmp.w	ip, #24
 800bfc0:	f04f 030a 	mov.w	r3, #10
 800bfc4:	d91e      	bls.n	800c004 <__gethex+0x120>
 800bfc6:	b104      	cbz	r4, 800bfca <__gethex+0xe6>
 800bfc8:	4252      	negs	r2, r2
 800bfca:	4417      	add	r7, r2
 800bfcc:	f8ca 1000 	str.w	r1, [sl]
 800bfd0:	b1ed      	cbz	r5, 800c00e <__gethex+0x12a>
 800bfd2:	f1bb 0f00 	cmp.w	fp, #0
 800bfd6:	bf0c      	ite	eq
 800bfd8:	2506      	moveq	r5, #6
 800bfda:	2500      	movne	r5, #0
 800bfdc:	4628      	mov	r0, r5
 800bfde:	b005      	add	sp, #20
 800bfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe4:	2500      	movs	r5, #0
 800bfe6:	462c      	mov	r4, r5
 800bfe8:	e7b0      	b.n	800bf4c <__gethex+0x68>
 800bfea:	2c00      	cmp	r4, #0
 800bfec:	d1c7      	bne.n	800bf7e <__gethex+0x9a>
 800bfee:	4627      	mov	r7, r4
 800bff0:	e7c7      	b.n	800bf82 <__gethex+0x9e>
 800bff2:	464e      	mov	r6, r9
 800bff4:	462f      	mov	r7, r5
 800bff6:	2501      	movs	r5, #1
 800bff8:	e7c3      	b.n	800bf82 <__gethex+0x9e>
 800bffa:	2400      	movs	r4, #0
 800bffc:	1cb1      	adds	r1, r6, #2
 800bffe:	e7cc      	b.n	800bf9a <__gethex+0xb6>
 800c000:	2401      	movs	r4, #1
 800c002:	e7fb      	b.n	800bffc <__gethex+0x118>
 800c004:	fb03 0002 	mla	r0, r3, r2, r0
 800c008:	e7ce      	b.n	800bfa8 <__gethex+0xc4>
 800c00a:	4631      	mov	r1, r6
 800c00c:	e7de      	b.n	800bfcc <__gethex+0xe8>
 800c00e:	eba6 0309 	sub.w	r3, r6, r9
 800c012:	3b01      	subs	r3, #1
 800c014:	4629      	mov	r1, r5
 800c016:	2b07      	cmp	r3, #7
 800c018:	dc0a      	bgt.n	800c030 <__gethex+0x14c>
 800c01a:	9801      	ldr	r0, [sp, #4]
 800c01c:	f7fd fdac 	bl	8009b78 <_Balloc>
 800c020:	4604      	mov	r4, r0
 800c022:	b940      	cbnz	r0, 800c036 <__gethex+0x152>
 800c024:	4b5c      	ldr	r3, [pc, #368]	@ (800c198 <__gethex+0x2b4>)
 800c026:	4602      	mov	r2, r0
 800c028:	21e4      	movs	r1, #228	@ 0xe4
 800c02a:	485c      	ldr	r0, [pc, #368]	@ (800c19c <__gethex+0x2b8>)
 800c02c:	f7ff fec0 	bl	800bdb0 <__assert_func>
 800c030:	3101      	adds	r1, #1
 800c032:	105b      	asrs	r3, r3, #1
 800c034:	e7ef      	b.n	800c016 <__gethex+0x132>
 800c036:	f100 0a14 	add.w	sl, r0, #20
 800c03a:	2300      	movs	r3, #0
 800c03c:	4655      	mov	r5, sl
 800c03e:	469b      	mov	fp, r3
 800c040:	45b1      	cmp	r9, r6
 800c042:	d337      	bcc.n	800c0b4 <__gethex+0x1d0>
 800c044:	f845 bb04 	str.w	fp, [r5], #4
 800c048:	eba5 050a 	sub.w	r5, r5, sl
 800c04c:	10ad      	asrs	r5, r5, #2
 800c04e:	6125      	str	r5, [r4, #16]
 800c050:	4658      	mov	r0, fp
 800c052:	f7fd fe83 	bl	8009d5c <__hi0bits>
 800c056:	016d      	lsls	r5, r5, #5
 800c058:	f8d8 6000 	ldr.w	r6, [r8]
 800c05c:	1a2d      	subs	r5, r5, r0
 800c05e:	42b5      	cmp	r5, r6
 800c060:	dd54      	ble.n	800c10c <__gethex+0x228>
 800c062:	1bad      	subs	r5, r5, r6
 800c064:	4629      	mov	r1, r5
 800c066:	4620      	mov	r0, r4
 800c068:	f7fe fa17 	bl	800a49a <__any_on>
 800c06c:	4681      	mov	r9, r0
 800c06e:	b178      	cbz	r0, 800c090 <__gethex+0x1ac>
 800c070:	1e6b      	subs	r3, r5, #1
 800c072:	1159      	asrs	r1, r3, #5
 800c074:	f003 021f 	and.w	r2, r3, #31
 800c078:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c07c:	f04f 0901 	mov.w	r9, #1
 800c080:	fa09 f202 	lsl.w	r2, r9, r2
 800c084:	420a      	tst	r2, r1
 800c086:	d003      	beq.n	800c090 <__gethex+0x1ac>
 800c088:	454b      	cmp	r3, r9
 800c08a:	dc36      	bgt.n	800c0fa <__gethex+0x216>
 800c08c:	f04f 0902 	mov.w	r9, #2
 800c090:	4629      	mov	r1, r5
 800c092:	4620      	mov	r0, r4
 800c094:	f7ff febe 	bl	800be14 <rshift>
 800c098:	442f      	add	r7, r5
 800c09a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c09e:	42bb      	cmp	r3, r7
 800c0a0:	da42      	bge.n	800c128 <__gethex+0x244>
 800c0a2:	9801      	ldr	r0, [sp, #4]
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	f7fd fda7 	bl	8009bf8 <_Bfree>
 800c0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	25a3      	movs	r5, #163	@ 0xa3
 800c0b2:	e793      	b.n	800bfdc <__gethex+0xf8>
 800c0b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c0b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c0ba:	d012      	beq.n	800c0e2 <__gethex+0x1fe>
 800c0bc:	2b20      	cmp	r3, #32
 800c0be:	d104      	bne.n	800c0ca <__gethex+0x1e6>
 800c0c0:	f845 bb04 	str.w	fp, [r5], #4
 800c0c4:	f04f 0b00 	mov.w	fp, #0
 800c0c8:	465b      	mov	r3, fp
 800c0ca:	7830      	ldrb	r0, [r6, #0]
 800c0cc:	9303      	str	r3, [sp, #12]
 800c0ce:	f7ff fef3 	bl	800beb8 <__hexdig_fun>
 800c0d2:	9b03      	ldr	r3, [sp, #12]
 800c0d4:	f000 000f 	and.w	r0, r0, #15
 800c0d8:	4098      	lsls	r0, r3
 800c0da:	ea4b 0b00 	orr.w	fp, fp, r0
 800c0de:	3304      	adds	r3, #4
 800c0e0:	e7ae      	b.n	800c040 <__gethex+0x15c>
 800c0e2:	45b1      	cmp	r9, r6
 800c0e4:	d8ea      	bhi.n	800c0bc <__gethex+0x1d8>
 800c0e6:	492b      	ldr	r1, [pc, #172]	@ (800c194 <__gethex+0x2b0>)
 800c0e8:	9303      	str	r3, [sp, #12]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f7ff fe24 	bl	800bd3a <strncmp>
 800c0f2:	9b03      	ldr	r3, [sp, #12]
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d1e1      	bne.n	800c0bc <__gethex+0x1d8>
 800c0f8:	e7a2      	b.n	800c040 <__gethex+0x15c>
 800c0fa:	1ea9      	subs	r1, r5, #2
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f7fe f9cc 	bl	800a49a <__any_on>
 800c102:	2800      	cmp	r0, #0
 800c104:	d0c2      	beq.n	800c08c <__gethex+0x1a8>
 800c106:	f04f 0903 	mov.w	r9, #3
 800c10a:	e7c1      	b.n	800c090 <__gethex+0x1ac>
 800c10c:	da09      	bge.n	800c122 <__gethex+0x23e>
 800c10e:	1b75      	subs	r5, r6, r5
 800c110:	4621      	mov	r1, r4
 800c112:	9801      	ldr	r0, [sp, #4]
 800c114:	462a      	mov	r2, r5
 800c116:	f7fd ff87 	bl	800a028 <__lshift>
 800c11a:	1b7f      	subs	r7, r7, r5
 800c11c:	4604      	mov	r4, r0
 800c11e:	f100 0a14 	add.w	sl, r0, #20
 800c122:	f04f 0900 	mov.w	r9, #0
 800c126:	e7b8      	b.n	800c09a <__gethex+0x1b6>
 800c128:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c12c:	42bd      	cmp	r5, r7
 800c12e:	dd6f      	ble.n	800c210 <__gethex+0x32c>
 800c130:	1bed      	subs	r5, r5, r7
 800c132:	42ae      	cmp	r6, r5
 800c134:	dc34      	bgt.n	800c1a0 <__gethex+0x2bc>
 800c136:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d022      	beq.n	800c184 <__gethex+0x2a0>
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d024      	beq.n	800c18c <__gethex+0x2a8>
 800c142:	2b01      	cmp	r3, #1
 800c144:	d115      	bne.n	800c172 <__gethex+0x28e>
 800c146:	42ae      	cmp	r6, r5
 800c148:	d113      	bne.n	800c172 <__gethex+0x28e>
 800c14a:	2e01      	cmp	r6, #1
 800c14c:	d10b      	bne.n	800c166 <__gethex+0x282>
 800c14e:	9a02      	ldr	r2, [sp, #8]
 800c150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	2301      	movs	r3, #1
 800c158:	6123      	str	r3, [r4, #16]
 800c15a:	f8ca 3000 	str.w	r3, [sl]
 800c15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c160:	2562      	movs	r5, #98	@ 0x62
 800c162:	601c      	str	r4, [r3, #0]
 800c164:	e73a      	b.n	800bfdc <__gethex+0xf8>
 800c166:	1e71      	subs	r1, r6, #1
 800c168:	4620      	mov	r0, r4
 800c16a:	f7fe f996 	bl	800a49a <__any_on>
 800c16e:	2800      	cmp	r0, #0
 800c170:	d1ed      	bne.n	800c14e <__gethex+0x26a>
 800c172:	9801      	ldr	r0, [sp, #4]
 800c174:	4621      	mov	r1, r4
 800c176:	f7fd fd3f 	bl	8009bf8 <_Bfree>
 800c17a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c17c:	2300      	movs	r3, #0
 800c17e:	6013      	str	r3, [r2, #0]
 800c180:	2550      	movs	r5, #80	@ 0x50
 800c182:	e72b      	b.n	800bfdc <__gethex+0xf8>
 800c184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1f3      	bne.n	800c172 <__gethex+0x28e>
 800c18a:	e7e0      	b.n	800c14e <__gethex+0x26a>
 800c18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1dd      	bne.n	800c14e <__gethex+0x26a>
 800c192:	e7ee      	b.n	800c172 <__gethex+0x28e>
 800c194:	0800ce58 	.word	0x0800ce58
 800c198:	0800ccef 	.word	0x0800ccef
 800c19c:	0800d021 	.word	0x0800d021
 800c1a0:	1e6f      	subs	r7, r5, #1
 800c1a2:	f1b9 0f00 	cmp.w	r9, #0
 800c1a6:	d130      	bne.n	800c20a <__gethex+0x326>
 800c1a8:	b127      	cbz	r7, 800c1b4 <__gethex+0x2d0>
 800c1aa:	4639      	mov	r1, r7
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f7fe f974 	bl	800a49a <__any_on>
 800c1b2:	4681      	mov	r9, r0
 800c1b4:	117a      	asrs	r2, r7, #5
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c1bc:	f007 071f 	and.w	r7, r7, #31
 800c1c0:	40bb      	lsls	r3, r7
 800c1c2:	4213      	tst	r3, r2
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	bf18      	it	ne
 800c1ca:	f049 0902 	orrne.w	r9, r9, #2
 800c1ce:	f7ff fe21 	bl	800be14 <rshift>
 800c1d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c1d6:	1b76      	subs	r6, r6, r5
 800c1d8:	2502      	movs	r5, #2
 800c1da:	f1b9 0f00 	cmp.w	r9, #0
 800c1de:	d047      	beq.n	800c270 <__gethex+0x38c>
 800c1e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d015      	beq.n	800c214 <__gethex+0x330>
 800c1e8:	2b03      	cmp	r3, #3
 800c1ea:	d017      	beq.n	800c21c <__gethex+0x338>
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d109      	bne.n	800c204 <__gethex+0x320>
 800c1f0:	f019 0f02 	tst.w	r9, #2
 800c1f4:	d006      	beq.n	800c204 <__gethex+0x320>
 800c1f6:	f8da 3000 	ldr.w	r3, [sl]
 800c1fa:	ea49 0903 	orr.w	r9, r9, r3
 800c1fe:	f019 0f01 	tst.w	r9, #1
 800c202:	d10e      	bne.n	800c222 <__gethex+0x33e>
 800c204:	f045 0510 	orr.w	r5, r5, #16
 800c208:	e032      	b.n	800c270 <__gethex+0x38c>
 800c20a:	f04f 0901 	mov.w	r9, #1
 800c20e:	e7d1      	b.n	800c1b4 <__gethex+0x2d0>
 800c210:	2501      	movs	r5, #1
 800c212:	e7e2      	b.n	800c1da <__gethex+0x2f6>
 800c214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c216:	f1c3 0301 	rsb	r3, r3, #1
 800c21a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0f0      	beq.n	800c204 <__gethex+0x320>
 800c222:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c226:	f104 0314 	add.w	r3, r4, #20
 800c22a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c22e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c232:	f04f 0c00 	mov.w	ip, #0
 800c236:	4618      	mov	r0, r3
 800c238:	f853 2b04 	ldr.w	r2, [r3], #4
 800c23c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c240:	d01b      	beq.n	800c27a <__gethex+0x396>
 800c242:	3201      	adds	r2, #1
 800c244:	6002      	str	r2, [r0, #0]
 800c246:	2d02      	cmp	r5, #2
 800c248:	f104 0314 	add.w	r3, r4, #20
 800c24c:	d13c      	bne.n	800c2c8 <__gethex+0x3e4>
 800c24e:	f8d8 2000 	ldr.w	r2, [r8]
 800c252:	3a01      	subs	r2, #1
 800c254:	42b2      	cmp	r2, r6
 800c256:	d109      	bne.n	800c26c <__gethex+0x388>
 800c258:	1171      	asrs	r1, r6, #5
 800c25a:	2201      	movs	r2, #1
 800c25c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c260:	f006 061f 	and.w	r6, r6, #31
 800c264:	fa02 f606 	lsl.w	r6, r2, r6
 800c268:	421e      	tst	r6, r3
 800c26a:	d13a      	bne.n	800c2e2 <__gethex+0x3fe>
 800c26c:	f045 0520 	orr.w	r5, r5, #32
 800c270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c272:	601c      	str	r4, [r3, #0]
 800c274:	9b02      	ldr	r3, [sp, #8]
 800c276:	601f      	str	r7, [r3, #0]
 800c278:	e6b0      	b.n	800bfdc <__gethex+0xf8>
 800c27a:	4299      	cmp	r1, r3
 800c27c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c280:	d8d9      	bhi.n	800c236 <__gethex+0x352>
 800c282:	68a3      	ldr	r3, [r4, #8]
 800c284:	459b      	cmp	fp, r3
 800c286:	db17      	blt.n	800c2b8 <__gethex+0x3d4>
 800c288:	6861      	ldr	r1, [r4, #4]
 800c28a:	9801      	ldr	r0, [sp, #4]
 800c28c:	3101      	adds	r1, #1
 800c28e:	f7fd fc73 	bl	8009b78 <_Balloc>
 800c292:	4681      	mov	r9, r0
 800c294:	b918      	cbnz	r0, 800c29e <__gethex+0x3ba>
 800c296:	4b1a      	ldr	r3, [pc, #104]	@ (800c300 <__gethex+0x41c>)
 800c298:	4602      	mov	r2, r0
 800c29a:	2184      	movs	r1, #132	@ 0x84
 800c29c:	e6c5      	b.n	800c02a <__gethex+0x146>
 800c29e:	6922      	ldr	r2, [r4, #16]
 800c2a0:	3202      	adds	r2, #2
 800c2a2:	f104 010c 	add.w	r1, r4, #12
 800c2a6:	0092      	lsls	r2, r2, #2
 800c2a8:	300c      	adds	r0, #12
 800c2aa:	f7ff fd69 	bl	800bd80 <memcpy>
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	9801      	ldr	r0, [sp, #4]
 800c2b2:	f7fd fca1 	bl	8009bf8 <_Bfree>
 800c2b6:	464c      	mov	r4, r9
 800c2b8:	6923      	ldr	r3, [r4, #16]
 800c2ba:	1c5a      	adds	r2, r3, #1
 800c2bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2c0:	6122      	str	r2, [r4, #16]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	615a      	str	r2, [r3, #20]
 800c2c6:	e7be      	b.n	800c246 <__gethex+0x362>
 800c2c8:	6922      	ldr	r2, [r4, #16]
 800c2ca:	455a      	cmp	r2, fp
 800c2cc:	dd0b      	ble.n	800c2e6 <__gethex+0x402>
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f7ff fd9f 	bl	800be14 <rshift>
 800c2d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2da:	3701      	adds	r7, #1
 800c2dc:	42bb      	cmp	r3, r7
 800c2de:	f6ff aee0 	blt.w	800c0a2 <__gethex+0x1be>
 800c2e2:	2501      	movs	r5, #1
 800c2e4:	e7c2      	b.n	800c26c <__gethex+0x388>
 800c2e6:	f016 061f 	ands.w	r6, r6, #31
 800c2ea:	d0fa      	beq.n	800c2e2 <__gethex+0x3fe>
 800c2ec:	4453      	add	r3, sl
 800c2ee:	f1c6 0620 	rsb	r6, r6, #32
 800c2f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c2f6:	f7fd fd31 	bl	8009d5c <__hi0bits>
 800c2fa:	42b0      	cmp	r0, r6
 800c2fc:	dbe7      	blt.n	800c2ce <__gethex+0x3ea>
 800c2fe:	e7f0      	b.n	800c2e2 <__gethex+0x3fe>
 800c300:	0800ccef 	.word	0x0800ccef

0800c304 <L_shift>:
 800c304:	f1c2 0208 	rsb	r2, r2, #8
 800c308:	0092      	lsls	r2, r2, #2
 800c30a:	b570      	push	{r4, r5, r6, lr}
 800c30c:	f1c2 0620 	rsb	r6, r2, #32
 800c310:	6843      	ldr	r3, [r0, #4]
 800c312:	6804      	ldr	r4, [r0, #0]
 800c314:	fa03 f506 	lsl.w	r5, r3, r6
 800c318:	432c      	orrs	r4, r5
 800c31a:	40d3      	lsrs	r3, r2
 800c31c:	6004      	str	r4, [r0, #0]
 800c31e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c322:	4288      	cmp	r0, r1
 800c324:	d3f4      	bcc.n	800c310 <L_shift+0xc>
 800c326:	bd70      	pop	{r4, r5, r6, pc}

0800c328 <__match>:
 800c328:	b530      	push	{r4, r5, lr}
 800c32a:	6803      	ldr	r3, [r0, #0]
 800c32c:	3301      	adds	r3, #1
 800c32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c332:	b914      	cbnz	r4, 800c33a <__match+0x12>
 800c334:	6003      	str	r3, [r0, #0]
 800c336:	2001      	movs	r0, #1
 800c338:	bd30      	pop	{r4, r5, pc}
 800c33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c33e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c342:	2d19      	cmp	r5, #25
 800c344:	bf98      	it	ls
 800c346:	3220      	addls	r2, #32
 800c348:	42a2      	cmp	r2, r4
 800c34a:	d0f0      	beq.n	800c32e <__match+0x6>
 800c34c:	2000      	movs	r0, #0
 800c34e:	e7f3      	b.n	800c338 <__match+0x10>

0800c350 <__hexnan>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	680b      	ldr	r3, [r1, #0]
 800c356:	6801      	ldr	r1, [r0, #0]
 800c358:	115e      	asrs	r6, r3, #5
 800c35a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c35e:	f013 031f 	ands.w	r3, r3, #31
 800c362:	b087      	sub	sp, #28
 800c364:	bf18      	it	ne
 800c366:	3604      	addne	r6, #4
 800c368:	2500      	movs	r5, #0
 800c36a:	1f37      	subs	r7, r6, #4
 800c36c:	4682      	mov	sl, r0
 800c36e:	4690      	mov	r8, r2
 800c370:	9301      	str	r3, [sp, #4]
 800c372:	f846 5c04 	str.w	r5, [r6, #-4]
 800c376:	46b9      	mov	r9, r7
 800c378:	463c      	mov	r4, r7
 800c37a:	9502      	str	r5, [sp, #8]
 800c37c:	46ab      	mov	fp, r5
 800c37e:	784a      	ldrb	r2, [r1, #1]
 800c380:	1c4b      	adds	r3, r1, #1
 800c382:	9303      	str	r3, [sp, #12]
 800c384:	b342      	cbz	r2, 800c3d8 <__hexnan+0x88>
 800c386:	4610      	mov	r0, r2
 800c388:	9105      	str	r1, [sp, #20]
 800c38a:	9204      	str	r2, [sp, #16]
 800c38c:	f7ff fd94 	bl	800beb8 <__hexdig_fun>
 800c390:	2800      	cmp	r0, #0
 800c392:	d151      	bne.n	800c438 <__hexnan+0xe8>
 800c394:	9a04      	ldr	r2, [sp, #16]
 800c396:	9905      	ldr	r1, [sp, #20]
 800c398:	2a20      	cmp	r2, #32
 800c39a:	d818      	bhi.n	800c3ce <__hexnan+0x7e>
 800c39c:	9b02      	ldr	r3, [sp, #8]
 800c39e:	459b      	cmp	fp, r3
 800c3a0:	dd13      	ble.n	800c3ca <__hexnan+0x7a>
 800c3a2:	454c      	cmp	r4, r9
 800c3a4:	d206      	bcs.n	800c3b4 <__hexnan+0x64>
 800c3a6:	2d07      	cmp	r5, #7
 800c3a8:	dc04      	bgt.n	800c3b4 <__hexnan+0x64>
 800c3aa:	462a      	mov	r2, r5
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7ff ffa8 	bl	800c304 <L_shift>
 800c3b4:	4544      	cmp	r4, r8
 800c3b6:	d952      	bls.n	800c45e <__hexnan+0x10e>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f1a4 0904 	sub.w	r9, r4, #4
 800c3be:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3c2:	f8cd b008 	str.w	fp, [sp, #8]
 800c3c6:	464c      	mov	r4, r9
 800c3c8:	461d      	mov	r5, r3
 800c3ca:	9903      	ldr	r1, [sp, #12]
 800c3cc:	e7d7      	b.n	800c37e <__hexnan+0x2e>
 800c3ce:	2a29      	cmp	r2, #41	@ 0x29
 800c3d0:	d157      	bne.n	800c482 <__hexnan+0x132>
 800c3d2:	3102      	adds	r1, #2
 800c3d4:	f8ca 1000 	str.w	r1, [sl]
 800c3d8:	f1bb 0f00 	cmp.w	fp, #0
 800c3dc:	d051      	beq.n	800c482 <__hexnan+0x132>
 800c3de:	454c      	cmp	r4, r9
 800c3e0:	d206      	bcs.n	800c3f0 <__hexnan+0xa0>
 800c3e2:	2d07      	cmp	r5, #7
 800c3e4:	dc04      	bgt.n	800c3f0 <__hexnan+0xa0>
 800c3e6:	462a      	mov	r2, r5
 800c3e8:	4649      	mov	r1, r9
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7ff ff8a 	bl	800c304 <L_shift>
 800c3f0:	4544      	cmp	r4, r8
 800c3f2:	d936      	bls.n	800c462 <__hexnan+0x112>
 800c3f4:	f1a8 0204 	sub.w	r2, r8, #4
 800c3f8:	4623      	mov	r3, r4
 800c3fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800c3fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800c402:	429f      	cmp	r7, r3
 800c404:	d2f9      	bcs.n	800c3fa <__hexnan+0xaa>
 800c406:	1b3b      	subs	r3, r7, r4
 800c408:	f023 0303 	bic.w	r3, r3, #3
 800c40c:	3304      	adds	r3, #4
 800c40e:	3401      	adds	r4, #1
 800c410:	3e03      	subs	r6, #3
 800c412:	42b4      	cmp	r4, r6
 800c414:	bf88      	it	hi
 800c416:	2304      	movhi	r3, #4
 800c418:	4443      	add	r3, r8
 800c41a:	2200      	movs	r2, #0
 800c41c:	f843 2b04 	str.w	r2, [r3], #4
 800c420:	429f      	cmp	r7, r3
 800c422:	d2fb      	bcs.n	800c41c <__hexnan+0xcc>
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	b91b      	cbnz	r3, 800c430 <__hexnan+0xe0>
 800c428:	4547      	cmp	r7, r8
 800c42a:	d128      	bne.n	800c47e <__hexnan+0x12e>
 800c42c:	2301      	movs	r3, #1
 800c42e:	603b      	str	r3, [r7, #0]
 800c430:	2005      	movs	r0, #5
 800c432:	b007      	add	sp, #28
 800c434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c438:	3501      	adds	r5, #1
 800c43a:	2d08      	cmp	r5, #8
 800c43c:	f10b 0b01 	add.w	fp, fp, #1
 800c440:	dd06      	ble.n	800c450 <__hexnan+0x100>
 800c442:	4544      	cmp	r4, r8
 800c444:	d9c1      	bls.n	800c3ca <__hexnan+0x7a>
 800c446:	2300      	movs	r3, #0
 800c448:	f844 3c04 	str.w	r3, [r4, #-4]
 800c44c:	2501      	movs	r5, #1
 800c44e:	3c04      	subs	r4, #4
 800c450:	6822      	ldr	r2, [r4, #0]
 800c452:	f000 000f 	and.w	r0, r0, #15
 800c456:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c45a:	6020      	str	r0, [r4, #0]
 800c45c:	e7b5      	b.n	800c3ca <__hexnan+0x7a>
 800c45e:	2508      	movs	r5, #8
 800c460:	e7b3      	b.n	800c3ca <__hexnan+0x7a>
 800c462:	9b01      	ldr	r3, [sp, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0dd      	beq.n	800c424 <__hexnan+0xd4>
 800c468:	f1c3 0320 	rsb	r3, r3, #32
 800c46c:	f04f 32ff 	mov.w	r2, #4294967295
 800c470:	40da      	lsrs	r2, r3
 800c472:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c476:	4013      	ands	r3, r2
 800c478:	f846 3c04 	str.w	r3, [r6, #-4]
 800c47c:	e7d2      	b.n	800c424 <__hexnan+0xd4>
 800c47e:	3f04      	subs	r7, #4
 800c480:	e7d0      	b.n	800c424 <__hexnan+0xd4>
 800c482:	2004      	movs	r0, #4
 800c484:	e7d5      	b.n	800c432 <__hexnan+0xe2>

0800c486 <__ascii_mbtowc>:
 800c486:	b082      	sub	sp, #8
 800c488:	b901      	cbnz	r1, 800c48c <__ascii_mbtowc+0x6>
 800c48a:	a901      	add	r1, sp, #4
 800c48c:	b142      	cbz	r2, 800c4a0 <__ascii_mbtowc+0x1a>
 800c48e:	b14b      	cbz	r3, 800c4a4 <__ascii_mbtowc+0x1e>
 800c490:	7813      	ldrb	r3, [r2, #0]
 800c492:	600b      	str	r3, [r1, #0]
 800c494:	7812      	ldrb	r2, [r2, #0]
 800c496:	1e10      	subs	r0, r2, #0
 800c498:	bf18      	it	ne
 800c49a:	2001      	movne	r0, #1
 800c49c:	b002      	add	sp, #8
 800c49e:	4770      	bx	lr
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	e7fb      	b.n	800c49c <__ascii_mbtowc+0x16>
 800c4a4:	f06f 0001 	mvn.w	r0, #1
 800c4a8:	e7f8      	b.n	800c49c <__ascii_mbtowc+0x16>

0800c4aa <_realloc_r>:
 800c4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ae:	4680      	mov	r8, r0
 800c4b0:	4615      	mov	r5, r2
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	b921      	cbnz	r1, 800c4c0 <_realloc_r+0x16>
 800c4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	f7fd bad0 	b.w	8009a60 <_malloc_r>
 800c4c0:	b92a      	cbnz	r2, 800c4ce <_realloc_r+0x24>
 800c4c2:	f7fd fa59 	bl	8009978 <_free_r>
 800c4c6:	2400      	movs	r4, #0
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ce:	f000 f8b2 	bl	800c636 <_malloc_usable_size_r>
 800c4d2:	4285      	cmp	r5, r0
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	d802      	bhi.n	800c4de <_realloc_r+0x34>
 800c4d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c4dc:	d8f4      	bhi.n	800c4c8 <_realloc_r+0x1e>
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4640      	mov	r0, r8
 800c4e2:	f7fd fabd 	bl	8009a60 <_malloc_r>
 800c4e6:	4607      	mov	r7, r0
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d0ec      	beq.n	800c4c6 <_realloc_r+0x1c>
 800c4ec:	42b5      	cmp	r5, r6
 800c4ee:	462a      	mov	r2, r5
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	bf28      	it	cs
 800c4f4:	4632      	movcs	r2, r6
 800c4f6:	f7ff fc43 	bl	800bd80 <memcpy>
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	4640      	mov	r0, r8
 800c4fe:	f7fd fa3b 	bl	8009978 <_free_r>
 800c502:	463c      	mov	r4, r7
 800c504:	e7e0      	b.n	800c4c8 <_realloc_r+0x1e>
	...

0800c508 <_strtoul_l.constprop.0>:
 800c508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c50c:	4e34      	ldr	r6, [pc, #208]	@ (800c5e0 <_strtoul_l.constprop.0+0xd8>)
 800c50e:	4686      	mov	lr, r0
 800c510:	460d      	mov	r5, r1
 800c512:	4628      	mov	r0, r5
 800c514:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c518:	5d37      	ldrb	r7, [r6, r4]
 800c51a:	f017 0708 	ands.w	r7, r7, #8
 800c51e:	d1f8      	bne.n	800c512 <_strtoul_l.constprop.0+0xa>
 800c520:	2c2d      	cmp	r4, #45	@ 0x2d
 800c522:	d12f      	bne.n	800c584 <_strtoul_l.constprop.0+0x7c>
 800c524:	782c      	ldrb	r4, [r5, #0]
 800c526:	2701      	movs	r7, #1
 800c528:	1c85      	adds	r5, r0, #2
 800c52a:	f033 0010 	bics.w	r0, r3, #16
 800c52e:	d109      	bne.n	800c544 <_strtoul_l.constprop.0+0x3c>
 800c530:	2c30      	cmp	r4, #48	@ 0x30
 800c532:	d12c      	bne.n	800c58e <_strtoul_l.constprop.0+0x86>
 800c534:	7828      	ldrb	r0, [r5, #0]
 800c536:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c53a:	2858      	cmp	r0, #88	@ 0x58
 800c53c:	d127      	bne.n	800c58e <_strtoul_l.constprop.0+0x86>
 800c53e:	786c      	ldrb	r4, [r5, #1]
 800c540:	2310      	movs	r3, #16
 800c542:	3502      	adds	r5, #2
 800c544:	f04f 38ff 	mov.w	r8, #4294967295
 800c548:	2600      	movs	r6, #0
 800c54a:	fbb8 f8f3 	udiv	r8, r8, r3
 800c54e:	fb03 f908 	mul.w	r9, r3, r8
 800c552:	ea6f 0909 	mvn.w	r9, r9
 800c556:	4630      	mov	r0, r6
 800c558:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c55c:	f1bc 0f09 	cmp.w	ip, #9
 800c560:	d81c      	bhi.n	800c59c <_strtoul_l.constprop.0+0x94>
 800c562:	4664      	mov	r4, ip
 800c564:	42a3      	cmp	r3, r4
 800c566:	dd2a      	ble.n	800c5be <_strtoul_l.constprop.0+0xb6>
 800c568:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c56c:	d007      	beq.n	800c57e <_strtoul_l.constprop.0+0x76>
 800c56e:	4580      	cmp	r8, r0
 800c570:	d322      	bcc.n	800c5b8 <_strtoul_l.constprop.0+0xb0>
 800c572:	d101      	bne.n	800c578 <_strtoul_l.constprop.0+0x70>
 800c574:	45a1      	cmp	r9, r4
 800c576:	db1f      	blt.n	800c5b8 <_strtoul_l.constprop.0+0xb0>
 800c578:	fb00 4003 	mla	r0, r0, r3, r4
 800c57c:	2601      	movs	r6, #1
 800c57e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c582:	e7e9      	b.n	800c558 <_strtoul_l.constprop.0+0x50>
 800c584:	2c2b      	cmp	r4, #43	@ 0x2b
 800c586:	bf04      	itt	eq
 800c588:	782c      	ldrbeq	r4, [r5, #0]
 800c58a:	1c85      	addeq	r5, r0, #2
 800c58c:	e7cd      	b.n	800c52a <_strtoul_l.constprop.0+0x22>
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1d8      	bne.n	800c544 <_strtoul_l.constprop.0+0x3c>
 800c592:	2c30      	cmp	r4, #48	@ 0x30
 800c594:	bf0c      	ite	eq
 800c596:	2308      	moveq	r3, #8
 800c598:	230a      	movne	r3, #10
 800c59a:	e7d3      	b.n	800c544 <_strtoul_l.constprop.0+0x3c>
 800c59c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c5a0:	f1bc 0f19 	cmp.w	ip, #25
 800c5a4:	d801      	bhi.n	800c5aa <_strtoul_l.constprop.0+0xa2>
 800c5a6:	3c37      	subs	r4, #55	@ 0x37
 800c5a8:	e7dc      	b.n	800c564 <_strtoul_l.constprop.0+0x5c>
 800c5aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c5ae:	f1bc 0f19 	cmp.w	ip, #25
 800c5b2:	d804      	bhi.n	800c5be <_strtoul_l.constprop.0+0xb6>
 800c5b4:	3c57      	subs	r4, #87	@ 0x57
 800c5b6:	e7d5      	b.n	800c564 <_strtoul_l.constprop.0+0x5c>
 800c5b8:	f04f 36ff 	mov.w	r6, #4294967295
 800c5bc:	e7df      	b.n	800c57e <_strtoul_l.constprop.0+0x76>
 800c5be:	1c73      	adds	r3, r6, #1
 800c5c0:	d106      	bne.n	800c5d0 <_strtoul_l.constprop.0+0xc8>
 800c5c2:	2322      	movs	r3, #34	@ 0x22
 800c5c4:	f8ce 3000 	str.w	r3, [lr]
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	b932      	cbnz	r2, 800c5da <_strtoul_l.constprop.0+0xd2>
 800c5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5d0:	b107      	cbz	r7, 800c5d4 <_strtoul_l.constprop.0+0xcc>
 800c5d2:	4240      	negs	r0, r0
 800c5d4:	2a00      	cmp	r2, #0
 800c5d6:	d0f9      	beq.n	800c5cc <_strtoul_l.constprop.0+0xc4>
 800c5d8:	b106      	cbz	r6, 800c5dc <_strtoul_l.constprop.0+0xd4>
 800c5da:	1e69      	subs	r1, r5, #1
 800c5dc:	6011      	str	r1, [r2, #0]
 800c5de:	e7f5      	b.n	800c5cc <_strtoul_l.constprop.0+0xc4>
 800c5e0:	0800ceb1 	.word	0x0800ceb1

0800c5e4 <_strtoul_r>:
 800c5e4:	f7ff bf90 	b.w	800c508 <_strtoul_l.constprop.0>

0800c5e8 <__ascii_wctomb>:
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	b141      	cbz	r1, 800c600 <__ascii_wctomb+0x18>
 800c5ee:	2aff      	cmp	r2, #255	@ 0xff
 800c5f0:	d904      	bls.n	800c5fc <__ascii_wctomb+0x14>
 800c5f2:	228a      	movs	r2, #138	@ 0x8a
 800c5f4:	601a      	str	r2, [r3, #0]
 800c5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fa:	4770      	bx	lr
 800c5fc:	700a      	strb	r2, [r1, #0]
 800c5fe:	2001      	movs	r0, #1
 800c600:	4770      	bx	lr
	...

0800c604 <fiprintf>:
 800c604:	b40e      	push	{r1, r2, r3}
 800c606:	b503      	push	{r0, r1, lr}
 800c608:	4601      	mov	r1, r0
 800c60a:	ab03      	add	r3, sp, #12
 800c60c:	4805      	ldr	r0, [pc, #20]	@ (800c624 <fiprintf+0x20>)
 800c60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c612:	6800      	ldr	r0, [r0, #0]
 800c614:	9301      	str	r3, [sp, #4]
 800c616:	f000 f83f 	bl	800c698 <_vfiprintf_r>
 800c61a:	b002      	add	sp, #8
 800c61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c620:	b003      	add	sp, #12
 800c622:	4770      	bx	lr
 800c624:	200000fc 	.word	0x200000fc

0800c628 <abort>:
 800c628:	b508      	push	{r3, lr}
 800c62a:	2006      	movs	r0, #6
 800c62c:	f000 fa08 	bl	800ca40 <raise>
 800c630:	2001      	movs	r0, #1
 800c632:	f7f6 fcf9 	bl	8003028 <_exit>

0800c636 <_malloc_usable_size_r>:
 800c636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63a:	1f18      	subs	r0, r3, #4
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bfbc      	itt	lt
 800c640:	580b      	ldrlt	r3, [r1, r0]
 800c642:	18c0      	addlt	r0, r0, r3
 800c644:	4770      	bx	lr

0800c646 <__sfputc_r>:
 800c646:	6893      	ldr	r3, [r2, #8]
 800c648:	3b01      	subs	r3, #1
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	b410      	push	{r4}
 800c64e:	6093      	str	r3, [r2, #8]
 800c650:	da08      	bge.n	800c664 <__sfputc_r+0x1e>
 800c652:	6994      	ldr	r4, [r2, #24]
 800c654:	42a3      	cmp	r3, r4
 800c656:	db01      	blt.n	800c65c <__sfputc_r+0x16>
 800c658:	290a      	cmp	r1, #10
 800c65a:	d103      	bne.n	800c664 <__sfputc_r+0x1e>
 800c65c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c660:	f000 b932 	b.w	800c8c8 <__swbuf_r>
 800c664:	6813      	ldr	r3, [r2, #0]
 800c666:	1c58      	adds	r0, r3, #1
 800c668:	6010      	str	r0, [r2, #0]
 800c66a:	7019      	strb	r1, [r3, #0]
 800c66c:	4608      	mov	r0, r1
 800c66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <__sfputs_r>:
 800c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c676:	4606      	mov	r6, r0
 800c678:	460f      	mov	r7, r1
 800c67a:	4614      	mov	r4, r2
 800c67c:	18d5      	adds	r5, r2, r3
 800c67e:	42ac      	cmp	r4, r5
 800c680:	d101      	bne.n	800c686 <__sfputs_r+0x12>
 800c682:	2000      	movs	r0, #0
 800c684:	e007      	b.n	800c696 <__sfputs_r+0x22>
 800c686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c68a:	463a      	mov	r2, r7
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7ff ffda 	bl	800c646 <__sfputc_r>
 800c692:	1c43      	adds	r3, r0, #1
 800c694:	d1f3      	bne.n	800c67e <__sfputs_r+0xa>
 800c696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c698 <_vfiprintf_r>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	460d      	mov	r5, r1
 800c69e:	b09d      	sub	sp, #116	@ 0x74
 800c6a0:	4614      	mov	r4, r2
 800c6a2:	4698      	mov	r8, r3
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	b118      	cbz	r0, 800c6b0 <_vfiprintf_r+0x18>
 800c6a8:	6a03      	ldr	r3, [r0, #32]
 800c6aa:	b90b      	cbnz	r3, 800c6b0 <_vfiprintf_r+0x18>
 800c6ac:	f7fc f9a8 	bl	8008a00 <__sinit>
 800c6b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6b2:	07d9      	lsls	r1, r3, #31
 800c6b4:	d405      	bmi.n	800c6c2 <_vfiprintf_r+0x2a>
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	059a      	lsls	r2, r3, #22
 800c6ba:	d402      	bmi.n	800c6c2 <_vfiprintf_r+0x2a>
 800c6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6be:	f7fc fb04 	bl	8008cca <__retarget_lock_acquire_recursive>
 800c6c2:	89ab      	ldrh	r3, [r5, #12]
 800c6c4:	071b      	lsls	r3, r3, #28
 800c6c6:	d501      	bpl.n	800c6cc <_vfiprintf_r+0x34>
 800c6c8:	692b      	ldr	r3, [r5, #16]
 800c6ca:	b99b      	cbnz	r3, 800c6f4 <_vfiprintf_r+0x5c>
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f000 f938 	bl	800c944 <__swsetup_r>
 800c6d4:	b170      	cbz	r0, 800c6f4 <_vfiprintf_r+0x5c>
 800c6d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6d8:	07dc      	lsls	r4, r3, #31
 800c6da:	d504      	bpl.n	800c6e6 <_vfiprintf_r+0x4e>
 800c6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e0:	b01d      	add	sp, #116	@ 0x74
 800c6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e6:	89ab      	ldrh	r3, [r5, #12]
 800c6e8:	0598      	lsls	r0, r3, #22
 800c6ea:	d4f7      	bmi.n	800c6dc <_vfiprintf_r+0x44>
 800c6ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6ee:	f7fc faed 	bl	8008ccc <__retarget_lock_release_recursive>
 800c6f2:	e7f3      	b.n	800c6dc <_vfiprintf_r+0x44>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f8:	2320      	movs	r3, #32
 800c6fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800c702:	2330      	movs	r3, #48	@ 0x30
 800c704:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c8b4 <_vfiprintf_r+0x21c>
 800c708:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c70c:	f04f 0901 	mov.w	r9, #1
 800c710:	4623      	mov	r3, r4
 800c712:	469a      	mov	sl, r3
 800c714:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c718:	b10a      	cbz	r2, 800c71e <_vfiprintf_r+0x86>
 800c71a:	2a25      	cmp	r2, #37	@ 0x25
 800c71c:	d1f9      	bne.n	800c712 <_vfiprintf_r+0x7a>
 800c71e:	ebba 0b04 	subs.w	fp, sl, r4
 800c722:	d00b      	beq.n	800c73c <_vfiprintf_r+0xa4>
 800c724:	465b      	mov	r3, fp
 800c726:	4622      	mov	r2, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7ff ffa2 	bl	800c674 <__sfputs_r>
 800c730:	3001      	adds	r0, #1
 800c732:	f000 80a7 	beq.w	800c884 <_vfiprintf_r+0x1ec>
 800c736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c738:	445a      	add	r2, fp
 800c73a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c73c:	f89a 3000 	ldrb.w	r3, [sl]
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 809f 	beq.w	800c884 <_vfiprintf_r+0x1ec>
 800c746:	2300      	movs	r3, #0
 800c748:	f04f 32ff 	mov.w	r2, #4294967295
 800c74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c750:	f10a 0a01 	add.w	sl, sl, #1
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	9307      	str	r3, [sp, #28]
 800c758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c75c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c75e:	4654      	mov	r4, sl
 800c760:	2205      	movs	r2, #5
 800c762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c766:	4853      	ldr	r0, [pc, #332]	@ (800c8b4 <_vfiprintf_r+0x21c>)
 800c768:	f7f3 fd32 	bl	80001d0 <memchr>
 800c76c:	9a04      	ldr	r2, [sp, #16]
 800c76e:	b9d8      	cbnz	r0, 800c7a8 <_vfiprintf_r+0x110>
 800c770:	06d1      	lsls	r1, r2, #27
 800c772:	bf44      	itt	mi
 800c774:	2320      	movmi	r3, #32
 800c776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c77a:	0713      	lsls	r3, r2, #28
 800c77c:	bf44      	itt	mi
 800c77e:	232b      	movmi	r3, #43	@ 0x2b
 800c780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c784:	f89a 3000 	ldrb.w	r3, [sl]
 800c788:	2b2a      	cmp	r3, #42	@ 0x2a
 800c78a:	d015      	beq.n	800c7b8 <_vfiprintf_r+0x120>
 800c78c:	9a07      	ldr	r2, [sp, #28]
 800c78e:	4654      	mov	r4, sl
 800c790:	2000      	movs	r0, #0
 800c792:	f04f 0c0a 	mov.w	ip, #10
 800c796:	4621      	mov	r1, r4
 800c798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c79c:	3b30      	subs	r3, #48	@ 0x30
 800c79e:	2b09      	cmp	r3, #9
 800c7a0:	d94b      	bls.n	800c83a <_vfiprintf_r+0x1a2>
 800c7a2:	b1b0      	cbz	r0, 800c7d2 <_vfiprintf_r+0x13a>
 800c7a4:	9207      	str	r2, [sp, #28]
 800c7a6:	e014      	b.n	800c7d2 <_vfiprintf_r+0x13a>
 800c7a8:	eba0 0308 	sub.w	r3, r0, r8
 800c7ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	9304      	str	r3, [sp, #16]
 800c7b4:	46a2      	mov	sl, r4
 800c7b6:	e7d2      	b.n	800c75e <_vfiprintf_r+0xc6>
 800c7b8:	9b03      	ldr	r3, [sp, #12]
 800c7ba:	1d19      	adds	r1, r3, #4
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	9103      	str	r1, [sp, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	bfbb      	ittet	lt
 800c7c4:	425b      	neglt	r3, r3
 800c7c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c7ca:	9307      	strge	r3, [sp, #28]
 800c7cc:	9307      	strlt	r3, [sp, #28]
 800c7ce:	bfb8      	it	lt
 800c7d0:	9204      	strlt	r2, [sp, #16]
 800c7d2:	7823      	ldrb	r3, [r4, #0]
 800c7d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7d6:	d10a      	bne.n	800c7ee <_vfiprintf_r+0x156>
 800c7d8:	7863      	ldrb	r3, [r4, #1]
 800c7da:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7dc:	d132      	bne.n	800c844 <_vfiprintf_r+0x1ac>
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	1d1a      	adds	r2, r3, #4
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	9203      	str	r2, [sp, #12]
 800c7e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7ea:	3402      	adds	r4, #2
 800c7ec:	9305      	str	r3, [sp, #20]
 800c7ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c8c4 <_vfiprintf_r+0x22c>
 800c7f2:	7821      	ldrb	r1, [r4, #0]
 800c7f4:	2203      	movs	r2, #3
 800c7f6:	4650      	mov	r0, sl
 800c7f8:	f7f3 fcea 	bl	80001d0 <memchr>
 800c7fc:	b138      	cbz	r0, 800c80e <_vfiprintf_r+0x176>
 800c7fe:	9b04      	ldr	r3, [sp, #16]
 800c800:	eba0 000a 	sub.w	r0, r0, sl
 800c804:	2240      	movs	r2, #64	@ 0x40
 800c806:	4082      	lsls	r2, r0
 800c808:	4313      	orrs	r3, r2
 800c80a:	3401      	adds	r4, #1
 800c80c:	9304      	str	r3, [sp, #16]
 800c80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c812:	4829      	ldr	r0, [pc, #164]	@ (800c8b8 <_vfiprintf_r+0x220>)
 800c814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c818:	2206      	movs	r2, #6
 800c81a:	f7f3 fcd9 	bl	80001d0 <memchr>
 800c81e:	2800      	cmp	r0, #0
 800c820:	d03f      	beq.n	800c8a2 <_vfiprintf_r+0x20a>
 800c822:	4b26      	ldr	r3, [pc, #152]	@ (800c8bc <_vfiprintf_r+0x224>)
 800c824:	bb1b      	cbnz	r3, 800c86e <_vfiprintf_r+0x1d6>
 800c826:	9b03      	ldr	r3, [sp, #12]
 800c828:	3307      	adds	r3, #7
 800c82a:	f023 0307 	bic.w	r3, r3, #7
 800c82e:	3308      	adds	r3, #8
 800c830:	9303      	str	r3, [sp, #12]
 800c832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c834:	443b      	add	r3, r7
 800c836:	9309      	str	r3, [sp, #36]	@ 0x24
 800c838:	e76a      	b.n	800c710 <_vfiprintf_r+0x78>
 800c83a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c83e:	460c      	mov	r4, r1
 800c840:	2001      	movs	r0, #1
 800c842:	e7a8      	b.n	800c796 <_vfiprintf_r+0xfe>
 800c844:	2300      	movs	r3, #0
 800c846:	3401      	adds	r4, #1
 800c848:	9305      	str	r3, [sp, #20]
 800c84a:	4619      	mov	r1, r3
 800c84c:	f04f 0c0a 	mov.w	ip, #10
 800c850:	4620      	mov	r0, r4
 800c852:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c856:	3a30      	subs	r2, #48	@ 0x30
 800c858:	2a09      	cmp	r2, #9
 800c85a:	d903      	bls.n	800c864 <_vfiprintf_r+0x1cc>
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d0c6      	beq.n	800c7ee <_vfiprintf_r+0x156>
 800c860:	9105      	str	r1, [sp, #20]
 800c862:	e7c4      	b.n	800c7ee <_vfiprintf_r+0x156>
 800c864:	fb0c 2101 	mla	r1, ip, r1, r2
 800c868:	4604      	mov	r4, r0
 800c86a:	2301      	movs	r3, #1
 800c86c:	e7f0      	b.n	800c850 <_vfiprintf_r+0x1b8>
 800c86e:	ab03      	add	r3, sp, #12
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	462a      	mov	r2, r5
 800c874:	4b12      	ldr	r3, [pc, #72]	@ (800c8c0 <_vfiprintf_r+0x228>)
 800c876:	a904      	add	r1, sp, #16
 800c878:	4630      	mov	r0, r6
 800c87a:	f7fb fa69 	bl	8007d50 <_printf_float>
 800c87e:	4607      	mov	r7, r0
 800c880:	1c78      	adds	r0, r7, #1
 800c882:	d1d6      	bne.n	800c832 <_vfiprintf_r+0x19a>
 800c884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c886:	07d9      	lsls	r1, r3, #31
 800c888:	d405      	bmi.n	800c896 <_vfiprintf_r+0x1fe>
 800c88a:	89ab      	ldrh	r3, [r5, #12]
 800c88c:	059a      	lsls	r2, r3, #22
 800c88e:	d402      	bmi.n	800c896 <_vfiprintf_r+0x1fe>
 800c890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c892:	f7fc fa1b 	bl	8008ccc <__retarget_lock_release_recursive>
 800c896:	89ab      	ldrh	r3, [r5, #12]
 800c898:	065b      	lsls	r3, r3, #25
 800c89a:	f53f af1f 	bmi.w	800c6dc <_vfiprintf_r+0x44>
 800c89e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8a0:	e71e      	b.n	800c6e0 <_vfiprintf_r+0x48>
 800c8a2:	ab03      	add	r3, sp, #12
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	462a      	mov	r2, r5
 800c8a8:	4b05      	ldr	r3, [pc, #20]	@ (800c8c0 <_vfiprintf_r+0x228>)
 800c8aa:	a904      	add	r1, sp, #16
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f7fb fce7 	bl	8008280 <_printf_i>
 800c8b2:	e7e4      	b.n	800c87e <_vfiprintf_r+0x1e6>
 800c8b4:	0800cfb1 	.word	0x0800cfb1
 800c8b8:	0800cfbb 	.word	0x0800cfbb
 800c8bc:	08007d51 	.word	0x08007d51
 800c8c0:	0800c675 	.word	0x0800c675
 800c8c4:	0800cfb7 	.word	0x0800cfb7

0800c8c8 <__swbuf_r>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	460e      	mov	r6, r1
 800c8cc:	4614      	mov	r4, r2
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	b118      	cbz	r0, 800c8da <__swbuf_r+0x12>
 800c8d2:	6a03      	ldr	r3, [r0, #32]
 800c8d4:	b90b      	cbnz	r3, 800c8da <__swbuf_r+0x12>
 800c8d6:	f7fc f893 	bl	8008a00 <__sinit>
 800c8da:	69a3      	ldr	r3, [r4, #24]
 800c8dc:	60a3      	str	r3, [r4, #8]
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	071a      	lsls	r2, r3, #28
 800c8e2:	d501      	bpl.n	800c8e8 <__swbuf_r+0x20>
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	b943      	cbnz	r3, 800c8fa <__swbuf_r+0x32>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f000 f82a 	bl	800c944 <__swsetup_r>
 800c8f0:	b118      	cbz	r0, 800c8fa <__swbuf_r+0x32>
 800c8f2:	f04f 37ff 	mov.w	r7, #4294967295
 800c8f6:	4638      	mov	r0, r7
 800c8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	6922      	ldr	r2, [r4, #16]
 800c8fe:	1a98      	subs	r0, r3, r2
 800c900:	6963      	ldr	r3, [r4, #20]
 800c902:	b2f6      	uxtb	r6, r6
 800c904:	4283      	cmp	r3, r0
 800c906:	4637      	mov	r7, r6
 800c908:	dc05      	bgt.n	800c916 <__swbuf_r+0x4e>
 800c90a:	4621      	mov	r1, r4
 800c90c:	4628      	mov	r0, r5
 800c90e:	f7ff f95f 	bl	800bbd0 <_fflush_r>
 800c912:	2800      	cmp	r0, #0
 800c914:	d1ed      	bne.n	800c8f2 <__swbuf_r+0x2a>
 800c916:	68a3      	ldr	r3, [r4, #8]
 800c918:	3b01      	subs	r3, #1
 800c91a:	60a3      	str	r3, [r4, #8]
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	1c5a      	adds	r2, r3, #1
 800c920:	6022      	str	r2, [r4, #0]
 800c922:	701e      	strb	r6, [r3, #0]
 800c924:	6962      	ldr	r2, [r4, #20]
 800c926:	1c43      	adds	r3, r0, #1
 800c928:	429a      	cmp	r2, r3
 800c92a:	d004      	beq.n	800c936 <__swbuf_r+0x6e>
 800c92c:	89a3      	ldrh	r3, [r4, #12]
 800c92e:	07db      	lsls	r3, r3, #31
 800c930:	d5e1      	bpl.n	800c8f6 <__swbuf_r+0x2e>
 800c932:	2e0a      	cmp	r6, #10
 800c934:	d1df      	bne.n	800c8f6 <__swbuf_r+0x2e>
 800c936:	4621      	mov	r1, r4
 800c938:	4628      	mov	r0, r5
 800c93a:	f7ff f949 	bl	800bbd0 <_fflush_r>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d0d9      	beq.n	800c8f6 <__swbuf_r+0x2e>
 800c942:	e7d6      	b.n	800c8f2 <__swbuf_r+0x2a>

0800c944 <__swsetup_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	4b29      	ldr	r3, [pc, #164]	@ (800c9ec <__swsetup_r+0xa8>)
 800c948:	4605      	mov	r5, r0
 800c94a:	6818      	ldr	r0, [r3, #0]
 800c94c:	460c      	mov	r4, r1
 800c94e:	b118      	cbz	r0, 800c958 <__swsetup_r+0x14>
 800c950:	6a03      	ldr	r3, [r0, #32]
 800c952:	b90b      	cbnz	r3, 800c958 <__swsetup_r+0x14>
 800c954:	f7fc f854 	bl	8008a00 <__sinit>
 800c958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c95c:	0719      	lsls	r1, r3, #28
 800c95e:	d422      	bmi.n	800c9a6 <__swsetup_r+0x62>
 800c960:	06da      	lsls	r2, r3, #27
 800c962:	d407      	bmi.n	800c974 <__swsetup_r+0x30>
 800c964:	2209      	movs	r2, #9
 800c966:	602a      	str	r2, [r5, #0]
 800c968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c96c:	81a3      	strh	r3, [r4, #12]
 800c96e:	f04f 30ff 	mov.w	r0, #4294967295
 800c972:	e033      	b.n	800c9dc <__swsetup_r+0x98>
 800c974:	0758      	lsls	r0, r3, #29
 800c976:	d512      	bpl.n	800c99e <__swsetup_r+0x5a>
 800c978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c97a:	b141      	cbz	r1, 800c98e <__swsetup_r+0x4a>
 800c97c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c980:	4299      	cmp	r1, r3
 800c982:	d002      	beq.n	800c98a <__swsetup_r+0x46>
 800c984:	4628      	mov	r0, r5
 800c986:	f7fc fff7 	bl	8009978 <_free_r>
 800c98a:	2300      	movs	r3, #0
 800c98c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c98e:	89a3      	ldrh	r3, [r4, #12]
 800c990:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c994:	81a3      	strh	r3, [r4, #12]
 800c996:	2300      	movs	r3, #0
 800c998:	6063      	str	r3, [r4, #4]
 800c99a:	6923      	ldr	r3, [r4, #16]
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	89a3      	ldrh	r3, [r4, #12]
 800c9a0:	f043 0308 	orr.w	r3, r3, #8
 800c9a4:	81a3      	strh	r3, [r4, #12]
 800c9a6:	6923      	ldr	r3, [r4, #16]
 800c9a8:	b94b      	cbnz	r3, 800c9be <__swsetup_r+0x7a>
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9b4:	d003      	beq.n	800c9be <__swsetup_r+0x7a>
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f000 f883 	bl	800cac4 <__smakebuf_r>
 800c9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c2:	f013 0201 	ands.w	r2, r3, #1
 800c9c6:	d00a      	beq.n	800c9de <__swsetup_r+0x9a>
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	60a2      	str	r2, [r4, #8]
 800c9cc:	6962      	ldr	r2, [r4, #20]
 800c9ce:	4252      	negs	r2, r2
 800c9d0:	61a2      	str	r2, [r4, #24]
 800c9d2:	6922      	ldr	r2, [r4, #16]
 800c9d4:	b942      	cbnz	r2, 800c9e8 <__swsetup_r+0xa4>
 800c9d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c9da:	d1c5      	bne.n	800c968 <__swsetup_r+0x24>
 800c9dc:	bd38      	pop	{r3, r4, r5, pc}
 800c9de:	0799      	lsls	r1, r3, #30
 800c9e0:	bf58      	it	pl
 800c9e2:	6962      	ldrpl	r2, [r4, #20]
 800c9e4:	60a2      	str	r2, [r4, #8]
 800c9e6:	e7f4      	b.n	800c9d2 <__swsetup_r+0x8e>
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	e7f7      	b.n	800c9dc <__swsetup_r+0x98>
 800c9ec:	200000fc 	.word	0x200000fc

0800c9f0 <_raise_r>:
 800c9f0:	291f      	cmp	r1, #31
 800c9f2:	b538      	push	{r3, r4, r5, lr}
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	460c      	mov	r4, r1
 800c9f8:	d904      	bls.n	800ca04 <_raise_r+0x14>
 800c9fa:	2316      	movs	r3, #22
 800c9fc:	6003      	str	r3, [r0, #0]
 800c9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca06:	b112      	cbz	r2, 800ca0e <_raise_r+0x1e>
 800ca08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca0c:	b94b      	cbnz	r3, 800ca22 <_raise_r+0x32>
 800ca0e:	4628      	mov	r0, r5
 800ca10:	f000 f830 	bl	800ca74 <_getpid_r>
 800ca14:	4622      	mov	r2, r4
 800ca16:	4601      	mov	r1, r0
 800ca18:	4628      	mov	r0, r5
 800ca1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca1e:	f000 b817 	b.w	800ca50 <_kill_r>
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d00a      	beq.n	800ca3c <_raise_r+0x4c>
 800ca26:	1c59      	adds	r1, r3, #1
 800ca28:	d103      	bne.n	800ca32 <_raise_r+0x42>
 800ca2a:	2316      	movs	r3, #22
 800ca2c:	6003      	str	r3, [r0, #0]
 800ca2e:	2001      	movs	r0, #1
 800ca30:	e7e7      	b.n	800ca02 <_raise_r+0x12>
 800ca32:	2100      	movs	r1, #0
 800ca34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ca38:	4620      	mov	r0, r4
 800ca3a:	4798      	blx	r3
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	e7e0      	b.n	800ca02 <_raise_r+0x12>

0800ca40 <raise>:
 800ca40:	4b02      	ldr	r3, [pc, #8]	@ (800ca4c <raise+0xc>)
 800ca42:	4601      	mov	r1, r0
 800ca44:	6818      	ldr	r0, [r3, #0]
 800ca46:	f7ff bfd3 	b.w	800c9f0 <_raise_r>
 800ca4a:	bf00      	nop
 800ca4c:	200000fc 	.word	0x200000fc

0800ca50 <_kill_r>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	4d07      	ldr	r5, [pc, #28]	@ (800ca70 <_kill_r+0x20>)
 800ca54:	2300      	movs	r3, #0
 800ca56:	4604      	mov	r4, r0
 800ca58:	4608      	mov	r0, r1
 800ca5a:	4611      	mov	r1, r2
 800ca5c:	602b      	str	r3, [r5, #0]
 800ca5e:	f7f6 fad3 	bl	8003008 <_kill>
 800ca62:	1c43      	adds	r3, r0, #1
 800ca64:	d102      	bne.n	800ca6c <_kill_r+0x1c>
 800ca66:	682b      	ldr	r3, [r5, #0]
 800ca68:	b103      	cbz	r3, 800ca6c <_kill_r+0x1c>
 800ca6a:	6023      	str	r3, [r4, #0]
 800ca6c:	bd38      	pop	{r3, r4, r5, pc}
 800ca6e:	bf00      	nop
 800ca70:	20000a4c 	.word	0x20000a4c

0800ca74 <_getpid_r>:
 800ca74:	f7f6 bac0 	b.w	8002ff8 <_getpid>

0800ca78 <__swhatbuf_r>:
 800ca78:	b570      	push	{r4, r5, r6, lr}
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca80:	2900      	cmp	r1, #0
 800ca82:	b096      	sub	sp, #88	@ 0x58
 800ca84:	4615      	mov	r5, r2
 800ca86:	461e      	mov	r6, r3
 800ca88:	da0d      	bge.n	800caa6 <__swhatbuf_r+0x2e>
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca90:	f04f 0100 	mov.w	r1, #0
 800ca94:	bf14      	ite	ne
 800ca96:	2340      	movne	r3, #64	@ 0x40
 800ca98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	6031      	str	r1, [r6, #0]
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	b016      	add	sp, #88	@ 0x58
 800caa4:	bd70      	pop	{r4, r5, r6, pc}
 800caa6:	466a      	mov	r2, sp
 800caa8:	f000 f848 	bl	800cb3c <_fstat_r>
 800caac:	2800      	cmp	r0, #0
 800caae:	dbec      	blt.n	800ca8a <__swhatbuf_r+0x12>
 800cab0:	9901      	ldr	r1, [sp, #4]
 800cab2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cab6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800caba:	4259      	negs	r1, r3
 800cabc:	4159      	adcs	r1, r3
 800cabe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cac2:	e7eb      	b.n	800ca9c <__swhatbuf_r+0x24>

0800cac4 <__smakebuf_r>:
 800cac4:	898b      	ldrh	r3, [r1, #12]
 800cac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cac8:	079d      	lsls	r5, r3, #30
 800caca:	4606      	mov	r6, r0
 800cacc:	460c      	mov	r4, r1
 800cace:	d507      	bpl.n	800cae0 <__smakebuf_r+0x1c>
 800cad0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cad4:	6023      	str	r3, [r4, #0]
 800cad6:	6123      	str	r3, [r4, #16]
 800cad8:	2301      	movs	r3, #1
 800cada:	6163      	str	r3, [r4, #20]
 800cadc:	b003      	add	sp, #12
 800cade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cae0:	ab01      	add	r3, sp, #4
 800cae2:	466a      	mov	r2, sp
 800cae4:	f7ff ffc8 	bl	800ca78 <__swhatbuf_r>
 800cae8:	9f00      	ldr	r7, [sp, #0]
 800caea:	4605      	mov	r5, r0
 800caec:	4639      	mov	r1, r7
 800caee:	4630      	mov	r0, r6
 800caf0:	f7fc ffb6 	bl	8009a60 <_malloc_r>
 800caf4:	b948      	cbnz	r0, 800cb0a <__smakebuf_r+0x46>
 800caf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cafa:	059a      	lsls	r2, r3, #22
 800cafc:	d4ee      	bmi.n	800cadc <__smakebuf_r+0x18>
 800cafe:	f023 0303 	bic.w	r3, r3, #3
 800cb02:	f043 0302 	orr.w	r3, r3, #2
 800cb06:	81a3      	strh	r3, [r4, #12]
 800cb08:	e7e2      	b.n	800cad0 <__smakebuf_r+0xc>
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	6020      	str	r0, [r4, #0]
 800cb0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb12:	81a3      	strh	r3, [r4, #12]
 800cb14:	9b01      	ldr	r3, [sp, #4]
 800cb16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb1a:	b15b      	cbz	r3, 800cb34 <__smakebuf_r+0x70>
 800cb1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb20:	4630      	mov	r0, r6
 800cb22:	f000 f81d 	bl	800cb60 <_isatty_r>
 800cb26:	b128      	cbz	r0, 800cb34 <__smakebuf_r+0x70>
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	f023 0303 	bic.w	r3, r3, #3
 800cb2e:	f043 0301 	orr.w	r3, r3, #1
 800cb32:	81a3      	strh	r3, [r4, #12]
 800cb34:	89a3      	ldrh	r3, [r4, #12]
 800cb36:	431d      	orrs	r5, r3
 800cb38:	81a5      	strh	r5, [r4, #12]
 800cb3a:	e7cf      	b.n	800cadc <__smakebuf_r+0x18>

0800cb3c <_fstat_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	4d07      	ldr	r5, [pc, #28]	@ (800cb5c <_fstat_r+0x20>)
 800cb40:	2300      	movs	r3, #0
 800cb42:	4604      	mov	r4, r0
 800cb44:	4608      	mov	r0, r1
 800cb46:	4611      	mov	r1, r2
 800cb48:	602b      	str	r3, [r5, #0]
 800cb4a:	f7f6 fabd 	bl	80030c8 <_fstat>
 800cb4e:	1c43      	adds	r3, r0, #1
 800cb50:	d102      	bne.n	800cb58 <_fstat_r+0x1c>
 800cb52:	682b      	ldr	r3, [r5, #0]
 800cb54:	b103      	cbz	r3, 800cb58 <_fstat_r+0x1c>
 800cb56:	6023      	str	r3, [r4, #0]
 800cb58:	bd38      	pop	{r3, r4, r5, pc}
 800cb5a:	bf00      	nop
 800cb5c:	20000a4c 	.word	0x20000a4c

0800cb60 <_isatty_r>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	4d06      	ldr	r5, [pc, #24]	@ (800cb7c <_isatty_r+0x1c>)
 800cb64:	2300      	movs	r3, #0
 800cb66:	4604      	mov	r4, r0
 800cb68:	4608      	mov	r0, r1
 800cb6a:	602b      	str	r3, [r5, #0]
 800cb6c:	f7f6 fabc 	bl	80030e8 <_isatty>
 800cb70:	1c43      	adds	r3, r0, #1
 800cb72:	d102      	bne.n	800cb7a <_isatty_r+0x1a>
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	b103      	cbz	r3, 800cb7a <_isatty_r+0x1a>
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
 800cb7c:	20000a4c 	.word	0x20000a4c

0800cb80 <_init>:
 800cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb82:	bf00      	nop
 800cb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb86:	bc08      	pop	{r3}
 800cb88:	469e      	mov	lr, r3
 800cb8a:	4770      	bx	lr

0800cb8c <_fini>:
 800cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8e:	bf00      	nop
 800cb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb92:	bc08      	pop	{r3}
 800cb94:	469e      	mov	lr, r3
 800cb96:	4770      	bx	lr
